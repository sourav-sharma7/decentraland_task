(function (exports) {
  'use strict';

  /**
   * Entities can be attached to each other by using the `setParent` method. However, there are cases where we might want to attach entities
   * to other objects that are not entities created by the same scene (for example, the player's avatar). For those cases, we have this class.
   * @public
   */
  var Attachable = /** @class */ (function () {
      function Attachable() {
      }
      /** Used to attach entities to the avatar. Entities will follow the avatar when it moves */
      Attachable.AVATAR = {
          getEntityRepresentation: function (engine) { return engine.avatarEntity; }
      };
      /** Used to attach entities to the camera. When in first person mode, the attached entities will also rotate with the camera */
      Attachable.FIRST_PERSON_CAMERA = {
          getEntityRepresentation: function (engine) { return engine.firstPersonCameraEntity; }
      };
      return Attachable;
  }());

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  /* global Reflect, Promise */

  var extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
      return extendStatics(d, b);
  };

  function __extends(d, b) {
      if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
      extendStatics(d, b);
      function __() { this.constructor = d; }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }

  var __assign = function() {
      __assign = Object.assign || function __assign(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
              s = arguments[i];
              for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
      };
      return __assign.apply(this, arguments);
  };

  function __decorate(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
      else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
  }

  function __metadata(metadataKey, metadataValue) {
      if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
  }

  function __awaiter(thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  }

  function __generator(thisArg, body) {
      var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
      function verb(n) { return function (v) { return step([n, v]); }; }
      function step(op) {
          if (f) throw new TypeError("Generator is already executing.");
          while (_) try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
              if (y = 0, t) op = [op[0] & 2, t.value];
              switch (op[0]) {
                  case 0: case 1: t = op; break;
                  case 4: _.label++; return { value: op[1], done: false };
                  case 5: _.label++; y = op[1]; op = [0]; continue;
                  case 7: op = _.ops.pop(); _.trys.pop(); continue;
                  default:
                      if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                      if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                      if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                      if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                      if (t[2]) _.ops.pop();
                      _.trys.pop(); continue;
              }
              op = body.call(thisArg, _);
          } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
          if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
      }
  }

  function __values(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m) return m.call(o);
      if (o && typeof o.length === "number") return {
          next: function () {
              if (o && i >= o.length) o = void 0;
              return { value: o && o[i++], done: !o };
          }
      };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  }

  function __read(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      }
      catch (error) { e = { error: error }; }
      finally {
          try {
              if (r && !r.done && (m = i["return"])) m.call(i);
          }
          finally { if (e) throw e.error; }
      }
      return ar;
  }

  function __spreadArray(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
          to[j] = from[i];
      return to;
  }

  var lastGeneratedId = 0;
  /**
   * Log function. Only works in debug mode, otherwise it does nothing.
   * @param args - any loggable parameter
   * @public
   */
  function log() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
      }
      if (typeof dcl !== 'undefined') {
          dcl.log.apply(dcl, __spreadArray([], __read(args)));
      }
      else {
          console.log.apply(console, __spreadArray(['DEBUG:'], __read(args)));
      }
  }
  /**
   * Error function. Prints a console error. Only works in debug mode, otherwise it does nothing.
   * @param error - string or Error object.
   * @param data - any debug information.
   * @public
   */
  function error(error, data) {
      if (typeof dcl !== 'undefined') {
          dcl.error(error, data);
      }
      else {
          console.error('ERROR:', error, data);
      }
  }
  /**
   * Generates a new prefixed id
   * @public
   */
  function newId(type) {
      lastGeneratedId++;
      if (type.length === 0)
          throw new Error('newId(type: string): type cannot be empty');
      return type + lastGeneratedId.toString(36);
  }
  /**
   * @internal
   */
  function uuid() {
      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
          var r = (Math.random() * 16) | 0;
          var v = c === 'x' ? r : (r & 0x3) | 0x8;
          return v.toString(16);
      });
  }
  /**
   * Returns an array of the given size filled with element built from the given constructor and the paramters
   * @param size - the number of element to construct and put in the array
   * @param itemBuilder - a callback responsible for creating new instance of item. Called once per array entry.
   * @returns a new array filled with new objects
   * @internal
   */
  function buildArray$1(size, itemBuilder) {
      var a = [];
      for (var i = 0; i < size; ++i) {
          a.push(itemBuilder());
      }
      return a;
  }
  /**
   * @public
   */
  function openExternalURL(url) {
      if (typeof dcl !== 'undefined') {
          dcl.openExternalUrl(url);
      }
      else {
          error('ERROR: openExternalURL dcl is undefined');
      }
  }
  /**
   * Popup NFT info dialog
   * @param scr - 'ethereum://contractAddress/tokenID'
   * @param comment - optional. add a comment.
   * @public
   */
  function openNFTDialog(scr, comment) {
      if (comment === void 0) { comment = null; }
      if (typeof dcl !== 'undefined') {
          var regex = /ethereum:\/\/(.+)\/(.+)/;
          var matches = scr.match(regex);
          if (!matches || matches.length < 3) {
              return;
          }
          dcl.openNFTDialog(matches[1], matches[2], comment);
      }
      else {
          error('ERROR: openNFTDialog dcl is undefined');
      }
  }

  var eventNameSymbol = '__event_name__';
  var takenEventNames = [];
  function getEventNameFromConstructor(ctor) {
      if (!(eventNameSymbol in ctor) || typeof ctor[eventNameSymbol] !== 'string') {
          throw new Error('The EventConstructor is not registered');
      }
      return ctor[eventNameSymbol];
  }
  /**
   * @public
   */
  var EventManager = /** @class */ (function () {
      function EventManager() {
          this.listeners = {};
      }
      EventManager.prototype.addListener = function (eventClass, listener, listenerFunction) {
          if (!eventClass || typeof eventClass !== 'function') {
              throw new Error('Invalid EventConstructor');
          }
          var eventName = getEventNameFromConstructor(eventClass);
          var listeners = this.listeners[eventName];
          if (!listeners) {
              listeners = this.listeners[eventName] = [];
          }
          for (var i = 0; i < listeners.length; i++) {
              var x = listeners[i];
              if (x.listener === listener) {
                  throw new Error('The provided listener is already registered');
              }
          }
          listeners.push({
              listener: listener,
              fn: listenerFunction
          });
          return this;
      };
      EventManager.prototype.removeListener = function (listener, eventClass) {
          if (!eventClass || typeof eventClass !== 'function') {
              throw new Error('Invalid EventConstructor');
          }
          var eventName = getEventNameFromConstructor(eventClass);
          var listeners = this.listeners[eventName];
          if (!listeners) {
              return false;
          }
          for (var i = 0; i < listeners.length; i++) {
              var x = listeners[i];
              if (x.listener === listener) {
                  listeners.splice(i, 1);
                  return true;
              }
          }
          return false;
      };
      EventManager.prototype.fireEvent = function (event) {
          var eventName = getEventNameFromConstructor(event.constructor);
          var listeners = this.listeners[eventName];
          if (listeners) {
              for (var i = 0; i < listeners.length; i++) {
                  try {
                      var l = listeners[i];
                      l.fn.call(l.listener, event);
                  }
                  catch (e) {
                      // TODO: e may not be an instance of Error
                      error(e);
                  }
              }
          }
          return this;
      };
      return EventManager;
  }());
  /**
   * @public
   */
  function EventConstructor() {
      var eventName = newId('EV');
      if (takenEventNames.indexOf(eventName) !== -1) {
          throw new Error("The event name ".concat(eventName, " is already taken"));
      }
      takenEventNames.push(eventName);
      // eslint-disable-next-line @typescript-eslint/ban-types
      return function (target) {
          target[eventNameSymbol] = eventName;
          return target;
      };
  }

  /**
   * @public
   */
  var ComponentRemoved = /** @class */ (function () {
      function ComponentRemoved(entity, componentName, component) {
          this.entity = entity;
          this.componentName = componentName;
          this.component = component;
          // stub
      }
      ComponentRemoved = __decorate([
          EventConstructor(),
          __metadata("design:paramtypes", [Object, String, Object])
      ], ComponentRemoved);
      return ComponentRemoved;
  }());
  /**
   * @public
   */
  var ComponentAdded = /** @class */ (function () {
      function ComponentAdded(entity, componentName, classId) {
          this.entity = entity;
          this.componentName = componentName;
          this.classId = classId;
          // stub
      }
      ComponentAdded = __decorate([
          EventConstructor(),
          __metadata("design:paramtypes", [Object, String, Object])
      ], ComponentAdded);
      return ComponentAdded;
  }());
  /**
   * @public
   */
  var ParentChanged = /** @class */ (function () {
      function ParentChanged(entity, parent) {
          this.entity = entity;
          this.parent = parent;
          // stub
      }
      ParentChanged = __decorate([
          EventConstructor(),
          __metadata("design:paramtypes", [Object, Object])
      ], ParentChanged);
      return ParentChanged;
  }());

  /**
   * @public
   */
  exports.UIValueType = void 0;
  (function (UIValueType) {
      UIValueType[UIValueType["PERCENT"] = 0] = "PERCENT";
      UIValueType[UIValueType["PIXELS"] = 1] = "PIXELS";
  })(exports.UIValueType || (exports.UIValueType = {}));
  /**
   * @public
   */
  var UIValue = /** @class */ (function () {
      function UIValue(value) {
          this.type = exports.UIValueType.PIXELS;
          if (typeof value === 'string') {
              var valueAsString = value;
              if (valueAsString.indexOf('px') > -1) {
                  this.type = exports.UIValueType.PIXELS;
              }
              else if (valueAsString.indexOf('%') > -1) {
                  this.type = exports.UIValueType.PERCENT;
              }
              this.value = parseFloat(valueAsString);
          }
          else {
              this.value = value;
          }
      }
      UIValue.prototype.toString = function () {
          var result = this.value.toString();
          if (this.type === exports.UIValueType.PERCENT) {
              result += '%';
          }
          else {
              result += 'px';
          }
          return result;
      };
      return UIValue;
  }());

  var componentSymbol = '__name__symbol_';
  var componentClassIdSymbol = '__classId__symbol_';
  var componentIdSymbol = '__component__id_';
  /**
   * @public
   */
  var DisposableComponentCreated = /** @class */ (function () {
      function DisposableComponentCreated(componentId, componentName, classId) {
          this.componentId = componentId;
          this.componentName = componentName;
          this.classId = classId;
          // stub
      }
      DisposableComponentCreated = __decorate([
          EventConstructor(),
          __metadata("design:paramtypes", [String, String, Number])
      ], DisposableComponentCreated);
      return DisposableComponentCreated;
  }());
  /**
   * @public
   */
  var DisposableComponentRemoved = /** @class */ (function () {
      function DisposableComponentRemoved(componentId) {
          this.componentId = componentId;
          // stub
      }
      DisposableComponentRemoved = __decorate([
          EventConstructor(),
          __metadata("design:paramtypes", [String])
      ], DisposableComponentRemoved);
      return DisposableComponentRemoved;
  }());
  /**
   * @public
   */
  var DisposableComponentUpdated = /** @class */ (function () {
      function DisposableComponentUpdated(componentId, component) {
          this.componentId = componentId;
          this.component = component;
          // stub
      }
      DisposableComponentUpdated = __decorate([
          EventConstructor(),
          __metadata("design:paramtypes", [String, Object])
      ], DisposableComponentUpdated);
      return DisposableComponentUpdated;
  }());
  /**
   * @public
   */
  function Component(componentName, classId) {
      return function (target) {
          if (target.isComponent) {
              throw new TypeError("You cannot extend a component. Trying to extend ".concat(target.originalClassName, " with: ").concat(componentName));
          }
          var extendedClass = target;
          var RegisteredComponent = function RegisteredComponent() {
              // eslint-disable-next-line prefer-rest-params
              var args = Array.prototype.slice.call(arguments);
              var ret = new (extendedClass.bind.apply(extendedClass, __spreadArray([void 0], __read(args))))();
              Object.defineProperty(ret, componentSymbol, {
                  enumerable: false,
                  writable: false,
                  configurable: false,
                  value: componentName
              });
              if (classId !== undefined) {
                  Object.defineProperty(ret, componentClassIdSymbol, {
                      enumerable: false,
                      writable: false,
                      configurable: false,
                      value: classId
                  });
              }
              return ret;
          };
          if (classId !== undefined) {
              RegisteredComponent[componentClassIdSymbol] = classId;
          }
          RegisteredComponent[componentSymbol] = componentName;
          RegisteredComponent.isComponent = true;
          RegisteredComponent.originalClassName = componentName;
          RegisteredComponent.prototype = target.prototype;
          RegisteredComponent.prototype.constructor = target;
          return RegisteredComponent;
      };
  }
  /**
   * @public
   */
  function DisposableComponent(componentName, classId) {
      return function (target) {
          if (target.isComponent) {
              throw new TypeError("You cannot extend a component. Trying to extend ".concat(target.originalClassName, " with: ").concat(componentName));
          }
          if (typeof classId !== 'number' || isNaN(classId)) {
              throw new Error("classId: ".concat(classId, " is an invalid integer"));
          }
          var extendedClass = target;
          var RegisteredComponent = function RegisteredComponent() {
              if (!DisposableComponent.engine) {
                  throw new Error('You need to set a DisposableComponent.engine before creating disposable components');
              }
              // eslint-disable-next-line prefer-rest-params
              var args = Array.prototype.slice.call(arguments);
              var ret = new (extendedClass.bind.apply(extendedClass, __spreadArray([void 0], __read(args))))();
              var id = newId('C');
              Object.defineProperty(ret, componentSymbol, {
                  enumerable: false,
                  writable: false,
                  configurable: false,
                  value: componentName
              });
              Object.defineProperty(ret, componentIdSymbol, {
                  enumerable: false,
                  writable: false,
                  configurable: false,
                  value: id
              });
              if (classId !== undefined) {
                  Object.defineProperty(ret, componentClassIdSymbol, {
                      enumerable: false,
                      writable: false,
                      configurable: false,
                      value: classId
                  });
              }
              if (DisposableComponent.engine) {
                  DisposableComponent.engine.registerComponent(ret);
              }
              return ret;
          };
          if (classId !== undefined) {
              RegisteredComponent[componentClassIdSymbol] = classId;
          }
          RegisteredComponent[componentSymbol] = componentName;
          RegisteredComponent.isComponent = true;
          RegisteredComponent.isDisposableComponent = true;
          RegisteredComponent.originalClassName = componentName;
          RegisteredComponent.prototype = target.prototype;
          RegisteredComponent.prototype.constructor = target;
          return RegisteredComponent;
      };
  }
  /** @internal */
  (function (DisposableComponent) {
      /** @internal */
      // eslint-disable-next-line prefer-const
      DisposableComponent.engine = null;
  })(DisposableComponent || (DisposableComponent = {}));
  /**
   * @public
   */
  function getComponentName(component) {
      if (!component) {
          throw new TypeError(component + ' is not a component.');
      }
      if (component[componentSymbol]) {
          return component[componentSymbol];
      }
      throw new TypeError(component + ' is not a registered component.');
  }
  /**
   * @public
   */
  function getComponentClassId(component) {
      if (!component) {
          throw new TypeError(component + ' is not a component.');
      }
      if (component[componentClassIdSymbol]) {
          return component[componentClassIdSymbol];
      }
      if (!component[componentSymbol]) {
          throw new TypeError(component + ' is not a registered component.');
      }
      return null;
  }
  /**
   * @public
   */
  function getComponentId(component) {
      if (!component) {
          throw new TypeError(component + ' is not a component.');
      }
      if (component[componentIdSymbol]) {
          return component[componentIdSymbol];
      }
      throw new TypeError(component + ' is not a registered disposable component.');
  }
  /**
   * @public
   */
  var ObservableComponent = /** @class */ (function () {
      function ObservableComponent() {
          // @internal
          this.dirty = false;
          // @internal
          this.data = {};
          this.subscriptions = [];
      }
      ObservableComponent.component = function (target, propertyKey) {
          if (delete target[propertyKey]) {
              var componentSymbol_1 = propertyKey + '_' + Math.random();
              target[componentSymbol_1] = undefined;
              Object.defineProperty(target, componentSymbol_1, __assign(__assign({}, Object.getOwnPropertyDescriptor(target, componentSymbol_1)), { enumerable: false }));
              Object.defineProperty(target, propertyKey.toString(), {
                  get: function () {
                      return this[componentSymbol_1];
                  },
                  set: function (value) {
                      var oldValue = this[componentSymbol_1];
                      if (value) {
                          this.data[propertyKey] = getComponentId(value);
                      }
                      else {
                          this.data[propertyKey] = null;
                      }
                      this[componentSymbol_1] = value;
                      if (value !== oldValue) {
                          this.dirty = true;
                          for (var i = 0; i < this.subscriptions.length; i++) {
                              this.subscriptions[i](propertyKey, value, oldValue);
                          }
                      }
                  },
                  enumerable: true
              });
          }
      };
      ObservableComponent.field = function (target, propertyKey) {
          if (delete target[propertyKey]) {
              Object.defineProperty(target, propertyKey.toString(), {
                  get: function () {
                      return this.data[propertyKey];
                  },
                  set: function (value) {
                      var oldValue = this.data[propertyKey];
                      this.data[propertyKey] = value;
                      if (value !== oldValue) {
                          this.dirty = true;
                          for (var i = 0; i < this.subscriptions.length; i++) {
                              this.subscriptions[i](propertyKey, value, oldValue);
                          }
                      }
                  },
                  enumerable: true
              });
          }
      };
      ObservableComponent.uiValue = function (target, propertyKey) {
          if (delete target[propertyKey]) {
              Object.defineProperty(target, propertyKey.toString(), {
                  get: function () {
                      return this.data[propertyKey].toString();
                  },
                  set: function (value) {
                      var oldValue = this.data[propertyKey];
                      var finalValue = new UIValue(value);
                      this.data[propertyKey] = finalValue;
                      if (finalValue !== oldValue) {
                          this.dirty = true;
                          for (var i = 0; i < this.subscriptions.length; i++) {
                              this.subscriptions[i](propertyKey, finalValue, oldValue);
                          }
                      }
                  },
                  enumerable: true
              });
          }
      };
      ObservableComponent.readonly = function (target, propertyKey) {
          if (delete target[propertyKey]) {
              Object.defineProperty(target, propertyKey.toString(), {
                  get: function () {
                      if (propertyKey in this.data === false) {
                          throw new Error("The field ".concat(propertyKey, " is uninitialized"));
                      }
                      return this.data[propertyKey];
                  },
                  set: function (value) {
                      if (propertyKey in this.data) {
                          throw new Error("The field ".concat(propertyKey, " is readonly"));
                      }
                      this.data[propertyKey] = value;
                      this.dirty = true;
                  },
                  enumerable: true,
                  configurable: false
              });
          }
      };
      ObservableComponent.prototype.onChange = function (fn) {
          this.subscriptions.push(fn);
          return this;
      };
      ObservableComponent.prototype.toJSON = function () {
          return this.data;
      };
      return ObservableComponent;
  }());
  /**
   * @public
   */
  function isDisposableComponent(component) {
      return componentIdSymbol in component;
  }

  /**
   * @public
   */
  var ComponentGroup = /** @class */ (function () {
      function ComponentGroup() {
          var requires = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              requires[_i] = arguments[_i];
          }
          this.entities = [];
          this.active = false;
          this._requiresNames = [];
          // validate requires list
          if (!requires) {
              throw new Error('ComponentGroup: Could not load the requires list');
          }
          if (!(requires instanceof Array)) {
              throw new Error('ComponentGroup: requires list is not an Array');
          }
          Object.defineProperty(this, 'requires', {
              get: function () {
                  return requires.slice();
              }
          });
          Object.defineProperty(this, 'requiresNames', {
              get: function () {
                  return this._requiresNames.slice();
              }
          });
          var _loop_1 = function (ix) {
              var component = requires[ix];
              var name = null;
              if (!component) {
                  throw new Error("ComponentGroup: the required component at location ".concat(ix, " is invalid"));
              }
              try {
                  name = getComponentName(component);
              }
              catch (e) {
                  throw new Error("ComponentGroup: the required component at location ".concat(ix, " is not registered as a @Component. Remember to provide the class of the component, not the name"));
              }
              if (this_1._requiresNames.some(function ($) { return $ === name; })) {
                  throw new Error("ComponentGroup: the required component list has a repeated name ".concat(name));
              }
              this_1._requiresNames.push(name);
          };
          var this_1 = this;
          for (var ix = 0; ix < requires.length; ix++) {
              _loop_1(ix);
          }
      }
      ComponentGroup.prototype.hasEntity = function (entity) {
          if (!entity.isAddedToEngine())
              return false;
          return this.entities.indexOf(entity) !== -1;
      };
      // @internal
      ComponentGroup.prototype.addEntity = function (entity) {
          if (!entity.isAddedToEngine()) {
              throw new TypeError('ComponentGroup: Cannot add a entity that is not added to the engine');
          }
          if (this.entities.indexOf(entity) === -1) {
              this.entities.push(entity);
          }
      };
      // @internal
      ComponentGroup.prototype.removeEntity = function (entity) {
          var id = this.entities.indexOf(entity);
          if (id !== -1) {
              this.entities.splice(id, 1);
          }
      };
      // @internal
      ComponentGroup.prototype.componentRemoved = function (entity, component) {
          if (this._requiresNames.indexOf(component) !== -1) {
              this.removeEntity(entity);
          }
      };
      // @internal
      ComponentGroup.prototype.meetsRequirements = function (entity) {
          for (var i = 0; i < this._requiresNames.length; i++) {
              var componentName = this._requiresNames[i];
              if (!(componentName in entity.components)) {
                  return false;
              }
          }
          return true;
      };
      return ComponentGroup;
  }());

  /**
   * @public
   */
  var Entity = /** @class */ (function () {
      function Entity(name) {
          this.name = name;
          this.children = {};
          this.eventManager = null;
          this.alive = false;
          this.uuid = newId('E');
          this.components = {};
          // @internal
          this.engine = null;
          // @internal
          this._parent = null;
          // stub
      }
      /**
       * Adds or replaces a component in the entity.
       * @param component - component instance.
       */
      Entity.prototype.addComponentOrReplace = function (component) {
          if (typeof component === 'function') {
              throw new Error('You passed a function or class as a component, an instance of component is expected');
          }
          if (typeof component !== 'object') {
              throw new Error("You passed a ".concat(typeof component, ", an instance of component is expected"));
          }
          var componentName = getComponentName(component);
          if (this.components[componentName]) {
              if (this.components[componentName] === component) {
                  return component;
              }
              this.removeComponent(this.components[componentName], false);
          }
          return this.addComponent(component);
      };
      Entity.prototype.hasComponent = function (component) {
          var typeOfComponent = typeof component;
          if (typeOfComponent !== 'string' &&
              typeOfComponent !== 'object' &&
              typeOfComponent !== 'function') {
              throw new Error('Entity#has(component): component is not a class, name or instance');
          }
          if (component === null)
              return false;
          var componentName = typeOfComponent === 'string'
              ? component
              : getComponentName(component);
          var storedComponent = this.components[componentName];
          if (!storedComponent) {
              return false;
          }
          if (typeOfComponent === 'object') {
              return storedComponent === component;
          }
          if (typeOfComponent === 'function') {
              return storedComponent instanceof component;
          }
          return true;
      };
      Entity.prototype.getComponent = function (component) {
          var typeOfComponent = typeof component;
          if (typeOfComponent !== 'string' && typeOfComponent !== 'function') {
              throw new Error('Entity#get(component): component is not a class or name');
          }
          var componentName = typeOfComponent === 'string'
              ? component
              : getComponentName(component);
          var storedComponent = this.components[componentName];
          if (!storedComponent) {
              throw new Error("Can not get component \"".concat(componentName, "\" from entity \"").concat(this.identifier, "\""));
          }
          if (typeOfComponent === 'function') {
              if (storedComponent instanceof component) {
                  return storedComponent;
              }
              else {
                  throw new Error("Can not get component \"".concat(componentName, "\" from entity \"").concat(this.identifier, "\" (by instance)"));
              }
          }
          return storedComponent;
      };
      Entity.prototype.getComponentOrNull = function (component) {
          var typeOfComponent = typeof component;
          if (typeOfComponent !== 'string' && typeOfComponent !== 'function') {
              throw new Error('Entity#getOrNull(component): component is not a class or name');
          }
          var componentName = typeOfComponent === 'string'
              ? component
              : getComponentName(component);
          var storedComponent = this.components[componentName];
          if (!storedComponent) {
              return null;
          }
          if (typeOfComponent === 'function') {
              if (storedComponent instanceof component) {
                  return storedComponent;
              }
              else {
                  return null;
              }
          }
          return storedComponent;
      };
      /**
       * Gets a component, if it doesn't exist, it creates the component and returns it.
       * @param component - component class
       */
      Entity.prototype.getComponentOrCreate = function (component) {
          if (typeof component !== 'function') {
              throw new Error('Entity#getOrCreate(component): component is not a class');
          }
          var ret = this.getComponentOrNull(component);
          if (!ret) {
              ret = new component();
              // Safe-guard to only add registered components to entities
              getComponentName(ret);
              this.addComponentOrReplace(ret);
          }
          return ret;
      };
      /**
       * Adds a component. If the component already exist, it throws an Error.
       * @param component - component instance.
       */
      Entity.prototype.addComponent = function (component) {
          if (typeof component !== 'object') {
              throw new Error('Entity#add(component): You passed a function or class as a component, an instance of component is expected');
          }
          var componentName = getComponentName(component);
          var classId = getComponentClassId(component);
          if (this.components[componentName]) {
              throw new Error("A component of type \"".concat(componentName, "\" is already present in entity \"").concat(this.identifier, "\""));
          }
          this.components[componentName] = component;
          if (this.eventManager) {
              this.eventManager.fireEvent(new ComponentAdded(this, componentName, classId));
          }
          var storedComponent = component;
          if (typeof storedComponent.addedToEntity === 'function') {
              storedComponent.addedToEntity(this);
          }
          return component;
      };
      Entity.prototype.removeComponent = function (
      // eslint-disable-next-line @typescript-eslint/ban-types
      component, triggerRemovedEvent) {
          if (triggerRemovedEvent === void 0) { triggerRemovedEvent = true; }
          var typeOfComponent = typeof component;
          if (typeOfComponent !== 'string' &&
              typeOfComponent !== 'function' &&
              typeOfComponent !== 'object') {
              throw new Error('Entity#remove(component): component is not a class, class or name');
          }
          var componentName = typeOfComponent === 'string'
              ? component
              : getComponentName(component);
          var storedComponent = this.components[componentName];
          if (!storedComponent) {
              log("Entity Warning: Trying to remove inexisting component \"".concat(componentName, "\" from entity \"").concat(this.identifier, "\""));
              return;
          }
          if (typeOfComponent === 'function') {
              if (storedComponent instanceof component) {
                  delete this.components[componentName];
                  if (storedComponent) {
                      if (triggerRemovedEvent && this.eventManager) {
                          this.eventManager.fireEvent(new ComponentRemoved(this, componentName, storedComponent));
                      }
                      if (typeof storedComponent.removedFromEntity === 'function') {
                          storedComponent.removedFromEntity(this);
                      }
                  }
                  return;
              }
              else {
                  log("Entity Warning: Trying to remove wrong (by constructor) component \"".concat(componentName, "\" from entity \"").concat(this.identifier, "\""));
                  return;
              }
          }
          delete this.components[componentName];
          if (storedComponent) {
              if (triggerRemovedEvent && this.eventManager) {
                  this.eventManager.fireEvent(new ComponentRemoved(this, componentName, storedComponent));
              }
              if (typeof storedComponent.removedFromEntity === 'function') {
                  storedComponent.removedFromEntity(this);
              }
          }
          return;
      };
      /**
       * Returns true if the entity is already added to the engine.
       * Returns false if no engine was defined.
       */
      Entity.prototype.isAddedToEngine = function () {
          if (this.engine &&
              (this.uuid in this.engine.entities || this.engine.rootEntity === this)) {
              return true;
          }
          return false;
      };
      /**
       * Sets the parent entity
       */
      Entity.prototype.setParent = function (_parent) {
          var newParent;
          // Check if parent is of type Attachable
          if (_parent && 'getEntityRepresentation' in _parent) {
              if (!this.engine) {
                  throw new Error("In order to set an attachable as parent, you first need to add the entity to the engine.");
              }
              newParent = _parent.getEntityRepresentation(this.engine);
          }
          else {
              newParent = !_parent && this.engine ? this.engine.rootEntity : _parent;
          }
          var currentParent = this.getParent();
          if (newParent === this) {
              throw new Error("Failed to set parent for entity \"".concat(this.identifier, "\": An entity can't set itself as a its own parent"));
          }
          if (newParent === currentParent) {
              return this;
          }
          var circularAncestor = this.getCircularAncestor(newParent);
          if (circularAncestor) {
              throw new Error("Failed to set parent for entity \"".concat(this.identifier, "\": Circular parent references are not allowed (See entity \"").concat(circularAncestor, "\")"));
          }
          if (currentParent) {
              delete currentParent.children[this.uuid];
          }
          // Make sure that the parent and child are both on the engine, or off the engine, together
          if (newParent !== null && newParent.uuid !== '0') {
              if (!newParent.isAddedToEngine() && this.isAddedToEngine()) {
                  this.engine.removeEntity(this);
              }
              if (newParent.isAddedToEngine() && !this.isAddedToEngine()) {
                  newParent.engine.addEntity(this);
              }
          }
          this._parent = newParent || null;
          this.registerAsChild();
          if (this.eventManager && this.engine) {
              this.eventManager.fireEvent(new ParentChanged(this, newParent));
          }
          return this;
      };
      /**
       * Gets the parent entity
       */
      Entity.prototype.getParent = function () {
          return this._parent;
      };
      Object.defineProperty(Entity.prototype, "identifier", {
          get: function () {
              return this.name || this.uuid;
          },
          enumerable: false,
          configurable: true
      });
      Entity.prototype.getCircularAncestor = function (ent) {
          var root = this.engine ? this.engine.rootEntity : null;
          var e = ent;
          while (e && e !== root) {
              var parent = e.getParent();
              if (parent === this) {
                  return e.uuid;
              }
              e = parent;
          }
          return null;
      };
      Entity.prototype.registerAsChild = function () {
          var parent = this.getParent();
          if (this.uuid && parent) {
              parent.children[this.uuid] = this;
          }
      };
      return Entity;
  }());

  /**
   * @public
   */
  var Engine = /** @class */ (function () {
      function Engine(rootEntity) {
          this.eventManager = new EventManager();
          // @internal
          this.systems = [];
          // @internal
          this.entityLists = {};
          // @internal
          this.addedSystems = [];
          this._entities = {};
          this._disposableComponents = {};
          this._componentGroups = {};
          // systems that doesn't require any component or handle their own logic
          this.simpleSystems = [];
          this.eventManager.addListener(ComponentAdded, this, this.componentAddedHandler);
          this.eventManager.addListener(ComponentRemoved, this, this.componentRemovedHandler);
          this.rootEntity = rootEntity;
          this.firstPersonCameraEntity = new Entity();
          this.firstPersonCameraEntity.uuid =
              'FirstPersonCameraEntityReference';
          this.addEntity(this.firstPersonCameraEntity);
          this.avatarEntity = new Entity();
          this.avatarEntity.uuid = 'AvatarEntityReference';
          this.addEntity(this.avatarEntity);
      }
      Object.defineProperty(Engine.prototype, "entities", {
          get: function () {
              return this._entities;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(Engine.prototype, "disposableComponents", {
          get: function () {
              return this._disposableComponents;
          },
          enumerable: false,
          configurable: true
      });
      Engine.prototype.addEntity = function (entity) {
          var parent = entity.getParent();
          if (entity.isAddedToEngine()) {
              return entity;
          }
          entity.eventManager = this.eventManager;
          entity.engine = this;
          this._entities[entity.uuid] = entity;
          this.checkRequirementsAndAdd(entity);
          if (!parent) {
              entity.setParent(this.rootEntity);
          }
          else {
              if (!parent.isAddedToEngine() && parent !== this.rootEntity) {
                  log('Engine: warning, added an entity with a parent not present in the engine. Parent id: ' +
                      parent.uuid);
              }
          }
          entity.alive = true;
          for (var i in entity.children) {
              var child = entity.children[i];
              if (child) {
                  if (!child.isAddedToEngine()) {
                      this.addEntity(child);
                  }
              }
          }
          return entity;
      };
      Engine.prototype.removeEntity = function (entity) {
          var id = entity.uuid;
          if (entity.isAddedToEngine()) {
              for (var componentName in entity.components) {
                  var componentGroups = this._componentGroups[componentName];
                  if (componentGroups) {
                      for (var groupIndex in componentGroups) {
                          componentGroups[groupIndex].removeEntity(entity);
                      }
                  }
                  delete this.entityLists[componentName][id];
              }
              for (var i = 0; i < this.simpleSystems.length; i++) {
                  var system = this.simpleSystems[i];
                  if (system.onRemoveEntity) {
                      system.onRemoveEntity(entity);
                  }
              }
              for (var i in entity.children) {
                  var child = entity.children[i];
                  if (child) {
                      this.removeEntity(child);
                  }
              }
              entity.alive = false;
              entity.eventManager = null;
              delete this._entities[id];
              return true;
          }
          else {
              log('Engine: Trying to remove non existent entity from engine.');
              if (!entity.isAddedToEngine()) {
                  log("Engine: Entity \"".concat(entity.uuid, "\" has not been added to any engine yet."));
              }
              else {
                  log('Engine: Entity id: ' + id);
              }
              log("Engine: Entity's components:");
              for (var componentName in entity.components) {
                  log(componentName);
              }
              return false;
          }
      };
      Engine.prototype.addSystem = function (system, priority) {
          if (priority === void 0) { priority = 0; }
          if (this.addedSystems.indexOf(system) !== -1) {
              log('Engine: Trying to add a system that is already added. Aborting');
              return system;
          }
          if (this.systems.length > 0) {
              for (var i = 0; i < this.systems.length; i++) {
                  var entry = this.systems[i];
                  var isLast = i === this.systems.length - 1;
                  if (entry.priority > priority) {
                      this.addedSystems.push(system);
                      this.systems.splice(i, 0, { system: system, priority: priority });
                      break;
                  }
                  else if (isLast) {
                      this.addedSystems.push(system);
                      this.systems.splice(i + 1, 0, { system: system, priority: priority });
                      break;
                  }
              }
          }
          else {
              this.addedSystems.push(system);
              this.systems.splice(1, 0, { system: system, priority: priority });
          }
          this.registerSystem(system);
          return system;
      };
      Engine.prototype.removeSystem = function (system) {
          var idx = this.addedSystems.indexOf(system);
          if (idx !== -1) {
              system.active = false;
              if (system.deactivate) {
                  system.deactivate();
              }
              this.addedSystems.splice(idx, 1);
              for (var i = 0; i < this.systems.length; i++) {
                  var sys = this.systems[i].system;
                  if (sys === system) {
                      this.systems.splice(i, 1);
                  }
              }
              return true;
          }
          return false;
      };
      Engine.prototype.update = function (dt) {
          for (var i in this.systems) {
              var system = this.systems[i].system;
              if (system.active && system.update) {
                  try {
                      system.update(dt);
                  }
                  catch (e) {
                      // TODO: e may not be an Error
                      error(e);
                  }
              }
          }
          return this;
      };
      Engine.prototype.getEntitiesWithComponent = function (component) {
          var componentName = typeof component === 'string' ? component : getComponentName(component);
          if (componentName in this.entityLists) {
              return this.entityLists[componentName];
          }
          else {
              return (this.entityLists[componentName] = {});
          }
      };
      Engine.prototype.registerComponent = function (component) {
          var id = getComponentId(component);
          var name = getComponentName(component);
          var classId = getComponentClassId(component);
          this._disposableComponents[id] = component;
          if (classId !== null) {
              this.eventManager.fireEvent(new DisposableComponentCreated(id, name, classId));
              this.eventManager.fireEvent(new DisposableComponentUpdated(id, component));
          }
      };
      Engine.prototype.disposeComponent = function (component) {
          var id = getComponentId(component);
          if (delete this._disposableComponents[id]) {
              this.eventManager.fireEvent(new DisposableComponentRemoved(id));
              if (component.onDispose) {
                  component.onDispose();
              }
              return true;
          }
          return false;
      };
      Engine.prototype.updateComponent = function (component) {
          this.eventManager.fireEvent(new DisposableComponentUpdated(getComponentId(component), component));
      };
      Engine.prototype.getComponentGroup = function () {
          var requires = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              requires[_i] = arguments[_i];
          }
          var componentGroup = undefined;
          // Return an already created component-group if it already exists
          if (requires.length > 0) {
              // 1. get component groups for first require
              var componentGroups = this._componentGroups[getComponentName(requires[0])];
              if (componentGroups) {
                  var components = requires.slice();
                  // 2. search for a component group that has all the same requirements
                  for (var i = 0; i < componentGroups.length; i++) {
                      var traversedComponentGroup = componentGroups[i];
                      if (components.length === traversedComponentGroup.requires.length) {
                          for (var j = 0; j < components.length; j++) {
                              if (traversedComponentGroup.requires.indexOf(components[j]) === -1)
                                  break;
                              if (j === components.length - 1) {
                                  componentGroup = traversedComponentGroup;
                              }
                          }
                          if (componentGroup)
                              break;
                      }
                  }
              }
          }
          if (componentGroup) {
              // 3. Found an existent component group with the exact same requirements
              return componentGroup;
          }
          // Otherwise create and store it
          componentGroup = new (ComponentGroup.bind.apply(ComponentGroup, __spreadArray([void 0], __read(requires))))();
          componentGroup.active = true;
          var requiresNames = componentGroup.requiresNames;
          for (var i = 0; i < requiresNames.length; i++) {
              var componentName = requiresNames[i];
              var componentGroups = this._componentGroups[componentName];
              if (!componentGroups) {
                  this._componentGroups[componentName] = componentGroups = [];
              }
              if (componentGroups.indexOf(componentGroup) === -1) {
                  componentGroups.push(componentGroup);
              }
          }
          for (var entityId in this._entities) {
              this.checkRequirements(this._entities[entityId], componentGroup);
          }
          return componentGroup;
      };
      Engine.prototype.removeComponentGroup = function (componentGroup) {
          if (componentGroup.active) {
              componentGroup.active = false;
              var requiresNames = componentGroup.requiresNames;
              for (var i = 0; i < requiresNames.length; i++) {
                  var componentName = requiresNames[i];
                  var componentGroups = this._componentGroups[componentName];
                  if (componentGroups) {
                      var idx = componentGroups.indexOf(componentGroup);
                      if (idx !== -1) {
                          componentGroups.splice(idx, 1);
                      }
                  }
              }
              return true;
          }
          return false;
      };
      Engine.prototype.registerSystem = function (system) {
          system.active = true;
          if (system.activate) {
              system.activate(this);
          }
          this.simpleSystems.push(system);
      };
      Engine.prototype.checkRequirementsAndAdd = function (entity) {
          if (!entity.isAddedToEngine())
              return;
          for (var componentName in entity.components) {
              if (!(componentName in this.entityLists)) {
                  this.entityLists[componentName] = {};
              }
              this.entityLists[componentName][entity.uuid] = entity;
              var componentGroups = this._componentGroups[componentName];
              if (componentGroups) {
                  for (var systemIndex in componentGroups) {
                      this.checkRequirements(entity, componentGroups[systemIndex]);
                  }
              }
          }
          for (var i = 0; i < this.simpleSystems.length; i++) {
              var system = this.simpleSystems[i];
              if (system.onAddEntity) {
                  system.onAddEntity(entity);
              }
          }
      };
      Engine.prototype.checkRequirements = function (entity, system) {
          if (system.meetsRequirements(entity)) {
              if (!system.hasEntity(entity)) {
                  system.addEntity(entity);
              }
          }
          else {
              if (system.hasEntity(entity)) {
                  system.removeEntity(entity);
              }
          }
      };
      Engine.prototype.componentAddedHandler = function (event) {
          var _a;
          var entity = event.entity, componentName = event.componentName;
          if (!entity.isAddedToEngine())
              return;
          if (!this.entityLists[componentName]) {
              this.entityLists[componentName] = (_a = {}, _a[entity.uuid] = entity, _a);
          }
          else {
              this.entityLists[componentName][entity.uuid] = entity;
          }
          var componentGroups = this._componentGroups[componentName];
          if (componentGroups) {
              for (var i in componentGroups) {
                  this.checkRequirements(entity, componentGroups[i]);
              }
          }
      };
      Engine.prototype.componentRemovedHandler = function (event) {
          // In case a single component gets removed from an entity, we inform
          // all systems that this entity lost this specific component.
          var entity = event.entity, componentName = event.componentName;
          if (!entity.isAddedToEngine())
              return;
          delete this.entityLists[componentName][entity.uuid];
          var componentGroups = this._componentGroups[componentName];
          if (componentGroups) {
              for (var i in componentGroups) {
                  this.checkRequirements(entity, componentGroups[i]);
              }
          }
      };
      return Engine;
  }());

  var _defer = Promise.resolve().then.bind(Promise.resolve());
  /**
   * Executes an asynchronous task
   * @param task - the task to execute
   * @public
   */
  function executeTask(task) {
      var result = _defer(task);
      result.isComplete = false;
      result
          .then(function ($) {
          result.isComplete = true;
          result.result = $;
          result.didFail = false;
      })
          .catch(function ($) {
          result.isComplete = true;
          result.error = $;
          result.didFail = true;
          error('executeTask: FAILED ' + $.toString(), $);
      });
      return result;
  }

  /**
   * A class serves as a medium between the observable and its observers
   * @public
   */
  var ObserverEventState = /** @class */ (function () {
      /**
       * Create a new EventState
       * @param mask - defines the mask associated with this state
       * @param skipNextObservers - defines a flag which will instruct the observable to skip following observers when set to true
       * @param target - defines the original target of the state
       * @param currentTarget - defines the current target of the state
       */
      function ObserverEventState(mask, skipNextObservers, target, currentTarget) {
          if (skipNextObservers === void 0) { skipNextObservers = false; }
          this.initalize(mask, skipNextObservers, target, currentTarget);
      }
      /**
       * Initialize the current event state
       * @param mask - defines the mask associated with this state
       * @param skipNextObservers - defines a flag which will instruct the observable to skip following observers when set to true
       * @param target - defines the original target of the state
       * @param currentTarget - defines the current target of the state
       * @returns the current event state
       */
      ObserverEventState.prototype.initalize = function (mask, skipNextObservers, target, currentTarget) {
          if (skipNextObservers === void 0) { skipNextObservers = false; }
          this.mask = mask;
          this.skipNextObservers = skipNextObservers;
          this.target = target;
          this.currentTarget = currentTarget;
          return this;
      };
      return ObserverEventState;
  }());
  /**
   * Represent an Observer registered to a given Observable object.
   * @public
   */
  var Observer = /** @class */ (function () {
      /**
       * Creates a new observer
       * @param callback - defines the callback to call when the observer is notified
       * @param mask - defines the mask of the observer (used to filter notifications)
       * @param scope - defines the current scope used to restore the JS context
       */
      function Observer(
      /**
       * Defines the callback to call when the observer is notified
       */
      callback, 
      /**
       * Defines the mask of the observer (used to filter notifications)
       */
      mask, 
      /**
       * Defines the current scope used to restore the JS context
       */
      scope) {
          if (scope === void 0) { scope = null; }
          this.callback = callback;
          this.mask = mask;
          this.scope = scope;
          /**
           * Gets or sets a property defining that the observer as to be unregistered after the next notification
           */
          this.unregisterOnNextCall = false;
          /** For internal usage */
          this._willBeUnregistered = false;
      }
      return Observer;
  }());
  /**
   * Represent a list of observers registered to multiple Observables object.
   * @public
   */
  var MultiObserver = /** @class */ (function () {
      function MultiObserver() {
          this._observers = null;
          this._observables = null;
      }
      /**
       * Raise a callback when one of the observable will notify
       * @param observables - defines a list of observables to watch
       * @param callback - defines the callback to call on notification
       * @param mask - defines the mask used to filter notifications
       * @param scope - defines the current scope used to restore the JS context
       * @returns the new MultiObserver
       */
      MultiObserver.Watch = function (observables, callback, mask, scope) {
          var e_1, _a;
          if (mask === void 0) { mask = -1; }
          if (scope === void 0) { scope = null; }
          var result = new MultiObserver();
          result._observers = new Array();
          result._observables = observables;
          try {
              for (var observables_1 = __values(observables), observables_1_1 = observables_1.next(); !observables_1_1.done; observables_1_1 = observables_1.next()) {
                  var observable = observables_1_1.value;
                  var observer = observable.add(callback, mask, false, scope);
                  if (observer) {
                      result._observers.push(observer);
                  }
              }
          }
          catch (e_1_1) { e_1 = { error: e_1_1 }; }
          finally {
              try {
                  if (observables_1_1 && !observables_1_1.done && (_a = observables_1.return)) _a.call(observables_1);
              }
              finally { if (e_1) throw e_1.error; }
          }
          return result;
      };
      /**
       * Release associated resources
       */
      MultiObserver.prototype.dispose = function () {
          if (this._observers && this._observables) {
              for (var index = 0; index < this._observers.length; index++) {
                  this._observables[index].remove(this._observers[index]);
              }
          }
          this._observers = null;
          this._observables = null;
      };
      return MultiObserver;
  }());
  /**
   * The Observable class is a simple implementation of the Observable pattern.
   *
   * There's one slight particularity though: a given Observable can notify its observer using a particular mask value, only the Observers registered with this mask value will be notified.
   * This enable a more fine grained execution without having to rely on multiple different Observable objects.
   * For instance you may have a given Observable that have four different types of notifications: Move (mask = 0x01), Stop (mask = 0x02), Turn Right (mask = 0X04), Turn Left (mask = 0X08).
   * A given observer can register itself with only Move and Stop (mask = 0x03), then it will only be notified when one of these two occurs and will never be for Turn Left/Right.
   *
   * @public
   */
  var Observable = /** @class */ (function () {
      /**
       * Creates a new observable
       * @param onObserverAdded - defines a callback to call when a new observer is added
       */
      function Observable(onObserverAdded) {
          this._observers = new Array();
          this._onObserverAdded = null;
          this._eventState = new ObserverEventState(0);
          if (onObserverAdded) {
              this._onObserverAdded = onObserverAdded;
          }
      }
      /**
       * Create a new Observer with the specified callback
       * @param callback - the callback that will be executed for that Observer
       * @param mask - the mask used to filter observers
       * @param insertFirst - if true the callback will be inserted at the first position, hence executed before the others ones. If false (default behavior) the callback will be inserted at the last position, executed after all the others already present.
       * @param scope - optional scope for the callback to be called from
       * @param unregisterOnFirstCall - defines if the observer as to be unregistered after the next notification
       * @returns the new observer created for the callback
       */
      Observable.prototype.add = function (callback, mask, insertFirst, scope, unregisterOnFirstCall) {
          if (mask === void 0) { mask = -1; }
          if (insertFirst === void 0) { insertFirst = false; }
          if (scope === void 0) { scope = null; }
          if (unregisterOnFirstCall === void 0) { unregisterOnFirstCall = false; }
          if (!callback) {
              return null;
          }
          var observer = new Observer(callback, mask, scope);
          observer.unregisterOnNextCall = unregisterOnFirstCall;
          if (insertFirst) {
              this._observers.unshift(observer);
          }
          else {
              this._observers.push(observer);
          }
          if (this._onObserverAdded) {
              this._onObserverAdded(observer);
          }
          return observer;
      };
      /**
       * Create a new Observer with the specified callback and unregisters after the next notification
       * @param callback - the callback that will be executed for that Observer
       * @returns the new observer created for the callback
       */
      Observable.prototype.addOnce = function (callback) {
          return this.add(callback, undefined, undefined, undefined, true);
      };
      /**
       * Remove an Observer from the Observable object
       * @param observer - the instance of the Observer to remove
       * @returns false if it doesn't belong to this Observable
       */
      Observable.prototype.remove = function (observer) {
          if (!observer) {
              return false;
          }
          var index = this._observers.indexOf(observer);
          if (index !== -1) {
              this._deferUnregister(observer);
              return true;
          }
          return false;
      };
      /**
       * Remove a callback from the Observable object
       * @param callback - the callback to remove
       * @param scope - optional scope. If used only the callbacks with this scope will be removed
       * @returns false if it doesn't belong to this Observable
       */
      Observable.prototype.removeCallback = function (callback, scope) {
          for (var index = 0; index < this._observers.length; index++) {
              if (this._observers[index].callback === callback &&
                  (!scope || scope === this._observers[index].scope)) {
                  this._deferUnregister(this._observers[index]);
                  return true;
              }
          }
          return false;
      };
      /**
       * Notify all Observers by calling their respective callback with the given data
       * Will return true if all observers were executed, false if an observer set skipNextObservers to true, then prevent the subsequent ones to execute
       * @param eventData - defines the data to send to all observers
       * @param mask - defines the mask of the current notification (observers with incompatible mask (ie mask & observer.mask === 0) will not be notified)
       * @param target - defines the original target of the state
       * @param currentTarget - defines the current target of the state
       * @returns false if the complete observer chain was not processed (because one observer set the skipNextObservers to true)
       */
      Observable.prototype.notifyObservers = function (eventData, mask, target, currentTarget) {
          var e_2, _a;
          if (mask === void 0) { mask = -1; }
          if (!this._observers.length) {
              return true;
          }
          var state = this._eventState;
          state.mask = mask;
          state.target = target;
          state.currentTarget = currentTarget;
          state.skipNextObservers = false;
          state.lastReturnValue = eventData;
          try {
              for (var _b = __values(this._observers), _c = _b.next(); !_c.done; _c = _b.next()) {
                  var obs = _c.value;
                  if (obs._willBeUnregistered) {
                      continue;
                  }
                  if (obs.mask & mask) {
                      if (obs.scope) {
                          state.lastReturnValue = obs.callback.apply(obs.scope, [
                              eventData,
                              state
                          ]);
                      }
                      else {
                          state.lastReturnValue = obs.callback(eventData, state);
                      }
                      if (obs.unregisterOnNextCall) {
                          this._deferUnregister(obs);
                      }
                  }
                  if (state.skipNextObservers) {
                      return false;
                  }
              }
          }
          catch (e_2_1) { e_2 = { error: e_2_1 }; }
          finally {
              try {
                  if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
              }
              finally { if (e_2) throw e_2.error; }
          }
          return true;
      };
      /**
       * Calling this will execute each callback, expecting it to be a promise or return a value.
       * If at any point in the chain one function fails, the promise will fail and the execution will not continue.
       * This is useful when a chain of events (sometimes async events) is needed to initialize a certain object
       * and it is crucial that all callbacks will be executed.
       * The order of the callbacks is kept, callbacks are not executed parallel.
       *
       * @param eventData - The data to be sent to each callback
       * @param mask - is used to filter observers defaults to -1
       * @param target - defines the callback target (see EventState)
       * @param currentTarget - defines he current object in the bubbling phase
       * @returns will return a Promise than resolves when all callbacks executed successfully.
       */
      Observable.prototype.notifyObserversWithPromise = function (eventData, mask, target, currentTarget) {
          var _this = this;
          if (mask === void 0) { mask = -1; }
          // create an empty promise
          var p = Promise.resolve(eventData);
          // no observers? return this promise.
          if (!this._observers.length) {
              return p;
          }
          var state = this._eventState;
          state.mask = mask;
          state.target = target;
          state.currentTarget = currentTarget;
          state.skipNextObservers = false;
          // execute one callback after another (not using Promise.all, the order is important)
          this._observers.forEach(function (obs) {
              if (state.skipNextObservers) {
                  return;
              }
              if (obs._willBeUnregistered) {
                  return;
              }
              if (obs.mask & mask) {
                  if (obs.scope) {
                      p = p.then(function (lastReturnedValue) {
                          state.lastReturnValue = lastReturnedValue;
                          return obs.callback.apply(obs.scope, [eventData, state]);
                      });
                  }
                  else {
                      p = p.then(function (lastReturnedValue) {
                          state.lastReturnValue = lastReturnedValue;
                          return obs.callback(eventData, state);
                      });
                  }
                  if (obs.unregisterOnNextCall) {
                      _this._deferUnregister(obs);
                  }
              }
          });
          // return the eventData
          return p.then(function () {
              return eventData;
          });
      };
      /**
       * Notify a specific observer
       * @param observer - defines the observer to notify
       * @param eventData - defines the data to be sent to each callback
       * @param mask - is used to filter observers defaults to -1
       */
      Observable.prototype.notifyObserver = function (observer, eventData, mask) {
          if (mask === void 0) { mask = -1; }
          var state = this._eventState;
          state.mask = mask;
          state.skipNextObservers = false;
          observer.callback(eventData, state);
      };
      /**
       * Gets a boolean indicating if the observable has at least one observer
       * @returns true is the Observable has at least one Observer registered
       */
      Observable.prototype.hasObservers = function () {
          return this._observers.length > 0;
      };
      /**
       * Clear the list of observers
       */
      Observable.prototype.clear = function () {
          this._observers = new Array();
          this._onObserverAdded = null;
      };
      /**
       * Clone the current observable
       * @returns a new observable
       */
      Observable.prototype.clone = function () {
          var result = new Observable();
          result._observers = this._observers.slice(0);
          return result;
      };
      /**
       * Does this observable handles observer registered with a given mask
       * @param mask - defines the mask to be tested
       * @returns whether or not one observer registered with the given mask is handeled
       */
      Observable.prototype.hasSpecificMask = function (mask) {
          var e_3, _a;
          if (mask === void 0) { mask = -1; }
          try {
              for (var _b = __values(this._observers), _c = _b.next(); !_c.done; _c = _b.next()) {
                  var obs = _c.value;
                  if (obs.mask & mask || obs.mask === mask) {
                      return true;
                  }
              }
          }
          catch (e_3_1) { e_3 = { error: e_3_1 }; }
          finally {
              try {
                  if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
              }
              finally { if (e_3) throw e_3.error; }
          }
          return false;
      };
      Observable.prototype._deferUnregister = function (observer) {
          var _this = this;
          observer.unregisterOnNextCall = false;
          observer._willBeUnregistered = true;
          void executeTask(function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
              return [2 /*return*/, this._remove(observer)];
          }); }); });
      };
      // This should only be called when not iterating over _observers to avoid callback skipping.
      // Removes an observer from the _observer Array.
      Observable.prototype._remove = function (observer) {
          if (!observer) {
              return false;
          }
          var index = this._observers.indexOf(observer);
          if (index !== -1) {
              this._observers.splice(index, 1);
              return true;
          }
          return false;
      };
      return Observable;
  }());

  var modulePromise;
  /**
   * teleport player to a destination
   * @param destination - "coordX,coordY", "magic", "crowd"
   * @public
   */
  function teleportTo(destination) {
      // error(`teleportTo(destination) was deprecated. Please use:
      // import {requestTeleport} from '@decentraland/UserActionModule'
      // executeTask(async () => {
      //   await requestTeleport(destination)
      // })`)
      callModuleRpc('requestTeleport', [destination]);
  }
  function ensureModule() {
      if (typeof modulePromise === 'undefined' && typeof dcl !== 'undefined') {
          modulePromise = dcl.loadModule('@decentraland/UserActionModule', {});
      }
      return typeof modulePromise !== 'undefined' && typeof dcl !== 'undefined';
  }
  function callModuleRpc(methodName, args) {
      if (ensureModule()) {
          modulePromise.then(function ($) {
              void dcl.callRpc($.rpcHandle, methodName, args);
          });
      }
  }

  /**
   * @public
   */
  var UUIDEvent = /** @class */ (function () {
      function UUIDEvent(uuid, payload) {
          this.uuid = uuid;
          this.payload = payload;
      }
      UUIDEvent = __decorate([
          EventConstructor(),
          __metadata("design:paramtypes", [String, Object])
      ], UUIDEvent);
      return UUIDEvent;
  }());
  /**
   * @public
   */
  var RaycastResponse = /** @class */ (function () {
      function RaycastResponse(payload) {
          this.payload = payload;
      }
      RaycastResponse = __decorate([
          EventConstructor(),
          __metadata("design:paramtypes", [Object])
      ], RaycastResponse);
      return RaycastResponse;
  }());
  /**
   * @public
   */
  var PointerEvent = /** @class */ (function () {
      function PointerEvent(payload) {
          this.payload = payload;
      }
      PointerEvent = __decorate([
          EventConstructor(),
          __metadata("design:paramtypes", [Object])
      ], PointerEvent);
      return PointerEvent;
  }());
  var internalDcl;
  /**
   * @internal
   * This function generates a callback that is passed to the Observable
   * constructor to subscribe to the events of the DecentralandInterface
   */
  function createSubscriber(eventName) {
      return function () {
          if (internalDcl) {
              internalDcl.subscribe(eventName);
          }
      };
  }
  /**
   * This event is triggered when you change your camera between 1st and 3rd person
   * @public
   */
  var onCameraModeChangedObservable = new Observable(createSubscriber('cameraModeChanged'));
  /**
   * This event is triggered when you change your camera between 1st and 3rd person
   * @public
   */
  var onIdleStateChangedObservable = new Observable(createSubscriber('idleStateChanged'));
  /**
   * These events are triggered after your character enters the scene.
   * @public
   */
  var onEnterSceneObservable = new Observable(createSubscriber('onEnterScene'));
  /** @public @deprecated Use onEnterSceneObservable instead. */
  var onEnterScene = onEnterSceneObservable;
  /**
   * These events are triggered after your character leaves the scene.
   * @public
   */
  var onLeaveSceneObservable = new Observable(createSubscriber('onLeaveScene'));
  /** @public @deprecated Use onLeaveSceneObservable instead. */
  var onLeaveScene = onLeaveSceneObservable;
  /**
   * This event is triggered after all the resources of the scene were loaded (models, textures, etc...)
   * @public
   */
  var onSceneReadyObservable = new Observable(createSubscriber('sceneStart'));
  /**
   * @public
   */
  var onPlayerExpressionObservable = new Observable(createSubscriber('playerExpression'));
  /**
   * @public
   */
  var onPointerLockedStateChange = new Observable(createSubscriber('onPointerLock'));
  /**
   * @public
   */
  var onVideoEvent = new Observable(createSubscriber('videoEvent'));
  /**
   * @public
   */
  var onProfileChanged = new Observable(createSubscriber('profileChanged'));
  /**
   * @public
   */
  var onPlayerConnectedObservable = new Observable(createSubscriber('playerConnected'));
  /**
   * @public
   */
  var onPlayerDisconnectedObservable = new Observable(createSubscriber('playerDisconnected'));
  /**
   * @public
   */
  var onRealmChangedObservable = new Observable(createSubscriber('onRealmChanged'));
  /**
   * @public
   */
  var onPlayerClickedObservable = new Observable(createSubscriber('playerClicked'));
  /**
   * @internal
   * This function adds _one_ listener to the onEvent event of dcl interface.
   * Leveraging a switch to route events to the Observable handlers.
   */
  function _initEventObservables(dcl) {
      // store internal reference to dcl, it is going to be used to subscribe to the events
      internalDcl = dcl;
      if (internalDcl) {
          internalDcl.onEvent(function (event) {
              switch (event.type) {
                  case 'onEnterScene': {
                      onEnterSceneObservable.notifyObservers(event.data);
                      return;
                  }
                  case 'onLeaveScene': {
                      onLeaveSceneObservable.notifyObservers(event.data);
                      return;
                  }
                  case 'cameraModeChanged': {
                      onCameraModeChangedObservable.notifyObservers(event.data);
                      return;
                  }
                  case 'idleStateChanged': {
                      onIdleStateChangedObservable.notifyObservers(event.data);
                      return;
                  }
                  case 'sceneStart': {
                      onSceneReadyObservable.notifyObservers(event.data);
                      return;
                  }
                  case 'playerExpression': {
                      onPlayerExpressionObservable.notifyObservers(event.data);
                      return;
                  }
                  case 'videoEvent': {
                      var videoData = event.data;
                      var component = DisposableComponent.engine.disposableComponents[videoData.componentId];
                      if (component) {
                          component.update(videoData);
                      }
                      onVideoEvent.notifyObservers(videoData);
                      return;
                  }
                  case 'profileChanged': {
                      onProfileChanged.notifyObservers(event.data);
                      return;
                  }
                  case 'onPointerLock': {
                      onPointerLockedStateChange.notifyObservers(event.data);
                      return;
                  }
                  case 'playerConnected': {
                      onPlayerConnectedObservable.notifyObservers(event.data);
                      return;
                  }
                  case 'playerDisconnected': {
                      onPlayerDisconnectedObservable.notifyObservers(event.data);
                      return;
                  }
                  case 'onRealmChanged': {
                      onRealmChangedObservable.notifyObservers(event.data);
                      return;
                  }
                  case 'playerClicked': {
                      onPlayerClickedObservable.notifyObservers(event.data);
                      return;
                  }
              }
          });
      }
  }

  // This number is defined in the protocol ECS.SetEntityParent.3
  var ROOT_ENTITY_ID = '0';
  var DecentralandSynchronizationSystem = /** @class */ (function () {
      function DecentralandSynchronizationSystem(dcl) {
          this.dcl = dcl;
          this.cachedComponents = {};
      }
      DecentralandSynchronizationSystem.prototype.activate = function (engine) {
          var _this = this;
          this.engine = engine;
          engine.eventManager.addListener(ComponentAdded, this, this.componentAdded);
          engine.eventManager.addListener(ComponentRemoved, this, this.componentRemoved);
          engine.eventManager.addListener(DisposableComponentCreated, this, this.disposableComponentCreated);
          engine.eventManager.addListener(DisposableComponentRemoved, this, this.disposableComponentRemoved);
          engine.eventManager.addListener(DisposableComponentUpdated, this, this.disposableComponentUpdated);
          engine.eventManager.addListener(ParentChanged, this, this.parentChanged);
          var rootId = engine.rootEntity.uuid;
          this.dcl.addEntity(rootId);
          // TODO(agus): send disposableComponents if exist
          this.dcl.onUpdate(function (dt) {
              engine.update(dt);
              _this.presentEntities();
          });
          this.dcl.onEvent(function (event) {
              var data = event.data;
              switch (event.type) {
                  case 'uuidEvent':
                      engine.eventManager.fireEvent(new UUIDEvent(data.uuid, data.payload));
                      break;
                  case 'raycastResponse':
                      if (data.queryType === 'HitFirst') {
                          engine.eventManager.fireEvent(new RaycastResponse(data));
                      }
                      else if (data.queryType === 'HitAll') {
                          engine.eventManager.fireEvent(new RaycastResponse(data));
                      }
                      break;
                  case 'actionButtonEvent':
                      engine.eventManager.fireEvent(new PointerEvent(data.payload));
                      break;
              }
          });
      };
      /**
       * system.onAddEntity is called by the engine when a entity is added to the
       * engine.
       */
      DecentralandSynchronizationSystem.prototype.onAddEntity = function (entity) {
          if (entity && entity.isAddedToEngine()) {
              var entityId = entity.uuid;
              var parent = entity.getParent();
              this.dcl.addEntity(entityId);
              if (parent) {
                  // If the entity has a parent, we send the the enparenting signal
                  // otherwise the engine will know the entity is set as a child of
                  // engine.rootEntity by default
                  this.dcl.setParent(entityId, parent.uuid);
              }
              // This creates a cache dictionary to avoid send redundant information to
              // the engine in order to avoid unnecessary work in the main thread.
              this.cachedComponents[entityId] = {};
              // this iterator sends the current components of te engine at the moment
              // of addition
              for (var componentName in entity.components) {
                  var component = entity.components[componentName];
                  var classId = getComponentClassId(component);
                  if (classId !== null) {
                      if (isDisposableComponent(component)) {
                          // Send the attach component signal
                          this.dcl.attachEntityComponent(entity.uuid, componentName, getComponentId(component));
                      }
                      else {
                          var componentJson = JSON.stringify(component);
                          // Send the updated component
                          this.dcl.updateEntityComponent(entityId, componentName, classId, componentJson);
                          // Update the cached copy of the sent component
                          this.cachedComponents[entityId][componentName] = componentJson;
                      }
                  }
              }
          }
      };
      /**
       * system.onRemoveEntity is called by the engine when a entity gets removed
       * from the engine.
       */
      DecentralandSynchronizationSystem.prototype.onRemoveEntity = function (entity) {
          if (entity.isAddedToEngine()) {
              var entityId = entity.uuid;
              // Send the removeEntity signal
              this.dcl.removeEntity(entityId);
              // Remove the caches from local memory
              delete this.cachedComponents[entityId];
          }
      };
      /**
       * This method is called at the end of every update cycle.
       * It finds and sends updates in components of the engine entities.
       */
      DecentralandSynchronizationSystem.prototype.presentEntities = function () {
          for (var i in this.engine.entities) {
              var entity = this.engine.entities[i];
              for (var componentName in entity.components) {
                  var component = entity.components[componentName];
                  var classId = getComponentClassId(component);
                  if (classId !== null && !isDisposableComponent(component)) {
                      var jsonRepresentation = this.getJsonIfDirty(entity.uuid, componentName, component);
                      if (jsonRepresentation) {
                          // Send the updated component
                          this.dcl.updateEntityComponent(entity.uuid, componentName, classId, jsonRepresentation);
                          this.clearDirty(entity.uuid, componentName, component, jsonRepresentation);
                      }
                  }
              }
          }
          for (var id in this.engine.disposableComponents) {
              var component = this.engine.disposableComponents[id];
              if (component instanceof ObservableComponent && component.dirty) {
                  this.dcl.componentUpdated(id, JSON.stringify(component));
                  component.dirty = false;
              }
          }
      };
      /**
       * This method is called after a component is added to an entity. The event
       * (param 1) contains the necessary information to notify the engine about the
       * component that was added and the entity.
       */
      DecentralandSynchronizationSystem.prototype.componentAdded = function (event) {
          if (event.entity.isAddedToEngine()) {
              var component = event.entity.components[event.componentName];
              if (isDisposableComponent(component)) {
                  this.dcl.attachEntityComponent(event.entity.uuid, event.componentName, getComponentId(component));
              }
              else if (event.classId !== null) {
                  var componentJson = JSON.stringify(component);
                  // Send the updated component
                  this.dcl.updateEntityComponent(event.entity.uuid, event.componentName, event.classId, componentJson);
                  // Update the cached copy of the sent component
                  this.cachedComponents[event.entity.uuid][event.componentName] =
                      componentJson;
              }
          }
      };
      /**
       * This method is called when a component is removed from an entity.
       */
      DecentralandSynchronizationSystem.prototype.componentRemoved = function (event) {
          if (event.entity.isAddedToEngine()) {
              this.dcl.removeEntityComponent(event.entity.uuid, event.componentName);
              // Remove the cached component so we can send it again when re-adding
              delete this.cachedComponents[event.entity.uuid][event.componentName];
          }
      };
      /**
       * This method is called after a disposableComponent is created.
       * It instantiates the component in the engine, the event that updates the
       * created component is fired immediatly after.
       */
      DecentralandSynchronizationSystem.prototype.disposableComponentCreated = function (event) {
          this.dcl.componentCreated(event.componentId, event.componentName, event.classId);
      };
      /**
       * This method is called after a disposableComponent is updated, once per
       * update cycle and once after creation.
       */
      DecentralandSynchronizationSystem.prototype.disposableComponentRemoved = function (event) {
          this.dcl.componentDisposed(event.componentId);
      };
      /**
       * This method is called right after a diposableComponent gets disposed. That
       * process is manual.
       *
       * TODO(menduz,dani): What happens if a disposableComponent gets disposed and
       * it remains attached to some entities?
       */
      DecentralandSynchronizationSystem.prototype.disposableComponentUpdated = function (event) {
          this.dcl.componentUpdated(event.componentId, JSON.stringify(event.component));
      };
      /**
       * This method is called when a parent changes in an entity.
       */
      DecentralandSynchronizationSystem.prototype.parentChanged = function (event) {
          this.dcl.setParent(event.entity.uuid, event.parent ? event.parent.uuid : ROOT_ENTITY_ID);
      };
      DecentralandSynchronizationSystem.prototype.getJsonIfDirty = function (entityId, componentName, component) {
          var jsonRepresentation = JSON.stringify(component);
          return (jsonRepresentation !== this.cachedComponents[entityId][componentName] &&
              jsonRepresentation);
      };
      DecentralandSynchronizationSystem.prototype.clearDirty = function (entityId, componentName, component, jsonRepresentation) {
          this.cachedComponents[entityId][componentName] = jsonRepresentation;
      };
      return DecentralandSynchronizationSystem;
  }());

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  var dist = {};

  var types = {};

  (function (exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.RAD2DEG = exports.DEG2RAD = exports.Epsilon = exports.ToLinearSpace = exports.ToGammaSpace = exports.Space = exports.Orientation = void 0;
  (function (Orientation) {
      /**
       * Clockwise
       */
      Orientation[Orientation["CW"] = 0] = "CW";
      /** Counter clockwise */
      Orientation[Orientation["CCW"] = 1] = "CCW";
  })(exports.Orientation || (exports.Orientation = {}));
  (function (Space) {
      /** Local (object) space */
      Space[Space["LOCAL"] = 0] = "LOCAL";
      /** World space */
      Space[Space["WORLD"] = 1] = "WORLD";
      /** Bone space */
      Space[Space["BONE"] = 2] = "BONE";
  })(exports.Space || (exports.Space = {}));
  /**
   * Constant used to convert a value to gamma space
   * @public
   */
  exports.ToGammaSpace = 1 / 2.2;
  /**
   * Constant used to convert a value to linear space
   * @public
   */
  exports.ToLinearSpace = 2.2;
  /**
   * Constant used to define the minimal number value in Babylon.js
   * @public
   */
  exports.Epsilon = 0.000001;
  /**
   * Constant used to convert from Euler degrees to radians
   * @public
   */
  exports.DEG2RAD = Math.PI / 180;
  /**
   * Constant used to convert from radians to Euler degrees
   * @public
   */
  exports.RAD2DEG = 360 / (Math.PI * 2);

  }(types));

  var preallocatedVariables = {};

  var utils = {};

  Object.defineProperty(utils, "__esModule", { value: true });
  utils.buildArray = void 0;
  /**
   * @internal
   * Returns an array of the given size filled with element built from the given constructor and the paramters
   * @param size - the number of element to construct and put in the array
   * @param itemBuilder - a callback responsible for creating new instance of item. Called once per array entry.
   * @returns a new array filled with new objects
   * @internal
   */
  function buildArray(size, itemBuilder) {
      const a = [];
      for (let i = 0; i < size; ++i) {
          a.push(itemBuilder());
      }
      return a;
  }
  utils.buildArray = buildArray;

  var Vector3$1 = {};

  var Quaternion$1 = {};

  var Matrix$1 = {};

  var Vector4$1 = {};

  var Scalar$1 = {};

  Object.defineProperty(Scalar$1, "__esModule", { value: true });
  Scalar$1.Scalar = void 0;
  /**
   * Scalar computation library
   * @public
   */
  class Scalar {
      /**
       * Boolean : true if the absolute difference between a and b is lower than epsilon (default = 1.401298E-45)
       * @param a - number
       * @param b - number
       * @param epsilon - (default = 1.401298E-45)
       * @returns true if the absolute difference between a and b is lower than epsilon (default = 1.401298E-45)
       */
      static WithinEpsilon(a, b, epsilon = 1.401298e-45) {
          const num = a - b;
          return -epsilon <= num && num <= epsilon;
      }
      /**
       * Returns a string : the upper case translation of the number i to hexadecimal.
       * @param i - number
       * @returns the upper case translation of the number i to hexadecimal.
       */
      static ToHex(i) {
          const str = i.toString(16);
          if (i <= 15) {
              return ('0' + str).toUpperCase();
          }
          return str.toUpperCase();
      }
      /**
       * Returns -1 if value is negative and +1 is value is positive.
       * @param _value - the value
       * @returns the value itself if it's equal to zero.
       */
      static Sign(value) {
          const _value = +value; // convert to a number
          if (_value === 0 || isNaN(_value)) {
              return _value;
          }
          return _value > 0 ? 1 : -1;
      }
      /**
       * Returns the value itself if it's between min and max.
       * Returns min if the value is lower than min.
       * Returns max if the value is greater than max.
       * @param value - the value to clmap
       * @param min - the min value to clamp to (default: 0)
       * @param max - the max value to clamp to (default: 1)
       * @returns the clamped value
       */
      static Clamp(value, min = 0, max = 1) {
          return Math.min(max, Math.max(min, value));
      }
      /**
       * the log2 of value.
       * @param value - the value to compute log2 of
       * @returns the log2 of value.
       */
      static Log2(value) {
          return Math.log(value) * Math.LOG2E;
      }
      /**
       * Loops the value, so that it is never larger than length and never smaller than 0.
       *
       * This is similar to the modulo operator but it works with floating point numbers.
       * For example, using 3.0 for t and 2.5 for length, the result would be 0.5.
       * With t = 5 and length = 2.5, the result would be 0.0.
       * Note, however, that the behaviour is not defined for negative numbers as it is for the modulo operator
       * @param value - the value
       * @param length - the length
       * @returns the looped value
       */
      static Repeat(value, length) {
          return value - Math.floor(value / length) * length;
      }
      /**
       * Normalize the value between 0.0 and 1.0 using min and max values
       * @param value - value to normalize
       * @param min - max to normalize between
       * @param max - min to normalize between
       * @returns the normalized value
       */
      static Normalize(value, min, max) {
          return (value - min) / (max - min);
      }
      /**
       * Denormalize the value from 0.0 and 1.0 using min and max values
       * @param normalized - value to denormalize
       * @param min - max to denormalize between
       * @param max - min to denormalize between
       * @returns the denormalized value
       */
      static Denormalize(normalized, min, max) {
          return normalized * (max - min) + min;
      }
      /**
       * Calculates the shortest difference between two given angles given in degrees.
       * @param current - current angle in degrees
       * @param target - target angle in degrees
       * @returns the delta
       */
      static DeltaAngle(current, target) {
          let num = Scalar.Repeat(target - current, 360.0);
          if (num > 180.0) {
              num -= 360.0;
          }
          return num;
      }
      /**
       * PingPongs the value t, so that it is never larger than length and never smaller than 0.
       * @param tx - value
       * @param length - length
       * @returns The returned value will move back and forth between 0 and length
       */
      static PingPong(tx, length) {
          const t = Scalar.Repeat(tx, length * 2.0);
          return length - Math.abs(t - length);
      }
      /**
       * Interpolates between min and max with smoothing at the limits.
       *
       * This function interpolates between min and max in a similar way to Lerp. However, the interpolation will gradually speed up
       * from the start and slow down toward the end. This is useful for creating natural-looking animation, fading and other transitions.
       * @param from - from
       * @param to - to
       * @param tx - value
       * @returns the smooth stepped value
       */
      static SmoothStep(from, to, tx) {
          let t = Scalar.Clamp(tx);
          t = -2.0 * t * t * t + 3.0 * t * t;
          return to * t + from * (1.0 - t);
      }
      /**
       * Moves a value current towards target.
       *
       * This is essentially the same as Mathf.Lerp but instead the function will ensure that the speed never exceeds maxDelta.
       * Negative values of maxDelta pushes the value away from target.
       * @param current - current value
       * @param target - target value
       * @param maxDelta - max distance to move
       * @returns resulting value
       */
      static MoveTowards(current, target, maxDelta) {
          let result = 0;
          if (Math.abs(target - current) <= maxDelta) {
              result = target;
          }
          else {
              result = current + Scalar.Sign(target - current) * maxDelta;
          }
          return result;
      }
      /**
       * Same as MoveTowards but makes sure the values interpolate correctly when they wrap around 360 degrees.
       *
       * Variables current and target are assumed to be in degrees. For optimization reasons, negative values of maxDelta
       *  are not supported and may cause oscillation. To push current away from a target angle, add 180 to that angle instead.
       * @param current - current value
       * @param target - target value
       * @param maxDelta - max distance to move
       * @returns resulting angle
       */
      static MoveTowardsAngle(current, target, maxDelta) {
          const num = Scalar.DeltaAngle(current, target);
          let result = 0;
          if (-maxDelta < num && num < maxDelta) {
              result = target;
          }
          else {
              result = Scalar.MoveTowards(current, current + num, maxDelta);
          }
          return result;
      }
      /**
       * Creates a new scalar with values linearly interpolated of "amount" between the start scalar and the end scalar.
       * @param start - start value
       * @param end - target value
       * @param amount - amount to lerp between
       * @returns the lerped value
       */
      static Lerp(start, end, amount) {
          return start + (end - start) * amount;
      }
      /**
       * Same as Lerp but makes sure the values interpolate correctly when they wrap around 360 degrees.
       * The parameter t is clamped to the range [0, 1]. Variables a and b are assumed to be in degrees.
       * @param start - start value
       * @param end - target value
       * @param amount - amount to lerp between
       * @returns the lerped value
       */
      static LerpAngle(start, end, amount) {
          let num = Scalar.Repeat(end - start, 360.0);
          if (num > 180.0) {
              num -= 360.0;
          }
          return start + num * Scalar.Clamp(amount);
      }
      /**
       * Calculates the linear parameter t that produces the interpolant value within the range [a, b].
       * @param a - start value
       * @param b - target value
       * @param value - value between a and b
       * @returns the inverseLerp value
       */
      static InverseLerp(a, b, value) {
          let result = 0;
          if (a !== b) {
              result = Scalar.Clamp((value - a) / (b - a));
          }
          else {
              result = 0.0;
          }
          return result;
      }
      /**
       * Returns a new scalar located for "amount" (float) on the Hermite spline defined by the scalars "value1", "value3", "tangent1", "tangent2".
       * {@link http://mathworld.wolfram.com/HermitePolynomial.html}
       * @param value1 - spline value
       * @param tangent1 - spline value
       * @param value2 - spline value
       * @param tangent2 - spline value
       * @param amount - input value
       * @returns hermite result
       */
      static Hermite(value1, tangent1, value2, tangent2, amount) {
          const squared = amount * amount;
          const cubed = amount * squared;
          const part1 = 2.0 * cubed - 3.0 * squared + 1.0;
          const part2 = -2.0 * cubed + 3.0 * squared;
          const part3 = cubed - 2.0 * squared + amount;
          const part4 = cubed - squared;
          return value1 * part1 + value2 * part2 + tangent1 * part3 + tangent2 * part4;
      }
      /**
       * Returns a random float number between and min and max values
       * @param min - min value of random
       * @param max - max value of random
       * @returns random value
       */
      static RandomRange(min, max) {
          if (min === max) {
              return min;
          }
          return Math.random() * (max - min) + min;
      }
      /**
       * This function returns percentage of a number in a given range.
       *
       * RangeToPercent(40,20,60) will return 0.5 (50%)
       * RangeToPercent(34,0,100) will return 0.34 (34%)
       * @param num - to convert to percentage
       * @param min - min range
       * @param max - max range
       * @returns the percentage
       */
      static RangeToPercent(num, min, max) {
          return (num - min) / (max - min);
      }
      /**
       * This function returns number that corresponds to the percentage in a given range.
       *
       * PercentToRange(0.34,0,100) will return 34.
       * @param percent - to convert to number
       * @param min - min range
       * @param max - max range
       * @returns the number
       */
      static PercentToRange(percent, min, max) {
          return (max - min) * percent + min;
      }
      /**
       * Returns the angle converted to equivalent value between -Math.PI and Math.PI radians.
       * @param angle - The angle to normalize in radian.
       * @returns The converted angle.
       */
      static NormalizeRadians(angle) {
          // More precise but slower version kept for reference.
          // tslint:disable:no-commented-out-code
          /*
            // angle = angle % Tools.TwoPi;
            // angle = (angle + Tools.TwoPi) % Tools.TwoPi;
      
            //if (angle > Math.PI) {
            //	angle -= Tools.TwoPi;
            //}
             */
          return angle - Scalar.TwoPi * Math.floor((angle + Math.PI) / Scalar.TwoPi);
      }
  }
  Scalar$1.Scalar = Scalar;
  /**
   * Two pi constants convenient for computation.
   */
  Scalar.TwoPi = Math.PI * 2;

  Object.defineProperty(Vector4$1, "__esModule", { value: true });
  Vector4$1.Vector4 = void 0;
  const types_1$8 = types;
  const Scalar_1$6 = Scalar$1;
  const Vector3_1$7 = Vector3$1;
  /**
   * Vector4 class created for EulerAngle class conversion to Quaternion
   * @public
   */
  class Vector4 {
      /**
       * Creates a Vector4 object from the given floats.
       * @param x - x value of the vector
       * @param y - y value of the vector
       * @param z - z value of the vector
       * @param w - w value of the vector
       */
      constructor(
      /** x value of the vector */
      x, 
      /** y value of the vector */
      y, 
      /** z value of the vector */
      z, 
      /** w value of the vector */
      w) {
          this.x = x;
          this.y = y;
          this.z = z;
          this.w = w;
      }
      // Statics
      /**
       * Returns a new Vector4 as the result of the addition of the two given vectors.
       * @param vector1 - the first vector
       * @param vector2 - the second vector
       * @returns the resulting vector
       */
      static Add(vector1, vector2) {
          return new Vector4(vector1.x, vector1.y, vector1.z, vector1.w).addInPlace(vector2);
      }
      /**
       * Returns a new Vector4 set from the starting index of the given array.
       * @param array - the array to pull values from
       * @param offset - the offset into the array to start at
       * @returns the new vector
       */
      static FromArray(array, offset = 0) {
          return new Vector4(array[offset], array[offset + 1], array[offset + 2], array[offset + 3]);
      }
      /**
       * Updates the given vector "result" from the starting index of the given array.
       * @param array - the array to pull values from
       * @param offset - the offset into the array to start at
       * @param result - the vector to store the result in
       */
      static FromArrayToRef(array, offset, result) {
          result.x = array[offset];
          result.y = array[offset + 1];
          result.z = array[offset + 2];
          result.w = array[offset + 3];
      }
      /**
       * Updates the given vector "result" from the starting index of the given FloatArray.
       * @param array - the array to pull values from
       * @param offset - the offset into the array to start at
       * @param result - the vector to store the result in
       */
      static FromFloatArrayToRef(array, offset, result) {
          Vector4.FromArrayToRef(array, offset, result);
      }
      /**
       * Updates the given vector "result" coordinates from the given floats.
       * @param x - float to set from
       * @param y - float to set from
       * @param z - float to set from
       * @param w - float to set from
       * @param result - the vector to the floats in
       */
      static FromFloatsToRef(x, y, z, w, result) {
          result.x = x;
          result.y = y;
          result.z = z;
          result.w = w;
      }
      /**
       * Returns a new Vector4 set to (0.0, 0.0, 0.0, 0.0)
       * @returns the new vector
       */
      static Zero() {
          return new Vector4(0.0, 0.0, 0.0, 0.0);
      }
      /**
       * Returns a new Vector4 set to (1.0, 1.0, 1.0, 1.0)
       * @returns the new vector
       */
      static One() {
          return new Vector4(1.0, 1.0, 1.0, 1.0);
      }
      /**
       * Returns a new normalized Vector4 from the given one.
       * @param vector - the vector to normalize
       * @returns the vector
       */
      static Normalize(vector) {
          const result = Vector4.Zero();
          Vector4.NormalizeToRef(vector, result);
          return result;
      }
      /**
       * Updates the given vector "result" from the normalization of the given one.
       * @param vector - the vector to normalize
       * @param result - the vector to store the result in
       */
      static NormalizeToRef(vector, result) {
          result.copyFrom(vector);
          result.normalize();
      }
      /**
       * Returns a vector with the minimum values from the left and right vectors
       * @param left - left vector to minimize
       * @param right - right vector to minimize
       * @returns a new vector with the minimum of the left and right vector values
       */
      static Minimize(left, right) {
          const min = new Vector4(left.x, left.y, left.z, left.w);
          min.minimizeInPlace(right);
          return min;
      }
      /**
       * Returns a vector with the maximum values from the left and right vectors
       * @param left - left vector to maximize
       * @param right - right vector to maximize
       * @returns a new vector with the maximum of the left and right vector values
       */
      static Maximize(left, right) {
          const max = new Vector4(left.x, left.y, left.z, left.w);
          max.maximizeInPlace(right);
          return max;
      }
      /**
       * Returns the distance (float) between the vectors "value1" and "value2".
       * @param value1 - value to calulate the distance between
       * @param value2 - value to calulate the distance between
       * @returns the distance between the two vectors
       */
      static Distance(value1, value2) {
          return Math.sqrt(Vector4.DistanceSquared(value1, value2));
      }
      /**
       * Returns the squared distance (float) between the vectors "value1" and "value2".
       * @param value1 - value to calulate the distance between
       * @param value2 - value to calulate the distance between
       * @returns the distance between the two vectors squared
       */
      static DistanceSquared(value1, value2) {
          const x = value1.x - value2.x;
          const y = value1.y - value2.y;
          const z = value1.z - value2.z;
          const w = value1.w - value2.w;
          return x * x + y * y + z * z + w * w;
      }
      /**
       * Returns a new Vector4 located at the center between the vectors "value1" and "value2".
       * @param value1 - value to calulate the center between
       * @param value2 - value to calulate the center between
       * @returns the center between the two vectors
       */
      static Center(value1, value2) {
          const center = Vector4.Add(value1, value2);
          center.scaleInPlace(0.5);
          return center;
      }
      /**
       * Returns a new Vector4 set with the result of the normal transformation by the given matrix of the given vector.
       * This methods computes transformed normalized direction vectors only.
       * @param vector - the vector to transform
       * @param transformation - the transformation matrix to apply
       * @returns the new vector
       */
      static TransformNormal(vector, transformation) {
          const result = Vector4.Zero();
          Vector4.TransformNormalToRef(vector, transformation, result);
          return result;
      }
      /**
       * Sets the given vector "result" with the result of the normal transformation by the given matrix of the given vector.
       * This methods computes transformed normalized direction vectors only.
       * @param vector - the vector to transform
       * @param transformation - the transformation matrix to apply
       * @param result - the vector to store the result in
       */
      static TransformNormalToRef(vector, transformation, result) {
          const m = transformation.m;
          const x = vector.x * m[0] + vector.y * m[4] + vector.z * m[8];
          const y = vector.x * m[1] + vector.y * m[5] + vector.z * m[9];
          const z = vector.x * m[2] + vector.y * m[6] + vector.z * m[10];
          result.x = x;
          result.y = y;
          result.z = z;
          result.w = vector.w;
      }
      /**
       * Sets the given vector "result" with the result of the normal transformation by the given matrix of the given floats (x, y, z, w).
       * This methods computes transformed normalized direction vectors only.
       * @param x - value to transform
       * @param y - value to transform
       * @param z - value to transform
       * @param w - value to transform
       * @param transformation - the transformation matrix to apply
       * @param result - the vector to store the results in
       */
      static TransformNormalFromFloatsToRef(x, y, z, w, transformation, result) {
          const m = transformation.m;
          result.x = x * m[0] + y * m[4] + z * m[8];
          result.y = x * m[1] + y * m[5] + z * m[9];
          result.z = x * m[2] + y * m[6] + z * m[10];
          result.w = w;
      }
      /**
       * Returns the string with the Vector4 coordinates.
       * @returns a string containing all the vector values
       */
      toString() {
          return ('{X: ' + this.x + ' Y:' + this.y + ' Z:' + this.z + ' W:' + this.w + '}');
      }
      /**
       * Returns the string "Vector4".
       * @returns "Vector4"
       */
      getClassName() {
          return 'Vector4';
      }
      /**
       * Returns the Vector4 hash code.
       * @returns a unique hash code
       */
      getHashCode() {
          let hash = this.x || 0;
          hash = (hash * 397) ^ (this.y || 0);
          hash = (hash * 397) ^ (this.z || 0);
          hash = (hash * 397) ^ (this.w || 0);
          return hash;
      }
      // Operators
      /**
       * Returns a new array populated with 4 elements : the Vector4 coordinates.
       * @returns the resulting array
       */
      asArray() {
          const result = new Array();
          this.toArray(result, 0);
          return result;
      }
      /**
       * Populates the given array from the given index with the Vector4 coordinates.
       * @param array - array to populate
       * @param index - index of the array to start at (default: 0)
       * @returns the Vector4.
       */
      toArray(array, index = 0) {
          array[index] = this.x;
          array[index + 1] = this.y;
          array[index + 2] = this.z;
          array[index + 3] = this.w;
          return this;
      }
      /**
       * Adds the given vector to the current Vector4.
       * @param otherVector - the vector to add
       * @returns the updated Vector4.
       */
      addInPlace(otherVector) {
          this.x += otherVector.x;
          this.y += otherVector.y;
          this.z += otherVector.z;
          this.w += otherVector.w;
          return this;
      }
      /**
       * Returns a new Vector4 as the result of the addition of the current Vector4 and the given one.
       * @param otherVector - the vector to add
       * @returns the resulting vector
       */
      add(otherVector) {
          return new Vector4(this.x + otherVector.x, this.y + otherVector.y, this.z + otherVector.z, this.w + otherVector.w);
      }
      /**
       * Updates the given vector "result" with the result of the addition of the current Vector4 and the given one.
       * @param otherVector - the vector to add
       * @param result - the vector to store the result
       * @returns the current Vector4.
       */
      addToRef(otherVector, result) {
          result.x = this.x + otherVector.x;
          result.y = this.y + otherVector.y;
          result.z = this.z + otherVector.z;
          result.w = this.w + otherVector.w;
          return this;
      }
      /**
       * Subtract in place the given vector from the current Vector4.
       * @param otherVector - the vector to subtract
       * @returns the updated Vector4.
       */
      subtractInPlace(otherVector) {
          this.x -= otherVector.x;
          this.y -= otherVector.y;
          this.z -= otherVector.z;
          this.w -= otherVector.w;
          return this;
      }
      /**
       * Returns a new Vector4 with the result of the subtraction of the given vector from the current Vector4.
       * @param otherVector - the vector to add
       * @returns the new vector with the result
       */
      subtract(otherVector) {
          return new Vector4(this.x - otherVector.x, this.y - otherVector.y, this.z - otherVector.z, this.w - otherVector.w);
      }
      /**
       * Sets the given vector "result" with the result of the subtraction of the given vector from the current Vector4.
       * @param otherVector - the vector to subtract
       * @param result - the vector to store the result
       * @returns the current Vector4.
       */
      subtractToRef(otherVector, result) {
          result.x = this.x - otherVector.x;
          result.y = this.y - otherVector.y;
          result.z = this.z - otherVector.z;
          result.w = this.w - otherVector.w;
          return this;
      }
      /**
       * Returns a new Vector4 set with the result of the subtraction of the given floats from the current Vector4 coordinates.
       */
      /**
       * Returns a new Vector4 set with the result of the subtraction of the given floats from the current Vector4 coordinates.
       * @param x - value to subtract
       * @param y - value to subtract
       * @param z - value to subtract
       * @param w - value to subtract
       * @returns new vector containing the result
       */
      subtractFromFloats(x, y, z, w) {
          return new Vector4(this.x - x, this.y - y, this.z - z, this.w - w);
      }
      /**
       * Sets the given vector "result" set with the result of the subtraction of the given floats from the current Vector4 coordinates.
       * @param x - value to subtract
       * @param y - value to subtract
       * @param z - value to subtract
       * @param w - value to subtract
       * @param result - the vector to store the result in
       * @returns the current Vector4.
       */
      subtractFromFloatsToRef(x, y, z, w, result) {
          result.x = this.x - x;
          result.y = this.y - y;
          result.z = this.z - z;
          result.w = this.w - w;
          return this;
      }
      /**
       * Returns a new Vector4 set with the current Vector4 negated coordinates.
       * @returns a new vector with the negated values
       */
      negate() {
          return new Vector4(-this.x, -this.y, -this.z, -this.w);
      }
      /**
       * Multiplies the current Vector4 coordinates by scale (float).
       * @param scale - the number to scale with
       * @returns the updated Vector4.
       */
      scaleInPlace(scale) {
          this.x *= scale;
          this.y *= scale;
          this.z *= scale;
          this.w *= scale;
          return this;
      }
      /**
       * Returns a new Vector4 set with the current Vector4 coordinates multiplied by scale (float).
       * @param scale - the number to scale with
       * @returns a new vector with the result
       */
      scale(scale) {
          return new Vector4(this.x * scale, this.y * scale, this.z * scale, this.w * scale);
      }
      /**
       * Sets the given vector "result" with the current Vector4 coordinates multiplied by scale (float).
       * @param scale - the number to scale with
       * @param result - a vector to store the result in
       * @returns the current Vector4.
       */
      scaleToRef(scale, result) {
          result.x = this.x * scale;
          result.y = this.y * scale;
          result.z = this.z * scale;
          result.w = this.w * scale;
          return this;
      }
      /**
       * Scale the current Vector4 values by a factor and add the result to a given Vector4
       * @param scale - defines the scale factor
       * @param result - defines the Vector4 object where to store the result
       * @returns the unmodified current Vector4
       */
      scaleAndAddToRef(scale, result) {
          result.x += this.x * scale;
          result.y += this.y * scale;
          result.z += this.z * scale;
          result.w += this.w * scale;
          return this;
      }
      /**
       * Boolean : True if the current Vector4 coordinates are stricly equal to the given ones.
       * @param otherVector - the vector to compare against
       * @returns true if they are equal
       */
      equals(otherVector) {
          return (otherVector &&
              this.x === otherVector.x &&
              this.y === otherVector.y &&
              this.z === otherVector.z &&
              this.w === otherVector.w);
      }
      /**
       * Boolean : True if the current Vector4 coordinates are each beneath the distance "epsilon" from the given vector ones.
       * @param otherVector - vector to compare against
       * @param epsilon - (Default: very small number)
       * @returns true if they are equal
       */
      equalsWithEpsilon(otherVector, epsilon = types_1$8.Epsilon) {
          return (otherVector &&
              Scalar_1$6.Scalar.WithinEpsilon(this.x, otherVector.x, epsilon) &&
              Scalar_1$6.Scalar.WithinEpsilon(this.y, otherVector.y, epsilon) &&
              Scalar_1$6.Scalar.WithinEpsilon(this.z, otherVector.z, epsilon) &&
              Scalar_1$6.Scalar.WithinEpsilon(this.w, otherVector.w, epsilon));
      }
      /**
       * Boolean : True if the given floats are strictly equal to the current Vector4 coordinates.
       * @param x - x value to compare against
       * @param y - y value to compare against
       * @param z - z value to compare against
       * @param w - w value to compare against
       * @returns true if equal
       */
      equalsToFloats(x, y, z, w) {
          return this.x === x && this.y === y && this.z === z && this.w === w;
      }
      /**
       * Multiplies in place the current Vector4 by the given one.
       * @param otherVector - vector to multiple with
       * @returns the updated Vector4.
       */
      multiplyInPlace(otherVector) {
          this.x *= otherVector.x;
          this.y *= otherVector.y;
          this.z *= otherVector.z;
          this.w *= otherVector.w;
          return this;
      }
      /**
       * Returns a new Vector4 set with the multiplication result of the current Vector4 and the given one.
       * @param otherVector - vector to multiple with
       * @returns resulting new vector
       */
      multiply(otherVector) {
          return new Vector4(this.x * otherVector.x, this.y * otherVector.y, this.z * otherVector.z, this.w * otherVector.w);
      }
      /**
       * Updates the given vector "result" with the multiplication result of the current Vector4 and the given one.
       * @param otherVector - vector to multiple with
       * @param result - vector to store the result
       * @returns the current Vector4.
       */
      multiplyToRef(otherVector, result) {
          result.x = this.x * otherVector.x;
          result.y = this.y * otherVector.y;
          result.z = this.z * otherVector.z;
          result.w = this.w * otherVector.w;
          return this;
      }
      /**
       * Returns a new Vector4 set with the multiplication result of the given floats and the current Vector4 coordinates.
       * @param x - x value multiply with
       * @param y - y value multiply with
       * @param z - z value multiply with
       * @param w - w value multiply with
       * @returns resulting new vector
       */
      multiplyByFloats(x, y, z, w) {
          return new Vector4(this.x * x, this.y * y, this.z * z, this.w * w);
      }
      /**
       * Returns a new Vector4 set with the division result of the current Vector4 by the given one.
       * @param otherVector - vector to devide with
       * @returns resulting new vector
       */
      divide(otherVector) {
          return new Vector4(this.x / otherVector.x, this.y / otherVector.y, this.z / otherVector.z, this.w / otherVector.w);
      }
      /**
       * Updates the given vector "result" with the division result of the current Vector4 by the given one.
       * @param otherVector - vector to devide with
       * @param result - vector to store the result
       * @returns the current Vector4.
       */
      divideToRef(otherVector, result) {
          result.x = this.x / otherVector.x;
          result.y = this.y / otherVector.y;
          result.z = this.z / otherVector.z;
          result.w = this.w / otherVector.w;
          return this;
      }
      /**
       * Divides the current Vector3 coordinates by the given ones.
       * @param otherVector - vector to devide with
       * @returns the updated Vector3.
       */
      divideInPlace(otherVector) {
          return this.divideToRef(otherVector, this);
      }
      /**
       * Updates the Vector4 coordinates with the minimum values between its own and the given vector ones
       * @param other - defines the second operand
       * @returns the current updated Vector4
       */
      minimizeInPlace(other) {
          if (other.x < this.x) {
              this.x = other.x;
          }
          if (other.y < this.y) {
              this.y = other.y;
          }
          if (other.z < this.z) {
              this.z = other.z;
          }
          if (other.w < this.w) {
              this.w = other.w;
          }
          return this;
      }
      /**
       * Updates the Vector4 coordinates with the maximum values between its own and the given vector ones
       * @param other - defines the second operand
       * @returns the current updated Vector4
       */
      maximizeInPlace(other) {
          if (other.x > this.x) {
              this.x = other.x;
          }
          if (other.y > this.y) {
              this.y = other.y;
          }
          if (other.z > this.z) {
              this.z = other.z;
          }
          if (other.w > this.w) {
              this.w = other.w;
          }
          return this;
      }
      /**
       * Gets a new Vector4 from current Vector4 floored values
       * @returns a new Vector4
       */
      floor() {
          return new Vector4(Math.floor(this.x), Math.floor(this.y), Math.floor(this.z), Math.floor(this.w));
      }
      /**
       * Gets a new Vector4 from current Vector3 floored values
       * @returns a new Vector4
       */
      fract() {
          return new Vector4(this.x - Math.floor(this.x), this.y - Math.floor(this.y), this.z - Math.floor(this.z), this.w - Math.floor(this.w));
      }
      // Properties
      /**
       * Returns the Vector4 length (float).
       * @returns the length
       */
      length() {
          return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
      }
      /**
       * Returns the Vector4 squared length (float).
       * @returns the length squared
       */
      lengthSquared() {
          return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
      }
      // Methods
      /**
       * Normalizes in place the Vector4.
       * @returns the updated Vector4.
       */
      normalize() {
          const len = this.length();
          if (len === 0) {
              return this;
          }
          return this.scaleInPlace(1.0 / len);
      }
      /**
       * Returns a new Vector3 from the Vector4 (x, y, z) coordinates.
       * @returns this converted to a new vector3
       */
      toVector3() {
          return new Vector3_1$7.Vector3(this.x, this.y, this.z);
      }
      /**
       * Returns a new Vector4 copied from the current one.
       * @returns the new cloned vector
       */
      clone() {
          return new Vector4(this.x, this.y, this.z, this.w);
      }
      /**
       * Updates the current Vector4 with the given one coordinates.
       * @param source - the source vector to copy from
       * @returns the updated Vector4.
       */
      copyFrom(source) {
          this.x = source.x;
          this.y = source.y;
          this.z = source.z;
          this.w = source.w;
          return this;
      }
      /**
       * Updates the current Vector4 coordinates with the given floats.
       * @param x - float to copy from
       * @param y - float to copy from
       * @param z - float to copy from
       * @param w - float to copy from
       * @returns the updated Vector4.
       */
      copyFromFloats(x, y, z, w) {
          this.x = x;
          this.y = y;
          this.z = z;
          this.w = w;
          return this;
      }
      /**
       * Updates the current Vector4 coordinates with the given floats.
       * @param x - float to set from
       * @param y - float to set from
       * @param z - float to set from
       * @param w - float to set from
       * @returns the updated Vector4.
       */
      set(x, y, z, w) {
          return this.copyFromFloats(x, y, z, w);
      }
      /**
       * Copies the given float to the current Vector3 coordinates
       * @param v - defines the x, y, z and w coordinates of the operand
       * @returns the current updated Vector3
       */
      setAll(v) {
          this.x = this.y = this.z = this.w = v;
          return this;
      }
  }
  Vector4$1.Vector4 = Vector4;

  Object.defineProperty(Matrix$1, "__esModule", { value: true });
  Matrix$1.Matrix = void 0;
  const Vector3_1$6 = Vector3$1;
  const Quaternion_1$2 = Quaternion$1;
  const preallocatedVariables_1$3 = preallocatedVariables;
  const Vector4_1 = Vector4$1;
  /**
   * Class used to store matrix data (4x4)
   * @public
   */
  class Matrix {
      /**
       * Creates an empty matrix (filled with zeros)
       */
      constructor() {
          this._isIdentity = false;
          this._isIdentityDirty = true;
          this._isIdentity3x2 = true;
          this._isIdentity3x2Dirty = true;
          this._m = [
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
          ];
          this._updateIdentityStatus(false);
      }
      /**
       * Gets the internal data of the matrix
       */
      get m() {
          return this._m;
      }
      /**
       * Gets an identity matrix that must not be updated
       */
      static get IdentityReadOnly() {
          return Matrix._identityReadOnly;
      }
      // Statics
      /**
       * Creates a matrix from an array
       * @param array - defines the source array
       * @param offset - defines an offset in the source array
       * @returns a new Matrix set from the starting index of the given array
       */
      static FromArray(array, offset = 0) {
          const result = new Matrix();
          Matrix.FromArrayToRef(array, offset, result);
          return result;
      }
      /**
       * Copy the content of an array into a given matrix
       * @param array - defines the source array
       * @param offset - defines an offset in the source array
       * @param result - defines the target matrix
       */
      static FromArrayToRef(array, offset, result) {
          for (let index = 0; index < 16; index++) {
              result._m[index] = array[index + offset];
          }
          result._markAsUpdated();
      }
      /**
       * Stores an array into a matrix after having multiplied each component by a given factor
       * @param array - defines the source array
       * @param offset - defines the offset in the source array
       * @param scale - defines the scaling factor
       * @param result - defines the target matrix
       */
      static FromFloatArrayToRefScaled(array, offset, scale, result) {
          for (let index = 0; index < 16; index++) {
              result._m[index] = array[index + offset] * scale;
          }
          result._markAsUpdated();
      }
      /**
       * Stores a list of values (16) inside a given matrix
       * @param initialM11 - defines 1st value of 1st row
       * @param initialM12 - defines 2nd value of 1st row
       * @param initialM13 - defines 3rd value of 1st row
       * @param initialM14 - defines 4th value of 1st row
       * @param initialM21 - defines 1st value of 2nd row
       * @param initialM22 - defines 2nd value of 2nd row
       * @param initialM23 - defines 3rd value of 2nd row
       * @param initialM24 - defines 4th value of 2nd row
       * @param initialM31 - defines 1st value of 3rd row
       * @param initialM32 - defines 2nd value of 3rd row
       * @param initialM33 - defines 3rd value of 3rd row
       * @param initialM34 - defines 4th value of 3rd row
       * @param initialM41 - defines 1st value of 4th row
       * @param initialM42 - defines 2nd value of 4th row
       * @param initialM43 - defines 3rd value of 4th row
       * @param initialM44 - defines 4th value of 4th row
       * @param result - defines the target matrix
       */
      static FromValuesToRef(initialM11, initialM12, initialM13, initialM14, initialM21, initialM22, initialM23, initialM24, initialM31, initialM32, initialM33, initialM34, initialM41, initialM42, initialM43, initialM44, result) {
          const m = result._m;
          m[0] = initialM11;
          m[1] = initialM12;
          m[2] = initialM13;
          m[3] = initialM14;
          m[4] = initialM21;
          m[5] = initialM22;
          m[6] = initialM23;
          m[7] = initialM24;
          m[8] = initialM31;
          m[9] = initialM32;
          m[10] = initialM33;
          m[11] = initialM34;
          m[12] = initialM41;
          m[13] = initialM42;
          m[14] = initialM43;
          m[15] = initialM44;
          result._markAsUpdated();
      }
      /**
       * Creates new matrix from a list of values (16)
       * @param initialM11 - defines 1st value of 1st row
       * @param initialM12 - defines 2nd value of 1st row
       * @param initialM13 - defines 3rd value of 1st row
       * @param initialM14 - defines 4th value of 1st row
       * @param initialM21 - defines 1st value of 2nd row
       * @param initialM22 - defines 2nd value of 2nd row
       * @param initialM23 - defines 3rd value of 2nd row
       * @param initialM24 - defines 4th value of 2nd row
       * @param initialM31 - defines 1st value of 3rd row
       * @param initialM32 - defines 2nd value of 3rd row
       * @param initialM33 - defines 3rd value of 3rd row
       * @param initialM34 - defines 4th value of 3rd row
       * @param initialM41 - defines 1st value of 4th row
       * @param initialM42 - defines 2nd value of 4th row
       * @param initialM43 - defines 3rd value of 4th row
       * @param initialM44 - defines 4th value of 4th row
       * @returns the new matrix
       */
      static FromValues(initialM11, initialM12, initialM13, initialM14, initialM21, initialM22, initialM23, initialM24, initialM31, initialM32, initialM33, initialM34, initialM41, initialM42, initialM43, initialM44) {
          const result = new Matrix();
          const m = result._m;
          m[0] = initialM11;
          m[1] = initialM12;
          m[2] = initialM13;
          m[3] = initialM14;
          m[4] = initialM21;
          m[5] = initialM22;
          m[6] = initialM23;
          m[7] = initialM24;
          m[8] = initialM31;
          m[9] = initialM32;
          m[10] = initialM33;
          m[11] = initialM34;
          m[12] = initialM41;
          m[13] = initialM42;
          m[14] = initialM43;
          m[15] = initialM44;
          result._markAsUpdated();
          return result;
      }
      /**
       * Creates a new matrix composed by merging scale (vector3), rotation (quaternion) and translation (vector3)
       * @param scale - defines the scale vector3
       * @param rotation - defines the rotation quaternion
       * @param translation - defines the translation vector3
       * @returns a new matrix
       */
      static Compose(scale, rotation, translation) {
          const result = new Matrix();
          Matrix.ComposeToRef(scale, rotation, translation, result);
          return result;
      }
      /**
       * Sets a matrix to a value composed by merging scale (vector3), rotation (quaternion) and translation (vector3)
       * @param scale - defines the scale vector3
       * @param rotation - defines the rotation quaternion
       * @param translation - defines the translation vector3
       * @param result - defines the target matrix
       */
      static ComposeToRef(scale, rotation, translation, result) {
          Matrix.ScalingToRef(scale.x, scale.y, scale.z, preallocatedVariables_1$3.MathTmp.Matrix[1]);
          rotation.toRotationMatrix(preallocatedVariables_1$3.MathTmp.Matrix[0]);
          preallocatedVariables_1$3.MathTmp.Matrix[1].multiplyToRef(preallocatedVariables_1$3.MathTmp.Matrix[0], result);
          result.setTranslation(translation);
      }
      /**
       * Creates a new identity matrix
       * @returns a new identity matrix
       */
      static Identity() {
          const identity = Matrix.FromValues(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0);
          identity._updateIdentityStatus(true);
          return identity;
      }
      /**
       * Creates a new identity matrix and stores the result in a given matrix
       * @param result - defines the target matrix
       */
      static IdentityToRef(result) {
          Matrix.FromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, result);
          result._updateIdentityStatus(true);
      }
      /**
       * Creates a new zero matrix
       * @returns a new zero matrix
       */
      static Zero() {
          const zero = Matrix.FromValues(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
          zero._updateIdentityStatus(false);
          return zero;
      }
      /**
       * Creates a new rotation matrix for "angle" radians around the X axis
       * @param angle - defines the angle (in radians) to use
       * @returns the new matrix
       */
      static RotationX(angle) {
          const result = new Matrix();
          Matrix.RotationXToRef(angle, result);
          return result;
      }
      /**
       * Creates a new matrix as the invert of a given matrix
       * @param source - defines the source matrix
       * @returns the new matrix
       */
      static Invert(source) {
          const result = new Matrix();
          source.invertToRef(result);
          return result;
      }
      /**
       * Creates a new rotation matrix for "angle" radians around the X axis and stores it in a given matrix
       * @param angle - defines the angle (in radians) to use
       * @param result - defines the target matrix
       */
      static RotationXToRef(angle, result) {
          const s = Math.sin(angle);
          const c = Math.cos(angle);
          Matrix.FromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, c, s, 0.0, 0.0, -s, c, 0.0, 0.0, 0.0, 0.0, 1.0, result);
          result._updateIdentityStatus(c === 1 && s === 0);
      }
      /**
       * Creates a new rotation matrix for "angle" radians around the Y axis
       * @param angle - defines the angle (in radians) to use
       * @returns the new matrix
       */
      static RotationY(angle) {
          const result = new Matrix();
          Matrix.RotationYToRef(angle, result);
          return result;
      }
      /**
       * Creates a new rotation matrix for "angle" radians around the Y axis and stores it in a given matrix
       * @param angle - defines the angle (in radians) to use
       * @param result - defines the target matrix
       */
      static RotationYToRef(angle, result) {
          const s = Math.sin(angle);
          const c = Math.cos(angle);
          Matrix.FromValuesToRef(c, 0.0, -s, 0.0, 0.0, 1.0, 0.0, 0.0, s, 0.0, c, 0.0, 0.0, 0.0, 0.0, 1.0, result);
          result._updateIdentityStatus(c === 1 && s === 0);
      }
      /**
       * Creates a new rotation matrix for "angle" radians around the Z axis
       * @param angle - defines the angle (in radians) to use
       * @returns the new matrix
       */
      static RotationZ(angle) {
          const result = new Matrix();
          Matrix.RotationZToRef(angle, result);
          return result;
      }
      /**
       * Creates a new rotation matrix for "angle" radians around the Z axis and stores it in a given matrix
       * @param angle - defines the angle (in radians) to use
       * @param result - defines the target matrix
       */
      static RotationZToRef(angle, result) {
          const s = Math.sin(angle);
          const c = Math.cos(angle);
          Matrix.FromValuesToRef(c, s, 0.0, 0.0, -s, c, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, result);
          result._updateIdentityStatus(c === 1 && s === 0);
      }
      /**
       * Creates a new rotation matrix for "angle" radians around the given axis
       * @param axis - defines the axis to use
       * @param angle - defines the angle (in radians) to use
       * @returns the new matrix
       */
      static RotationAxis(axis, angle) {
          const result = new Matrix();
          Matrix.RotationAxisToRef(axis, angle, result);
          return result;
      }
      /**
       * Creates a new rotation matrix for "angle" radians around the given axis and stores it in a given matrix
       * @param axis - defines the axis to use
       * @param angle - defines the angle (in radians) to use
       * @param result - defines the target matrix
       */
      static RotationAxisToRef(axis, angle, result) {
          const s = Math.sin(-angle);
          const c = Math.cos(-angle);
          const c1 = 1 - c;
          axis.normalize();
          const m = result._m;
          m[0] = axis.x * axis.x * c1 + c;
          m[1] = axis.x * axis.y * c1 - axis.z * s;
          m[2] = axis.x * axis.z * c1 + axis.y * s;
          m[3] = 0.0;
          m[4] = axis.y * axis.x * c1 + axis.z * s;
          m[5] = axis.y * axis.y * c1 + c;
          m[6] = axis.y * axis.z * c1 - axis.x * s;
          m[7] = 0.0;
          m[8] = axis.z * axis.x * c1 - axis.y * s;
          m[9] = axis.z * axis.y * c1 + axis.x * s;
          m[10] = axis.z * axis.z * c1 + c;
          m[11] = 0.0;
          m[12] = 0.0;
          m[13] = 0.0;
          m[14] = 0.0;
          m[15] = 1.0;
          result._markAsUpdated();
      }
      /**
       * Creates a rotation matrix
       * @param yaw - defines the yaw angle in radians (Y axis)
       * @param pitch - defines the pitch angle in radians (X axis)
       * @param roll - defines the roll angle in radians (X axis)
       * @returns the new rotation matrix
       */
      static RotationYawPitchRoll(yaw, pitch, roll) {
          const result = new Matrix();
          Matrix.RotationYawPitchRollToRef(yaw, pitch, roll, result);
          return result;
      }
      /**
       * Creates a rotation matrix and stores it in a given matrix
       * @param yaw - defines the yaw angle in radians (Y axis)
       * @param pitch - defines the pitch angle in radians (X axis)
       * @param roll - defines the roll angle in radians (X axis)
       * @param result - defines the target matrix
       */
      static RotationYawPitchRollToRef(yaw, pitch, roll, result) {
          Quaternion_1$2.Quaternion.RotationYawPitchRollToRef(yaw, pitch, roll, preallocatedVariables_1$3.MathTmp.Quaternion[0]);
          preallocatedVariables_1$3.MathTmp.Quaternion[0].toRotationMatrix(result);
      }
      /**
       * Creates a scaling matrix
       * @param x - defines the scale factor on X axis
       * @param y - defines the scale factor on Y axis
       * @param z - defines the scale factor on Z axis
       * @returns the new matrix
       */
      static Scaling(x, y, z) {
          const result = new Matrix();
          Matrix.ScalingToRef(x, y, z, result);
          return result;
      }
      /**
       * Creates a scaling matrix and stores it in a given matrix
       * @param x - defines the scale factor on X axis
       * @param y - defines the scale factor on Y axis
       * @param z - defines the scale factor on Z axis
       * @param result - defines the target matrix
       */
      static ScalingToRef(x, y, z, result) {
          Matrix.FromValuesToRef(x, 0.0, 0.0, 0.0, 0.0, y, 0.0, 0.0, 0.0, 0.0, z, 0.0, 0.0, 0.0, 0.0, 1.0, result);
          result._updateIdentityStatus(x === 1 && y === 1 && z === 1);
      }
      /**
       * Creates a translation matrix
       * @param x - defines the translation on X axis
       * @param y - defines the translation on Y axis
       * @param z - defines the translationon Z axis
       * @returns the new matrix
       */
      static Translation(x, y, z) {
          const result = new Matrix();
          Matrix.TranslationToRef(x, y, z, result);
          return result;
      }
      /**
       * Creates a translation matrix and stores it in a given matrix
       * @param x - defines the translation on X axis
       * @param y - defines the translation on Y axis
       * @param z - defines the translationon Z axis
       * @param result - defines the target matrix
       */
      static TranslationToRef(x, y, z, result) {
          Matrix.FromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, x, y, z, 1.0, result);
          result._updateIdentityStatus(x === 0 && y === 0 && z === 0);
      }
      /**
       * Returns a new Matrix whose values are the interpolated values for "gradient" (float) between the ones of the matrices "startValue" and "endValue".
       * @param startValue - defines the start value
       * @param endValue - defines the end value
       * @param gradient - defines the gradient factor
       * @returns the new matrix
       */
      static Lerp(startValue, endValue, gradient) {
          const result = new Matrix();
          Matrix.LerpToRef(startValue, endValue, gradient, result);
          return result;
      }
      /**
       * Set the given matrix "result" as the interpolated values for "gradient" (float) between the ones of the matrices "startValue" and "endValue".
       * @param startValue - defines the start value
       * @param endValue - defines the end value
       * @param gradient - defines the gradient factor
       * @param result - defines the Matrix object where to store data
       */
      static LerpToRef(startValue, endValue, gradient, result) {
          for (let index = 0; index < 16; index++) {
              result._m[index] =
                  startValue._m[index] * (1.0 - gradient) + endValue._m[index] * gradient;
          }
          result._markAsUpdated();
      }
      /**
       * Builds a new matrix whose values are computed by:
       * * decomposing the the "startValue" and "endValue" matrices into their respective scale, rotation and translation matrices
       * * interpolating for "gradient" (float) the values between each of these decomposed matrices between the start and the end
       * * recomposing a new matrix from these 3 interpolated scale, rotation and translation matrices
       * @param startValue - defines the first matrix
       * @param endValue - defines the second matrix
       * @param gradient - defines the gradient between the two matrices
       * @returns the new matrix
       */
      static DecomposeLerp(startValue, endValue, gradient) {
          const result = new Matrix();
          Matrix.DecomposeLerpToRef(startValue, endValue, gradient, result);
          return result;
      }
      /**
       * Update a matrix to values which are computed by:
       * * decomposing the the "startValue" and "endValue" matrices into their respective scale, rotation and translation matrices
       * * interpolating for "gradient" (float) the values between each of these decomposed matrices between the start and the end
       * * recomposing a new matrix from these 3 interpolated scale, rotation and translation matrices
       * @param startValue - defines the first matrix
       * @param endValue - defines the second matrix
       * @param gradient - defines the gradient between the two matrices
       * @param result - defines the target matrix
       */
      static DecomposeLerpToRef(startValue, endValue, gradient, result) {
          const startScale = preallocatedVariables_1$3.MathTmp.Vector3[0];
          const startRotation = preallocatedVariables_1$3.MathTmp.Quaternion[0];
          const startTranslation = preallocatedVariables_1$3.MathTmp.Vector3[1];
          startValue.decompose(startScale, startRotation, startTranslation);
          const endScale = preallocatedVariables_1$3.MathTmp.Vector3[2];
          const endRotation = preallocatedVariables_1$3.MathTmp.Quaternion[1];
          const endTranslation = preallocatedVariables_1$3.MathTmp.Vector3[3];
          endValue.decompose(endScale, endRotation, endTranslation);
          const resultScale = preallocatedVariables_1$3.MathTmp.Vector3[4];
          Vector3_1$6.Vector3.LerpToRef(startScale, endScale, gradient, resultScale);
          const resultRotation = preallocatedVariables_1$3.MathTmp.Quaternion[2];
          Quaternion_1$2.Quaternion.SlerpToRef(startRotation, endRotation, gradient, resultRotation);
          const resultTranslation = preallocatedVariables_1$3.MathTmp.Vector3[5];
          Vector3_1$6.Vector3.LerpToRef(startTranslation, endTranslation, gradient, resultTranslation);
          Matrix.ComposeToRef(resultScale, resultRotation, resultTranslation, result);
      }
      /**
       * Gets a new rotation matrix used to rotate an entity so as it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like "up"
       * This function works in left handed mode
       * @param eye - defines the final position of the entity
       * @param target - defines where the entity should look at
       * @param up - defines the up vector for the entity
       * @returns the new matrix
       */
      static LookAtLH(eye, target, up) {
          const result = new Matrix();
          Matrix.LookAtLHToRef(eye, target, up, result);
          return result;
      }
      /**
       * Sets the given "result" Matrix to a rotation matrix used to rotate an entity so that it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like "up".
       * This function works in left handed mode
       * @param eye - defines the final position of the entity
       * @param target - defines where the entity should look at
       * @param up - defines the up vector for the entity
       * @param result - defines the target matrix
       */
      static LookAtLHToRef(eye, target, up, result) {
          const xAxis = preallocatedVariables_1$3.MathTmp.Vector3[0];
          const yAxis = preallocatedVariables_1$3.MathTmp.Vector3[1];
          const zAxis = preallocatedVariables_1$3.MathTmp.Vector3[2];
          // Z axis
          target.subtractToRef(eye, zAxis);
          zAxis.normalize();
          // X axis
          Vector3_1$6.Vector3.CrossToRef(up, zAxis, xAxis);
          const xSquareLength = xAxis.lengthSquared();
          if (xSquareLength === 0) {
              xAxis.x = 1.0;
          }
          else {
              xAxis.normalizeFromLength(Math.sqrt(xSquareLength));
          }
          // Y axis
          Vector3_1$6.Vector3.CrossToRef(zAxis, xAxis, yAxis);
          yAxis.normalize();
          // Eye angles
          const ex = -Vector3_1$6.Vector3.Dot(xAxis, eye);
          const ey = -Vector3_1$6.Vector3.Dot(yAxis, eye);
          const ez = -Vector3_1$6.Vector3.Dot(zAxis, eye);
          Matrix.FromValuesToRef(xAxis.x, yAxis.x, zAxis.x, 0.0, xAxis.y, yAxis.y, zAxis.y, 0.0, xAxis.z, yAxis.z, zAxis.z, 0.0, ex, ey, ez, 1.0, result);
      }
      /**
       * Gets a new rotation matrix used to rotate an entity so as it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like "up"
       * This function works in right handed mode
       * @param eye - defines the final position of the entity
       * @param target - defines where the entity should look at
       * @param up - defines the up vector for the entity
       * @returns the new matrix
       */
      static LookAtRH(eye, target, up) {
          const result = new Matrix();
          Matrix.LookAtRHToRef(eye, target, up, result);
          return result;
      }
      /**
       * Sets the given "result" Matrix to a rotation matrix used to rotate an entity so that it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like "up".
       * This function works in right handed mode
       * @param eye - defines the final position of the entity
       * @param target - defines where the entity should look at
       * @param up - defines the up vector for the entity
       * @param result - defines the target matrix
       */
      static LookAtRHToRef(eye, target, up, result) {
          const xAxis = preallocatedVariables_1$3.MathTmp.Vector3[0];
          const yAxis = preallocatedVariables_1$3.MathTmp.Vector3[1];
          const zAxis = preallocatedVariables_1$3.MathTmp.Vector3[2];
          // Z axis
          eye.subtractToRef(target, zAxis);
          zAxis.normalize();
          // X axis
          Vector3_1$6.Vector3.CrossToRef(up, zAxis, xAxis);
          const xSquareLength = xAxis.lengthSquared();
          if (xSquareLength === 0) {
              xAxis.x = 1.0;
          }
          else {
              xAxis.normalizeFromLength(Math.sqrt(xSquareLength));
          }
          // Y axis
          Vector3_1$6.Vector3.CrossToRef(zAxis, xAxis, yAxis);
          yAxis.normalize();
          // Eye angles
          const ex = -Vector3_1$6.Vector3.Dot(xAxis, eye);
          const ey = -Vector3_1$6.Vector3.Dot(yAxis, eye);
          const ez = -Vector3_1$6.Vector3.Dot(zAxis, eye);
          Matrix.FromValuesToRef(xAxis.x, yAxis.x, zAxis.x, 0.0, xAxis.y, yAxis.y, zAxis.y, 0.0, xAxis.z, yAxis.z, zAxis.z, 0.0, ex, ey, ez, 1.0, result);
      }
      /**
       * Create a left-handed orthographic projection matrix
       * @param width - defines the viewport width
       * @param height - defines the viewport height
       * @param znear - defines the near clip plane
       * @param zfar - defines the far clip plane
       * @returns a new matrix as a left-handed orthographic projection matrix
       */
      static OrthoLH(width, height, znear, zfar) {
          const matrix = new Matrix();
          Matrix.OrthoLHToRef(width, height, znear, zfar, matrix);
          return matrix;
      }
      /**
       * Store a left-handed orthographic projection to a given matrix
       * @param width - defines the viewport width
       * @param height - defines the viewport height
       * @param znear - defines the near clip plane
       * @param zfar - defines the far clip plane
       * @param result - defines the target matrix
       */
      static OrthoLHToRef(width, height, znear, zfar, result) {
          const n = znear;
          const f = zfar;
          const a = 2.0 / width;
          const b = 2.0 / height;
          const c = 2.0 / (f - n);
          const d = -(f + n) / (f - n);
          Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, 0.0, 0.0, 0.0, d, 1.0, result);
          result._updateIdentityStatus(a === 1 && b === 1 && c === 1 && d === 0);
      }
      /**
       * Create a left-handed orthographic projection matrix
       * @param left - defines the viewport left coordinate
       * @param right - defines the viewport right coordinate
       * @param bottom - defines the viewport bottom coordinate
       * @param top - defines the viewport top coordinate
       * @param znear - defines the near clip plane
       * @param zfar - defines the far clip plane
       * @returns a new matrix as a left-handed orthographic projection matrix
       */
      static OrthoOffCenterLH(left, right, bottom, top, znear, zfar) {
          const matrix = new Matrix();
          Matrix.OrthoOffCenterLHToRef(left, right, bottom, top, znear, zfar, matrix);
          return matrix;
      }
      /**
       * Stores a left-handed orthographic projection into a given matrix
       * @param left - defines the viewport left coordinate
       * @param right - defines the viewport right coordinate
       * @param bottom - defines the viewport bottom coordinate
       * @param top - defines the viewport top coordinate
       * @param znear - defines the near clip plane
       * @param zfar - defines the far clip plane
       * @param result - defines the target matrix
       */
      static OrthoOffCenterLHToRef(left, right, bottom, top, znear, zfar, result) {
          const n = znear;
          const f = zfar;
          const a = 2.0 / (right - left);
          const b = 2.0 / (top - bottom);
          const c = 2.0 / (f - n);
          const d = -(f + n) / (f - n);
          const i0 = (left + right) / (left - right);
          const i1 = (top + bottom) / (bottom - top);
          Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, 0.0, i0, i1, d, 1.0, result);
          result._markAsUpdated();
      }
      /**
       * Creates a right-handed orthographic projection matrix
       * @param left - defines the viewport left coordinate
       * @param right - defines the viewport right coordinate
       * @param bottom - defines the viewport bottom coordinate
       * @param top - defines the viewport top coordinate
       * @param znear - defines the near clip plane
       * @param zfar - defines the far clip plane
       * @returns a new matrix as a right-handed orthographic projection matrix
       */
      static OrthoOffCenterRH(left, right, bottom, top, znear, zfar) {
          const matrix = new Matrix();
          Matrix.OrthoOffCenterRHToRef(left, right, bottom, top, znear, zfar, matrix);
          return matrix;
      }
      /**
       * Stores a right-handed orthographic projection into a given matrix
       * @param left - defines the viewport left coordinate
       * @param right - defines the viewport right coordinate
       * @param bottom - defines the viewport bottom coordinate
       * @param top - defines the viewport top coordinate
       * @param znear - defines the near clip plane
       * @param zfar - defines the far clip plane
       * @param result - defines the target matrix
       */
      static OrthoOffCenterRHToRef(left, right, bottom, top, znear, zfar, result) {
          Matrix.OrthoOffCenterLHToRef(left, right, bottom, top, znear, zfar, result);
          result._m[10] *= -1; // No need to call _markAsUpdated as previous function already called it and let _isIdentityDirty to true
      }
      /**
       * Creates a left-handed perspective projection matrix
       * @param width - defines the viewport width
       * @param height - defines the viewport height
       * @param znear - defines the near clip plane
       * @param zfar - defines the far clip plane
       * @returns a new matrix as a left-handed perspective projection matrix
       */
      static PerspectiveLH(width, height, znear, zfar) {
          const matrix = new Matrix();
          const n = znear;
          const f = zfar;
          const a = (2.0 * n) / width;
          const b = (2.0 * n) / height;
          const c = (f + n) / (f - n);
          const d = (-2.0 * f * n) / (f - n);
          Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, 1.0, 0.0, 0.0, d, 0.0, matrix);
          matrix._updateIdentityStatus(false);
          return matrix;
      }
      /**
       * Creates a left-handed perspective projection matrix
       * @param fov - defines the horizontal field of view
       * @param aspect - defines the aspect ratio
       * @param znear - defines the near clip plane
       * @param zfar - defines the far clip plane
       * @returns a new matrix as a left-handed perspective projection matrix
       */
      static PerspectiveFovLH(fov, aspect, znear, zfar) {
          const matrix = new Matrix();
          Matrix.PerspectiveFovLHToRef(fov, aspect, znear, zfar, matrix);
          return matrix;
      }
      /**
       * Stores a left-handed perspective projection into a given matrix
       * @param fov - defines the horizontal field of view
       * @param aspect - defines the aspect ratio
       * @param znear - defines the near clip plane
       * @param zfar - defines the far clip plane
       * @param result - defines the target matrix
       * @param isVerticalFovFixed - defines it the fov is vertically fixed (default) or horizontally
       */
      static PerspectiveFovLHToRef(fov, aspect, znear, zfar, result, isVerticalFovFixed = true) {
          const n = znear;
          const f = zfar;
          const t = 1.0 / Math.tan(fov * 0.5);
          const a = isVerticalFovFixed ? t / aspect : t;
          const b = isVerticalFovFixed ? t : t * aspect;
          const c = (f + n) / (f - n);
          const d = (-2.0 * f * n) / (f - n);
          Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, 1.0, 0.0, 0.0, d, 0.0, result);
          result._updateIdentityStatus(false);
      }
      /**
       * Creates a right-handed perspective projection matrix
       * @param fov - defines the horizontal field of view
       * @param aspect - defines the aspect ratio
       * @param znear - defines the near clip plane
       * @param zfar - defines the far clip plane
       * @returns a new matrix as a right-handed perspective projection matrix
       */
      static PerspectiveFovRH(fov, aspect, znear, zfar) {
          const matrix = new Matrix();
          Matrix.PerspectiveFovRHToRef(fov, aspect, znear, zfar, matrix);
          return matrix;
      }
      /**
       * Stores a right-handed perspective projection into a given matrix
       * @param fov - defines the horizontal field of view
       * @param aspect - defines the aspect ratio
       * @param znear - defines the near clip plane
       * @param zfar - defines the far clip plane
       * @param result - defines the target matrix
       * @param isVerticalFovFixed - defines it the fov is vertically fixed (default) or horizontally
       */
      static PerspectiveFovRHToRef(fov, aspect, znear, zfar, result, isVerticalFovFixed = true) {
          /* alternatively this could be expressed as:
          //    m = PerspectiveFovLHToRef
          //    m[10] *= -1.0;
          //    m[11] *= -1.0;
          */
          const n = znear;
          const f = zfar;
          const t = 1.0 / Math.tan(fov * 0.5);
          const a = isVerticalFovFixed ? t / aspect : t;
          const b = isVerticalFovFixed ? t : t * aspect;
          const c = -(f + n) / (f - n);
          const d = (-2 * f * n) / (f - n);
          Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, -1.0, 0.0, 0.0, d, 0.0, result);
          result._updateIdentityStatus(false);
      }
      /**
       * Stores a perspective projection for WebVR info a given matrix
       * @param fov - defines the field of view
       * @param znear - defines the near clip plane
       * @param zfar - defines the far clip plane
       * @param result - defines the target matrix
       * @param rightHanded - defines if the matrix must be in right-handed mode (false by default)
       */
      static PerspectiveFovWebVRToRef(fov, znear, zfar, result, rightHanded = false) {
          const rightHandedFactor = rightHanded ? -1 : 1;
          const upTan = Math.tan((fov.upDegrees * Math.PI) / 180.0);
          const downTan = Math.tan((fov.downDegrees * Math.PI) / 180.0);
          const leftTan = Math.tan((fov.leftDegrees * Math.PI) / 180.0);
          const rightTan = Math.tan((fov.rightDegrees * Math.PI) / 180.0);
          const xScale = 2.0 / (leftTan + rightTan);
          const yScale = 2.0 / (upTan + downTan);
          const m = result._m;
          m[0] = xScale;
          m[1] = m[2] = m[3] = m[4] = 0.0;
          m[5] = yScale;
          m[6] = m[7] = 0.0;
          m[8] = (leftTan - rightTan) * xScale * 0.5;
          m[9] = -((upTan - downTan) * yScale * 0.5);
          m[10] = -zfar / (znear - zfar);
          m[11] = 1.0 * rightHandedFactor;
          m[12] = m[13] = m[15] = 0.0;
          m[14] = -(2.0 * zfar * znear) / (zfar - znear);
          result._markAsUpdated();
      }
      /**
       * Extracts a 2x2 matrix from a given matrix and store the result in a FloatArray
       * @param matrix - defines the matrix to use
       * @returns a new FloatArray array with 4 elements : the 2x2 matrix extracted from the given matrix
       */
      static GetAsMatrix2x2(matrix) {
          return [matrix._m[0], matrix._m[1], matrix._m[4], matrix._m[5]];
      }
      /**
       * Extracts a 3x3 matrix from a given matrix and store the result in a FloatArray
       * @param matrix - defines the matrix to use
       * @returns a new FloatArray array with 9 elements : the 3x3 matrix extracted from the given matrix
       */
      static GetAsMatrix3x3(matrix) {
          return [
              matrix._m[0],
              matrix._m[1],
              matrix._m[2],
              matrix._m[4],
              matrix._m[5],
              matrix._m[6],
              matrix._m[8],
              matrix._m[9],
              matrix._m[10]
          ];
      }
      /**
       * Compute the transpose of a given matrix
       * @param matrix - defines the matrix to transpose
       * @returns the new matrix
       */
      static Transpose(matrix) {
          const result = new Matrix();
          Matrix.TransposeToRef(matrix, result);
          return result;
      }
      /**
       * Compute the transpose of a matrix and store it in a target matrix
       * @param matrix - defines the matrix to transpose
       * @param result - defines the target matrix
       */
      static TransposeToRef(matrix, result) {
          const rm = result._m;
          const mm = matrix._m;
          rm[0] = mm[0];
          rm[1] = mm[4];
          rm[2] = mm[8];
          rm[3] = mm[12];
          rm[4] = mm[1];
          rm[5] = mm[5];
          rm[6] = mm[9];
          rm[7] = mm[13];
          rm[8] = mm[2];
          rm[9] = mm[6];
          rm[10] = mm[10];
          rm[11] = mm[14];
          rm[12] = mm[3];
          rm[13] = mm[7];
          rm[14] = mm[11];
          rm[15] = mm[15];
          // identity-ness does not change when transposing
          result._updateIdentityStatus(matrix._isIdentity, matrix._isIdentityDirty);
      }
      /**
       * Computes a reflection matrix from a plane
       * @param plane - defines the reflection plane
       * @returns a new matrix
       */
      static Reflection(plane) {
          const matrix = new Matrix();
          Matrix.ReflectionToRef(plane, matrix);
          return matrix;
      }
      /**
       * Computes a reflection matrix from a plane
       * @param plane - defines the reflection plane
       * @param result - defines the target matrix
       */
      static ReflectionToRef(plane, result) {
          plane.normalize();
          const x = plane.normal.x;
          const y = plane.normal.y;
          const z = plane.normal.z;
          const temp = -2 * x;
          const temp2 = -2 * y;
          const temp3 = -2 * z;
          Matrix.FromValuesToRef(temp * x + 1, temp2 * x, temp3 * x, 0.0, temp * y, temp2 * y + 1, temp3 * y, 0.0, temp * z, temp2 * z, temp3 * z + 1, 0.0, temp * plane.d, temp2 * plane.d, temp3 * plane.d, 1.0, result);
      }
      /**
       * Sets the given matrix as a rotation matrix composed from the 3 left handed axes
       * @param xaxis - defines the value of the 1st axis
       * @param yaxis - defines the value of the 2nd axis
       * @param zaxis - defines the value of the 3rd axis
       * @param result - defines the target matrix
       */
      static FromXYZAxesToRef(xaxis, yaxis, zaxis, result) {
          Matrix.FromValuesToRef(xaxis.x, xaxis.y, xaxis.z, 0.0, yaxis.x, yaxis.y, yaxis.z, 0.0, zaxis.x, zaxis.y, zaxis.z, 0.0, 0.0, 0.0, 0.0, 1.0, result);
      }
      /**
       * Creates a rotation matrix from a quaternion and stores it in a target matrix
       * @param quat - defines the quaternion to use
       * @param result - defines the target matrix
       */
      static FromQuaternionToRef(quat, result) {
          const xx = quat.x * quat.x;
          const yy = quat.y * quat.y;
          const zz = quat.z * quat.z;
          const xy = quat.x * quat.y;
          const zw = quat.z * quat.w;
          const zx = quat.z * quat.x;
          const yw = quat.y * quat.w;
          const yz = quat.y * quat.z;
          const xw = quat.x * quat.w;
          result._m[0] = 1.0 - 2.0 * (yy + zz);
          result._m[1] = 2.0 * (xy + zw);
          result._m[2] = 2.0 * (zx - yw);
          result._m[3] = 0.0;
          result._m[4] = 2.0 * (xy - zw);
          result._m[5] = 1.0 - 2.0 * (zz + xx);
          result._m[6] = 2.0 * (yz + xw);
          result._m[7] = 0.0;
          result._m[8] = 2.0 * (zx + yw);
          result._m[9] = 2.0 * (yz - xw);
          result._m[10] = 1.0 - 2.0 * (yy + xx);
          result._m[11] = 0.0;
          result._m[12] = 0.0;
          result._m[13] = 0.0;
          result._m[14] = 0.0;
          result._m[15] = 1.0;
          result._markAsUpdated();
      }
      /** @internal */
      _markAsUpdated() {
          this.updateFlag = Matrix._updateFlagSeed++;
          this._isIdentity = false;
          this._isIdentity3x2 = false;
          this._isIdentityDirty = true;
          this._isIdentity3x2Dirty = true;
      }
      // Properties
      /**
       * Check if the current matrix is identity
       * @returns true is the matrix is the identity matrix
       */
      isIdentity() {
          if (this._isIdentityDirty) {
              this._isIdentityDirty = false;
              const m = this._m;
              this._isIdentity =
                  m[0] === 1.0 &&
                      m[1] === 0.0 &&
                      m[2] === 0.0 &&
                      m[3] === 0.0 &&
                      m[4] === 0.0 &&
                      m[5] === 1.0 &&
                      m[6] === 0.0 &&
                      m[7] === 0.0 &&
                      m[8] === 0.0 &&
                      m[9] === 0.0 &&
                      m[10] === 1.0 &&
                      m[11] === 0.0 &&
                      m[12] === 0.0 &&
                      m[13] === 0.0 &&
                      m[14] === 0.0 &&
                      m[15] === 1.0;
          }
          return this._isIdentity;
      }
      /**
       * Check if the current matrix is identity as a texture matrix (3x2 store in 4x4)
       * @returns true is the matrix is the identity matrix
       */
      isIdentityAs3x2() {
          if (this._isIdentity3x2Dirty) {
              this._isIdentity3x2Dirty = false;
              if (this._m[0] !== 1.0 || this._m[5] !== 1.0 || this._m[15] !== 1.0) {
                  this._isIdentity3x2 = false;
              }
              else if (this._m[1] !== 0.0 ||
                  this._m[2] !== 0.0 ||
                  this._m[3] !== 0.0 ||
                  this._m[4] !== 0.0 ||
                  this._m[6] !== 0.0 ||
                  this._m[7] !== 0.0 ||
                  this._m[8] !== 0.0 ||
                  this._m[9] !== 0.0 ||
                  this._m[10] !== 0.0 ||
                  this._m[11] !== 0.0 ||
                  this._m[12] !== 0.0 ||
                  this._m[13] !== 0.0 ||
                  this._m[14] !== 0.0) {
                  this._isIdentity3x2 = false;
              }
              else {
                  this._isIdentity3x2 = true;
              }
          }
          return this._isIdentity3x2;
      }
      /**
       * Gets the determinant of the matrix
       * @returns the matrix determinant
       */
      determinant() {
          if (this._isIdentity === true) {
              return 1;
          }
          const m = this._m;
          // tslint:disable-next-line:one-variable-per-declaration
          const m00 = m[0], m01 = m[1], m02 = m[2], m03 = m[3];
          // tslint:disable-next-line:one-variable-per-declaration
          const m10 = m[4], m11 = m[5], m12 = m[6], m13 = m[7];
          // tslint:disable-next-line:one-variable-per-declaration
          const m20 = m[8], m21 = m[9], m22 = m[10], m23 = m[11];
          // tslint:disable-next-line:one-variable-per-declaration
          const m30 = m[12], m31 = m[13], m32 = m[14], m33 = m[15];
          /*
          // https://en.wikipedia.org/wiki/Laplace_expansion
          // to compute the deterrminant of a 4x4 Matrix we compute the cofactors of any row or column,
          // then we multiply each Cofactor by its corresponding matrix value and sum them all to get the determinant
          // Cofactor(i, j) = sign(i,j) * det(Minor(i, j))
          // where
          //  - sign(i,j) = (i+j) % 2 === 0 ? 1 : -1
          //  - Minor(i, j) is the 3x3 matrix we get by removing row i and column j from current Matrix
          //
          // Here we do that for the 1st row.
          */
          // tslint:disable:variable-name
          const det_22_33 = m22 * m33 - m32 * m23;
          const det_21_33 = m21 * m33 - m31 * m23;
          const det_21_32 = m21 * m32 - m31 * m22;
          const det_20_33 = m20 * m33 - m30 * m23;
          const det_20_32 = m20 * m32 - m22 * m30;
          const det_20_31 = m20 * m31 - m30 * m21;
          const cofact_00 = +(m11 * det_22_33 - m12 * det_21_33 + m13 * det_21_32);
          const cofact_01 = -(m10 * det_22_33 - m12 * det_20_33 + m13 * det_20_32);
          const cofact_02 = +(m10 * det_21_33 - m11 * det_20_33 + m13 * det_20_31);
          const cofact_03 = -(m10 * det_21_32 - m11 * det_20_32 + m12 * det_20_31);
          // tslint:enable:variable-name
          return m00 * cofact_00 + m01 * cofact_01 + m02 * cofact_02 + m03 * cofact_03;
      }
      // Methods
      /**
       * Returns the matrix as a FloatArray
       * @returns the matrix underlying array
       */
      toArray() {
          return this._m;
      }
      /**
       * Returns the matrix as a FloatArray
       * @returns the matrix underlying array.
       */
      asArray() {
          return this._m;
      }
      /**
       * Inverts the current matrix in place
       * @returns the current inverted matrix
       */
      invert() {
          this.invertToRef(this);
          return this;
      }
      /**
       * Sets all the matrix elements to zero
       * @returns the current matrix
       */
      reset() {
          Matrix.FromValuesToRef(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, this);
          this._updateIdentityStatus(false);
          return this;
      }
      /**
       * Adds the current matrix with a second one
       * @param other - defines the matrix to add
       * @returns a new matrix as the addition of the current matrix and the given one
       */
      add(other) {
          const result = new Matrix();
          this.addToRef(other, result);
          return result;
      }
      /**
       * Sets the given matrix "result" to the addition of the current matrix and the given one
       * @param other - defines the matrix to add
       * @param result - defines the target matrix
       * @returns the current matrix
       */
      addToRef(other, result) {
          for (let index = 0; index < 16; index++) {
              result._m[index] = this._m[index] + other._m[index];
          }
          result._markAsUpdated();
          return this;
      }
      /**
       * Adds in place the given matrix to the current matrix
       * @param other - defines the second operand
       * @returns the current updated matrix
       */
      addToSelf(other) {
          for (let index = 0; index < 16; index++) {
              this._m[index] += other._m[index];
          }
          this._markAsUpdated();
          return this;
      }
      /**
       * Sets the given matrix to the current inverted Matrix
       * @param other - defines the target matrix
       * @returns the unmodified current matrix
       */
      invertToRef(other) {
          if (this._isIdentity === true) {
              Matrix.IdentityToRef(other);
              return this;
          }
          // the inverse of a Matrix is the transpose of cofactor matrix divided by the determinant
          const m = this._m;
          // tslint:disable:one-variable-per-declaration
          const m00 = m[0], m01 = m[1], m02 = m[2], m03 = m[3];
          const m10 = m[4], m11 = m[5], m12 = m[6], m13 = m[7];
          const m20 = m[8], m21 = m[9], m22 = m[10], m23 = m[11];
          const m30 = m[12], m31 = m[13], m32 = m[14], m33 = m[15];
          // tslint:enable:one-variable-per-declaration
          // tslint:disable:variable-name
          const det_22_33 = m22 * m33 - m32 * m23;
          const det_21_33 = m21 * m33 - m31 * m23;
          const det_21_32 = m21 * m32 - m31 * m22;
          const det_20_33 = m20 * m33 - m30 * m23;
          const det_20_32 = m20 * m32 - m22 * m30;
          const det_20_31 = m20 * m31 - m30 * m21;
          const cofact_00 = +(m11 * det_22_33 - m12 * det_21_33 + m13 * det_21_32);
          const cofact_01 = -(m10 * det_22_33 - m12 * det_20_33 + m13 * det_20_32);
          const cofact_02 = +(m10 * det_21_33 - m11 * det_20_33 + m13 * det_20_31);
          const cofact_03 = -(m10 * det_21_32 - m11 * det_20_32 + m12 * det_20_31);
          const det = m00 * cofact_00 + m01 * cofact_01 + m02 * cofact_02 + m03 * cofact_03;
          if (det === 0) {
              // not invertible
              other.copyFrom(this);
              return this;
          }
          const detInv = 1 / det;
          const det_12_33 = m12 * m33 - m32 * m13;
          const det_11_33 = m11 * m33 - m31 * m13;
          const det_11_32 = m11 * m32 - m31 * m12;
          const det_10_33 = m10 * m33 - m30 * m13;
          const det_10_32 = m10 * m32 - m30 * m12;
          const det_10_31 = m10 * m31 - m30 * m11;
          const det_12_23 = m12 * m23 - m22 * m13;
          const det_11_23 = m11 * m23 - m21 * m13;
          const det_11_22 = m11 * m22 - m21 * m12;
          const det_10_23 = m10 * m23 - m20 * m13;
          const det_10_22 = m10 * m22 - m20 * m12;
          const det_10_21 = m10 * m21 - m20 * m11;
          const cofact_10 = -(m01 * det_22_33 - m02 * det_21_33 + m03 * det_21_32);
          const cofact_11 = +(m00 * det_22_33 - m02 * det_20_33 + m03 * det_20_32);
          const cofact_12 = -(m00 * det_21_33 - m01 * det_20_33 + m03 * det_20_31);
          const cofact_13 = +(m00 * det_21_32 - m01 * det_20_32 + m02 * det_20_31);
          const cofact_20 = +(m01 * det_12_33 - m02 * det_11_33 + m03 * det_11_32);
          const cofact_21 = -(m00 * det_12_33 - m02 * det_10_33 + m03 * det_10_32);
          const cofact_22 = +(m00 * det_11_33 - m01 * det_10_33 + m03 * det_10_31);
          const cofact_23 = -(m00 * det_11_32 - m01 * det_10_32 + m02 * det_10_31);
          const cofact_30 = -(m01 * det_12_23 - m02 * det_11_23 + m03 * det_11_22);
          const cofact_31 = +(m00 * det_12_23 - m02 * det_10_23 + m03 * det_10_22);
          const cofact_32 = -(m00 * det_11_23 - m01 * det_10_23 + m03 * det_10_21);
          const cofact_33 = +(m00 * det_11_22 - m01 * det_10_22 + m02 * det_10_21);
          Matrix.FromValuesToRef(cofact_00 * detInv, cofact_10 * detInv, cofact_20 * detInv, cofact_30 * detInv, cofact_01 * detInv, cofact_11 * detInv, cofact_21 * detInv, cofact_31 * detInv, cofact_02 * detInv, cofact_12 * detInv, cofact_22 * detInv, cofact_32 * detInv, cofact_03 * detInv, cofact_13 * detInv, cofact_23 * detInv, cofact_33 * detInv, other);
          // tslint:enable:variable-name
          return this;
      }
      /**
       * add a value at the specified position in the current Matrix
       * @param index - the index of the value within the matrix. between 0 and 15.
       * @param value - the value to be added
       * @returns the current updated matrix
       */
      addAtIndex(index, value) {
          this._m[index] += value;
          this._markAsUpdated();
          return this;
      }
      /**
       * mutiply the specified position in the current Matrix by a value
       * @param index - the index of the value within the matrix. between 0 and 15.
       * @param value - the value to be added
       * @returns the current updated matrix
       */
      multiplyAtIndex(index, value) {
          this._m[index] *= value;
          this._markAsUpdated();
          return this;
      }
      /**
       * Inserts the translation vector (using 3 floats) in the current matrix
       * @param x - defines the 1st component of the translation
       * @param y - defines the 2nd component of the translation
       * @param z - defines the 3rd component of the translation
       * @returns the current updated matrix
       */
      setTranslationFromFloats(x, y, z) {
          this._m[12] = x;
          this._m[13] = y;
          this._m[14] = z;
          this._markAsUpdated();
          return this;
      }
      /**
       * Inserts the translation vector in the current matrix
       * @param vector3 - defines the translation to insert
       * @returns the current updated matrix
       */
      setTranslation(vector3) {
          return this.setTranslationFromFloats(vector3.x, vector3.y, vector3.z);
      }
      /**
       * Gets the translation value of the current matrix
       * @returns a new Vector3 as the extracted translation from the matrix
       */
      getTranslation() {
          return new Vector3_1$6.Vector3(this._m[12], this._m[13], this._m[14]);
      }
      /**
       * Fill a Vector3 with the extracted translation from the matrix
       * @param result - defines the Vector3 where to store the translation
       * @returns the current matrix
       */
      getTranslationToRef(result) {
          result.x = this._m[12];
          result.y = this._m[13];
          result.z = this._m[14];
          return this;
      }
      /**
       * Remove rotation and scaling part from the matrix
       * @returns the updated matrix
       */
      removeRotationAndScaling() {
          const m = this.m;
          Matrix.FromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, m[12], m[13], m[14], m[15], this);
          this._updateIdentityStatus(m[12] === 0 && m[13] === 0 && m[14] === 0 && m[15] === 1);
          return this;
      }
      /**
       * Multiply two matrices
       * @param other - defines the second operand
       * @returns a new matrix set with the multiplication result of the current Matrix and the given one
       */
      multiply(other) {
          const result = new Matrix();
          this.multiplyToRef(other, result);
          return result;
      }
      /**
       * Copy the current matrix from the given one
       * @param other - defines the source matrix
       * @returns the current updated matrix
       */
      copyFrom(other) {
          other.copyToArray(this._m);
          const o = other;
          this._updateIdentityStatus(o._isIdentity, o._isIdentityDirty, o._isIdentity3x2, o._isIdentity3x2Dirty);
          return this;
      }
      /**
       * Populates the given array from the starting index with the current matrix values
       * @param array - defines the target array
       * @param offset - defines the offset in the target array where to start storing values
       * @returns the current matrix
       */
      copyToArray(array, offset = 0) {
          for (let index = 0; index < 16; index++) {
              array[offset + index] = this._m[index];
          }
          return this;
      }
      /**
       * Sets the given matrix "result" with the multiplication result of the current Matrix and the given one
       * @param other - defines the second operand
       * @param result - defines the matrix where to store the multiplication
       * @returns the current matrix
       */
      multiplyToRef(other, result) {
          if (this._isIdentity) {
              result.copyFrom(other);
              return this;
          }
          if (other._isIdentity) {
              result.copyFrom(this);
              return this;
          }
          this.multiplyToArray(other, result._m, 0);
          result._markAsUpdated();
          return this;
      }
      /**
       * Sets the FloatArray "result" from the given index "offset" with the multiplication of the current matrix and the given one
       * @param other - defines the second operand
       * @param result - defines the array where to store the multiplication
       * @param offset - defines the offset in the target array where to start storing values
       * @returns the current matrix
       */
      multiplyToArray(other, result, offset) {
          const m = this._m;
          const otherM = other.m;
          // tslint:disable:one-variable-per-declaration
          const tm0 = m[0], tm1 = m[1], tm2 = m[2], tm3 = m[3];
          const tm4 = m[4], tm5 = m[5], tm6 = m[6], tm7 = m[7];
          const tm8 = m[8], tm9 = m[9], tm10 = m[10], tm11 = m[11];
          const tm12 = m[12], tm13 = m[13], tm14 = m[14], tm15 = m[15];
          const om0 = otherM[0], om1 = otherM[1], om2 = otherM[2], om3 = otherM[3];
          const om4 = otherM[4], om5 = otherM[5], om6 = otherM[6], om7 = otherM[7];
          const om8 = otherM[8], om9 = otherM[9], om10 = otherM[10], om11 = otherM[11];
          const om12 = otherM[12], om13 = otherM[13], om14 = otherM[14], om15 = otherM[15];
          // tslint:enable:one-variable-per-declaration
          result[offset] = tm0 * om0 + tm1 * om4 + tm2 * om8 + tm3 * om12;
          result[offset + 1] = tm0 * om1 + tm1 * om5 + tm2 * om9 + tm3 * om13;
          result[offset + 2] = tm0 * om2 + tm1 * om6 + tm2 * om10 + tm3 * om14;
          result[offset + 3] = tm0 * om3 + tm1 * om7 + tm2 * om11 + tm3 * om15;
          result[offset + 4] = tm4 * om0 + tm5 * om4 + tm6 * om8 + tm7 * om12;
          result[offset + 5] = tm4 * om1 + tm5 * om5 + tm6 * om9 + tm7 * om13;
          result[offset + 6] = tm4 * om2 + tm5 * om6 + tm6 * om10 + tm7 * om14;
          result[offset + 7] = tm4 * om3 + tm5 * om7 + tm6 * om11 + tm7 * om15;
          result[offset + 8] = tm8 * om0 + tm9 * om4 + tm10 * om8 + tm11 * om12;
          result[offset + 9] = tm8 * om1 + tm9 * om5 + tm10 * om9 + tm11 * om13;
          result[offset + 10] = tm8 * om2 + tm9 * om6 + tm10 * om10 + tm11 * om14;
          result[offset + 11] = tm8 * om3 + tm9 * om7 + tm10 * om11 + tm11 * om15;
          result[offset + 12] = tm12 * om0 + tm13 * om4 + tm14 * om8 + tm15 * om12;
          result[offset + 13] = tm12 * om1 + tm13 * om5 + tm14 * om9 + tm15 * om13;
          result[offset + 14] = tm12 * om2 + tm13 * om6 + tm14 * om10 + tm15 * om14;
          result[offset + 15] = tm12 * om3 + tm13 * om7 + tm14 * om11 + tm15 * om15;
          return this;
      }
      /**
       * Check equality between this matrix and a second one
       * @param value - defines the second matrix to compare
       * @returns true is the current matrix and the given one values are strictly equal
       */
      equals(value) {
          const other = value;
          if (!other) {
              return false;
          }
          if (this._isIdentity || other._isIdentity) {
              if (!this._isIdentityDirty && !other._isIdentityDirty) {
                  return this._isIdentity && other._isIdentity;
              }
          }
          const m = this.m;
          const om = other.m;
          return (m[0] === om[0] &&
              m[1] === om[1] &&
              m[2] === om[2] &&
              m[3] === om[3] &&
              m[4] === om[4] &&
              m[5] === om[5] &&
              m[6] === om[6] &&
              m[7] === om[7] &&
              m[8] === om[8] &&
              m[9] === om[9] &&
              m[10] === om[10] &&
              m[11] === om[11] &&
              m[12] === om[12] &&
              m[13] === om[13] &&
              m[14] === om[14] &&
              m[15] === om[15]);
      }
      /**
       * Clone the current matrix
       * @returns a new matrix from the current matrix
       */
      clone() {
          const matrix = new Matrix();
          matrix.copyFrom(this);
          return matrix;
      }
      /**
       * Returns the name of the current matrix class
       * @returns the string "Matrix"
       */
      getClassName() {
          return 'Matrix';
      }
      /**
       * Gets the hash code of the current matrix
       * @returns the hash code
       */
      getHashCode() {
          let hash = this._m[0] || 0;
          for (let i = 1; i < 16; i++) {
              hash = (hash * 397) ^ (this._m[i] || 0);
          }
          return hash;
      }
      /**
       * Decomposes the current Matrix into a translation, rotation and scaling components
       * @param scale - defines the scale vector3 given as a reference to update
       * @param rotation - defines the rotation quaternion given as a reference to update
       * @param translation - defines the translation vector3 given as a reference to update
       * @returns true if operation was successful
       */
      decompose(scale, rotation, translation) {
          if (this._isIdentity) {
              if (translation) {
                  translation.setAll(0);
              }
              if (scale) {
                  scale.setAll(1);
              }
              if (rotation) {
                  rotation.copyFromFloats(0, 0, 0, 1);
              }
              return true;
          }
          const m = this._m;
          if (translation) {
              translation.copyFromFloats(m[12], m[13], m[14]);
          }
          const usedScale = scale || preallocatedVariables_1$3.MathTmp.Vector3[0];
          usedScale.x = Math.sqrt(m[0] * m[0] + m[1] * m[1] + m[2] * m[2]);
          usedScale.y = Math.sqrt(m[4] * m[4] + m[5] * m[5] + m[6] * m[6]);
          usedScale.z = Math.sqrt(m[8] * m[8] + m[9] * m[9] + m[10] * m[10]);
          if (this.determinant() <= 0) {
              usedScale.y *= -1;
          }
          if (usedScale.x === 0 || usedScale.y === 0 || usedScale.z === 0) {
              if (rotation) {
                  rotation.copyFromFloats(0.0, 0.0, 0.0, 1.0);
              }
              return false;
          }
          if (rotation) {
              // tslint:disable-next-line:one-variable-per-declaration
              const sx = 1 / usedScale.x, sy = 1 / usedScale.y, sz = 1 / usedScale.z;
              Matrix.FromValuesToRef(m[0] * sx, m[1] * sx, m[2] * sx, 0.0, m[4] * sy, m[5] * sy, m[6] * sy, 0.0, m[8] * sz, m[9] * sz, m[10] * sz, 0.0, 0.0, 0.0, 0.0, 1.0, preallocatedVariables_1$3.MathTmp.Matrix[0]);
              Quaternion_1$2.Quaternion.FromRotationMatrixToRef(preallocatedVariables_1$3.MathTmp.Matrix[0], rotation);
          }
          return true;
      }
      /**
       * Gets specific row of the matrix
       * @param index - defines the number of the row to get
       * @returns the index-th row of the current matrix as a new Vector4
       */
      getRow(index) {
          if (index < 0 || index > 3) {
              return null;
          }
          const i = index * 4;
          return new Vector4_1.Vector4(this._m[i + 0], this._m[i + 1], this._m[i + 2], this._m[i + 3]);
      }
      /**
       * Sets the index-th row of the current matrix to the vector4 values
       * @param index - defines the number of the row to set
       * @param row - defines the target vector4
       * @returns the updated current matrix
       */
      setRow(index, row) {
          return this.setRowFromFloats(index, row.x, row.y, row.z, row.w);
      }
      /**
       * Compute the transpose of the matrix
       * @returns the new transposed matrix
       */
      transpose() {
          return Matrix.Transpose(this);
      }
      /**
       * Compute the transpose of the matrix and store it in a given matrix
       * @param result - defines the target matrix
       * @returns the current matrix
       */
      transposeToRef(result) {
          Matrix.TransposeToRef(this, result);
          return this;
      }
      /**
       * Sets the index-th row of the current matrix with the given 4 x float values
       * @param index - defines the row index
       * @param x - defines the x component to set
       * @param y - defines the y component to set
       * @param z - defines the z component to set
       * @param w - defines the w component to set
       * @returns the updated current matrix
       */
      setRowFromFloats(index, x, y, z, w) {
          if (index < 0 || index > 3) {
              return this;
          }
          const i = index * 4;
          this._m[i + 0] = x;
          this._m[i + 1] = y;
          this._m[i + 2] = z;
          this._m[i + 3] = w;
          this._markAsUpdated();
          return this;
      }
      /**
       * Compute a new matrix set with the current matrix values multiplied by scale (float)
       * @param scale - defines the scale factor
       * @returns a new matrix
       */
      scale(scale) {
          const result = new Matrix();
          this.scaleToRef(scale, result);
          return result;
      }
      /**
       * Scale the current matrix values by a factor to a given result matrix
       * @param scale - defines the scale factor
       * @param result - defines the matrix to store the result
       * @returns the current matrix
       */
      scaleToRef(scale, result) {
          for (let index = 0; index < 16; index++) {
              result._m[index] = this._m[index] * scale;
          }
          result._markAsUpdated();
          return this;
      }
      /**
       * Scale the current matrix values by a factor and add the result to a given matrix
       * @param scale - defines the scale factor
       * @param result - defines the Matrix to store the result
       * @returns the current matrix
       */
      scaleAndAddToRef(scale, result) {
          for (let index = 0; index < 16; index++) {
              result._m[index] += this._m[index] * scale;
          }
          result._markAsUpdated();
          return this;
      }
      /**
       * Writes to the given matrix a normal matrix, computed from this one (using values from identity matrix for fourth row and column).
       * @param ref - matrix to store the result
       */
      toNormalMatrix(ref) {
          const tmp = preallocatedVariables_1$3.MathTmp.Matrix[0];
          this.invertToRef(tmp);
          tmp.transposeToRef(ref);
          const m = ref._m;
          Matrix.FromValuesToRef(m[0], m[1], m[2], 0.0, m[4], m[5], m[6], 0.0, m[8], m[9], m[10], 0.0, 0.0, 0.0, 0.0, 1.0, ref);
      }
      /**
       * Gets only rotation part of the current matrix
       * @returns a new matrix sets to the extracted rotation matrix from the current one
       */
      getRotationMatrix() {
          const result = new Matrix();
          this.getRotationMatrixToRef(result);
          return result;
      }
      /**
       * Extracts the rotation matrix from the current one and sets it as the given "result"
       * @param result - defines the target matrix to store data to
       * @returns the current matrix
       */
      getRotationMatrixToRef(result) {
          const scale = preallocatedVariables_1$3.MathTmp.Vector3[0];
          if (!this.decompose(scale)) {
              Matrix.IdentityToRef(result);
              return this;
          }
          const m = this._m;
          // tslint:disable-next-line:one-variable-per-declaration
          const sx = 1 / scale.x, sy = 1 / scale.y, sz = 1 / scale.z;
          Matrix.FromValuesToRef(m[0] * sx, m[1] * sx, m[2] * sx, 0.0, m[4] * sy, m[5] * sy, m[6] * sy, 0.0, m[8] * sz, m[9] * sz, m[10] * sz, 0.0, 0.0, 0.0, 0.0, 1.0, result);
          return this;
      }
      /**
       * Toggles model matrix from being right handed to left handed in place and vice versa
       */
      toggleModelMatrixHandInPlace() {
          const m = this._m;
          m[2] *= -1;
          m[6] *= -1;
          m[8] *= -1;
          m[9] *= -1;
          m[14] *= -1;
          this._markAsUpdated();
      }
      /**
       * Toggles projection matrix from being right handed to left handed in place and vice versa
       */
      toggleProjectionMatrixHandInPlace() {
          const m = this._m;
          m[8] *= -1;
          m[9] *= -1;
          m[10] *= -1;
          m[11] *= -1;
          this._markAsUpdated();
      }
      /** @internal */
      _updateIdentityStatus(isIdentity, isIdentityDirty = false, isIdentity3x2 = false, isIdentity3x2Dirty = true) {
          this.updateFlag = Matrix._updateFlagSeed++;
          this._isIdentity = isIdentity;
          this._isIdentity3x2 = isIdentity || isIdentity3x2;
          this._isIdentityDirty = this._isIdentity ? false : isIdentityDirty;
          this._isIdentity3x2Dirty = this._isIdentity3x2 ? false : isIdentity3x2Dirty;
      }
  }
  Matrix$1.Matrix = Matrix;
  Matrix._updateFlagSeed = 0;
  Matrix._identityReadOnly = Matrix.Identity();

  Object.defineProperty(Quaternion$1, "__esModule", { value: true });
  Quaternion$1.Quaternion = void 0;
  const Matrix_1$2 = Matrix$1;
  const Vector3_1$5 = Vector3$1;
  const preallocatedVariables_1$2 = preallocatedVariables;
  const types_1$7 = types;
  const Scalar_1$5 = Scalar$1;
  /**
   * Class used to store quaternion data
   * {@link https://en.wikipedia.org/wiki/Quaternion }
   * {@link http://doc.babylonjs.com/features/position,_rotation,_scaling }
   * @public
   */
  class Quaternion {
      /**
       * Creates a new Quaternion from the given floats
       * @param x - defines the first component (0 by default)
       * @param y - defines the second component (0 by default)
       * @param z - defines the third component (0 by default)
       * @param w - defines the fourth component (1.0 by default)
       */
      constructor(
      /** defines the first component (0 by default) */
      x = 0.0, 
      /** defines the second component (0 by default) */
      y = 0.0, 
      /** defines the third component (0 by default) */
      z = 0.0, 
      /** defines the fourth component (1.0 by default) */
      w = 1.0) {
          this.x = x;
          this.y = y;
          this.z = z;
          this.w = w;
      }
      // Statics
      /**
       * Creates a new quaternion from a rotation matrix
       * @param matrix - defines the source matrix
       * @returns a new quaternion created from the given rotation matrix values
       */
      static FromRotationMatrix(matrix) {
          const result = new Quaternion();
          Quaternion.FromRotationMatrixToRef(matrix, result);
          return result;
      }
      /**
       * Updates the given quaternion with the given rotation matrix values
       * @param matrix - defines the source matrix
       * @param result - defines the target quaternion
       */
      static FromRotationMatrixToRef(matrix, result) {
          const data = matrix.m;
          // tslint:disable:one-variable-per-declaration
          const m11 = data[0], m12 = data[4], m13 = data[8];
          const m21 = data[1], m22 = data[5], m23 = data[9];
          const m31 = data[2], m32 = data[6], m33 = data[10];
          // tslint:enable:one-variable-per-declaration
          const trace = m11 + m22 + m33;
          let s;
          if (trace > 0) {
              s = 0.5 / Math.sqrt(trace + 1.0);
              result.w = 0.25 / s;
              result.x = (m32 - m23) * s;
              result.y = (m13 - m31) * s;
              result.z = (m21 - m12) * s;
          }
          else if (m11 > m22 && m11 > m33) {
              s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);
              result.w = (m32 - m23) / s;
              result.x = 0.25 * s;
              result.y = (m12 + m21) / s;
              result.z = (m13 + m31) / s;
          }
          else if (m22 > m33) {
              s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);
              result.w = (m13 - m31) / s;
              result.x = (m12 + m21) / s;
              result.y = 0.25 * s;
              result.z = (m23 + m32) / s;
          }
          else {
              s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);
              result.w = (m21 - m12) / s;
              result.x = (m13 + m31) / s;
              result.y = (m23 + m32) / s;
              result.z = 0.25 * s;
          }
      }
      /**
       * Returns the dot product (float) between the quaternions "left" and "right"
       * @param left - defines the left operand
       * @param right - defines the right operand
       * @returns the dot product
       */
      static Dot(left, right) {
          return (left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w);
      }
      /**
       * Checks if the two quaternions are close to each other
       * @param quat0 - defines the first quaternion to check
       * @param quat1 - defines the second quaternion to check
       * @returns true if the two quaternions are close to each other
       */
      static AreClose(quat0, quat1) {
          const dot = Quaternion.Dot(quat0, quat1);
          return dot >= 0;
      }
      /**
       * Creates an empty quaternion
       * @returns a new quaternion set to (0.0, 0.0, 0.0)
       */
      static Zero() {
          return new Quaternion(0.0, 0.0, 0.0, 0.0);
      }
      /**
       * Inverse a given quaternion
       * @param q - defines the source quaternion
       * @returns a new quaternion as the inverted current quaternion
       */
      static Inverse(q) {
          return new Quaternion(-q.x, -q.y, -q.z, q.w);
      }
      /**
       * Gets a boolean indicating if the given quaternion is identity
       * @param quaternion - defines the quaternion to check
       * @returns true if the quaternion is identity
       */
      static IsIdentity(quaternion) {
          return (quaternion &&
              quaternion.x === 0 &&
              quaternion.y === 0 &&
              quaternion.z === 0 &&
              quaternion.w === 1);
      }
      /**
       * Creates a quaternion from a rotation around an axis
       * @param axis - defines the axis to use
       * @param angle - defines the angle to use (in Euler degrees)
       * @returns a new quaternion created from the given axis (Vector3) and angle in radians (float)
       */
      static RotationAxis(axis, angle) {
          const angleRad = angle * types_1$7.DEG2RAD;
          return Quaternion.RotationAxisToRef(axis, angleRad, new Quaternion());
      }
      /**
       * Creates a rotation around an axis and stores it into the given quaternion
       * @param axis - defines the axis to use
       * @param angle - defines the angle to use (in Euler degrees)
       * @param result - defines the target quaternion
       * @returns the target quaternion
       */
      static RotationAxisToRef(axis, angle, result) {
          const angleRad = angle * types_1$7.DEG2RAD;
          const sin = Math.sin(angleRad / 2);
          axis.normalize();
          result.w = Math.cos(angleRad / 2);
          result.x = axis.x * sin;
          result.y = axis.y * sin;
          result.z = axis.z * sin;
          return result;
      }
      /**
       * Creates a new quaternion from data stored into an array
       * @param array - defines the data source
       * @param offset - defines the offset in the source array where the data starts
       * @returns a new quaternion
       */
      static FromArray(array, offset = 0) {
          return new Quaternion(array[offset], array[offset + 1], array[offset + 2], array[offset + 3]);
      }
      /**
       * Creates a new quaternion from a set of euler angles and stores it in the target quaternion
       */
      static FromEulerAnglesRef(x, y, z, result) {
          return Quaternion.RotationYawPitchRollToRef(y * types_1$7.DEG2RAD, x * types_1$7.DEG2RAD, z * types_1$7.DEG2RAD, result);
      }
      /**
       * Creates a new quaternion from the given Euler float angles (y, x, z)
       * @param yaw - defines the rotation around Y axis
       * @param pitch - defines the rotation around X axis
       * @param roll - defines the rotation around Z axis
       * @returns the new quaternion
       */
      static RotationYawPitchRoll(yaw, pitch, roll) {
          const q = new Quaternion();
          Quaternion.RotationYawPitchRollToRef(yaw, pitch, roll, q);
          return q;
      }
      /**
       * Creates a new rotation from the given Euler float angles (y, x, z) and stores it in the target quaternion
       * @param yaw - defines the rotation around Y axis
       * @param pitch - defines the rotation around X axis
       * @param roll - defines the rotation around Z axis
       * @param result - defines the target quaternion
       */
      static RotationYawPitchRollToRef(yaw, pitch, roll, result) {
          // Implemented unity-based calculations from: https://stackoverflow.com/a/56055813
          const halfPitch = pitch * 0.5;
          const halfYaw = yaw * 0.5;
          const halfRoll = roll * 0.5;
          const c1 = Math.cos(halfPitch);
          const c2 = Math.cos(halfYaw);
          const c3 = Math.cos(halfRoll);
          const s1 = Math.sin(halfPitch);
          const s2 = Math.sin(halfYaw);
          const s3 = Math.sin(halfRoll);
          result.x = c2 * s1 * c3 + s2 * c1 * s3;
          result.y = s2 * c1 * c3 - c2 * s1 * s3;
          result.z = c2 * c1 * s3 - s2 * s1 * c3;
          result.w = c2 * c1 * c3 + s2 * s1 * s3;
      }
      /**
       * Creates a new quaternion from the given Euler float angles expressed in z-x-z orientation
       * @param alpha - defines the rotation around first axis
       * @param beta - defines the rotation around second axis
       * @param gamma - defines the rotation around third axis
       * @returns the new quaternion
       */
      static RotationAlphaBetaGamma(alpha, beta, gamma) {
          const result = new Quaternion();
          Quaternion.RotationAlphaBetaGammaToRef(alpha, beta, gamma, result);
          return result;
      }
      /**
       * Creates a new quaternion from the given Euler float angles expressed in z-x-z orientation and stores it in the target quaternion
       * @param alpha - defines the rotation around first axis
       * @param beta - defines the rotation around second axis
       * @param gamma - defines the rotation around third axis
       * @param result - defines the target quaternion
       */
      static RotationAlphaBetaGammaToRef(alpha, beta, gamma, result) {
          // Produces a quaternion from Euler angles in the z-x-z orientation
          const halfGammaPlusAlpha = (gamma + alpha) * 0.5;
          const halfGammaMinusAlpha = (gamma - alpha) * 0.5;
          const halfBeta = beta * 0.5;
          result.x = Math.cos(halfGammaMinusAlpha) * Math.sin(halfBeta);
          result.y = Math.sin(halfGammaMinusAlpha) * Math.sin(halfBeta);
          result.z = Math.sin(halfGammaPlusAlpha) * Math.cos(halfBeta);
          result.w = Math.cos(halfGammaPlusAlpha) * Math.cos(halfBeta);
      }
      /**
       * Creates a new quaternion containing the rotation value to reach the target (axis1, axis2, axis3) orientation as a rotated XYZ system (axis1, axis2 and axis3 are normalized during this operation)
       * @param axis1 - defines the first axis
       * @param axis2 - defines the second axis
       * @param axis3 - defines the third axis
       * @returns the new quaternion
       */
      static RotationQuaternionFromAxis(axis1, axis2, axis3) {
          const quat = new Quaternion(0.0, 0.0, 0.0, 0.0);
          Quaternion.RotationQuaternionFromAxisToRef(axis1, axis2, axis3, quat);
          return quat;
      }
      /**
       * Creates a rotation value to reach the target (axis1, axis2, axis3) orientation as a rotated XYZ system (axis1, axis2 and axis3 are normalized during this operation) and stores it in the target quaternion
       * @param axis1 - defines the first axis
       * @param axis2 - defines the second axis
       * @param axis3 - defines the third axis
       * @param ref - defines the target quaternion
       */
      static RotationQuaternionFromAxisToRef(axis1, axis2, axis3, ref) {
          const rotMat = preallocatedVariables_1$2.MathTmp.Matrix[0];
          Matrix_1$2.Matrix.FromXYZAxesToRef(axis1.normalize(), axis2.normalize(), axis3.normalize(), rotMat);
          Quaternion.FromRotationMatrixToRef(rotMat, ref);
      }
      /**
       * Interpolates between two quaternions
       * @param left - defines first quaternion
       * @param right - defines second quaternion
       * @param amount - defines the gradient to use
       * @returns the new interpolated quaternion
       */
      static Slerp(left, right, amount) {
          const result = Quaternion.Identity;
          Quaternion.SlerpToRef(left, right, amount, result);
          return result;
      }
      /**
       * Interpolates between two quaternions and stores it into a target quaternion
       * @param left - defines first quaternion
       * @param right - defines second quaternion
       * @param amount - defines the gradient to use
       * @param result - defines the target quaternion
       */
      static SlerpToRef(left, right, amount, result) {
          let num2;
          let num3;
          let num4 = left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w;
          let flag = false;
          if (num4 < 0) {
              flag = true;
              num4 = -num4;
          }
          if (num4 > 0.999999) {
              num3 = 1 - amount;
              num2 = flag ? -amount : amount;
          }
          else {
              const num5 = Math.acos(num4);
              const num6 = 1.0 / Math.sin(num5);
              num3 = Math.sin((1.0 - amount) * num5) * num6;
              num2 = flag
                  ? -Math.sin(amount * num5) * num6
                  : Math.sin(amount * num5) * num6;
          }
          result.x = num3 * left.x + num2 * right.x;
          result.y = num3 * left.y + num2 * right.y;
          result.z = num3 * left.z + num2 * right.z;
          result.w = num3 * left.w + num2 * right.w;
      }
      /**
       * Interpolate between two quaternions using Hermite interpolation
       * @param value1 - defines first quaternion
       * @param tangent1 - defines the incoming tangent
       * @param value2 - defines second quaternion
       * @param tangent2 - defines the outgoing tangent
       * @param amount - defines the target quaternion
       * @returns the new interpolated quaternion
       */
      static Hermite(value1, tangent1, value2, tangent2, amount) {
          const squared = amount * amount;
          const cubed = amount * squared;
          const part1 = 2.0 * cubed - 3.0 * squared + 1.0;
          const part2 = -2.0 * cubed + 3.0 * squared;
          const part3 = cubed - 2.0 * squared + amount;
          const part4 = cubed - squared;
          const x = value1.x * part1 +
              value2.x * part2 +
              tangent1.x * part3 +
              tangent2.x * part4;
          const y = value1.y * part1 +
              value2.y * part2 +
              tangent1.y * part3 +
              tangent2.y * part4;
          const z = value1.z * part1 +
              value2.z * part2 +
              tangent1.z * part3 +
              tangent2.z * part4;
          const w = value1.w * part1 +
              value2.w * part2 +
              tangent1.w * part3 +
              tangent2.w * part4;
          return new Quaternion(x, y, z, w);
      }
      /**
       * Creates an identity quaternion
       * @returns - the identity quaternion
       */
      static get Identity() {
          return new Quaternion(0.0, 0.0, 0.0, 1.0);
      }
      /**
       * Returns the angle in degrees between two rotations a and b.
       * @param quat1 - defines the first quaternion
       * @param quat2 - defines the second quaternion
       */
      static Angle(quat1, quat2) {
          const dot = Quaternion.Dot(quat1, quat2);
          return Math.acos(Math.min(Math.abs(dot), 1)) * 2 * types_1$7.RAD2DEG;
      }
      /**
       * Returns a rotation that rotates z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis.
       * @param x - the rotation on the x axis in euler degrees
       * @param y - the rotation on the y axis in euler degrees
       * @param z - the rotation on the z axis in euler degrees
       */
      static Euler(x, y, z) {
          return Quaternion.RotationYawPitchRoll(y * types_1$7.DEG2RAD, x * types_1$7.DEG2RAD, z * types_1$7.DEG2RAD);
      }
      /**
       * Creates a rotation with the specified forward and upwards directions.
       * @param forward - the direction to look in
       * @param up - the vector that defines in which direction up is
       */
      static LookRotation(forward, up = preallocatedVariables_1$2.MathTmp.staticUp) {
          const forwardNew = Vector3_1$5.Vector3.Normalize(forward);
          const right = Vector3_1$5.Vector3.Normalize(Vector3_1$5.Vector3.Cross(up, forwardNew));
          const upNew = Vector3_1$5.Vector3.Cross(forwardNew, right);
          const m00 = right.x;
          const m01 = right.y;
          const m02 = right.z;
          const m10 = upNew.x;
          const m11 = upNew.y;
          const m12 = upNew.z;
          const m20 = forwardNew.x;
          const m21 = forwardNew.y;
          const m22 = forwardNew.z;
          const num8 = m00 + m11 + m22;
          const quaternion = new Quaternion();
          if (num8 > 0) {
              let num = Math.sqrt(num8 + 1);
              quaternion.w = num * 0.5;
              num = 0.5 / num;
              quaternion.x = (m12 - m21) * num;
              quaternion.y = (m20 - m02) * num;
              quaternion.z = (m01 - m10) * num;
              return quaternion;
          }
          if (m00 >= m11 && m00 >= m22) {
              const num7 = Math.sqrt(1 + m00 - m11 - m22);
              const num4 = 0.5 / num7;
              quaternion.x = 0.5 * num7;
              quaternion.y = (m01 + m10) * num4;
              quaternion.z = (m02 + m20) * num4;
              quaternion.w = (m12 - m21) * num4;
              return quaternion;
          }
          if (m11 > m22) {
              const num6 = Math.sqrt(1 + m11 - m00 - m22);
              const num3 = 0.5 / num6;
              quaternion.x = (m10 + m01) * num3;
              quaternion.y = 0.5 * num6;
              quaternion.z = (m21 + m12) * num3;
              quaternion.w = (m20 - m02) * num3;
              return quaternion;
          }
          const num5 = Math.sqrt(1 + m22 - m00 - m11);
          const num2 = 0.5 / num5;
          quaternion.x = (m20 + m02) * num2;
          quaternion.y = (m21 + m12) * num2;
          quaternion.z = 0.5 * num5;
          quaternion.w = (m01 - m10) * num2;
          return quaternion;
      }
      /**
       * The from quaternion is rotated towards to by an angular step of maxDegreesDelta.
       * @param from - defines the first quaternion
       * @param to - defines the second quaternion
       * @param maxDegreesDelta - the interval step
       */
      static RotateTowards(from, to, maxDegreesDelta) {
          const num = Quaternion.Angle(from, to);
          if (num === 0) {
              return to;
          }
          const t = Math.min(1, maxDegreesDelta / num);
          return Quaternion.Slerp(from, to, t);
      }
      /**
       * Creates a rotation which rotates from fromDirection to toDirection.
       * @param from - defines the first direction Vector
       * @param to - defines the target direction Vector
       */
      static FromToRotation(from, to, up = preallocatedVariables_1$2.MathTmp.staticUp) {
          // Unity-based calculations implemented from https://forum.unity.com/threads/quaternion-lookrotation-around-an-axis.608470/#post-4069888
          const v0 = from.normalize();
          const v1 = to.normalize();
          const a = Vector3_1$5.Vector3.Cross(v0, v1);
          const w = Math.sqrt(v0.lengthSquared() * v1.lengthSquared()) + Vector3_1$5.Vector3.Dot(v0, v1);
          if (a.lengthSquared() < 0.0001) {
              // the vectors are parallel, check w to find direction
              // if w is 0 then values are opposite, and we sould rotate 180 degrees around the supplied axis
              // otherwise the vectors in the same direction and no rotation should occur
              return Math.abs(w) < 0.0001
                  ? new Quaternion(up.x, up.y, up.z, 0).normalized
                  : Quaternion.Identity;
          }
          else {
              return new Quaternion(a.x, a.y, a.z, w).normalized;
          }
      }
      /**
       * Converts this quaternion to one with the same orientation but with a magnitude of 1.
       */
      get normalized() {
          return this.normalize();
      }
      /**
       * Creates a rotation which rotates from fromDirection to toDirection.
       * @param from - defines the first Vector
       * @param to - defines the second Vector
       * @param up - defines the direction
       */
      setFromToRotation(from, to, up = preallocatedVariables_1$2.MathTmp.staticUp) {
          const result = Quaternion.FromToRotation(from, to, up);
          this.x = result.x;
          this.y = result.y;
          this.z = result.z;
          this.w = result.w;
      }
      set eulerAngles(euler) {
          this.setEuler(euler.x, euler.y, euler.z);
      }
      /**
       * Gets or sets the euler angle representation of the rotation.
       * Implemented unity-based calculations from: https://stackoverflow.com/a/56055813
       */
      get eulerAngles() {
          const out = new Vector3_1$5.Vector3();
          // if the input quaternion is normalized, this is exactly one. Otherwise, this acts as a correction factor for the quaternion's not-normalizedness
          const unit = this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
          // this will have a magnitude of 0.5 or greater if and only if this is a singularity case
          const test = this.x * this.w - this.y * this.z;
          if (test > 0.4995 * unit) {
              // singularity at north pole
              out.x = Math.PI / 2;
              out.y = 2 * Math.atan2(this.y, this.x);
              out.z = 0;
          }
          else if (test < -0.4995 * unit) {
              // singularity at south pole
              out.x = -Math.PI / 2;
              out.y = -2 * Math.atan2(this.y, this.x);
              out.z = 0;
          }
          else {
              // no singularity - this is the majority of cases
              out.x = Math.asin(2 * (this.w * this.x - this.y * this.z));
              out.y = Math.atan2(2 * this.w * this.y + 2 * this.z * this.x, 1 - 2 * (this.x * this.x + this.y * this.y));
              out.z = Math.atan2(2 * this.w * this.z + 2 * this.x * this.y, 1 - 2 * (this.z * this.z + this.x * this.x));
          }
          out.x *= types_1$7.RAD2DEG;
          out.y *= types_1$7.RAD2DEG;
          out.z *= types_1$7.RAD2DEG;
          // ensure the degree values are between 0 and 360
          out.x = Scalar_1$5.Scalar.Repeat(out.x, 360);
          out.y = Scalar_1$5.Scalar.Repeat(out.y, 360);
          out.z = Scalar_1$5.Scalar.Repeat(out.z, 360);
          return out;
      }
      /**
       * Gets a string representation for the current quaternion
       * @returns a string with the Quaternion coordinates
       */
      toString() {
          return `(${this.x}, ${this.y}, ${this.z}, ${this.w})`;
      }
      /**
       * Gets length of current quaternion
       * @returns the quaternion length (float)
       */
      get length() {
          return Math.sqrt(this.lengthSquared);
      }
      /**
       * Gets length of current quaternion
       * @returns the quaternion length (float)
       */
      get lengthSquared() {
          return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
      }
      /**
       * Gets the class name of the quaternion
       * @returns the string "Quaternion"
       */
      getClassName() {
          return 'Quaternion';
      }
      /**
       * Gets a hash code for this quaternion
       * @returns the quaternion hash code
       */
      getHashCode() {
          let hash = this.x || 0;
          hash = (hash * 397) ^ (this.y || 0);
          hash = (hash * 397) ^ (this.z || 0);
          hash = (hash * 397) ^ (this.w || 0);
          return hash;
      }
      /**
       * Copy the quaternion to an array
       * @returns a new array populated with 4 elements from the quaternion coordinates
       */
      asArray() {
          return [this.x, this.y, this.z, this.w];
      }
      /**
       * Check if two quaternions are equals
       * @param otherQuaternion - defines the second operand
       * @returns true if the current quaternion and the given one coordinates are strictly equals
       */
      equals(otherQuaternion) {
          return (otherQuaternion &&
              this.x === otherQuaternion.x &&
              this.y === otherQuaternion.y &&
              this.z === otherQuaternion.z &&
              this.w === otherQuaternion.w);
      }
      /**
       * Clone the current quaternion
       * @returns a new quaternion copied from the current one
       */
      clone() {
          return new Quaternion(this.x, this.y, this.z, this.w);
      }
      /**
       * Copy a quaternion to the current one
       * @param other - defines the other quaternion
       * @returns the updated current quaternion
       */
      copyFrom(other) {
          this.x = other.x;
          this.y = other.y;
          this.z = other.z;
          this.w = other.w;
          return this;
      }
      /**
       * Updates the current quaternion with the given float coordinates
       * @param x - defines the x coordinate
       * @param y - defines the y coordinate
       * @param z - defines the z coordinate
       * @param w - defines the w coordinate
       * @returns the updated current quaternion
       */
      copyFromFloats(x, y, z, w) {
          this.x = x;
          this.y = y;
          this.z = z;
          this.w = w;
          return this;
      }
      /**
       * Updates the current quaternion from the given float coordinates
       * @param x - defines the x coordinate
       * @param y - defines the y coordinate
       * @param z - defines the z coordinate
       * @param w - defines the w coordinate
       * @returns the updated current quaternion
       */
      set(x, y, z, w) {
          return this.copyFromFloats(x, y, z, w);
      }
      /**
       * Updates the current quaternion from the given euler angles
       * @returns the updated current quaternion
       */
      setEuler(x, y, z) {
          Quaternion.RotationYawPitchRollToRef(y * types_1$7.DEG2RAD, x * types_1$7.DEG2RAD, z * types_1$7.DEG2RAD, this);
          return this;
      }
      /**
       * @internal
       * Adds two quaternions
       * @param other - defines the second operand
       * @returns a new quaternion as the addition result of the given one and the current quaternion
       */
      add(other) {
          return new Quaternion(this.x + other.x, this.y + other.y, this.z + other.z, this.w + other.w);
      }
      /**
       * @internal
       * Add a quaternion to the current one
       * @param other - defines the quaternion to add
       * @returns the current quaternion
       */
      addInPlace(other) {
          this.x += other.x;
          this.y += other.y;
          this.z += other.z;
          this.w += other.w;
          return this;
      }
      /**
       * Subtract two quaternions
       * @param other - defines the second operand
       * @returns a new quaternion as the subtraction result of the given one from the current one
       */
      subtract(other) {
          return new Quaternion(this.x - other.x, this.y - other.y, this.z - other.z, this.w - other.w);
      }
      /**
       * Multiplies the current quaternion by a scale factor
       * @param value - defines the scale factor
       * @returns a new quaternion set by multiplying the current quaternion coordinates by the float "scale"
       */
      scale(value) {
          return new Quaternion(this.x * value, this.y * value, this.z * value, this.w * value);
      }
      /**
       * Scale the current quaternion values by a factor and stores the result to a given quaternion
       * @param scale - defines the scale factor
       * @param result - defines the Quaternion object where to store the result
       * @returns the unmodified current quaternion
       */
      scaleToRef(scale, result) {
          result.x = this.x * scale;
          result.y = this.y * scale;
          result.z = this.z * scale;
          result.w = this.w * scale;
          return this;
      }
      /**
       * Multiplies in place the current quaternion by a scale factor
       * @param value - defines the scale factor
       * @returns the current modified quaternion
       */
      scaleInPlace(value) {
          this.x *= value;
          this.y *= value;
          this.z *= value;
          this.w *= value;
          return this;
      }
      /**
       * Scale the current quaternion values by a factor and add the result to a given quaternion
       * @param scale - defines the scale factor
       * @param result - defines the Quaternion object where to store the result
       * @returns the unmodified current quaternion
       */
      scaleAndAddToRef(scale, result) {
          result.x += this.x * scale;
          result.y += this.y * scale;
          result.z += this.z * scale;
          result.w += this.w * scale;
          return this;
      }
      /**
       * Multiplies two quaternions
       * @param q1 - defines the second operand
       * @returns a new quaternion set as the multiplication result of the current one with the given one "q1"
       */
      multiply(q1) {
          const result = new Quaternion(0, 0, 0, 1.0);
          this.multiplyToRef(q1, result);
          return result;
      }
      /**
       * Sets the given "result" as the the multiplication result of the current one with the given one "q1"
       * @param q1 - defines the second operand
       * @param result - defines the target quaternion
       * @returns the current quaternion
       */
      multiplyToRef(q1, result) {
          const x = this.x * q1.w + this.y * q1.z - this.z * q1.y + this.w * q1.x;
          const y = -this.x * q1.z + this.y * q1.w + this.z * q1.x + this.w * q1.y;
          const z = this.x * q1.y - this.y * q1.x + this.z * q1.w + this.w * q1.z;
          const w = -this.x * q1.x - this.y * q1.y - this.z * q1.z + this.w * q1.w;
          result.copyFromFloats(x, y, z, w);
          return this;
      }
      /**
       * Updates the current quaternion with the multiplication of itself with the given one "q1"
       * @param q1 - defines the second operand
       * @returns the currentupdated quaternion
       */
      multiplyInPlace(q1) {
          this.multiplyToRef(q1, this);
          return this;
      }
      /**
       * Conjugates (1-q) the current quaternion and stores the result in the given quaternion
       * @param ref - defines the target quaternion
       * @returns the current quaternion
       */
      conjugateToRef(ref) {
          ref.copyFromFloats(-this.x, -this.y, -this.z, this.w);
          return this;
      }
      /**
       * Conjugates in place (1-q) the current quaternion
       * @returns the current updated quaternion
       */
      conjugateInPlace() {
          this.x *= -1;
          this.y *= -1;
          this.z *= -1;
          return this;
      }
      /**
       * Conjugates in place (1-q) the current quaternion
       * @returns a new quaternion
       */
      conjugate() {
          const result = new Quaternion(-this.x, -this.y, -this.z, this.w);
          return result;
      }
      /**
       * Normalize in place the current quaternion
       * @returns the current updated quaternion
       */
      normalize() {
          const length = 1.0 / this.length;
          this.x *= length;
          this.y *= length;
          this.z *= length;
          this.w *= length;
          return this;
      }
      angleAxis(degress, axis) {
          if (axis.lengthSquared() === 0) {
              return Quaternion.Identity;
          }
          const result = Quaternion.Identity;
          let radians = degress * types_1$7.DEG2RAD;
          radians *= 0.5;
          let a2 = axis.normalize();
          a2 = axis.scaleInPlace(Math.sin(radians));
          result.x = a2.x;
          result.y = a2.y;
          result.z = a2.z;
          result.w = Math.cos(radians);
          return result.normalize();
      }
      /**
       * Updates the given rotation matrix with the current quaternion values
       * @param result - defines the target matrix
       * @returns the current unchanged quaternion
       */
      toRotationMatrix(result) {
          Matrix_1$2.Matrix.FromQuaternionToRef(this, result);
          return this;
      }
      /**
       * Updates the current quaternion from the given rotation matrix values
       * @param matrix - defines the source matrix
       * @returns the current updated quaternion
       */
      fromRotationMatrix(matrix) {
          Quaternion.FromRotationMatrixToRef(matrix, this);
          return this;
      }
  }
  Quaternion$1.Quaternion = Quaternion;

  Object.defineProperty(Vector3$1, "__esModule", { value: true });
  Vector3$1.Vector3 = void 0;
  const preallocatedVariables_1$1 = preallocatedVariables;
  const types_1$6 = types;
  const Quaternion_1$1 = Quaternion$1;
  const Scalar_1$4 = Scalar$1;
  /**
   * Classed used to store (x,y,z) vector representation
   * A Vector3 is the main object used in 3D geometry
   * It can represent etiher the coordinates of a point the space, either a direction
   * Reminder: Babylon.js uses a left handed forward facing system
   * @public
   */
  class Vector3 {
      /**
       * Creates a new Vector3 object from the given x, y, z (floats) coordinates.
       * @param x - defines the first coordinates (on X axis)
       * @param y - defines the second coordinates (on Y axis)
       * @param z - defines the third coordinates (on Z axis)
       */
      constructor(
      /**
       * Defines the first coordinates (on X axis)
       */
      x = 0, 
      /**
       * Defines the second coordinates (on Y axis)
       */
      y = 0, 
      /**
       * Defines the third coordinates (on Z axis)
       */
      z = 0) {
          this.x = x;
          this.y = y;
          this.z = z;
      }
      /**
       * Gets a boolean indicating that the vector is non uniform meaning x, y or z are not all the same
       */
      get isNonUniform() {
          const absX = Math.abs(this.x);
          const absY = Math.abs(this.y);
          if (absX !== absY) {
              return true;
          }
          const absZ = Math.abs(this.z);
          if (absX !== absZ) {
              return true;
          }
          if (absY !== absZ) {
              return true;
          }
          return false;
      }
      // Statics
      /**
       * Returns a new Vector3 as the result of the addition of the two given vectors.
       * @param vector1 - the first vector
       * @param vector2 - the second vector
       * @returns the resulting vector
       */
      static Add(vector1, vector2) {
          return new Vector3(vector1.x, vector1.y, vector1.z).addInPlace(vector2);
      }
      /**
       * Get the clip factor between two vectors
       * @param vector0 - defines the first operand
       * @param vector1 - defines the second operand
       * @param axis - defines the axis to use
       * @param size - defines the size along the axis
       * @returns the clip factor
       */
      static GetClipFactor(vector0, vector1, axis, size) {
          const d0 = Vector3.Dot(vector0, axis) - size;
          const d1 = Vector3.Dot(vector1, axis) - size;
          const s = d0 / (d0 - d1);
          return s;
      }
      /**
       * Get angle between two vectors
       * @param vector0 - angle between vector0 and vector1
       * @param vector1 - angle between vector0 and vector1
       * @param normal - direction of the normal
       * @returns the angle between vector0 and vector1
       */
      static GetAngleBetweenVectors(vector0, vector1, normal) {
          const v0 = vector0.normalizeToRef(preallocatedVariables_1$1.MathTmp.Vector3[1]);
          const v1 = vector1.normalizeToRef(preallocatedVariables_1$1.MathTmp.Vector3[2]);
          const dot = Vector3.Dot(v0, v1);
          const n = preallocatedVariables_1$1.MathTmp.Vector3[3];
          Vector3.CrossToRef(v0, v1, n);
          if (Vector3.Dot(n, normal) > 0) {
              return Math.acos(dot);
          }
          return -Math.acos(dot);
      }
      /**
       * Returns a new Vector3 set from the index "offset" of the given array
       * @param array - defines the source array
       * @param offset - defines the offset in the source array
       * @returns the new Vector3
       */
      static FromArray(array, offset = 0) {
          return new Vector3(array[offset], array[offset + 1], array[offset + 2]);
      }
      /**
       * Returns a new Vector3 set from the index "offset" of the given FloatArray
       * This function is deprecated.  Use FromArray instead
       * @param array - defines the source array
       * @param offset - defines the offset in the source array
       * @returns the new Vector3
       */
      static FromFloatArray(array, offset) {
          return Vector3.FromArray(array, offset);
      }
      /**
       * Sets the given vector "result" with the element values from the index "offset" of the given array
       * @param array - defines the source array
       * @param offset - defines the offset in the source array
       * @param result - defines the Vector3 where to store the result
       */
      static FromArrayToRef(array, offset, result) {
          result.x = array[offset];
          result.y = array[offset + 1];
          result.z = array[offset + 2];
      }
      /**
       * Sets the given vector "result" with the element values from the index "offset" of the given FloatArray
       * This function is deprecated.  Use FromArrayToRef instead.
       * @param array - defines the source array
       * @param offset - defines the offset in the source array
       * @param result - defines the Vector3 where to store the result
       */
      static FromFloatArrayToRef(array, offset, result) {
          return Vector3.FromArrayToRef(array, offset, result);
      }
      /**
       * Sets the given vector "result" with the given floats.
       * @param x - defines the x coordinate of the source
       * @param y - defines the y coordinate of the source
       * @param z - defines the z coordinate of the source
       * @param result - defines the Vector3 where to store the result
       */
      static FromFloatsToRef(x, y, z, result) {
          result.copyFromFloats(x, y, z);
      }
      /**
       * Returns a new Vector3 set to (0.0, 0.0, 0.0)
       * @returns a new empty Vector3
       */
      static Zero() {
          return new Vector3(0.0, 0.0, 0.0);
      }
      /**
       * Returns a new Vector3 set to (1.0, 1.0, 1.0)
       * @returns a new unit Vector3
       */
      static One() {
          return new Vector3(1.0, 1.0, 1.0);
      }
      /**
       * Returns a new Vector3 set to (0.0, 1.0, 0.0)
       * @returns a new up Vector3
       */
      static Up() {
          return new Vector3(0.0, 1.0, 0.0);
      }
      /**
       * Returns a new Vector3 set to (0.0, -1.0, 0.0)
       * @returns a new down Vector3
       */
      static Down() {
          return new Vector3(0.0, -1.0, 0.0);
      }
      /**
       * Returns a new Vector3 set to (0.0, 0.0, 1.0)
       * @returns a new forward Vector3
       */
      static Forward() {
          return new Vector3(0.0, 0.0, 1.0);
      }
      /**
       * Returns a new Vector3 set to (0.0, 0.0, -1.0)
       * @returns a new forward Vector3
       */
      static Backward() {
          return new Vector3(0.0, 0.0, -1.0);
      }
      /**
       * Returns a new Vector3 set to (1.0, 0.0, 0.0)
       * @returns a new right Vector3
       */
      static Right() {
          return new Vector3(1.0, 0.0, 0.0);
      }
      /**
       * Returns a new Vector3 set to (-1.0, 0.0, 0.0)
       * @returns a new left Vector3
       */
      static Left() {
          return new Vector3(-1.0, 0.0, 0.0);
      }
      /**
       * Returns a new Vector3 set with the result of the transformation by the given matrix of the given vector.
       * This method computes tranformed coordinates only, not transformed direction vectors (ie. it takes translation in account)
       * @param vector - defines the Vector3 to transform
       * @param transformation - defines the transformation matrix
       * @returns the transformed Vector3
       */
      static TransformCoordinates(vector, transformation) {
          const result = Vector3.Zero();
          Vector3.TransformCoordinatesToRef(vector, transformation, result);
          return result;
      }
      /**
       * Sets the given vector "result" coordinates with the result of the transformation by the given matrix of the given vector
       * This method computes tranformed coordinates only, not transformed direction vectors (ie. it takes translation in account)
       * @param vector - defines the Vector3 to transform
       * @param transformation - defines the transformation matrix
       * @param result - defines the Vector3 where to store the result
       */
      static TransformCoordinatesToRef(vector, transformation, result) {
          return Vector3.TransformCoordinatesFromFloatsToRef(vector.x, vector.y, vector.z, transformation, result);
      }
      /**
       * Sets the given vector "result" coordinates with the result of the transformation by the given matrix of the given floats (x, y, z)
       * This method computes tranformed coordinates only, not transformed direction vectors
       * @param x - define the x coordinate of the source vector
       * @param y - define the y coordinate of the source vector
       * @param z - define the z coordinate of the source vector
       * @param transformation - defines the transformation matrix
       * @param result - defines the Vector3 where to store the result
       */
      static TransformCoordinatesFromFloatsToRef(x, y, z, transformation, result) {
          const m = transformation.m;
          const rx = x * m[0] + y * m[4] + z * m[8] + m[12];
          const ry = x * m[1] + y * m[5] + z * m[9] + m[13];
          const rz = x * m[2] + y * m[6] + z * m[10] + m[14];
          const rw = 1 / (x * m[3] + y * m[7] + z * m[11] + m[15]);
          result.x = rx * rw;
          result.y = ry * rw;
          result.z = rz * rw;
      }
      /**
       * Returns a new Vector3 set with the result of the normal transformation by the given matrix of the given vector
       * This methods computes transformed normalized direction vectors only (ie. it does not apply translation)
       * @param vector - defines the Vector3 to transform
       * @param transformation - defines the transformation matrix
       * @returns the new Vector3
       */
      static TransformNormal(vector, transformation) {
          const result = Vector3.Zero();
          Vector3.TransformNormalToRef(vector, transformation, result);
          return result;
      }
      /**
       * Sets the given vector "result" with the result of the normal transformation by the given matrix of the given vector
       * This methods computes transformed normalized direction vectors only (ie. it does not apply translation)
       * @param vector - defines the Vector3 to transform
       * @param transformation - defines the transformation matrix
       * @param result - defines the Vector3 where to store the result
       */
      static TransformNormalToRef(vector, transformation, result) {
          this.TransformNormalFromFloatsToRef(vector.x, vector.y, vector.z, transformation, result);
      }
      /**
       * Sets the given vector "result" with the result of the normal transformation by the given matrix of the given floats (x, y, z)
       * This methods computes transformed normalized direction vectors only (ie. it does not apply translation)
       * @param x - define the x coordinate of the source vector
       * @param y - define the y coordinate of the source vector
       * @param z - define the z coordinate of the source vector
       * @param transformation - defines the transformation matrix
       * @param result - defines the Vector3 where to store the result
       */
      static TransformNormalFromFloatsToRef(x, y, z, transformation, result) {
          const m = transformation.m;
          result.x = x * m[0] + y * m[4] + z * m[8];
          result.y = x * m[1] + y * m[5] + z * m[9];
          result.z = x * m[2] + y * m[6] + z * m[10];
      }
      /**
       * Returns a new Vector3 located for "amount" on the CatmullRom interpolation spline defined by the vectors "value1", "value2", "value3", "value4"
       * @param value1 - defines the first control point
       * @param value2 - defines the second control point
       * @param value3 - defines the third control point
       * @param value4 - defines the fourth control point
       * @param amount - defines the amount on the spline to use
       * @returns the new Vector3
       */
      static CatmullRom(value1, value2, value3, value4, amount) {
          const squared = amount * amount;
          const cubed = amount * squared;
          const x = 0.5 *
              (2.0 * value2.x +
                  (-value1.x + value3.x) * amount +
                  (2.0 * value1.x - 5.0 * value2.x + 4.0 * value3.x - value4.x) *
                      squared +
                  (-value1.x + 3.0 * value2.x - 3.0 * value3.x + value4.x) * cubed);
          const y = 0.5 *
              (2.0 * value2.y +
                  (-value1.y + value3.y) * amount +
                  (2.0 * value1.y - 5.0 * value2.y + 4.0 * value3.y - value4.y) *
                      squared +
                  (-value1.y + 3.0 * value2.y - 3.0 * value3.y + value4.y) * cubed);
          const z = 0.5 *
              (2.0 * value2.z +
                  (-value1.z + value3.z) * amount +
                  (2.0 * value1.z - 5.0 * value2.z + 4.0 * value3.z - value4.z) *
                      squared +
                  (-value1.z + 3.0 * value2.z - 3.0 * value3.z + value4.z) * cubed);
          return new Vector3(x, y, z);
      }
      /**
       * Returns a new Vector3 set with the coordinates of "value", if the vector "value" is in the cube defined by the vectors "min" and "max"
       * If a coordinate value of "value" is lower than one of the "min" coordinate, then this "value" coordinate is set with the "min" one
       * If a coordinate value of "value" is greater than one of the "max" coordinate, then this "value" coordinate is set with the "max" one
       * @param value - defines the current value
       * @param min - defines the lower range value
       * @param max - defines the upper range value
       * @returns the new Vector3
       */
      static Clamp(value, min, max) {
          const v = new Vector3();
          Vector3.ClampToRef(value, min, max, v);
          return v;
      }
      /**
       * Sets the given vector "result" with the coordinates of "value", if the vector "value" is in the cube defined by the vectors "min" and "max"
       * If a coordinate value of "value" is lower than one of the "min" coordinate, then this "value" coordinate is set with the "min" one
       * If a coordinate value of "value" is greater than one of the "max" coordinate, then this "value" coordinate is set with the "max" one
       * @param value - defines the current value
       * @param min - defines the lower range value
       * @param max - defines the upper range value
       * @param result - defines the Vector3 where to store the result
       */
      static ClampToRef(value, min, max, result) {
          let x = value.x;
          x = x > max.x ? max.x : x;
          x = x < min.x ? min.x : x;
          let y = value.y;
          y = y > max.y ? max.y : y;
          y = y < min.y ? min.y : y;
          let z = value.z;
          z = z > max.z ? max.z : z;
          z = z < min.z ? min.z : z;
          result.copyFromFloats(x, y, z);
      }
      /**
       * Returns a new Vector3 located for "amount" (float) on the Hermite interpolation spline defined by the vectors "value1", "tangent1", "value2", "tangent2"
       * @param value1 - defines the first control point
       * @param tangent1 - defines the first tangent vector
       * @param value2 - defines the second control point
       * @param tangent2 - defines the second tangent vector
       * @param amount - defines the amount on the interpolation spline (between 0 and 1)
       * @returns the new Vector3
       */
      static Hermite(value1, tangent1, value2, tangent2, amount) {
          const squared = amount * amount;
          const cubed = amount * squared;
          const part1 = 2.0 * cubed - 3.0 * squared + 1.0;
          const part2 = -2.0 * cubed + 3.0 * squared;
          const part3 = cubed - 2.0 * squared + amount;
          const part4 = cubed - squared;
          const x = value1.x * part1 +
              value2.x * part2 +
              tangent1.x * part3 +
              tangent2.x * part4;
          const y = value1.y * part1 +
              value2.y * part2 +
              tangent1.y * part3 +
              tangent2.y * part4;
          const z = value1.z * part1 +
              value2.z * part2 +
              tangent1.z * part3 +
              tangent2.z * part4;
          return new Vector3(x, y, z);
      }
      /**
       * Returns a new Vector3 located for "amount" (float) on the linear interpolation between the vectors "start" and "end"
       * @param start - defines the start value
       * @param end - defines the end value
       * @param amount - max defines amount between both (between 0 and 1)
       * @returns the new Vector3
       */
      static Lerp(start, end, amount) {
          const result = new Vector3(0, 0, 0);
          Vector3.LerpToRef(start, end, amount, result);
          return result;
      }
      /**
       * Sets the given vector "result" with the result of the linear interpolation from the vector "start" for "amount" to the vector "end"
       * @param start - defines the start value
       * @param end - defines the end value
       * @param amount - max defines amount between both (between 0 and 1)
       * @param result - defines the Vector3 where to store the result
       */
      static LerpToRef(start, end, amount, result) {
          result.x = start.x + (end.x - start.x) * amount;
          result.y = start.y + (end.y - start.y) * amount;
          result.z = start.z + (end.z - start.z) * amount;
      }
      /**
       * Returns the dot product (float) between the vectors "left" and "right"
       * @param left - defines the left operand
       * @param right - defines the right operand
       * @returns the dot product
       */
      static Dot(left, right) {
          return left.x * right.x + left.y * right.y + left.z * right.z;
      }
      /**
       * Returns a new Vector3 as the cross product of the vectors "left" and "right"
       * The cross product is then orthogonal to both "left" and "right"
       * @param left - defines the left operand
       * @param right - defines the right operand
       * @returns the cross product
       */
      static Cross(left, right) {
          const result = Vector3.Zero();
          Vector3.CrossToRef(left, right, result);
          return result;
      }
      /**
       * Sets the given vector "result" with the cross product of "left" and "right"
       * The cross product is then orthogonal to both "left" and "right"
       * @param left - defines the left operand
       * @param right - defines the right operand
       * @param result - defines the Vector3 where to store the result
       */
      static CrossToRef(left, right, result) {
          const x = left.y * right.z - left.z * right.y;
          const y = left.z * right.x - left.x * right.z;
          const z = left.x * right.y - left.y * right.x;
          result.copyFromFloats(x, y, z);
      }
      /**
       * Returns a new Vector3 as the normalization of the given vector
       * @param vector - defines the Vector3 to normalize
       * @returns the new Vector3
       */
      static Normalize(vector) {
          const result = Vector3.Zero();
          Vector3.NormalizeToRef(vector, result);
          return result;
      }
      /**
       * Sets the given vector "result" with the normalization of the given first vector
       * @param vector - defines the Vector3 to normalize
       * @param result - defines the Vector3 where to store the result
       */
      static NormalizeToRef(vector, result) {
          vector.normalizeToRef(result);
      }
      /**
       * Gets the minimal coordinate values between two Vector3
       * @param left - defines the first operand
       * @param right - defines the second operand
       * @returns the new Vector3
       */
      static Minimize(left, right) {
          const min = new Vector3(left.x, left.y, left.z);
          min.minimizeInPlace(right);
          return min;
      }
      /**
       * Gets the maximal coordinate values between two Vector3
       * @param left - defines the first operand
       * @param right - defines the second operand
       * @returns the new Vector3
       */
      static Maximize(left, right) {
          const max = new Vector3(left.x, left.y, left.z);
          max.maximizeInPlace(right);
          return max;
      }
      /**
       * Returns the distance between the vectors "value1" and "value2"
       * @param value1 - defines the first operand
       * @param value2 - defines the second operand
       * @returns the distance
       */
      static Distance(value1, value2) {
          return Math.sqrt(Vector3.DistanceSquared(value1, value2));
      }
      /**
       * Returns the squared distance between the vectors "value1" and "value2"
       * @param value1 - defines the first operand
       * @param value2 - defines the second operand
       * @returns the squared distance
       */
      static DistanceSquared(value1, value2) {
          const x = value1.x - value2.x;
          const y = value1.y - value2.y;
          const z = value1.z - value2.z;
          return x * x + y * y + z * z;
      }
      /**
       * Returns a new Vector3 located at the center between "value1" and "value2"
       * @param value1 - defines the first operand
       * @param value2 - defines the second operand
       * @returns the new Vector3
       */
      static Center(value1, value2) {
          const center = Vector3.Add(value1, value2);
          center.scaleInPlace(0.5);
          return center;
      }
      /**
       * Given three orthogonal normalized left-handed oriented Vector3 axis in space (target system),
       * RotationFromAxis() returns the rotation Euler angles (ex : rotation.x, rotation.y, rotation.z) to apply
       * to something in order to rotate it from its local system to the given target system
       * Note: axis1, axis2 and axis3 are normalized during this operation
       * @param axis1 - defines the first axis
       * @param axis2 - defines the second axis
       * @param axis3 - defines the third axis
       * @returns a new Vector3
       */
      static RotationFromAxis(axis1, axis2, axis3) {
          const rotation = Vector3.Zero();
          Vector3.RotationFromAxisToRef(axis1, axis2, axis3, rotation);
          return rotation;
      }
      /**
       * The same than RotationFromAxis but updates the given ref Vector3 parameter instead of returning a new Vector3
       * @param axis1 - defines the first axis
       * @param axis2 - defines the second axis
       * @param axis3 - defines the third axis
       * @param ref - defines the Vector3 where to store the result
       */
      static RotationFromAxisToRef(axis1, axis2, axis3, ref) {
          const quat = preallocatedVariables_1$1.MathTmp.Quaternion[0];
          Quaternion_1$1.Quaternion.RotationQuaternionFromAxisToRef(axis1, axis2, axis3, quat);
          ref.copyFrom(quat.eulerAngles);
      }
      /**
       * Creates a string representation of the Vector3
       * @returns a string with the Vector3 coordinates.
       */
      toString() {
          return `(${this.x}, ${this.y}, ${this.z})`;
      }
      /**
       * Gets the class name
       * @returns the string "Vector3"
       */
      getClassName() {
          return 'Vector3';
      }
      /**
       * Creates the Vector3 hash code
       * @returns a number which tends to be unique between Vector3 instances
       */
      getHashCode() {
          let hash = this.x || 0;
          hash = (hash * 397) ^ (this.y || 0);
          hash = (hash * 397) ^ (this.z || 0);
          return hash;
      }
      // Operators
      /**
       * Creates an array containing three elements : the coordinates of the Vector3
       * @returns a new array of numbers
       */
      asArray() {
          const result = [];
          this.toArray(result, 0);
          return result;
      }
      /**
       * Populates the given array or FloatArray from the given index with the successive coordinates of the Vector3
       * @param array - defines the destination array
       * @param index - defines the offset in the destination array
       * @returns the current Vector3
       */
      toArray(array, index = 0) {
          array[index] = this.x;
          array[index + 1] = this.y;
          array[index + 2] = this.z;
          return this;
      }
      /**
       * Converts the current Vector3 into a quaternion (considering that the Vector3 contains Euler angles representation of a rotation)
       * @returns a new Quaternion object, computed from the Vector3 coordinates
       */
      toQuaternion() {
          return Quaternion_1$1.Quaternion.Identity.setEuler(this.y, this.x, this.z);
      }
      /**
       * Adds the given vector to the current Vector3
       * @param otherVector - defines the second operand
       * @returns the current updated Vector3
       */
      addInPlace(otherVector) {
          return this.addInPlaceFromFloats(otherVector.x, otherVector.y, otherVector.z);
      }
      /**
       * Adds the given coordinates to the current Vector3
       * @param x - defines the x coordinate of the operand
       * @param y - defines the y coordinate of the operand
       * @param z - defines the z coordinate of the operand
       * @returns the current updated Vector3
       */
      addInPlaceFromFloats(x, y, z) {
          this.x += x;
          this.y += y;
          this.z += z;
          return this;
      }
      /**
       * Gets a new Vector3, result of the addition the current Vector3 and the given vector
       * @param otherVector - defines the second operand
       * @returns the resulting Vector3
       */
      add(otherVector) {
          return new Vector3(this.x + otherVector.x, this.y + otherVector.y, this.z + otherVector.z);
      }
      /**
       * Adds the current Vector3 to the given one and stores the result in the vector "result"
       * @param otherVector - defines the second operand
       * @param result - defines the Vector3 object where to store the result
       * @returns the current Vector3
       */
      addToRef(otherVector, result) {
          return result.copyFromFloats(this.x + otherVector.x, this.y + otherVector.y, this.z + otherVector.z);
      }
      /**
       * Subtract the given vector from the current Vector3
       * @param otherVector - defines the second operand
       * @returns the current updated Vector3
       */
      subtractInPlace(otherVector) {
          this.x -= otherVector.x;
          this.y -= otherVector.y;
          this.z -= otherVector.z;
          return this;
      }
      /**
       * Returns a new Vector3, result of the subtraction of the given vector from the current Vector3
       * @param otherVector - defines the second operand
       * @returns the resulting Vector3
       */
      subtract(otherVector) {
          return new Vector3(this.x - otherVector.x, this.y - otherVector.y, this.z - otherVector.z);
      }
      /**
       * Subtracts the given vector from the current Vector3 and stores the result in the vector "result".
       * @param otherVector - defines the second operand
       * @param result - defines the Vector3 object where to store the result
       * @returns the current Vector3
       */
      subtractToRef(otherVector, result) {
          return this.subtractFromFloatsToRef(otherVector.x, otherVector.y, otherVector.z, result);
      }
      /**
       * Returns a new Vector3 set with the subtraction of the given floats from the current Vector3 coordinates
       * @param x - defines the x coordinate of the operand
       * @param y - defines the y coordinate of the operand
       * @param z - defines the z coordinate of the operand
       * @returns the resulting Vector3
       */
      subtractFromFloats(x, y, z) {
          return new Vector3(this.x - x, this.y - y, this.z - z);
      }
      /**
       * Subtracts the given floats from the current Vector3 coordinates and set the given vector "result" with this result
       * @param x - defines the x coordinate of the operand
       * @param y - defines the y coordinate of the operand
       * @param z - defines the z coordinate of the operand
       * @param result - defines the Vector3 object where to store the result
       * @returns the current Vector3
       */
      subtractFromFloatsToRef(x, y, z, result) {
          return result.copyFromFloats(this.x - x, this.y - y, this.z - z);
      }
      /**
       * Multiplies this vector (with an implicit 1 in the 4th dimension) and m, and divides by perspective
       * @param matrix - The transformation matrix
       */
      applyMatrix4(matrix) {
          this.applyMatrix4ToRef(matrix, this);
      }
      /**
       * Multiplies this vector (with an implicit 1 in the 4th dimension) and m, and divides by perspective and set the given vector "result" with this result
       * @param matrix - The transformation matrix
       * @param result - defines the Vector3 object where to store the result
       * @returns the current Vector3
       */
      applyMatrix4ToRef(matrix, result) {
          const { x, y, z } = this;
          const { m } = matrix;
          const w = 1 / (m[3] * x + m[7] * y + m[11] * z + m[15]);
          result.x = (m[0] * x + m[4] * y + m[8] * z + m[12]) * w;
          result.y = (m[1] * x + m[5] * y + m[9] * z + m[13]) * w;
          result.z = (m[2] * x + m[6] * y + m[10] * z + m[14]) * w;
          return result;
      }
      /**
       * Rotates the current Vector3 based on the given quaternion
       * @param q - defines the Quaternion
       * @returns the current Vector3
       */
      rotate(q) {
          return this.rotateToRef(q, this);
      }
      /**
       * Rotates current Vector3 based on the given quaternion, but applies the rotation to target Vector3.
       * @param q - defines the Quaternion
       * @param result - defines the target Vector3
       * @returns the current Vector3
       */
      rotateToRef(q, result) {
          const { x, y, z } = this;
          const { x: qx, y: qy, z: qz, w: qw } = q;
          // calculate quat * vector
          const ix = qw * x + qy * z - qz * y;
          const iy = qw * y + qz * x - qx * z;
          const iz = qw * z + qx * y - qy * x;
          const iw = -qx * x - qy * y - qz * z;
          // calculate result * inverse quat
          result.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;
          result.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;
          result.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;
          return result;
      }
      /**
       * Gets a new Vector3 set with the current Vector3 negated coordinates
       * @returns a new Vector3
       */
      negate() {
          return new Vector3(-this.x, -this.y, -this.z);
      }
      /**
       * Multiplies the Vector3 coordinates by the float "scale"
       * @param scale - defines the multiplier factor
       * @returns the current updated Vector3
       */
      scaleInPlace(scale) {
          this.x *= scale;
          this.y *= scale;
          this.z *= scale;
          return this;
      }
      /**
       * Returns a new Vector3 set with the current Vector3 coordinates multiplied by the float "scale"
       * @param scale - defines the multiplier factor
       * @returns a new Vector3
       */
      scale(scale) {
          return new Vector3(this.x * scale, this.y * scale, this.z * scale);
      }
      /**
       * Multiplies the current Vector3 coordinates by the float "scale" and stores the result in the given vector "result" coordinates
       * @param scale - defines the multiplier factor
       * @param result - defines the Vector3 object where to store the result
       * @returns the current Vector3
       */
      scaleToRef(scale, result) {
          return result.copyFromFloats(this.x * scale, this.y * scale, this.z * scale);
      }
      /**
       * Scale the current Vector3 values by a factor and add the result to a given Vector3
       * @param scale - defines the scale factor
       * @param result - defines the Vector3 object where to store the result
       * @returns the unmodified current Vector3
       */
      scaleAndAddToRef(scale, result) {
          return result.addInPlaceFromFloats(this.x * scale, this.y * scale, this.z * scale);
      }
      /**
       * Returns true if the current Vector3 and the given vector coordinates are strictly equal
       * @param otherVector - defines the second operand
       * @returns true if both vectors are equals
       */
      equals(otherVector) {
          return (otherVector &&
              this.x === otherVector.x &&
              this.y === otherVector.y &&
              this.z === otherVector.z);
      }
      /**
       * Returns true if the current Vector3 and the given vector coordinates are distant less than epsilon
       * @param otherVector - defines the second operand
       * @param epsilon - defines the minimal distance to define values as equals
       * @returns true if both vectors are distant less than epsilon
       */
      equalsWithEpsilon(otherVector, epsilon = types_1$6.Epsilon) {
          return (otherVector &&
              Scalar_1$4.Scalar.WithinEpsilon(this.x, otherVector.x, epsilon) &&
              Scalar_1$4.Scalar.WithinEpsilon(this.y, otherVector.y, epsilon) &&
              Scalar_1$4.Scalar.WithinEpsilon(this.z, otherVector.z, epsilon));
      }
      /**
       * Returns true if the current Vector3 coordinates equals the given floats
       * @param x - defines the x coordinate of the operand
       * @param y - defines the y coordinate of the operand
       * @param z - defines the z coordinate of the operand
       * @returns true if both vectors are equals
       */
      equalsToFloats(x, y, z) {
          return this.x === x && this.y === y && this.z === z;
      }
      /**
       * Multiplies the current Vector3 coordinates by the given ones
       * @param otherVector - defines the second operand
       * @returns the current updated Vector3
       */
      multiplyInPlace(otherVector) {
          this.x *= otherVector.x;
          this.y *= otherVector.y;
          this.z *= otherVector.z;
          return this;
      }
      /**
       * Returns a new Vector3, result of the multiplication of the current Vector3 by the given vector
       * @param otherVector - defines the second operand
       * @returns the new Vector3
       */
      multiply(otherVector) {
          return this.multiplyByFloats(otherVector.x, otherVector.y, otherVector.z);
      }
      /**
       * Multiplies the current Vector3 by the given one and stores the result in the given vector "result"
       * @param otherVector - defines the second operand
       * @param result - defines the Vector3 object where to store the result
       * @returns the current Vector3
       */
      multiplyToRef(otherVector, result) {
          return result.copyFromFloats(this.x * otherVector.x, this.y * otherVector.y, this.z * otherVector.z);
      }
      /**
       * Returns a new Vector3 set with the result of the mulliplication of the current Vector3 coordinates by the given floats
       * @param x - defines the x coordinate of the operand
       * @param y - defines the y coordinate of the operand
       * @param z - defines the z coordinate of the operand
       * @returns the new Vector3
       */
      multiplyByFloats(x, y, z) {
          return new Vector3(this.x * x, this.y * y, this.z * z);
      }
      /**
       * Returns a new Vector3 set with the result of the division of the current Vector3 coordinates by the given ones
       * @param otherVector - defines the second operand
       * @returns the new Vector3
       */
      divide(otherVector) {
          return new Vector3(this.x / otherVector.x, this.y / otherVector.y, this.z / otherVector.z);
      }
      /**
       * Divides the current Vector3 coordinates by the given ones and stores the result in the given vector "result"
       * @param otherVector - defines the second operand
       * @param result - defines the Vector3 object where to store the result
       * @returns the current Vector3
       */
      divideToRef(otherVector, result) {
          return result.copyFromFloats(this.x / otherVector.x, this.y / otherVector.y, this.z / otherVector.z);
      }
      /**
       * Divides the current Vector3 coordinates by the given ones.
       * @param otherVector - defines the second operand
       * @returns the current updated Vector3
       */
      divideInPlace(otherVector) {
          return this.divideToRef(otherVector, this);
      }
      /**
       * Updates the current Vector3 with the minimal coordinate values between its and the given vector ones
       * @param other - defines the second operand
       * @returns the current updated Vector3
       */
      minimizeInPlace(other) {
          return this.minimizeInPlaceFromFloats(other.x, other.y, other.z);
      }
      /**
       * Updates the current Vector3 with the maximal coordinate values between its and the given vector ones.
       * @param other - defines the second operand
       * @returns the current updated Vector3
       */
      maximizeInPlace(other) {
          return this.maximizeInPlaceFromFloats(other.x, other.y, other.z);
      }
      /**
       * Updates the current Vector3 with the minimal coordinate values between its and the given coordinates
       * @param x - defines the x coordinate of the operand
       * @param y - defines the y coordinate of the operand
       * @param z - defines the z coordinate of the operand
       * @returns the current updated Vector3
       */
      minimizeInPlaceFromFloats(x, y, z) {
          if (x < this.x) {
              this.x = x;
          }
          if (y < this.y) {
              this.y = y;
          }
          if (z < this.z) {
              this.z = z;
          }
          return this;
      }
      /**
       * Updates the current Vector3 with the maximal coordinate values between its and the given coordinates.
       * @param x - defines the x coordinate of the operand
       * @param y - defines the y coordinate of the operand
       * @param z - defines the z coordinate of the operand
       * @returns the current updated Vector3
       */
      maximizeInPlaceFromFloats(x, y, z) {
          if (x > this.x) {
              this.x = x;
          }
          if (y > this.y) {
              this.y = y;
          }
          if (z > this.z) {
              this.z = z;
          }
          return this;
      }
      /**
       * Gets a new Vector3 from current Vector3 floored values
       * @returns a new Vector3
       */
      floor() {
          return new Vector3(Math.floor(this.x), Math.floor(this.y), Math.floor(this.z));
      }
      /**
       * Gets a new Vector3 from current Vector3 floored values
       * @returns a new Vector3
       */
      fract() {
          return new Vector3(this.x - Math.floor(this.x), this.y - Math.floor(this.y), this.z - Math.floor(this.z));
      }
      // Properties
      /**
       * Gets the length of the Vector3
       * @returns the length of the Vecto3
       */
      length() {
          return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
      }
      /**
       * Gets the squared length of the Vector3
       * @returns squared length of the Vector3
       */
      lengthSquared() {
          return this.x * this.x + this.y * this.y + this.z * this.z;
      }
      /**
       * Normalize the current Vector3.
       * Please note that this is an in place operation.
       * @returns the current updated Vector3
       */
      normalize() {
          return this.normalizeFromLength(this.length());
      }
      /**
       * Normalize the current Vector3 with the given input length.
       * Please note that this is an in place operation.
       * @param len - the length of the vector
       * @returns the current updated Vector3
       */
      normalizeFromLength(len) {
          if (len === 0 || len === 1.0) {
              return this;
          }
          return this.scaleInPlace(1.0 / len);
      }
      /**
       * Normalize the current Vector3 to a new vector
       * @returns the new Vector3
       */
      normalizeToNew() {
          const normalized = new Vector3(0, 0, 0);
          this.normalizeToRef(normalized);
          return normalized;
      }
      /**
       * Normalize the current Vector3 to the reference
       * @param reference - define the Vector3 to update
       * @returns the updated Vector3
       */
      normalizeToRef(reference) {
          const len = this.length();
          if (len === 0 || len === 1.0) {
              return reference.copyFromFloats(this.x, this.y, this.z);
          }
          return this.scaleToRef(1.0 / len, reference);
      }
      /**
       * Creates a new Vector3 copied from the current Vector3
       * @returns the new Vector3
       */
      clone() {
          return new Vector3(this.x, this.y, this.z);
      }
      /**
       * Copies the given vector coordinates to the current Vector3 ones
       * @param source - defines the source Vector3
       * @returns the current updated Vector3
       */
      copyFrom(source) {
          return this.copyFromFloats(source.x, source.y, source.z);
      }
      /**
       * Copies the given floats to the current Vector3 coordinates
       * @param x - defines the x coordinate of the operand
       * @param y - defines the y coordinate of the operand
       * @param z - defines the z coordinate of the operand
       * @returns the current updated Vector3
       */
      copyFromFloats(x, y, z) {
          this.x = x;
          this.y = y;
          this.z = z;
          return this;
      }
      /**
       * Copies the given floats to the current Vector3 coordinates
       * @param x - defines the x coordinate of the operand
       * @param y - defines the y coordinate of the operand
       * @param z - defines the z coordinate of the operand
       * @returns the current updated Vector3
       */
      set(x, y, z) {
          return this.copyFromFloats(x, y, z);
      }
      /**
       * Copies the given float to the current Vector3 coordinates
       * @param v - defines the x, y and z coordinates of the operand
       * @returns the current updated Vector3
       */
      setAll(v) {
          this.x = this.y = this.z = v;
          return this;
      }
  }
  Vector3$1.Vector3 = Vector3;

  Object.defineProperty(preallocatedVariables, "__esModule", { value: true });
  preallocatedVariables.MathTmp = void 0;
  const utils_1 = utils;
  const Vector3_1$4 = Vector3$1;
  const Quaternion_1 = Quaternion$1;
  const Matrix_1$1 = Matrix$1;
  // Temporary pre-allocated objects for engine internal use
  // usage in any internal function :
  // var tmp = Tmp.Vector3[0];   <= gets access to the first pre-created Vector3
  // There's a Tmp array per object type : int, float, Vector2, Vector3, Vector4, Quaternion, Matrix
  /**
   * @public
   * Same as Tmp but not exported to keep it only for math functions to avoid conflicts
   */
  preallocatedVariables.MathTmp = {
      Vector3: (0, utils_1.buildArray)(6, Vector3_1$4.Vector3.Zero),
      Matrix: (0, utils_1.buildArray)(2, Matrix_1$1.Matrix.Identity),
      Quaternion: (0, utils_1.buildArray)(3, Quaternion_1.Quaternion.Zero),
      staticUp: Vector3_1$4.Vector3.Up(),
      tmpMatrix: Matrix_1$1.Matrix.Zero()
  };

  var Angle$1 = {};

  Object.defineProperty(Angle$1, "__esModule", { value: true });
  Angle$1.Angle = void 0;
  /**
   * Defines angle representation
   * @public
   */
  class Angle {
      /**
       * Creates an Angle object of "radians" radians (float).
       */
      constructor(radians) {
          this._radians = radians;
          if (this._radians < 0.0) {
              this._radians += 2.0 * Math.PI;
          }
      }
      /**
       * Gets a new Angle object valued with the angle value in radians between the two given vectors
       * @param a - defines first vector
       * @param b - defines second vector
       * @returns a new Angle
       */
      static BetweenTwoPoints(a, b) {
          const delta = b.subtract(a);
          const theta = Math.atan2(delta.y, delta.x);
          return new Angle(theta);
      }
      /**
       * Gets a new Angle object from the given float in radians
       * @param radians - defines the angle value in radians
       * @returns a new Angle
       */
      static FromRadians(radians) {
          return new Angle(radians);
      }
      /**
       * Gets a new Angle object from the given float in degrees
       * @param degrees - defines the angle value in degrees
       * @returns a new Angle
       */
      static FromDegrees(degrees) {
          return new Angle((degrees * Math.PI) / 180.0);
      }
      /**
       * Get value in degrees
       * @returns the Angle value in degrees (float)
       */
      degrees() {
          return (this._radians * 180.0) / Math.PI;
      }
      /**
       * Get value in radians
       * @returns the Angle value in radians (float)
       */
      radians() {
          return this._radians;
      }
  }
  Angle$1.Angle = Angle;

  var Arc2$1 = {};

  var Vector2$1 = {};

  Object.defineProperty(Vector2$1, "__esModule", { value: true });
  Vector2$1.Vector2 = void 0;
  const types_1$5 = types;
  const Scalar_1$3 = Scalar$1;
  /**
   * Class representing a vector containing 2 coordinates
   * @public
   */
  class Vector2 {
      /**
       * Creates a new Vector2 from the given x and y coordinates
       * @param x - defines the first coordinate
       * @param y - defines the second coordinate
       */
      constructor(
      /** defines the first coordinate */
      x = 0, 
      /** defines the second coordinate */
      y = 0) {
          this.x = x;
          this.y = y;
      }
      /**
       * Gets a new Vector2(0, 0)
       * @returns a new Vector2
       */
      static Zero() {
          return new Vector2(0, 0);
      }
      /**
       * Gets a new Vector2(1, 1)
       * @returns a new Vector2
       */
      static One() {
          return new Vector2(1, 1);
      }
      /**
       * Returns a new Vector2 as the result of the addition of the two given vectors.
       * @param vector1 - the first vector
       * @param vector2 - the second vector
       * @returns the resulting vector
       */
      static Add(vector1, vector2) {
          return new Vector2(vector1.x, vector1.y).addInPlace(vector2);
      }
      /**
       * Gets a new Vector2 set from the given index element of the given array
       * @param array - defines the data source
       * @param offset - defines the offset in the data source
       * @returns a new Vector2
       */
      static FromArray(array, offset = 0) {
          return new Vector2(array[offset], array[offset + 1]);
      }
      /**
       * Sets "result" from the given index element of the given array
       * @param array - defines the data source
       * @param offset - defines the offset in the data source
       * @param result - defines the target vector
       */
      static FromArrayToRef(array, offset, result) {
          result.x = array[offset];
          result.y = array[offset + 1];
      }
      /**
       * Gets a new Vector2 located for "amount" (float) on the CatmullRom spline defined by the given four Vector2
       * @param value1 - defines 1st point of control
       * @param value2 - defines 2nd point of control
       * @param value3 - defines 3rd point of control
       * @param value4 - defines 4th point of control
       * @param amount - defines the interpolation factor
       * @returns a new Vector2
       */
      static CatmullRom(value1, value2, value3, value4, amount) {
          const squared = amount * amount;
          const cubed = amount * squared;
          const x = 0.5 *
              (2.0 * value2.x +
                  (-value1.x + value3.x) * amount +
                  (2.0 * value1.x - 5.0 * value2.x + 4.0 * value3.x - value4.x) *
                      squared +
                  (-value1.x + 3.0 * value2.x - 3.0 * value3.x + value4.x) * cubed);
          const y = 0.5 *
              (2.0 * value2.y +
                  (-value1.y + value3.y) * amount +
                  (2.0 * value1.y - 5.0 * value2.y + 4.0 * value3.y - value4.y) *
                      squared +
                  (-value1.y + 3.0 * value2.y - 3.0 * value3.y + value4.y) * cubed);
          return new Vector2(x, y);
      }
      /**
       * Returns a new Vector2 set with same the coordinates than "value" ones if the vector "value" is in the square defined by "min" and "max".
       * If a coordinate of "value" is lower than "min" coordinates, the returned Vector2 is given this "min" coordinate.
       * If a coordinate of "value" is greater than "max" coordinates, the returned Vector2 is given this "max" coordinate
       * @param value - defines the value to clamp
       * @param min - defines the lower limit
       * @param max - defines the upper limit
       * @returns a new Vector2
       */
      static Clamp(value, min, max) {
          let x = value.x;
          x = x > max.x ? max.x : x;
          x = x < min.x ? min.x : x;
          let y = value.y;
          y = y > max.y ? max.y : y;
          y = y < min.y ? min.y : y;
          return new Vector2(x, y);
      }
      /**
       * Returns a new Vector2 located for "amount" (float) on the Hermite spline defined by the vectors "value1", "value3", "tangent1", "tangent2"
       * @param value1 - defines the 1st control point
       * @param tangent1 - defines the outgoing tangent
       * @param value2 - defines the 2nd control point
       * @param tangent2 - defines the incoming tangent
       * @param amount - defines the interpolation factor
       * @returns a new Vector2
       */
      static Hermite(value1, tangent1, value2, tangent2, amount) {
          const squared = amount * amount;
          const cubed = amount * squared;
          const part1 = 2.0 * cubed - 3.0 * squared + 1.0;
          const part2 = -2.0 * cubed + 3.0 * squared;
          const part3 = cubed - 2.0 * squared + amount;
          const part4 = cubed - squared;
          const x = value1.x * part1 +
              value2.x * part2 +
              tangent1.x * part3 +
              tangent2.x * part4;
          const y = value1.y * part1 +
              value2.y * part2 +
              tangent1.y * part3 +
              tangent2.y * part4;
          return new Vector2(x, y);
      }
      /**
       * Returns a new Vector2 located for "amount" (float) on the linear interpolation between the vector "start" adn the vector "end".
       * @param start - defines the start vector
       * @param end - defines the end vector
       * @param amount - defines the interpolation factor
       * @returns a new Vector2
       */
      static Lerp(start, end, amount) {
          const x = start.x + (end.x - start.x) * amount;
          const y = start.y + (end.y - start.y) * amount;
          return new Vector2(x, y);
      }
      /**
       * Gets the dot product of the vector "left" and the vector "right"
       * @param left - defines first vector
       * @param right - defines second vector
       * @returns the dot product (float)
       */
      static Dot(left, right) {
          return left.x * right.x + left.y * right.y;
      }
      /**
       * Returns a new Vector2 equal to the normalized given vector
       * @param vector - defines the vector to normalize
       * @returns a new Vector2
       */
      static Normalize(vector) {
          const newVector = new Vector2(vector.x, vector.y);
          newVector.normalize();
          return newVector;
      }
      /**
       * Gets a new Vector2 set with the minimal coordinate values from the "left" and "right" vectors
       * @param left - defines 1st vector
       * @param right - defines 2nd vector
       * @returns a new Vector2
       */
      static Minimize(left, right) {
          const x = left.x < right.x ? left.x : right.x;
          const y = left.y < right.y ? left.y : right.y;
          return new Vector2(x, y);
      }
      /**
       * Gets a new Vecto2 set with the maximal coordinate values from the "left" and "right" vectors
       * @param left - defines 1st vector
       * @param right - defines 2nd vector
       * @returns a new Vector2
       */
      static Maximize(left, right) {
          const x = left.x > right.x ? left.x : right.x;
          const y = left.y > right.y ? left.y : right.y;
          return new Vector2(x, y);
      }
      /**
       * Gets a new Vector2 set with the transformed coordinates of the given vector by the given transformation matrix
       * @param vector - defines the vector to transform
       * @param transformation - defines the matrix to apply
       * @returns a new Vector2
       */
      static Transform(vector, transformation) {
          const r = Vector2.Zero();
          Vector2.TransformToRef(vector, transformation, r);
          return r;
      }
      /**
       * Transforms the given vector coordinates by the given transformation matrix and stores the result in the vector "result" coordinates
       * @param vector - defines the vector to transform
       * @param transformation - defines the matrix to apply
       * @param result - defines the target vector
       */
      static TransformToRef(vector, transformation, result) {
          const m = transformation.m;
          const x = vector.x * m[0] + vector.y * m[4] + m[12];
          const y = vector.x * m[1] + vector.y * m[5] + m[13];
          result.x = x;
          result.y = y;
      }
      /**
       * Determines if a given vector is included in a triangle
       * @param p - defines the vector to test
       * @param p0 - defines 1st triangle point
       * @param p1 - defines 2nd triangle point
       * @param p2 - defines 3rd triangle point
       * @returns true if the point "p" is in the triangle defined by the vertors "p0", "p1", "p2"
       */
      static PointInTriangle(p, p0, p1, p2) {
          const a = (1 / 2) *
              (-p1.y * p2.x +
                  p0.y * (-p1.x + p2.x) +
                  p0.x * (p1.y - p2.y) +
                  p1.x * p2.y);
          const sign = a < 0 ? -1 : 1;
          const s = (p0.y * p2.x - p0.x * p2.y + (p2.y - p0.y) * p.x + (p0.x - p2.x) * p.y) *
              sign;
          const t = (p0.x * p1.y - p0.y * p1.x + (p0.y - p1.y) * p.x + (p1.x - p0.x) * p.y) *
              sign;
          return s > 0 && t > 0 && s + t < 2 * a * sign;
      }
      /**
       * Gets the distance between the vectors "value1" and "value2"
       * @param value1 - defines first vector
       * @param value2 - defines second vector
       * @returns the distance between vectors
       */
      static Distance(value1, value2) {
          return Math.sqrt(Vector2.DistanceSquared(value1, value2));
      }
      /**
       * Returns the squared distance between the vectors "value1" and "value2"
       * @param value1 - defines first vector
       * @param value2 - defines second vector
       * @returns the squared distance between vectors
       */
      static DistanceSquared(value1, value2) {
          const x = value1.x - value2.x;
          const y = value1.y - value2.y;
          return x * x + y * y;
      }
      /**
       * Gets a new Vector2 located at the center of the vectors "value1" and "value2"
       * @param value1 - defines first vector
       * @param value2 - defines second vector
       * @returns a new Vector2
       */
      static Center(value1, value2) {
          const center = Vector2.Add(value1, value2);
          center.scaleInPlace(0.5);
          return center;
      }
      /**
       * Gets the shortest distance (float) between the point "p" and the segment defined by the two points "segA" and "segB".
       * @param p - defines the middle point
       * @param segA - defines one point of the segment
       * @param segB - defines the other point of the segment
       * @returns the shortest distance
       */
      static DistanceOfPointFromSegment(p, segA, segB) {
          const l2 = Vector2.DistanceSquared(segA, segB);
          if (l2 === 0.0) {
              return Vector2.Distance(p, segA);
          }
          const v = segB.subtract(segA);
          const t = Math.max(0, Math.min(1, Vector2.Dot(p.subtract(segA), v) / l2));
          const proj = segA.add(v.multiplyByFloats(t, t));
          return Vector2.Distance(p, proj);
      }
      /**
       * Gets a string with the Vector2 coordinates
       * @returns a string with the Vector2 coordinates
       */
      toString() {
          return '{X: ' + this.x + ' Y:' + this.y + '}';
      }
      /**
       * Gets class name
       * @returns the string "Vector2"
       */
      getClassName() {
          return 'Vector2';
      }
      /**
       * Gets current vector hash code
       * @returns the Vector2 hash code as a number
       */
      getHashCode() {
          let hash = this.x || 0;
          hash = (hash * 397) ^ (this.y || 0);
          return hash;
      }
      // Operators
      /**
       * Sets the Vector2 coordinates in the given array or FloatArray from the given index.
       * @param array - defines the source array
       * @param index - defines the offset in source array
       * @returns the current Vector2
       */
      toArray(array, index = 0) {
          array[index] = this.x;
          array[index + 1] = this.y;
          return this;
      }
      /**
       * Copy the current vector to an array
       * @returns a new array with 2 elements: the Vector2 coordinates.
       */
      asArray() {
          const result = new Array();
          this.toArray(result, 0);
          return result;
      }
      /**
       * Sets the Vector2 coordinates with the given Vector2 coordinates
       * @param source - defines the source Vector2
       * @returns the current updated Vector2
       */
      copyFrom(source) {
          this.x = source.x;
          this.y = source.y;
          return this;
      }
      /**
       * Sets the Vector2 coordinates with the given floats
       * @param x - defines the first coordinate
       * @param y - defines the second coordinate
       * @returns the current updated Vector2
       */
      copyFromFloats(x, y) {
          this.x = x;
          this.y = y;
          return this;
      }
      /**
       * Sets the Vector2 coordinates with the given floats
       * @param x - defines the first coordinate
       * @param y - defines the second coordinate
       * @returns the current updated Vector2
       */
      set(x, y) {
          return this.copyFromFloats(x, y);
      }
      /**
       * Add another vector with the current one
       * @param otherVector - defines the other vector
       * @returns a new Vector2 set with the addition of the current Vector2 and the given one coordinates
       */
      add(otherVector) {
          return new Vector2(this.x + otherVector.x, this.y + otherVector.y);
      }
      /**
       * Sets the "result" coordinates with the addition of the current Vector2 and the given one coordinates
       * @param otherVector - defines the other vector
       * @param result - defines the target vector
       * @returns the unmodified current Vector2
       */
      addToRef(otherVector, result) {
          result.x = this.x + otherVector.x;
          result.y = this.y + otherVector.y;
          return this;
      }
      /**
       * Set the Vector2 coordinates by adding the given Vector2 coordinates
       * @param otherVector - defines the other vector
       * @returns the current updated Vector2
       */
      addInPlace(otherVector) {
          this.x += otherVector.x;
          this.y += otherVector.y;
          return this;
      }
      /**
       * Gets a new Vector2 by adding the current Vector2 coordinates to the given Vector3 x, y coordinates
       * @param otherVector - defines the other vector
       * @returns a new Vector2
       */
      addVector3(otherVector) {
          return new Vector2(this.x + otherVector.x, this.y + otherVector.y);
      }
      /**
       * Gets a new Vector2 set with the subtracted coordinates of the given one from the current Vector2
       * @param otherVector - defines the other vector
       * @returns a new Vector2
       */
      subtract(otherVector) {
          return new Vector2(this.x - otherVector.x, this.y - otherVector.y);
      }
      /**
       * Sets the "result" coordinates with the subtraction of the given one from the current Vector2 coordinates.
       * @param otherVector - defines the other vector
       * @param result - defines the target vector
       * @returns the unmodified current Vector2
       */
      subtractToRef(otherVector, result) {
          result.x = this.x - otherVector.x;
          result.y = this.y - otherVector.y;
          return this;
      }
      /**
       * Sets the current Vector2 coordinates by subtracting from it the given one coordinates
       * @param otherVector - defines the other vector
       * @returns the current updated Vector2
       */
      subtractInPlace(otherVector) {
          this.x -= otherVector.x;
          this.y -= otherVector.y;
          return this;
      }
      /**
       * Multiplies in place the current Vector2 coordinates by the given ones
       * @param otherVector - defines the other vector
       * @returns the current updated Vector2
       */
      multiplyInPlace(otherVector) {
          this.x *= otherVector.x;
          this.y *= otherVector.y;
          return this;
      }
      /**
       * Returns a new Vector2 set with the multiplication of the current Vector2 and the given one coordinates
       * @param otherVector - defines the other vector
       * @returns a new Vector2
       */
      multiply(otherVector) {
          return new Vector2(this.x * otherVector.x, this.y * otherVector.y);
      }
      /**
       * Sets "result" coordinates with the multiplication of the current Vector2 and the given one coordinates
       * @param otherVector - defines the other vector
       * @param result - defines the target vector
       * @returns the unmodified current Vector2
       */
      multiplyToRef(otherVector, result) {
          result.x = this.x * otherVector.x;
          result.y = this.y * otherVector.y;
          return this;
      }
      /**
       * Gets a new Vector2 set with the Vector2 coordinates multiplied by the given floats
       * @param x - defines the first coordinate
       * @param y - defines the second coordinate
       * @returns a new Vector2
       */
      multiplyByFloats(x, y) {
          return new Vector2(this.x * x, this.y * y);
      }
      /**
       * Returns a new Vector2 set with the Vector2 coordinates divided by the given one coordinates
       * @param otherVector - defines the other vector
       * @returns a new Vector2
       */
      divide(otherVector) {
          return new Vector2(this.x / otherVector.x, this.y / otherVector.y);
      }
      /**
       * Sets the "result" coordinates with the Vector2 divided by the given one coordinates
       * @param otherVector - defines the other vector
       * @param result - defines the target vector
       * @returns the unmodified current Vector2
       */
      divideToRef(otherVector, result) {
          result.x = this.x / otherVector.x;
          result.y = this.y / otherVector.y;
          return this;
      }
      /**
       * Divides the current Vector2 coordinates by the given ones
       * @param otherVector - defines the other vector
       * @returns the current updated Vector2
       */
      divideInPlace(otherVector) {
          return this.divideToRef(otherVector, this);
      }
      /**
       * Gets a new Vector2 with current Vector2 negated coordinates
       * @returns a new Vector2
       */
      negate() {
          return new Vector2(-this.x, -this.y);
      }
      /**
       * Multiply the Vector2 coordinates by scale
       * @param scale - defines the scaling factor
       * @returns the current updated Vector2
       */
      scaleInPlace(scale) {
          this.x *= scale;
          this.y *= scale;
          return this;
      }
      /**
       * Returns a new Vector2 scaled by "scale" from the current Vector2
       * @param scale - defines the scaling factor
       * @returns a new Vector2
       */
      scale(scale) {
          const result = new Vector2(0, 0);
          this.scaleToRef(scale, result);
          return result;
      }
      /**
       * Scale the current Vector2 values by a factor to a given Vector2
       * @param scale - defines the scale factor
       * @param result - defines the Vector2 object where to store the result
       * @returns the unmodified current Vector2
       */
      scaleToRef(scale, result) {
          result.x = this.x * scale;
          result.y = this.y * scale;
          return this;
      }
      /**
       * Scale the current Vector2 values by a factor and add the result to a given Vector2
       * @param scale - defines the scale factor
       * @param result - defines the Vector2 object where to store the result
       * @returns the unmodified current Vector2
       */
      scaleAndAddToRef(scale, result) {
          result.x += this.x * scale;
          result.y += this.y * scale;
          return this;
      }
      /**
       * Gets a boolean if two vectors are equals
       * @param otherVector - defines the other vector
       * @returns true if the given vector coordinates strictly equal the current Vector2 ones
       */
      equals(otherVector) {
          return otherVector && this.x === otherVector.x && this.y === otherVector.y;
      }
      /**
       * Gets a boolean if two vectors are equals (using an epsilon value)
       * @param otherVector - defines the other vector
       * @param epsilon - defines the minimal distance to consider equality
       * @returns true if the given vector coordinates are close to the current ones by a distance of epsilon.
       */
      equalsWithEpsilon(otherVector, epsilon = types_1$5.Epsilon) {
          return (otherVector &&
              Scalar_1$3.Scalar.WithinEpsilon(this.x, otherVector.x, epsilon) &&
              Scalar_1$3.Scalar.WithinEpsilon(this.y, otherVector.y, epsilon));
      }
      /**
       * Gets a new Vector2 from current Vector2 floored values
       * @returns a new Vector2
       */
      floor() {
          return new Vector2(Math.floor(this.x), Math.floor(this.y));
      }
      /**
       * Gets a new Vector2 from current Vector2 floored values
       * @returns a new Vector2
       */
      fract() {
          return new Vector2(this.x - Math.floor(this.x), this.y - Math.floor(this.y));
      }
      // Properties
      /**
       * Gets the length of the vector
       * @returns the vector length (float)
       */
      length() {
          return Math.sqrt(this.x * this.x + this.y * this.y);
      }
      /**
       * Gets the vector squared length
       * @returns the vector squared length (float)
       */
      lengthSquared() {
          return this.x * this.x + this.y * this.y;
      }
      // Methods
      /**
       * Normalize the vector
       * @returns the current updated Vector2
       */
      normalize() {
          const len = this.length();
          if (len === 0) {
              return this;
          }
          const num = 1.0 / len;
          this.x *= num;
          this.y *= num;
          return this;
      }
      /**
       * Gets a new Vector2 copied from the Vector2
       * @returns a new Vector2
       */
      clone() {
          return new Vector2(this.x, this.y);
      }
  }
  Vector2$1.Vector2 = Vector2;

  Object.defineProperty(Arc2$1, "__esModule", { value: true });
  Arc2$1.Arc2 = void 0;
  const Angle_1 = Angle$1;
  const Vector2_1$1 = Vector2$1;
  const types_1$4 = types;
  /**
   * This represents an arc in a 2d space.
   * @public
   */
  class Arc2 {
      /**
       * Creates an Arc object from the three given points : start, middle and end.
       * @param startPoint - Defines the start point of the arc
       * @param midPoint - Defines the midlle point of the arc
       * @param endPoint - Defines the end point of the arc
       */
      constructor(
      /** Defines the start point of the arc */
      startPoint, 
      /** Defines the mid point of the arc */
      midPoint, 
      /** Defines the end point of the arc */
      endPoint) {
          this.startPoint = startPoint;
          this.midPoint = midPoint;
          this.endPoint = endPoint;
          const temp = Math.pow(midPoint.x, 2) + Math.pow(midPoint.y, 2);
          const startToMid = (Math.pow(startPoint.x, 2) + Math.pow(startPoint.y, 2) - temp) / 2;
          const midToEnd = (temp - Math.pow(endPoint.x, 2) - Math.pow(endPoint.y, 2)) / 2;
          const det = (startPoint.x - midPoint.x) * (midPoint.y - endPoint.y) -
              (midPoint.x - endPoint.x) * (startPoint.y - midPoint.y);
          this.centerPoint = new Vector2_1$1.Vector2((startToMid * (midPoint.y - endPoint.y) -
              midToEnd * (startPoint.y - midPoint.y)) /
              det, ((startPoint.x - midPoint.x) * midToEnd -
              (midPoint.x - endPoint.x) * startToMid) /
              det);
          this.radius = this.centerPoint.subtract(this.startPoint).length();
          this.startAngle = Angle_1.Angle.BetweenTwoPoints(this.centerPoint, this.startPoint);
          const a1 = this.startAngle.degrees();
          let a2 = Angle_1.Angle.BetweenTwoPoints(this.centerPoint, this.midPoint).degrees();
          let a3 = Angle_1.Angle.BetweenTwoPoints(this.centerPoint, this.endPoint).degrees();
          // angles correction
          if (a2 - a1 > +180.0) {
              a2 -= 360.0;
          }
          if (a2 - a1 < -180.0) {
              a2 += 360.0;
          }
          if (a3 - a2 > +180.0) {
              a3 -= 360.0;
          }
          if (a3 - a2 < -180.0) {
              a3 += 360.0;
          }
          this.orientation = a2 - a1 < 0 ? types_1$4.Orientation.CW : types_1$4.Orientation.CCW;
          this.angle = Angle_1.Angle.FromDegrees(this.orientation === types_1$4.Orientation.CW ? a1 - a3 : a3 - a1);
      }
  }
  Arc2$1.Arc2 = Arc2;

  var Axis$1 = {};

  Object.defineProperty(Axis$1, "__esModule", { value: true });
  Axis$1.Axis = void 0;
  const Vector3_1$3 = Vector3$1;
  /**
   * Defines the 3 main axes
   * @public
   */
  class Axis {
  }
  Axis$1.Axis = Axis;
  /** X axis */
  Axis.X = new Vector3_1$3.Vector3(1.0, 0.0, 0.0);
  /** Y axis */
  Axis.Y = new Vector3_1$3.Vector3(0.0, 1.0, 0.0);
  /** Z axis */
  Axis.Z = new Vector3_1$3.Vector3(0.0, 0.0, 1.0);

  var BezierCurve$1 = {};

  Object.defineProperty(BezierCurve$1, "__esModule", { value: true });
  BezierCurve$1.BezierCurve = void 0;
  /**
   * Class used to represent a Bezier curve
   * @public
   */
  class BezierCurve {
      /**
       * Returns the cubic Bezier interpolated value (float) at "t" (float) from the given x1, y1, x2, y2 floats
       * @param t - defines the time
       * @param x1 - defines the left coordinate on X axis
       * @param y1 - defines the left coordinate on Y axis
       * @param x2 - defines the right coordinate on X axis
       * @param y2 - defines the right coordinate on Y axis
       * @returns the interpolated value
       */
      static Interpolate(t, x1, y1, x2, y2) {
          // Extract X (which is equal to time here)
          const f0 = 1 - 3 * x2 + 3 * x1;
          const f1 = 3 * x2 - 6 * x1;
          const f2 = 3 * x1;
          let refinedT = t;
          for (let i = 0; i < 5; i++) {
              const refinedT2 = refinedT * refinedT;
              const refinedT3 = refinedT2 * refinedT;
              const x = f0 * refinedT3 + f1 * refinedT2 + f2 * refinedT;
              const slope = 1.0 / (3.0 * f0 * refinedT2 + 2.0 * f1 * refinedT + f2);
              refinedT -= (x - t) * slope;
              refinedT = Math.min(1, Math.max(0, refinedT));
          }
          // Resolve cubic bezier for the given x
          return (3 * Math.pow(1 - refinedT, 2) * refinedT * y1 +
              3 * (1 - refinedT) * Math.pow(refinedT, 2) * y2 +
              Math.pow(refinedT, 3));
      }
  }
  BezierCurve$1.BezierCurve = BezierCurve;

  var Color3$1 = {};

  var Color4$1 = {};

  Object.defineProperty(Color4$1, "__esModule", { value: true });
  Color4$1.Color4 = void 0;
  const Scalar_1$2 = Scalar$1;
  const types_1$3 = types;
  /**
   * Class used to hold a RBGA color
   * @public
   */
  class Color4 {
      /**
       * Creates a new Color4 object from red, green, blue values, all between 0 and 1
       * @param r - defines the red component (between 0 and 1, default is 0)
       * @param g - defines the green component (between 0 and 1, default is 0)
       * @param b - defines the blue component (between 0 and 1, default is 0)
       * @param a - defines the alpha component (between 0 and 1, default is 1)
       */
      constructor(
      /**
       * Defines the red component (between 0 and 1, default is 0)
       */
      r = 0, 
      /**
       * Defines the green component (between 0 and 1, default is 0)
       */
      g = 0, 
      /**
       * Defines the blue component (between 0 and 1, default is 0)
       */
      b = 0, 
      /**
       * Defines the alpha component (between 0 and 1, default is 1)
       */
      a = 1) {
          this.r = r;
          this.g = g;
          this.b = b;
          this.a = a;
      }
      // Statics
      /**
       * Creates a new Color4 from the string containing valid hexadecimal values
       * @param hex - defines a string containing valid hexadecimal values
       * @returns a new Color4 object
       */
      static FromHexString(hex) {
          if (hex.substring(0, 1) !== '#' || hex.length !== 9) {
              return new Color4(0.0, 0.0, 0.0, 0.0);
          }
          const r = parseInt(hex.substring(1, 3), 16);
          const g = parseInt(hex.substring(3, 5), 16);
          const b = parseInt(hex.substring(5, 7), 16);
          const a = parseInt(hex.substring(7, 9), 16);
          return Color4.FromInts(r, g, b, a);
      }
      /**
       * Creates a new Color4 object set with the linearly interpolated values of "amount" between the left Color4 object and the right Color4 object
       * @param left - defines the start value
       * @param right - defines the end value
       * @param amount - defines the gradient factor
       * @returns a new Color4 object
       */
      static Lerp(left, right, amount) {
          const result = new Color4(0.0, 0.0, 0.0, 0.0);
          Color4.LerpToRef(left, right, amount, result);
          return result;
      }
      /**
       * Set the given "result" with the linearly interpolated values of "amount" between the left Color4 object and the right Color4 object
       * @param left - defines the start value
       * @param right - defines the end value
       * @param amount - defines the gradient factor
       * @param result - defines the Color4 object where to store data
       */
      static LerpToRef(left, right, amount, result) {
          result.r = left.r + (right.r - left.r) * amount;
          result.g = left.g + (right.g - left.g) * amount;
          result.b = left.b + (right.b - left.b) * amount;
          result.a = left.a + (right.a - left.a) * amount;
      }
      /**
       * Returns a Color4 value containing a red color
       * @returns a new Color3 object
       */
      static Red() {
          return new Color4(1.0, 0, 0, 1.0);
      }
      /**
       * Returns a Color4 value containing a green color
       * @returns a new Color4 object
       */
      static Green() {
          return new Color4(0, 1.0, 0, 1.0);
      }
      /**
       * Returns a Color4 value containing a blue color
       * @returns a new Color4 object
       */
      static Blue() {
          return new Color4(0, 0, 1.0, 1.0);
      }
      /**
       * Returns a Color4 value containing a black color
       * @returns a new Color4 object
       */
      static Black() {
          return new Color4(0, 0, 0, 1);
      }
      /**
       * Returns a Color4 value containing a white color
       * @returns a new Color4 object
       */
      static White() {
          return new Color4(1, 1, 1, 1);
      }
      /**
       * Returns a Color4 value containing a purple color
       * @returns a new Color4 object
       */
      static Purple() {
          return new Color4(0.5, 0, 0.5, 1);
      }
      /**
       * Returns a Color4 value containing a magenta color
       * @returns a new Color4 object
       */
      static Magenta() {
          return new Color4(1, 0, 1, 1);
      }
      /**
       * Returns a Color4 value containing a yellow color
       * @returns a new Color4 object
       */
      static Yellow() {
          return new Color4(1, 1, 0, 1);
      }
      /**
       * Returns a Color4 value containing a gray color
       * @returns a new Color4 object
       */
      static Gray() {
          return new Color4(0.5, 0.5, 0.5, 1.0);
      }
      /**
       * Returns a Color4 value containing a teal color
       * @returns a new Color4 object
       */
      static Teal() {
          return new Color4(0, 1.0, 1.0, 1.0);
      }
      /**
       * Returns a Color4 value containing a transparent color
       * @returns a new Color4 object
       */
      static Clear() {
          return new Color4(0, 0, 0, 0);
      }
      /**
       * Creates a new Color4 from a Color3 and an alpha value
       * @param color3 - defines the source Color3 to read from
       * @param alpha - defines the alpha component (1.0 by default)
       * @returns a new Color4 object
       */
      static FromColor3(color3, alpha = 1.0) {
          return new Color4(color3.r, color3.g, color3.b, alpha);
      }
      /**
       * Creates a new Color4 from the starting index element of the given array
       * @param array - defines the source array to read from
       * @param offset - defines the offset in the source array
       * @returns a new Color4 object
       */
      static FromArray(array, offset = 0) {
          return new Color4(array[offset], array[offset + 1], array[offset + 2], array[offset + 3]);
      }
      /**
       * Creates a new Color3 from integer values (less than 256)
       * @param r - defines the red component to read from (value between 0 and 255)
       * @param g - defines the green component to read from (value between 0 and 255)
       * @param b - defines the blue component to read from (value between 0 and 255)
       * @param a - defines the alpha component to read from (value between 0 and 255)
       * @returns a new Color3 object
       */
      static FromInts(r, g, b, a) {
          return new Color4(r / 255.0, g / 255.0, b / 255.0, a / 255.0);
      }
      /**
       * Check the content of a given array and convert it to an array containing RGBA data
       * If the original array was already containing count * 4 values then it is returned directly
       * @param colors - defines the array to check
       * @param count - defines the number of RGBA data to expect
       * @returns an array containing count * 4 values (RGBA)
       */
      static CheckColors4(colors, count) {
          // Check if color3 was used
          if (colors.length === count * 3) {
              const colors4 = [];
              for (let index = 0; index < colors.length; index += 3) {
                  const newIndex = (index / 3) * 4;
                  colors4[newIndex] = colors[index];
                  colors4[newIndex + 1] = colors[index + 1];
                  colors4[newIndex + 2] = colors[index + 2];
                  colors4[newIndex + 3] = 1.0;
              }
              return colors4;
          }
          return colors;
      }
      // Operators
      /**
       * Adds in place the given Color4 values to the current Color4 object
       * @param right - defines the second operand
       * @returns the current updated Color4 object
       */
      addInPlace(right) {
          this.r += right.r;
          this.g += right.g;
          this.b += right.b;
          this.a += right.a;
          return this;
      }
      /**
       * Creates a new array populated with 4 numeric elements : red, green, blue, alpha values
       * @returns the new array
       */
      asArray() {
          const result = new Array();
          this.toArray(result, 0);
          return result;
      }
      /**
       * Stores from the starting index in the given array the Color4 successive values
       * @param array - defines the array where to store the r,g,b components
       * @param index - defines an optional index in the target array to define where to start storing values
       * @returns the current Color4 object
       */
      toArray(array, index = 0) {
          array[index] = this.r;
          array[index + 1] = this.g;
          array[index + 2] = this.b;
          array[index + 3] = this.a;
          return this;
      }
      /**
       * Creates a new Color4 set with the added values of the current Color4 and of the given one
       * @param right - defines the second operand
       * @returns a new Color4 object
       */
      add(right) {
          return new Color4(this.r + right.r, this.g + right.g, this.b + right.b, this.a + right.a);
      }
      /**
       * Creates a new Color4 set with the subtracted values of the given one from the current Color4
       * @param right - defines the second operand
       * @returns a new Color4 object
       */
      subtract(right) {
          return new Color4(this.r - right.r, this.g - right.g, this.b - right.b, this.a - right.a);
      }
      /**
       * Subtracts the given ones from the current Color4 values and stores the results in "result"
       * @param right - defines the second operand
       * @param result - defines the Color4 object where to store the result
       * @returns the current Color4 object
       */
      subtractToRef(right, result) {
          result.r = this.r - right.r;
          result.g = this.g - right.g;
          result.b = this.b - right.b;
          result.a = this.a - right.a;
          return this;
      }
      /**
       * Creates a new Color4 with the current Color4 values multiplied by scale
       * @param scale - defines the scaling factor to apply
       * @returns a new Color4 object
       */
      scale(scale) {
          return new Color4(this.r * scale, this.g * scale, this.b * scale, this.a * scale);
      }
      /**
       * Multiplies the current Color4 values by scale and stores the result in "result"
       * @param scale - defines the scaling factor to apply
       * @param result - defines the Color4 object where to store the result
       * @returns the current unmodified Color4
       */
      scaleToRef(scale, result) {
          result.r = this.r * scale;
          result.g = this.g * scale;
          result.b = this.b * scale;
          result.a = this.a * scale;
          return this;
      }
      /**
       * Scale the current Color4 values by a factor and add the result to a given Color4
       * @param scale - defines the scale factor
       * @param result - defines the Color4 object where to store the result
       * @returns the unmodified current Color4
       */
      scaleAndAddToRef(scale, result) {
          result.r += this.r * scale;
          result.g += this.g * scale;
          result.b += this.b * scale;
          result.a += this.a * scale;
          return this;
      }
      /**
       * Clamps the rgb values by the min and max values and stores the result into "result"
       * @param min - defines minimum clamping value (default is 0)
       * @param max - defines maximum clamping value (default is 1)
       * @param result - defines color to store the result into.
       * @returns the cuurent Color4
       */
      clampToRef(min = 0, max = 1, result) {
          result.r = Scalar_1$2.Scalar.Clamp(this.r, min, max);
          result.g = Scalar_1$2.Scalar.Clamp(this.g, min, max);
          result.b = Scalar_1$2.Scalar.Clamp(this.b, min, max);
          result.a = Scalar_1$2.Scalar.Clamp(this.a, min, max);
          return this;
      }
      /**
       * Multipy an Color4 value by another and return a new Color4 object
       * @param color - defines the Color4 value to multiply by
       * @returns a new Color4 object
       */
      multiply(color) {
          return new Color4(this.r * color.r, this.g * color.g, this.b * color.b, this.a * color.a);
      }
      /**
       * Multipy a Color4 value by another and push the result in a reference value
       * @param color - defines the Color4 value to multiply by
       * @param result - defines the Color4 to fill the result in
       * @returns the result Color4
       */
      multiplyToRef(color, result) {
          result.r = this.r * color.r;
          result.g = this.g * color.g;
          result.b = this.b * color.b;
          result.a = this.a * color.a;
          return result;
      }
      /**
       * Creates a string with the Color4 current values
       * @returns the string representation of the Color4 object
       */
      toString() {
          return ('{R: ' + this.r + ' G:' + this.g + ' B:' + this.b + ' A:' + this.a + '}');
      }
      /**
       * Returns the string "Color4"
       * @returns "Color4"
       */
      getClassName() {
          return 'Color4';
      }
      /**
       * Compute the Color4 hash code
       * @returns an unique number that can be used to hash Color4 objects
       */
      getHashCode() {
          let hash = this.r || 0;
          hash = (hash * 397) ^ (this.g || 0);
          hash = (hash * 397) ^ (this.b || 0);
          hash = (hash * 397) ^ (this.a || 0);
          return hash;
      }
      /**
       * Creates a new Color4 copied from the current one
       * @returns a new Color4 object
       */
      clone() {
          return new Color4(this.r, this.g, this.b, this.a);
      }
      /**
       * Copies the given Color4 values into the current one
       * @param source - defines the source Color4 object
       * @returns the current updated Color4 object
       */
      copyFrom(source) {
          this.r = source.r;
          this.g = source.g;
          this.b = source.b;
          this.a = source.a;
          return this;
      }
      /**
       * Copies the given float values into the current one
       * @param r - defines the red component to read from
       * @param g - defines the green component to read from
       * @param b - defines the blue component to read from
       * @param a - defines the alpha component to read from
       * @returns the current updated Color4 object
       */
      copyFromFloats(r, g, b, a) {
          this.r = r;
          this.g = g;
          this.b = b;
          this.a = a;
          return this;
      }
      /**
       * Copies the given float values into the current one
       * @param r - defines the red component to read from
       * @param g - defines the green component to read from
       * @param b - defines the blue component to read from
       * @param a - defines the alpha component to read from
       * @returns the current updated Color4 object
       */
      set(r, g, b, a) {
          return this.copyFromFloats(r, g, b, a);
      }
      /**
       * Compute the Color4 hexadecimal code as a string
       * @returns a string containing the hexadecimal representation of the Color4 object
       */
      toHexString() {
          const intR = (this.r * 255) | 0;
          const intG = (this.g * 255) | 0;
          const intB = (this.b * 255) | 0;
          const intA = (this.a * 255) | 0;
          return ('#' +
              Scalar_1$2.Scalar.ToHex(intR) +
              Scalar_1$2.Scalar.ToHex(intG) +
              Scalar_1$2.Scalar.ToHex(intB) +
              Scalar_1$2.Scalar.ToHex(intA));
      }
      /**
       * Computes a new Color4 converted from the current one to linear space
       * @returns a new Color4 object
       */
      toLinearSpace() {
          const convertedColor = new Color4();
          this.toLinearSpaceToRef(convertedColor);
          return convertedColor;
      }
      /**
       * Converts the Color4 values to linear space and stores the result in "convertedColor"
       * @param convertedColor - defines the Color4 object where to store the linear space version
       * @returns the unmodified Color4
       */
      toLinearSpaceToRef(convertedColor) {
          convertedColor.r = Math.pow(this.r, types_1$3.ToLinearSpace);
          convertedColor.g = Math.pow(this.g, types_1$3.ToLinearSpace);
          convertedColor.b = Math.pow(this.b, types_1$3.ToLinearSpace);
          convertedColor.a = this.a;
          return this;
      }
      /**
       * Computes a new Color4 converted from the current one to gamma space
       * @returns a new Color4 object
       */
      toGammaSpace() {
          const convertedColor = new Color4();
          this.toGammaSpaceToRef(convertedColor);
          return convertedColor;
      }
      /**
       * Converts the Color4 values to gamma space and stores the result in "convertedColor"
       * @param convertedColor - defines the Color4 object where to store the gamma space version
       * @returns the unmodified Color4
       */
      toGammaSpaceToRef(convertedColor) {
          convertedColor.r = Math.pow(this.r, types_1$3.ToGammaSpace);
          convertedColor.g = Math.pow(this.g, types_1$3.ToGammaSpace);
          convertedColor.b = Math.pow(this.b, types_1$3.ToGammaSpace);
          convertedColor.a = this.a;
          return this;
      }
  }
  Color4$1.Color4 = Color4;

  Object.defineProperty(Color3$1, "__esModule", { value: true });
  Color3$1.Color3 = void 0;
  const types_1$2 = types;
  const Color4_1 = Color4$1;
  const Scalar_1$1 = Scalar$1;
  /**
   * Class used to hold a RBG color
   * @public
   */
  class Color3 {
      /**
       * Creates a new Color3 object from red, green, blue values, all between 0 and 1
       * @param r - defines the red component (between 0 and 1, default is 0)
       * @param g - defines the green component (between 0 and 1, default is 0)
       * @param b - defines the blue component (between 0 and 1, default is 0)
       */
      constructor(
      /**
       * Defines the red component (between 0 and 1, default is 0)
       */
      r = 0, 
      /**
       * Defines the green component (between 0 and 1, default is 0)
       */
      g = 0, 
      /**
       * Defines the blue component (between 0 and 1, default is 0)
       */
      b = 0) {
          this.r = r;
          this.g = g;
          this.b = b;
      }
      // Statics
      /**
       * Creates a new Color3 from the string containing valid hexadecimal values
       * @param hex - defines a string containing valid hexadecimal values
       * @returns a new Color3 object
       */
      static FromHexString(hex) {
          if (hex.substring(0, 1) !== '#' || hex.length !== 7) {
              return new Color3(0, 0, 0);
          }
          const r = parseInt(hex.substring(1, 3), 16);
          const g = parseInt(hex.substring(3, 5), 16);
          const b = parseInt(hex.substring(5, 7), 16);
          return Color3.FromInts(r, g, b);
      }
      /**
       * Creates a new Vector3 from the starting index of the given array
       * @param array - defines the source array
       * @param offset - defines an offset in the source array
       * @returns a new Color3 object
       */
      static FromArray(array, offset = 0) {
          return new Color3(array[offset], array[offset + 1], array[offset + 2]);
      }
      /**
       * Creates a new Color3 from integer values (less than 256)
       * @param r - defines the red component to read from (value between 0 and 255)
       * @param g - defines the green component to read from (value between 0 and 255)
       * @param b - defines the blue component to read from (value between 0 and 255)
       * @returns a new Color3 object
       */
      static FromInts(r, g, b) {
          return new Color3(r / 255.0, g / 255.0, b / 255.0);
      }
      /**
       * Creates a new Color3 with values linearly interpolated of "amount" between the start Color3 and the end Color3
       * @param start - defines the start Color3 value
       * @param end - defines the end Color3 value
       * @param amount - defines the gradient value between start and end
       * @returns a new Color3 object
       */
      static Lerp(start, end, amount) {
          const result = new Color3(0.0, 0.0, 0.0);
          Color3.LerpToRef(start, end, amount, result);
          return result;
      }
      /**
       * Creates a new Color3 with values linearly interpolated of "amount" between the start Color3 and the end Color3
       * @param left - defines the start value
       * @param right - defines the end value
       * @param amount - defines the gradient factor
       * @param result - defines the Color3 object where to store the result
       */
      static LerpToRef(left, right, amount, result) {
          result.r = left.r + (right.r - left.r) * amount;
          result.g = left.g + (right.g - left.g) * amount;
          result.b = left.b + (right.b - left.b) * amount;
      }
      /**
       * Returns a Color3 value containing a red color
       * @returns a new Color3 object
       */
      static Red() {
          return new Color3(1, 0, 0);
      }
      /**
       * Returns a Color3 value containing a green color
       * @returns a new Color3 object
       */
      static Green() {
          return new Color3(0, 1, 0);
      }
      /**
       * Returns a Color3 value containing a blue color
       * @returns a new Color3 object
       */
      static Blue() {
          return new Color3(0, 0, 1);
      }
      /**
       * Returns a Color3 value containing a black color
       * @returns a new Color3 object
       */
      static Black() {
          return new Color3(0, 0, 0);
      }
      /**
       * Returns a Color3 value containing a white color
       * @returns a new Color3 object
       */
      static White() {
          return new Color3(1, 1, 1);
      }
      /**
       * Returns a Color3 value containing a purple color
       * @returns a new Color3 object
       */
      static Purple() {
          return new Color3(0.5, 0, 0.5);
      }
      /**
       * Returns a Color3 value containing a magenta color
       * @returns a new Color3 object
       */
      static Magenta() {
          return new Color3(1, 0, 1);
      }
      /**
       * Returns a Color3 value containing a yellow color
       * @returns a new Color3 object
       */
      static Yellow() {
          return new Color3(1, 1, 0);
      }
      /**
       * Returns a Color3 value containing a gray color
       * @returns a new Color3 object
       */
      static Gray() {
          return new Color3(0.5, 0.5, 0.5);
      }
      /**
       * Returns a Color3 value containing a teal color
       * @returns a new Color3 object
       */
      static Teal() {
          return new Color3(0, 1.0, 1.0);
      }
      /**
       * Returns a Color3 value containing a random color
       * @returns a new Color3 object
       */
      static Random() {
          return new Color3(Math.random(), Math.random(), Math.random());
      }
      /**
       * Creates a string with the Color3 current values
       * @returns the string representation of the Color3 object
       */
      toString() {
          return '{R: ' + this.r + ' G:' + this.g + ' B:' + this.b + '}';
      }
      /**
       * Returns the string "Color3"
       * @returns "Color3"
       */
      getClassName() {
          return 'Color3';
      }
      /**
       * Compute the Color3 hash code
       * @returns an unique number that can be used to hash Color3 objects
       */
      getHashCode() {
          let hash = this.r || 0;
          hash = (hash * 397) ^ (this.g || 0);
          hash = (hash * 397) ^ (this.b || 0);
          return hash;
      }
      // Operators
      /**
       * Stores in the given array from the given starting index the red, green, blue values as successive elements
       * @param array - defines the array where to store the r,g,b components
       * @param index - defines an optional index in the target array to define where to start storing values
       * @returns the current Color3 object
       */
      toArray(array, index = 0) {
          array[index] = this.r;
          array[index + 1] = this.g;
          array[index + 2] = this.b;
          return this;
      }
      /**
       * Returns a new Color4 object from the current Color3 and the given alpha
       * @param alpha - defines the alpha component on the new Color4 object (default is 1)
       * @returns a new Color4 object
       */
      toColor4(alpha = 1) {
          return new Color4_1.Color4(this.r, this.g, this.b, alpha);
      }
      /**
       * Returns a new array populated with 3 numeric elements : red, green and blue values
       * @returns the new array
       */
      asArray() {
          const result = new Array();
          this.toArray(result, 0);
          return result;
      }
      /**
       * Returns the luminance value
       * @returns a float value
       */
      toLuminance() {
          return this.r * 0.3 + this.g * 0.59 + this.b * 0.11;
      }
      /**
       * Multiply each Color3 rgb values by the given Color3 rgb values in a new Color3 object
       * @param otherColor - defines the second operand
       * @returns the new Color3 object
       */
      multiply(otherColor) {
          return new Color3(this.r * otherColor.r, this.g * otherColor.g, this.b * otherColor.b);
      }
      /**
       * Multiply the rgb values of the Color3 and the given Color3 and stores the result in the object "result"
       * @param otherColor - defines the second operand
       * @param result - defines the Color3 object where to store the result
       * @returns the current Color3
       */
      multiplyToRef(otherColor, result) {
          result.r = this.r * otherColor.r;
          result.g = this.g * otherColor.g;
          result.b = this.b * otherColor.b;
          return this;
      }
      /**
       * Determines equality between Color3 objects
       * @param otherColor - defines the second operand
       * @returns true if the rgb values are equal to the given ones
       */
      equals(otherColor) {
          return (otherColor &&
              this.r === otherColor.r &&
              this.g === otherColor.g &&
              this.b === otherColor.b);
      }
      /**
       * Determines equality between the current Color3 object and a set of r,b,g values
       * @param r - defines the red component to check
       * @param g - defines the green component to check
       * @param b - defines the blue component to check
       * @returns true if the rgb values are equal to the given ones
       */
      equalsFloats(r, g, b) {
          return this.r === r && this.g === g && this.b === b;
      }
      /**
       * Multiplies in place each rgb value by scale
       * @param scale - defines the scaling factor
       * @returns the updated Color3
       */
      scale(scale) {
          return new Color3(this.r * scale, this.g * scale, this.b * scale);
      }
      /**
       * Multiplies the rgb values by scale and stores the result into "result"
       * @param scale - defines the scaling factor
       * @param result - defines the Color3 object where to store the result
       * @returns the unmodified current Color3
       */
      scaleToRef(scale, result) {
          result.r = this.r * scale;
          result.g = this.g * scale;
          result.b = this.b * scale;
          return this;
      }
      /**
       * Scale the current Color3 values by a factor and add the result to a given Color3
       * @param scale - defines the scale factor
       * @param result - defines color to store the result into
       * @returns the unmodified current Color3
       */
      scaleAndAddToRef(scale, result) {
          result.r += this.r * scale;
          result.g += this.g * scale;
          result.b += this.b * scale;
          return this;
      }
      /**
       * Clamps the rgb values by the min and max values and stores the result into "result"
       * @param min - defines minimum clamping value (default is 0)
       * @param max - defines maximum clamping value (default is 1)
       * @param result - defines color to store the result into
       * @returns the original Color3
       */
      clampToRef(min = 0, max = 1, result) {
          result.r = Scalar_1$1.Scalar.Clamp(this.r, min, max);
          result.g = Scalar_1$1.Scalar.Clamp(this.g, min, max);
          result.b = Scalar_1$1.Scalar.Clamp(this.b, min, max);
          return this;
      }
      /**
       * Creates a new Color3 set with the added values of the current Color3 and of the given one
       * @param otherColor - defines the second operand
       * @returns the new Color3
       */
      add(otherColor) {
          return new Color3(this.r + otherColor.r, this.g + otherColor.g, this.b + otherColor.b);
      }
      /**
       * Stores the result of the addition of the current Color3 and given one rgb values into "result"
       * @param otherColor - defines the second operand
       * @param result - defines Color3 object to store the result into
       * @returns the unmodified current Color3
       */
      addToRef(otherColor, result) {
          result.r = this.r + otherColor.r;
          result.g = this.g + otherColor.g;
          result.b = this.b + otherColor.b;
          return this;
      }
      /**
       * Returns a new Color3 set with the subtracted values of the given one from the current Color3
       * @param otherColor - defines the second operand
       * @returns the new Color3
       */
      subtract(otherColor) {
          return new Color3(this.r - otherColor.r, this.g - otherColor.g, this.b - otherColor.b);
      }
      /**
       * Stores the result of the subtraction of given one from the current Color3 rgb values into "result"
       * @param otherColor - defines the second operand
       * @param result - defines Color3 object to store the result into
       * @returns the unmodified current Color3
       */
      subtractToRef(otherColor, result) {
          result.r = this.r - otherColor.r;
          result.g = this.g - otherColor.g;
          result.b = this.b - otherColor.b;
          return this;
      }
      /**
       * Copy the current object
       * @returns a new Color3 copied the current one
       */
      clone() {
          return new Color3(this.r, this.g, this.b);
      }
      /**
       * Copies the rgb values from the source in the current Color3
       * @param source - defines the source Color3 object
       * @returns the updated Color3 object
       */
      copyFrom(source) {
          this.r = source.r;
          this.g = source.g;
          this.b = source.b;
          return this;
      }
      /**
       * Updates the Color3 rgb values from the given floats
       * @param r - defines the red component to read from
       * @param g - defines the green component to read from
       * @param b - defines the blue component to read from
       * @returns the current Color3 object
       */
      copyFromFloats(r, g, b) {
          this.r = r;
          this.g = g;
          this.b = b;
          return this;
      }
      /**
       * Updates the Color3 rgb values from the given floats
       * @param r - defines the red component to read from
       * @param g - defines the green component to read from
       * @param b - defines the blue component to read from
       * @returns the current Color3 object
       */
      set(r, g, b) {
          return this.copyFromFloats(r, g, b);
      }
      /**
       * Compute the Color3 hexadecimal code as a string
       * @returns a string containing the hexadecimal representation of the Color3 object
       */
      toHexString() {
          const intR = (this.r * 255) | 0;
          const intG = (this.g * 255) | 0;
          const intB = (this.b * 255) | 0;
          return '#' + Scalar_1$1.Scalar.ToHex(intR) + Scalar_1$1.Scalar.ToHex(intG) + Scalar_1$1.Scalar.ToHex(intB);
      }
      /**
       * Computes a new Color3 converted from the current one to linear space
       * @returns a new Color3 object
       */
      toLinearSpace() {
          const convertedColor = new Color3();
          this.toLinearSpaceToRef(convertedColor);
          return convertedColor;
      }
      /**
       * Converts the Color3 values to linear space and stores the result in "convertedColor"
       * @param convertedColor - defines the Color3 object where to store the linear space version
       * @returns the unmodified Color3
       */
      toLinearSpaceToRef(convertedColor) {
          convertedColor.r = Math.pow(this.r, types_1$2.ToLinearSpace);
          convertedColor.g = Math.pow(this.g, types_1$2.ToLinearSpace);
          convertedColor.b = Math.pow(this.b, types_1$2.ToLinearSpace);
          return this;
      }
      /**
       * Computes a new Color3 converted from the current one to gamma space
       * @returns a new Color3 object
       */
      toGammaSpace() {
          const convertedColor = new Color3();
          this.toGammaSpaceToRef(convertedColor);
          return convertedColor;
      }
      /**
       * Converts the Color3 values to gamma space and stores the result in "convertedColor"
       * @param convertedColor - defines the Color3 object where to store the gamma space version
       * @returns the unmodified Color3
       */
      toGammaSpaceToRef(convertedColor) {
          convertedColor.r = Math.pow(this.r, types_1$2.ToGammaSpace);
          convertedColor.g = Math.pow(this.g, types_1$2.ToGammaSpace);
          convertedColor.b = Math.pow(this.b, types_1$2.ToGammaSpace);
          return this;
      }
      /**
       * Serializes Color3
       */
      toJSON() {
          return {
              r: this.r,
              g: this.g,
              b: this.b
          };
      }
  }
  Color3$1.Color3 = Color3;

  var Curve3d = {};

  Object.defineProperty(Curve3d, "__esModule", { value: true });
  Curve3d.Curve3 = void 0;
  const Vector3_1$2 = Vector3$1;
  /**
   * A Curve3 object is a logical object, so not a mesh, to handle curves in the 3D geometric space.
   * A Curve3 is designed from a series of successive Vector3.
   * {@link https://doc.babylonjs.com/how_to/how_to_use_curve3 }
   * @public
   */
  class Curve3 {
      /**
       * A Curve3 object is a logical object, so not a mesh, to handle curves in the 3D geometric space.
       * A Curve3 is designed from a series of successive Vector3.
       * {@link http://doc.babylonjs.com/tutorials/How_to_use_Curve3#curve3-object | Tutorial }
       * @param points - points which make up the curve
       */
      constructor(points) {
          this._length = 0.0;
          this._points = points;
          this._length = this._computeLength(points);
      }
      /**
       * Returns a Curve3 object along a Quadratic Bezier curve : http://doc.babylonjs.com/tutorials/How_to_use_Curve3#quadratic-bezier-curve
       * @param v0 - (Vector3) the origin point of the Quadratic Bezier
       * @param v1 - (Vector3) the control point
       * @param v2 - (Vector3) the end point of the Quadratic Bezier
       * @param nbPoints - (integer) the wanted number of points in the curve
       * @returns the created Curve3
       */
      static CreateQuadraticBezier(v0, v1, v2, nbPoints) {
          // tslint:disable-next-line:no-parameter-reassignment
          nbPoints = nbPoints > 2 ? nbPoints : 3;
          const bez = new Array();
          const equation = (t, val0, val1, val2) => {
              const res = (1.0 - t) * (1.0 - t) * val0 + 2.0 * t * (1.0 - t) * val1 + t * t * val2;
              return res;
          };
          for (let i = 0; i <= nbPoints; i++) {
              bez.push(new Vector3_1$2.Vector3(equation(i / nbPoints, v0.x, v1.x, v2.x), equation(i / nbPoints, v0.y, v1.y, v2.y), equation(i / nbPoints, v0.z, v1.z, v2.z)));
          }
          return new Curve3(bez);
      }
      /**
       * Returns a Curve3 object along a Cubic Bezier curve : http://doc.babylonjs.com/tutorials/How_to_use_Curve3#cubic-bezier-curve
       * @param v0 - (Vector3) the origin point of the Cubic Bezier
       * @param v1 - (Vector3) the first control point
       * @param v2 - (Vector3) the second control point
       * @param v3 - (Vector3) the end point of the Cubic Bezier
       * @param nbPoints - (integer) the wanted number of points in the curve
       * @returns the created Curve3
       */
      static CreateCubicBezier(v0, v1, v2, v3, nbPoints) {
          // tslint:disable-next-line:no-parameter-reassignment
          nbPoints = nbPoints > 3 ? nbPoints : 4;
          const bez = new Array();
          const equation = (t, val0, val1, val2, val3) => {
              const res = (1.0 - t) * (1.0 - t) * (1.0 - t) * val0 +
                  3.0 * t * (1.0 - t) * (1.0 - t) * val1 +
                  3.0 * t * t * (1.0 - t) * val2 +
                  t * t * t * val3;
              return res;
          };
          for (let i = 0; i <= nbPoints; i++) {
              bez.push(new Vector3_1$2.Vector3(equation(i / nbPoints, v0.x, v1.x, v2.x, v3.x), equation(i / nbPoints, v0.y, v1.y, v2.y, v3.y), equation(i / nbPoints, v0.z, v1.z, v2.z, v3.z)));
          }
          return new Curve3(bez);
      }
      /**
       * Returns a Curve3 object along a Hermite Spline curve : http://doc.babylonjs.com/tutorials/How_to_use_Curve3#hermite-spline
       * @param p1 - (Vector3) the origin point of the Hermite Spline
       * @param t1 - (Vector3) the tangent vector at the origin point
       * @param p2 - (Vector3) the end point of the Hermite Spline
       * @param t2 - (Vector3) the tangent vector at the end point
       * @param nbPoints - (integer) the wanted number of points in the curve
       * @returns the created Curve3
       */
      static CreateHermiteSpline(p1, t1, p2, t2, nbPoints) {
          const hermite = new Array();
          const step = 1.0 / nbPoints;
          for (let i = 0; i <= nbPoints; i++) {
              hermite.push(Vector3_1$2.Vector3.Hermite(p1, t1, p2, t2, i * step));
          }
          return new Curve3(hermite);
      }
      /**
       * Returns a Curve3 object along a CatmullRom Spline curve :
       * @param points - (array of Vector3) the points the spline must pass through. At least, four points required
       * @param nbPoints - (integer) the wanted number of points between each curve control points
       * @param closed - (boolean) optional with default false, when true forms a closed loop from the points
       * @returns the created Curve3
       */
      static CreateCatmullRomSpline(points, nbPoints, closed) {
          const catmullRom = new Array();
          const step = 1.0 / nbPoints;
          let amount = 0.0;
          if (closed) {
              const pointsCount = points.length;
              for (let i = 0; i < pointsCount; i++) {
                  amount = 0;
                  for (let c = 0; c < nbPoints; c++) {
                      catmullRom.push(Vector3_1$2.Vector3.CatmullRom(points[i % pointsCount], points[(i + 1) % pointsCount], points[(i + 2) % pointsCount], points[(i + 3) % pointsCount], amount));
                      amount += step;
                  }
              }
              catmullRom.push(catmullRom[0]);
          }
          else {
              const totalPoints = new Array();
              totalPoints.push(points[0].clone());
              Array.prototype.push.apply(totalPoints, points);
              totalPoints.push(points[points.length - 1].clone());
              let i = 0;
              for (i = 0; i < totalPoints.length - 3; i++) {
                  amount = 0;
                  for (let c = 0; c < nbPoints; c++) {
                      catmullRom.push(Vector3_1$2.Vector3.CatmullRom(totalPoints[i], totalPoints[i + 1], totalPoints[i + 2], totalPoints[i + 3], amount));
                      amount += step;
                  }
              }
              i--;
              catmullRom.push(Vector3_1$2.Vector3.CatmullRom(totalPoints[i], totalPoints[i + 1], totalPoints[i + 2], totalPoints[i + 3], amount));
          }
          return new Curve3(catmullRom);
      }
      /**
       * @returns the Curve3 stored array of successive Vector3
       */
      getPoints() {
          return this._points;
      }
      /**
       * @returns the computed length (float) of the curve.
       */
      length() {
          return this._length;
      }
      /**
       * Returns a new instance of Curve3 object : var curve = curveA.continue(curveB);
       * This new Curve3 is built by translating and sticking the curveB at the end of the curveA.
       * curveA and curveB keep unchanged.
       * @param curve - the curve to continue from this curve
       * @returns the newly constructed curve
       */
      continue(curve) {
          const lastPoint = this._points[this._points.length - 1];
          const continuedPoints = this._points.slice();
          const curvePoints = curve.getPoints();
          for (let i = 1; i < curvePoints.length; i++) {
              continuedPoints.push(curvePoints[i].subtract(curvePoints[0]).add(lastPoint));
          }
          const continuedCurve = new Curve3(continuedPoints);
          return continuedCurve;
      }
      _computeLength(path) {
          let l = 0;
          for (let i = 1; i < path.length; i++) {
              l += path[i].subtract(path[i - 1]).length();
          }
          return l;
      }
  }
  Curve3d.Curve3 = Curve3;

  var Furstum = {};

  var Plane$1 = {};

  Object.defineProperty(Plane$1, "__esModule", { value: true });
  Plane$1.Plane = void 0;
  const Vector3_1$1 = Vector3$1;
  const Matrix_1 = Matrix$1;
  const preallocatedVariables_1 = preallocatedVariables;
  /**
   * Represens a plane by the equation ax + by + cz + d = 0
   * @public
   */
  class Plane {
      /**
       * Creates a Plane object according to the given floats a, b, c, d and the plane equation : ax + by + cz + d = 0
       * @param a - a component of the plane
       * @param b - b component of the plane
       * @param c - c component of the plane
       * @param d - d component of the plane
       */
      constructor(a, b, c, d) {
          this.normal = new Vector3_1$1.Vector3(a, b, c);
          this.d = d;
      }
      // Statics
      /**
       * Creates a plane from an  array
       * @param array - the array to create a plane from
       * @returns a new Plane from the given array.
       */
      static FromArray(array) {
          return new Plane(array[0], array[1], array[2], array[3]);
      }
      /**
       * Creates a plane from three points
       * @param point1 - point used to create the plane
       * @param point2 - point used to create the plane
       * @param point3 - point used to create the plane
       * @returns a new Plane defined by the three given points.
       */
      static FromPoints(point1, point2, point3) {
          const result = new Plane(0.0, 0.0, 0.0, 0.0);
          result.copyFromPoints(point1, point2, point3);
          return result;
      }
      /**
       * Creates a plane from an origin point and a normal
       * @param origin - origin of the plane to be constructed
       * @param normal - normal of the plane to be constructed
       * @returns a new Plane the normal vector to this plane at the given origin point.
       * Note : the vector "normal" is updated because normalized.
       */
      static FromPositionAndNormal(origin, normal) {
          const result = new Plane(0.0, 0.0, 0.0, 0.0);
          normal.normalize();
          result.normal = normal;
          result.d = -(normal.x * origin.x +
              normal.y * origin.y +
              normal.z * origin.z);
          return result;
      }
      /**
       * Calculates the distance from a plane and a point
       * @param origin - origin of the plane to be constructed
       * @param normal - normal of the plane to be constructed
       * @param point - point to calculate distance to
       * @returns the signed distance between the plane defined by the normal vector at the "origin"" point and the given other point.
       */
      static SignedDistanceToPlaneFromPositionAndNormal(origin, normal, point) {
          const d = -(normal.x * origin.x + normal.y * origin.y + normal.z * origin.z);
          return Vector3_1$1.Vector3.Dot(point, normal) + d;
      }
      /**
       * @returns the plane coordinates as a new array of 4 elements [a, b, c, d].
       */
      asArray() {
          return [this.normal.x, this.normal.y, this.normal.z, this.d];
      }
      // Methods
      /**
       * @returns a new plane copied from the current Plane.
       */
      clone() {
          return new Plane(this.normal.x, this.normal.y, this.normal.z, this.d);
      }
      /**
       * @returns the string "Plane".
       */
      getClassName() {
          return 'Plane';
      }
      /**
       * @returns the Plane hash code.
       */
      getHashCode() {
          let hash = this.normal.getHashCode();
          hash = (hash * 397) ^ (this.d || 0);
          return hash;
      }
      /**
       * Normalize the current Plane in place.
       * @returns the updated Plane.
       */
      normalize() {
          const norm = Math.sqrt(this.normal.x * this.normal.x +
              this.normal.y * this.normal.y +
              this.normal.z * this.normal.z);
          let magnitude = 0.0;
          if (norm !== 0) {
              magnitude = 1.0 / norm;
          }
          this.normal.x *= magnitude;
          this.normal.y *= magnitude;
          this.normal.z *= magnitude;
          this.d *= magnitude;
          return this;
      }
      /**
       * Applies a transformation the plane and returns the result
       * @param transformation - the transformation matrix to be applied to the plane
       * @returns a new Plane as the result of the transformation of the current Plane by the given matrix.
       */
      transform(transformation) {
          const transposedMatrix = preallocatedVariables_1.MathTmp.Matrix[0];
          Matrix_1.Matrix.TransposeToRef(transformation, transposedMatrix);
          const m = transposedMatrix.m;
          const x = this.normal.x;
          const y = this.normal.y;
          const z = this.normal.z;
          const d = this.d;
          const normalX = x * m[0] + y * m[1] + z * m[2] + d * m[3];
          const normalY = x * m[4] + y * m[5] + z * m[6] + d * m[7];
          const normalZ = x * m[8] + y * m[9] + z * m[10] + d * m[11];
          const finalD = x * m[12] + y * m[13] + z * m[14] + d * m[15];
          return new Plane(normalX, normalY, normalZ, finalD);
      }
      /**
       * Calcualtte the dot product between the point and the plane normal
       * @param point - point to calculate the dot product with
       * @returns the dot product (float) of the point coordinates and the plane normal.
       */
      dotCoordinate(point) {
          return (this.normal.x * point.x +
              this.normal.y * point.y +
              this.normal.z * point.z +
              this.d);
      }
      /**
       * Updates the current Plane from the plane defined by the three given points.
       * @param point1 - one of the points used to contruct the plane
       * @param point2 - one of the points used to contruct the plane
       * @param point3 - one of the points used to contruct the plane
       * @returns the updated Plane.
       */
      copyFromPoints(point1, point2, point3) {
          const x1 = point2.x - point1.x;
          const y1 = point2.y - point1.y;
          const z1 = point2.z - point1.z;
          const x2 = point3.x - point1.x;
          const y2 = point3.y - point1.y;
          const z2 = point3.z - point1.z;
          const yz = y1 * z2 - z1 * y2;
          const xz = z1 * x2 - x1 * z2;
          const xy = x1 * y2 - y1 * x2;
          const pyth = Math.sqrt(yz * yz + xz * xz + xy * xy);
          let invPyth;
          if (pyth !== 0) {
              invPyth = 1.0 / pyth;
          }
          else {
              invPyth = 0.0;
          }
          this.normal.x = yz * invPyth;
          this.normal.y = xz * invPyth;
          this.normal.z = xy * invPyth;
          this.d = -(this.normal.x * point1.x +
              this.normal.y * point1.y +
              this.normal.z * point1.z);
          return this;
      }
      /**
       * Checks if the plane is facing a given direction
       * @param direction - the direction to check if the plane is facing
       * @param epsilon - value the dot product is compared against (returns true if dot &lt;= epsilon)
       * @returns True is the vector "direction"  is the same side than the plane normal.
       */
      isFrontFacingTo(direction, epsilon) {
          const dot = Vector3_1$1.Vector3.Dot(this.normal, direction);
          return dot <= epsilon;
      }
      /**
       * Calculates the distance to a point
       * @param point - point to calculate distance to
       * @returns the signed distance (float) from the given point to the Plane.
       */
      signedDistanceTo(point) {
          return Vector3_1$1.Vector3.Dot(point, this.normal) + this.d;
      }
  }
  Plane$1.Plane = Plane;

  Object.defineProperty(Furstum, "__esModule", { value: true });
  Furstum.Frustum = void 0;
  const Plane_1 = Plane$1;
  /**
   * Reprasents a camera frustum
   * @public
   */
  class Frustum {
      /**
       * Gets the planes representing the frustum
       * @param transform - matrix to be applied to the returned planes
       * @returns a new array of 6 Frustum planes computed by the given transformation matrix.
       */
      static GetPlanes(transform) {
          const frustumPlanes = [];
          for (let index = 0; index < 6; index++) {
              frustumPlanes.push(new Plane_1.Plane(0.0, 0.0, 0.0, 0.0));
          }
          Frustum.GetPlanesToRef(transform, frustumPlanes);
          return frustumPlanes;
      }
      /**
       * Gets the near frustum plane transformed by the transform matrix
       * @param transform - transformation matrix to be applied to the resulting frustum plane
       * @param frustumPlane - the resuling frustum plane
       */
      static GetNearPlaneToRef(transform, frustumPlane) {
          const m = transform.m;
          frustumPlane.normal.x = m[3] + m[2];
          frustumPlane.normal.y = m[7] + m[6];
          frustumPlane.normal.z = m[11] + m[10];
          frustumPlane.d = m[15] + m[14];
          frustumPlane.normalize();
      }
      /**
       * Gets the far frustum plane transformed by the transform matrix
       * @param transform - transformation matrix to be applied to the resulting frustum plane
       * @param frustumPlane - the resuling frustum plane
       */
      static GetFarPlaneToRef(transform, frustumPlane) {
          const m = transform.m;
          frustumPlane.normal.x = m[3] - m[2];
          frustumPlane.normal.y = m[7] - m[6];
          frustumPlane.normal.z = m[11] - m[10];
          frustumPlane.d = m[15] - m[14];
          frustumPlane.normalize();
      }
      /**
       * Gets the left frustum plane transformed by the transform matrix
       * @param transform - transformation matrix to be applied to the resulting frustum plane
       * @param frustumPlane - the resuling frustum plane
       */
      static GetLeftPlaneToRef(transform, frustumPlane) {
          const m = transform.m;
          frustumPlane.normal.x = m[3] + m[0];
          frustumPlane.normal.y = m[7] + m[4];
          frustumPlane.normal.z = m[11] + m[8];
          frustumPlane.d = m[15] + m[12];
          frustumPlane.normalize();
      }
      /**
       * Gets the right frustum plane transformed by the transform matrix
       * @param transform - transformation matrix to be applied to the resulting frustum plane
       * @param frustumPlane - the resuling frustum plane
       */
      static GetRightPlaneToRef(transform, frustumPlane) {
          const m = transform.m;
          frustumPlane.normal.x = m[3] - m[0];
          frustumPlane.normal.y = m[7] - m[4];
          frustumPlane.normal.z = m[11] - m[8];
          frustumPlane.d = m[15] - m[12];
          frustumPlane.normalize();
      }
      /**
       * Gets the top frustum plane transformed by the transform matrix
       * @param transform - transformation matrix to be applied to the resulting frustum plane
       * @param frustumPlane - the resuling frustum plane
       */
      static GetTopPlaneToRef(transform, frustumPlane) {
          const m = transform.m;
          frustumPlane.normal.x = m[3] - m[1];
          frustumPlane.normal.y = m[7] - m[5];
          frustumPlane.normal.z = m[11] - m[9];
          frustumPlane.d = m[15] - m[13];
          frustumPlane.normalize();
      }
      /**
       * Gets the bottom frustum plane transformed by the transform matrix
       * @param transform - transformation matrix to be applied to the resulting frustum plane
       * @param frustumPlane - the resuling frustum plane
       */
      static GetBottomPlaneToRef(transform, frustumPlane) {
          const m = transform.m;
          frustumPlane.normal.x = m[3] + m[1];
          frustumPlane.normal.y = m[7] + m[5];
          frustumPlane.normal.z = m[11] + m[9];
          frustumPlane.d = m[15] + m[13];
          frustumPlane.normalize();
      }
      /**
       * Sets the given array "frustumPlanes" with the 6 Frustum planes computed by the given transformation matrix.
       * @param transform - transformation matrix to be applied to the resulting frustum planes
       * @param frustumPlanes - the resuling frustum planes
       */
      static GetPlanesToRef(transform, frustumPlanes) {
          // Near
          Frustum.GetNearPlaneToRef(transform, frustumPlanes[0]);
          // Far
          Frustum.GetFarPlaneToRef(transform, frustumPlanes[1]);
          // Left
          Frustum.GetLeftPlaneToRef(transform, frustumPlanes[2]);
          // Right
          Frustum.GetRightPlaneToRef(transform, frustumPlanes[3]);
          // Top
          Frustum.GetTopPlaneToRef(transform, frustumPlanes[4]);
          // Bottom
          Frustum.GetBottomPlaneToRef(transform, frustumPlanes[5]);
      }
  }
  Furstum.Frustum = Frustum;

  var Path2d = {};

  Object.defineProperty(Path2d, "__esModule", { value: true });
  Path2d.Path2 = void 0;
  const Vector2_1 = Vector2$1;
  const Arc2_1 = Arc2$1;
  const types_1$1 = types;
  /**
   * Represents a 2D path made up of multiple 2D points
   * @public
   */
  class Path2 {
      /**
       * Creates a Path2 object from the starting 2D coordinates x and y.
       * @param x - the starting points x value
       * @param y - the starting points y value
       */
      constructor(x, y) {
          /**
           * If the path start and end point are the same
           */
          this.closed = false;
          this._points = new Array();
          this._length = 0.0;
          this._points.push(new Vector2_1.Vector2(x, y));
      }
      /**
       * Creates a new path starting from an x and y position
       * @param x - starting x value
       * @param y - starting y value
       * @returns a new Path2 starting at the coordinates (x, y).
       */
      static StartingAt(x, y) {
          return new Path2(x, y);
      }
      /**
       * Adds a new segment until the given coordinates (x, y) to the current Path2.
       * @param x - the added points x value
       * @param y - the added points y value
       * @returns the updated Path2.
       */
      addLineTo(x, y) {
          if (this.closed) {
              return this;
          }
          const newPoint = new Vector2_1.Vector2(x, y);
          const previousPoint = this._points[this._points.length - 1];
          this._points.push(newPoint);
          this._length += newPoint.subtract(previousPoint).length();
          return this;
      }
      /**
       * Adds _numberOfSegments_ segments according to the arc definition (middle point coordinates, end point coordinates, the arc start point being the current Path2 last point) to the current Path2.
       * @param midX - middle point x value
       * @param midY - middle point y value
       * @param endX - end point x value
       * @param endY - end point y value
       * @param numberOfSegments - (default: 36)
       * @returns the updated Path2.
       */
      addArcTo(midX, midY, endX, endY, numberOfSegments = 36) {
          if (this.closed) {
              return this;
          }
          const startPoint = this._points[this._points.length - 1];
          const midPoint = new Vector2_1.Vector2(midX, midY);
          const endPoint = new Vector2_1.Vector2(endX, endY);
          const arc = new Arc2_1.Arc2(startPoint, midPoint, endPoint);
          let increment = arc.angle.radians() / numberOfSegments;
          if (arc.orientation === types_1$1.Orientation.CW) {
              increment *= -1;
          }
          let currentAngle = arc.startAngle.radians() + increment;
          for (let i = 0; i < numberOfSegments; i++) {
              const x = Math.cos(currentAngle) * arc.radius + arc.centerPoint.x;
              const y = Math.sin(currentAngle) * arc.radius + arc.centerPoint.y;
              this.addLineTo(x, y);
              currentAngle += increment;
          }
          return this;
      }
      /**
       * Closes the Path2.
       * @returns the Path2.
       */
      close() {
          this.closed = true;
          return this;
      }
      /**
       * Gets the sum of the distance between each sequential point in the path
       * @returns the Path2 total length (float).
       */
      length() {
          let result = this._length;
          if (!this.closed) {
              const lastPoint = this._points[this._points.length - 1];
              const firstPoint = this._points[0];
              result += firstPoint.subtract(lastPoint).length();
          }
          return result;
      }
      /**
       * Gets the points which construct the path
       * @returns the Path2 internal array of points.
       */
      getPoints() {
          return this._points;
      }
      /**
       * Retreives the point at the distance aways from the starting point
       * @param normalizedLengthPosition - the length along the path to retreive the point from
       * @returns a new Vector2 located at a percentage of the Path2 total length on this path.
       */
      getPointAtLengthPosition(normalizedLengthPosition) {
          if (normalizedLengthPosition < 0 || normalizedLengthPosition > 1) {
              return Vector2_1.Vector2.Zero();
          }
          const lengthPosition = normalizedLengthPosition * this.length();
          let previousOffset = 0;
          for (let i = 0; i < this._points.length; i++) {
              const j = (i + 1) % this._points.length;
              const a = this._points[i];
              const b = this._points[j];
              const bToA = b.subtract(a);
              const nextOffset = bToA.length() + previousOffset;
              if (lengthPosition >= previousOffset && lengthPosition <= nextOffset) {
                  const dir = bToA.normalize();
                  const localOffset = lengthPosition - previousOffset;
                  return new Vector2_1.Vector2(a.x + dir.x * localOffset, a.y + dir.y * localOffset);
              }
              previousOffset = nextOffset;
          }
          return Vector2_1.Vector2.Zero();
      }
  }
  Path2d.Path2 = Path2;

  var Path3d = {};

  Object.defineProperty(Path3d, "__esModule", { value: true });
  Path3d.Path3D = void 0;
  const Vector3_1 = Vector3$1;
  const types_1 = types;
  const Scalar_1 = Scalar$1;
  /**
   * Represents a 3D path made up of multiple 3D points
   * @public
   */
  class Path3D {
      /**
       * new Path3D(path, normal, raw)
       * Creates a Path3D. A Path3D is a logical math object, so not a mesh.
       * please read the description in the tutorial :  http://doc.babylonjs.com/tutorials/How_to_use_Path3D
       * @param path - an array of Vector3, the curve axis of the Path3D
       * @param normal - (options) Vector3, the first wanted normal to the curve. Ex (0, 1, 0) for a vertical normal.
       * @param raw - (optional, default false) : boolean, if true the returned Path3D isn't normalized. Useful to depict path acceleration or speed.
       */
      constructor(
      /**
       * an array of Vector3, the curve axis of the Path3D
       */
      path, firstNormal = null, raw) {
          this.path = path;
          this._curve = new Array();
          this._distances = new Array();
          this._tangents = new Array();
          this._normals = new Array();
          this._binormals = new Array();
          for (let p = 0; p < path.length; p++) {
              this._curve[p] = path[p].clone(); // hard copy
          }
          this._raw = raw || false;
          this._compute(firstNormal);
      }
      /**
       * Returns the Path3D array of successive Vector3 designing its curve.
       * @returns the Path3D array of successive Vector3 designing its curve.
       */
      getCurve() {
          return this._curve;
      }
      /**
       * Returns an array populated with tangent vectors on each Path3D curve point.
       * @returns an array populated with tangent vectors on each Path3D curve point.
       */
      getTangents() {
          return this._tangents;
      }
      /**
       * Returns an array populated with normal vectors on each Path3D curve point.
       * @returns an array populated with normal vectors on each Path3D curve point.
       */
      getNormals() {
          return this._normals;
      }
      /**
       * Returns an array populated with binormal vectors on each Path3D curve point.
       * @returns an array populated with binormal vectors on each Path3D curve point.
       */
      getBinormals() {
          return this._binormals;
      }
      /**
       * Returns an array populated with distances (float) of the i-th point from the first curve point.
       * @returns an array populated with distances (float) of the i-th point from the first curve point.
       */
      getDistances() {
          return this._distances;
      }
      /**
       * Forces the Path3D tangent, normal, binormal and distance recomputation.
       * @param path - path which all values are copied into the curves points
       * @param firstNormal - which should be projected onto the curve
       * @returns the same object updated.
       */
      update(path, firstNormal = null) {
          for (let p = 0; p < path.length; p++) {
              this._curve[p].x = path[p].x;
              this._curve[p].y = path[p].y;
              this._curve[p].z = path[p].z;
          }
          this._compute(firstNormal);
          return this;
      }
      // private function compute() : computes tangents, normals and binormals
      _compute(firstNormal) {
          const l = this._curve.length;
          // first and last tangents
          this._tangents[0] = this._getFirstNonNullVector(0);
          if (!this._raw) {
              this._tangents[0].normalize();
          }
          this._tangents[l - 1] = this._curve[l - 1].subtract(this._curve[l - 2]);
          if (!this._raw) {
              this._tangents[l - 1].normalize();
          }
          // normals and binormals at first point : arbitrary vector with _normalVector()
          const tg0 = this._tangents[0];
          const pp0 = this._normalVector(this._curve[0], tg0, firstNormal);
          this._normals[0] = pp0;
          if (!this._raw) {
              this._normals[0].normalize();
          }
          this._binormals[0] = Vector3_1.Vector3.Cross(tg0, this._normals[0]);
          if (!this._raw) {
              this._binormals[0].normalize();
          }
          this._distances[0] = 0.0;
          // normals and binormals : next points
          let prev; // previous vector (segment)
          let cur; // current vector (segment)
          let curTang; // current tangent
          // previous normal
          let prevBinor; // previous binormal
          for (let i = 1; i < l; i++) {
              // tangents
              prev = this._getLastNonNullVector(i);
              if (i < l - 1) {
                  cur = this._getFirstNonNullVector(i);
                  this._tangents[i] = prev.add(cur);
                  this._tangents[i].normalize();
              }
              this._distances[i] = this._distances[i - 1] + prev.length();
              // normals and binormals
              // http://www.cs.cmu.edu/afs/andrew/scs/cs/15-462/web/old/asst2camera.html
              curTang = this._tangents[i];
              prevBinor = this._binormals[i - 1];
              this._normals[i] = Vector3_1.Vector3.Cross(prevBinor, curTang);
              if (!this._raw) {
                  this._normals[i].normalize();
              }
              this._binormals[i] = Vector3_1.Vector3.Cross(curTang, this._normals[i]);
              if (!this._raw) {
                  this._binormals[i].normalize();
              }
          }
      }
      // returns the first non null vector from index : curve[index + N].subtract(curve[index])
      _getFirstNonNullVector(index) {
          let i = 1;
          let nNVector = this._curve[index + i].subtract(this._curve[index]);
          while (nNVector.length() === 0 && index + i + 1 < this._curve.length) {
              i++;
              nNVector = this._curve[index + i].subtract(this._curve[index]);
          }
          return nNVector;
      }
      // returns the last non null vector from index : curve[index].subtract(curve[index - N])
      _getLastNonNullVector(index) {
          let i = 1;
          let nLVector = this._curve[index].subtract(this._curve[index - i]);
          while (nLVector.length() === 0 && index > i + 1) {
              i++;
              nLVector = this._curve[index].subtract(this._curve[index - i]);
          }
          return nLVector;
      }
      // private function normalVector(v0, vt, va) :
      // returns an arbitrary point in the plane defined by the point v0 and the vector vt orthogonal to this plane
      // if va is passed, it returns the va projection on the plane orthogonal to vt at the point v0
      _normalVector(v0, vt, va) {
          let normal0;
          let tgl = vt.length();
          if (tgl === 0.0) {
              tgl = 1.0;
          }
          if (va === undefined || va === null) {
              let point;
              if (!Scalar_1.Scalar.WithinEpsilon(Math.abs(vt.y) / tgl, 1.0, types_1.Epsilon)) {
                  // search for a point in the plane
                  point = new Vector3_1.Vector3(0.0, -1.0, 0.0);
              }
              else if (!Scalar_1.Scalar.WithinEpsilon(Math.abs(vt.x) / tgl, 1.0, types_1.Epsilon)) {
                  point = new Vector3_1.Vector3(1.0, 0.0, 0.0);
              }
              else if (!Scalar_1.Scalar.WithinEpsilon(Math.abs(vt.z) / tgl, 1.0, types_1.Epsilon)) {
                  point = new Vector3_1.Vector3(0.0, 0.0, 1.0);
              }
              else {
                  point = Vector3_1.Vector3.Zero();
              }
              normal0 = Vector3_1.Vector3.Cross(vt, point);
          }
          else {
              normal0 = Vector3_1.Vector3.Cross(vt, va);
              Vector3_1.Vector3.CrossToRef(normal0, vt, normal0);
          }
          normal0.normalize();
          return normal0;
      }
  }
  Path3d.Path3D = Path3D;

  var Size$1 = {};

  Object.defineProperty(Size$1, "__esModule", { value: true });
  Size$1.Size = void 0;
  /**
   * Size containing widht and height
   * @public
   */
  class Size {
      /**
       * Creates a Size object from the given width and height (floats).
       * @param width - width of the new size
       * @param height - height of the new size
       */
      constructor(width, height) {
          this.width = width;
          this.height = height;
      }
      /**
       * The surface of the Size : width * height (float).
       */
      get surface() {
          return this.width * this.height;
      }
      /**
       * Create a new size of zero
       * @returns a new Size set to (0.0, 0.0)
       */
      static Zero() {
          return new Size(0.0, 0.0);
      }
      /**
       * Creates a new Size set at the linear interpolation "amount" between "start" and "end"
       * @param start - starting size to lerp between
       * @param end - end size to lerp between
       * @param amount - amount to lerp between the start and end values
       * @returns a new Size set at the linear interpolation "amount" between "start" and "end"
       */
      static Lerp(start, end, amount) {
          const w = start.width + (end.width - start.width) * amount;
          const h = start.height + (end.height - start.height) * amount;
          return new Size(w, h);
      }
      /**
       * Returns a string with the Size width and height
       * @returns a string with the Size width and height
       */
      toString() {
          return `{W: ${this.width}, H: ${this.height}}`;
      }
      /**
       * "Size"
       * @returns the string "Size"
       */
      getClassName() {
          return 'Size';
      }
      /**
       * Returns the Size hash code.
       * @returns a hash code for a unique width and height
       */
      getHashCode() {
          let hash = this.width || 0;
          hash = (hash * 397) ^ (this.height || 0);
          return hash;
      }
      /**
       * Updates the current size from the given one.
       * @param src - the given size
       */
      copyFrom(src) {
          this.width = src.width;
          this.height = src.height;
      }
      /**
       * Updates in place the current Size from the given floats.
       * @param width - width of the new size
       * @param height - height of the new size
       * @returns the updated Size.
       */
      copyFromFloats(width, height) {
          this.width = width;
          this.height = height;
          return this;
      }
      /**
       * Updates in place the current Size from the given floats.
       * @param width - width to set
       * @param height - height to set
       * @returns the updated Size.
       */
      set(width, height) {
          return this.copyFromFloats(width, height);
      }
      /**
       * Multiplies the width and height by numbers
       * @param w - factor to multiple the width by
       * @param h - factor to multiple the height by
       * @returns a new Size set with the multiplication result of the current Size and the given floats.
       */
      multiplyByFloats(w, h) {
          return new Size(this.width * w, this.height * h);
      }
      /**
       * Clones the size
       * @returns a new Size copied from the given one.
       */
      clone() {
          return new Size(this.width, this.height);
      }
      /**
       * True if the current Size and the given one width and height are strictly equal.
       * @param other - the other size to compare against
       * @returns True if the current Size and the given one width and height are strictly equal.
       */
      equals(other) {
          if (!other) {
              return false;
          }
          return this.width === other.width && this.height === other.height;
      }
      /**
       * Sums the width and height of two sizes
       * @param otherSize - size to add to this size
       * @returns a new Size set as the addition result of the current Size and the given one.
       */
      add(otherSize) {
          const r = new Size(this.width + otherSize.width, this.height + otherSize.height);
          return r;
      }
      /**
       * Subtracts the width and height of two
       * @param otherSize - size to subtract to this size
       * @returns a new Size set as the subtraction result of  the given one from the current Size.
       */
      subtract(otherSize) {
          const r = new Size(this.width - otherSize.width, this.height - otherSize.height);
          return r;
      }
  }
  Size$1.Size = Size;

  (function (exports) {
  var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
  }) : (function(o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      o[k2] = m[k];
  }));
  var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  __exportStar(types, exports);
  __exportStar(preallocatedVariables, exports);
  __exportStar(Angle$1, exports);
  __exportStar(Arc2$1, exports);
  __exportStar(Axis$1, exports);
  __exportStar(BezierCurve$1, exports);
  __exportStar(Color3$1, exports);
  __exportStar(Color4$1, exports);
  __exportStar(Curve3d, exports);
  __exportStar(Furstum, exports);
  __exportStar(Matrix$1, exports);
  __exportStar(Path2d, exports);
  __exportStar(Path3d, exports);
  __exportStar(Plane$1, exports);
  __exportStar(Quaternion$1, exports);
  __exportStar(Scalar$1, exports);
  __exportStar(Size$1, exports);
  __exportStar(Vector2$1, exports);
  __exportStar(Vector3$1, exports);
  __exportStar(Vector4$1, exports);
  __exportStar(dist, exports);

  }(dist));

  var defaultParams = {
      looping: true,
      speed: 1.0,
      weight: 1.0,
      layer: 0
  };
  /**
   * @public
   */
  var AnimationState = /** @class */ (function (_super) {
      __extends(AnimationState, _super);
      function AnimationState(clip, params) {
          if (params === void 0) { params = defaultParams; }
          var _this = _super.call(this) || this;
          // @internal
          _this.isAnimationClip = true;
          /**
           * Does the animation loop?, default: true
           */
          _this.looping = defaultParams.looping;
          /**
           * Weight of the animation, values from 0 to 1, used to blend several animations. default: 1
           */
          _this.weight = defaultParams.weight;
          /**
           * Is the animation playing? default: true
           */
          _this.playing = false;
          /**
           * Does any anyone asked to reset the animation? default: false
           */
          _this.shouldReset = false;
          /**
           * The animation speed
           */
          _this.speed = defaultParams.speed;
          // @internal
          _this.name = newId('AnimClip');
          /**
           * Layering allows you to have two or more levels of animation on an object's parameters at the same time
           */
          _this.layer = defaultParams.layer;
          _this.clip = clip;
          _this.setParams(__assign({}, params));
          return _this;
      }
      /**
       * Sets the clip parameters
       */
      AnimationState.prototype.setParams = function (params) {
          this.looping = params.looping !== undefined ? params.looping : this.looping;
          this.speed = params.speed || this.speed;
          this.weight = params.weight || this.weight;
          this.layer = params.layer || this.layer;
          return this;
      };
      AnimationState.prototype.toJSON = function () {
          var ret = JSON.parse(JSON.stringify(_super.prototype.toJSON.call(this)));
          if (this.shouldReset) {
              this.shouldReset = false;
          }
          return ret;
      };
      /**
       * Starts the animation
       */
      AnimationState.prototype.play = function (reset) {
          var _a;
          if (reset === void 0) { reset = false; }
          (_a = this.owner) === null || _a === void 0 ? void 0 : _a.play(this, reset);
      };
      /**
       * Pauses the animation
       */
      AnimationState.prototype.pause = function () {
          var _a;
          (_a = this.owner) === null || _a === void 0 ? void 0 : _a.pause(this);
      };
      /**
       * Resets the animation state to the frame 0
       */
      AnimationState.prototype.reset = function () {
          this.shouldReset = true;
      };
      /**
       * Resets and pauses the animation
       */
      AnimationState.prototype.stop = function () {
          var _a;
          (_a = this.owner) === null || _a === void 0 ? void 0 : _a.stop(this);
      };
      __decorate([
          ObservableComponent.readonly,
          __metadata("design:type", String)
      ], AnimationState.prototype, "clip", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Boolean)
      ], AnimationState.prototype, "looping", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], AnimationState.prototype, "weight", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Boolean)
      ], AnimationState.prototype, "playing", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Boolean)
      ], AnimationState.prototype, "shouldReset", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], AnimationState.prototype, "speed", void 0);
      __decorate([
          ObservableComponent.readonly,
          __metadata("design:type", String)
      ], AnimationState.prototype, "name", void 0);
      return AnimationState;
  }(ObservableComponent));

  /** @public */
  exports.InputEventType = void 0;
  (function (InputEventType) {
      InputEventType[InputEventType["DOWN"] = 0] = "DOWN";
      InputEventType[InputEventType["UP"] = 1] = "UP";
  })(exports.InputEventType || (exports.InputEventType = {}));
  /** @public */
  exports.CameraMode = void 0;
  (function (CameraMode) {
      CameraMode[CameraMode["FirstPerson"] = 0] = "FirstPerson";
      CameraMode[CameraMode["ThirdPerson"] = 1] = "ThirdPerson";
      // @internal
      CameraMode[CameraMode["BuildingToolGodMode"] = 2] = "BuildingToolGodMode";
  })(exports.CameraMode || (exports.CameraMode = {}));
  // @internal
  var AVATAR_OBSERVABLE = 'AVATAR_OBSERVABLE';
  /** @public */
  exports.LandRole = void 0;
  (function (LandRole) {
      LandRole["OWNER"] = "owner";
      LandRole["OPERATOR"] = "operator";
  })(exports.LandRole || (exports.LandRole = {}));

  /**
   * @public
   */
  exports.ActionButton = void 0;
  (function (ActionButton) {
      ActionButton["POINTER"] = "POINTER";
      ActionButton["PRIMARY"] = "PRIMARY";
      ActionButton["SECONDARY"] = "SECONDARY";
      ActionButton["ANY"] = "ANY";
      ActionButton["FORWARD"] = "FORWARD";
      ActionButton["BACKWARD"] = "BACKWARD";
      ActionButton["RIGHT"] = "RIGHT";
      ActionButton["LEFT"] = "LEFT";
      ActionButton["JUMP"] = "JUMP";
      ActionButton["WALK"] = "WALK";
      ActionButton["ACTION_3"] = "ACTION_3";
      ActionButton["ACTION_4"] = "ACTION_4";
      ActionButton["ACTION_5"] = "ACTION_5";
      ActionButton["ACTION_6"] = "ACTION_6";
  })(exports.ActionButton || (exports.ActionButton = {}));
  /**
   * @public
   */
  var PointerEventComponent = /** @class */ (function () {
      function PointerEventComponent(callback) {
          this.callback = callback;
          if (!callback || !('apply' in callback) || !('call' in callback)) {
              throw new Error('Callback is not a function');
          }
          Input.ensureInstance();
      }
      return PointerEventComponent;
  }());
  /**
   * @public
   */
  var GlobalPointerDown = /** @class */ (function (_super) {
      __extends(GlobalPointerDown, _super);
      function GlobalPointerDown() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      GlobalPointerDown = __decorate([
          Component('pointerDown')
      ], GlobalPointerDown);
      return GlobalPointerDown;
  }(PointerEventComponent));
  /**
   * @public
   */
  var GlobalPointerUp = /** @class */ (function (_super) {
      __extends(GlobalPointerUp, _super);
      function GlobalPointerUp() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      GlobalPointerUp = __decorate([
          Component('pointerUp')
      ], GlobalPointerUp);
      return GlobalPointerUp;
  }(PointerEventComponent));
  /**
   * @public
   */
  var Subscription = /** @class */ (function () {
      function Subscription(fn, useRaycast) {
          this.fn = fn;
          this.useRaycast = useRaycast;
      }
      return Subscription;
  }());
  /**
   * @public
   */
  var Input = /** @class */ (function () {
      function Input() {
          // @internal
          this.buttonIdMapping = [
              exports.ActionButton.POINTER,
              exports.ActionButton.PRIMARY,
              exports.ActionButton.SECONDARY,
              exports.ActionButton.ANY,
              exports.ActionButton.FORWARD,
              exports.ActionButton.BACKWARD,
              exports.ActionButton.RIGHT,
              exports.ActionButton.LEFT,
              exports.ActionButton.JUMP,
              exports.ActionButton.WALK,
              exports.ActionButton.ACTION_3,
              exports.ActionButton.ACTION_4,
              exports.ActionButton.ACTION_5,
              exports.ActionButton.ACTION_6
          ];
          // @internal
          this.subscriptions = this.buttonIdMapping.reduce(function (acc, k) {
              var _a;
              return (__assign(__assign({}, acc), (_a = {}, _a[k] = { BUTTON_DOWN: [], BUTTON_UP: [] }, _a)));
          }, {});
          this.internalState = this.buttonIdMapping.reduce(function (acc, k) {
              var _a;
              return (__assign(__assign({}, acc), (_a = {}, _a[k] = { BUTTON_DOWN: false }, _a)));
          }, {});
      }
      Object.defineProperty(Input, "instance", {
          get: function () {
              Input.ensureInstance();
              return Input._instance;
          },
          enumerable: false,
          configurable: true
      });
      Input.ensureInstance = function () {
          if (!Input._instance) {
              Input._instance = new Input();
          }
      };
      /**
       * Allows to know if a button is pressed
       *
       * Returns true if the button is pressed
       * @param buttonId - The id of the button.
       */
      Input.prototype.isButtonPressed = function (buttonId) {
          return this.internalState[buttonId];
      };
      /**
       * Subscribes to an input event and triggers the provided callback.
       *
       * Returns a function that can be called to remove the subscription.
       * @param eventName - The name of the event (see InputEventKind).
       * @param buttonId - The id of the button.
       * @param useRaycast - Enables getting raycast information.
       * @param fn - A callback function to be called when the event is triggered.
       */
      Input.prototype.subscribe = function (eventName, buttonId, useRaycast, fn) {
          var _this = this;
          this.subscriptions[buttonId][eventName].push(new Subscription(fn, useRaycast));
          return function () {
              _this.unsubscribe(eventName, buttonId, fn);
          };
      };
      /**
       * Removes an existing input event subscription.
       * @param eventName - The name of the event (see InputEventKind).
       * @param buttonId - The id of the button.
       * @param fn - The callback function used when subscribing to the event.
       */
      Input.prototype.unsubscribe = function (eventName, buttonId, fn) {
          var index = this.getSubscriptionId(eventName, buttonId, fn);
          if (index > -1) {
              return this.subscriptions[buttonId][eventName].splice(index, 1);
          }
          return false;
      };
      Input.prototype.handlePointerEvent = function (data) {
          var button = this.getPointerById(data.buttonId);
          if (!button) {
              return;
          }
          var eventResult = __assign(__assign({}, data), { button: button, direction: new dist.Vector3().copyFrom(data.direction), origin: new dist.Vector3().copyFrom(data.origin), hit: undefined });
          var hit = data.hit
              ? __assign(__assign({}, data.hit), { hitPoint: new dist.Vector3().copyFrom(data.hit.hitPoint), normal: new dist.Vector3().copyFrom(data.hit.normal), worldNormal: new dist.Vector3().copyFrom(data.hit.worldNormal) }) : undefined;
          if (data.type === exports.InputEventType.DOWN) {
              this.internalState[button].BUTTON_DOWN = true;
              for (var i = 0; i < this.subscriptions[button]['BUTTON_DOWN'].length; i++) {
                  var subscription = this.subscriptions[button]['BUTTON_DOWN'][i];
                  // remove hit information when raycast is disabled
                  if (subscription.useRaycast) {
                      eventResult.hit = hit;
                  }
                  else {
                      eventResult.hit = undefined;
                  }
                  subscription.fn(eventResult);
              }
              if (hit && hit.entityId && DisposableComponent.engine) {
                  var entity = DisposableComponent.engine.entities[hit.entityId];
                  var handler = entity && entity.getComponentOrNull(GlobalPointerDown);
                  if (handler) {
                      eventResult.hit = hit;
                      handler.callback(eventResult);
                  }
              }
          }
          else {
              this.internalState[button].BUTTON_DOWN = false;
              for (var i = 0; i < this.subscriptions[button]['BUTTON_UP'].length; i++) {
                  var subscription = this.subscriptions[button]['BUTTON_UP'][i];
                  // remove hit information when raycast is disabled
                  if (subscription.useRaycast) {
                      eventResult.hit = hit;
                  }
                  else {
                      eventResult.hit = undefined;
                  }
                  subscription.fn(eventResult);
              }
              if (hit && hit.entityId && DisposableComponent.engine) {
                  var entity = DisposableComponent.engine.entities[hit.entityId];
                  var handler = entity && entity.getComponentOrNull(GlobalPointerUp);
                  if (handler) {
                      eventResult.hit = hit;
                      handler.callback(eventResult);
                  }
              }
          }
      };
      Input.prototype.getSubscriptionId = function (eventName, buttonId, fn) {
          for (var i = 0; i < this.subscriptions[buttonId][eventName].length; i++) {
              if (this.subscriptions[buttonId][eventName][i].fn === fn) {
                  return i;
              }
          }
          return -1;
      };
      Input.prototype.getPointerById = function (id) {
          if (id < 0 || id >= this.buttonIdMapping.length) {
              return null;
          }
          var actionButton = this.buttonIdMapping[id];
          if (actionButton === exports.ActionButton.ANY) {
              return null;
          }
          return actionButton;
      };
      return Input;
  }());

  /**
   * @public
   */
  exports.CLASS_ID = void 0;
  (function (CLASS_ID) {
      CLASS_ID[CLASS_ID["TRANSFORM"] = 1] = "TRANSFORM";
      CLASS_ID[CLASS_ID["UUID_CALLBACK"] = 8] = "UUID_CALLBACK";
      CLASS_ID[CLASS_ID["BOX_SHAPE"] = 16] = "BOX_SHAPE";
      CLASS_ID[CLASS_ID["SPHERE_SHAPE"] = 17] = "SPHERE_SHAPE";
      CLASS_ID[CLASS_ID["PLANE_SHAPE"] = 18] = "PLANE_SHAPE";
      CLASS_ID[CLASS_ID["CONE_SHAPE"] = 19] = "CONE_SHAPE";
      CLASS_ID[CLASS_ID["CYLINDER_SHAPE"] = 20] = "CYLINDER_SHAPE";
      CLASS_ID[CLASS_ID["TEXT_SHAPE"] = 21] = "TEXT_SHAPE";
      CLASS_ID[CLASS_ID["NFT_SHAPE"] = 22] = "NFT_SHAPE";
      CLASS_ID[CLASS_ID["UI_WORLD_SPACE_SHAPE"] = 23] = "UI_WORLD_SPACE_SHAPE";
      CLASS_ID[CLASS_ID["UI_SCREEN_SPACE_SHAPE"] = 24] = "UI_SCREEN_SPACE_SHAPE";
      CLASS_ID[CLASS_ID["UI_CONTAINER_RECT"] = 25] = "UI_CONTAINER_RECT";
      CLASS_ID[CLASS_ID["UI_CONTAINER_STACK"] = 26] = "UI_CONTAINER_STACK";
      CLASS_ID[CLASS_ID["UI_TEXT_SHAPE"] = 27] = "UI_TEXT_SHAPE";
      CLASS_ID[CLASS_ID["UI_INPUT_TEXT_SHAPE"] = 28] = "UI_INPUT_TEXT_SHAPE";
      CLASS_ID[CLASS_ID["UI_IMAGE_SHAPE"] = 29] = "UI_IMAGE_SHAPE";
      CLASS_ID[CLASS_ID["UI_SLIDER_SHAPE"] = 30] = "UI_SLIDER_SHAPE";
      CLASS_ID[CLASS_ID["CIRCLE_SHAPE"] = 31] = "CIRCLE_SHAPE";
      CLASS_ID[CLASS_ID["BILLBOARD"] = 32] = "BILLBOARD";
      CLASS_ID[CLASS_ID["ANIMATION"] = 33] = "ANIMATION";
      CLASS_ID[CLASS_ID["FONT"] = 34] = "FONT";
      CLASS_ID[CLASS_ID["UI_FULLSCREEN_SHAPE"] = 40] = "UI_FULLSCREEN_SHAPE";
      CLASS_ID[CLASS_ID["UI_BUTTON_SHAPE"] = 41] = "UI_BUTTON_SHAPE";
      CLASS_ID[CLASS_ID["GLTF_SHAPE"] = 54] = "GLTF_SHAPE";
      CLASS_ID[CLASS_ID["OBJ_SHAPE"] = 55] = "OBJ_SHAPE";
      CLASS_ID[CLASS_ID["AVATAR_SHAPE"] = 56] = "AVATAR_SHAPE";
      CLASS_ID[CLASS_ID["BASIC_MATERIAL"] = 64] = "BASIC_MATERIAL";
      CLASS_ID[CLASS_ID["PBR_MATERIAL"] = 65] = "PBR_MATERIAL";
      CLASS_ID[CLASS_ID["HIGHLIGHT_ENTITY"] = 66] = "HIGHLIGHT_ENTITY";
      /** @deprecated Sound has been deprecataed */
      CLASS_ID[CLASS_ID["SOUND"] = 67] = "SOUND";
      CLASS_ID[CLASS_ID["TEXTURE"] = 68] = "TEXTURE";
      CLASS_ID[CLASS_ID["VIDEO_CLIP"] = 70] = "VIDEO_CLIP";
      CLASS_ID[CLASS_ID["VIDEO_TEXTURE"] = 71] = "VIDEO_TEXTURE";
      CLASS_ID[CLASS_ID["AVATAR_TEXTURE"] = 72] = "AVATAR_TEXTURE";
      CLASS_ID[CLASS_ID["AUDIO_CLIP"] = 200] = "AUDIO_CLIP";
      CLASS_ID[CLASS_ID["AUDIO_SOURCE"] = 201] = "AUDIO_SOURCE";
      CLASS_ID[CLASS_ID["AUDIO_STREAM"] = 202] = "AUDIO_STREAM";
      CLASS_ID[CLASS_ID["GIZMOS"] = 203] = "GIZMOS";
      CLASS_ID[CLASS_ID["SMART_ITEM"] = 204] = "SMART_ITEM";
      CLASS_ID[CLASS_ID["AVATAR_MODIFIER_AREA"] = 205] = "AVATAR_MODIFIER_AREA";
      CLASS_ID[CLASS_ID["AVATAR_ATTACH"] = 206] = "AVATAR_ATTACH";
      CLASS_ID[CLASS_ID["CAMERA_MODE_AREA"] = 207] = "CAMERA_MODE_AREA";
      // For state sync only
      CLASS_ID[CLASS_ID["NAME"] = 300] = "NAME";
      CLASS_ID[CLASS_ID["LOCKED_ON_EDIT"] = 301] = "LOCKED_ON_EDIT";
      CLASS_ID[CLASS_ID["VISIBLE_ON_EDIT"] = 302] = "VISIBLE_ON_EDIT";
  })(exports.CLASS_ID || (exports.CLASS_ID = {}));
  /** @public */
  exports.AvatarModifiers = void 0;
  (function (AvatarModifiers) {
      AvatarModifiers["HIDE_AVATARS"] = "HIDE_AVATARS";
      AvatarModifiers["DISABLE_PASSPORTS"] = "DISABLE_PASSPORTS";
  })(exports.AvatarModifiers || (exports.AvatarModifiers = {}));
  /**
   * Define an area where avatars can be modified in some way
   * @public
   */
  var AvatarModifierArea = /** @class */ (function (_super) {
      __extends(AvatarModifierArea, _super);
      function AvatarModifierArea(args) {
          var _this = _super.call(this) || this;
          _this.area = args.area;
          _this.modifiers = args.modifiers;
          _this.excludeIds = args.excludeIds;
          return _this;
      }
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Object)
      ], AvatarModifierArea.prototype, "area", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Array)
      ], AvatarModifierArea.prototype, "modifiers", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Array)
      ], AvatarModifierArea.prototype, "excludeIds", void 0);
      AvatarModifierArea = __decorate([
          Component('engine.avatarModifierArea', exports.CLASS_ID.AVATAR_MODIFIER_AREA),
          __metadata("design:paramtypes", [Object])
      ], AvatarModifierArea);
      return AvatarModifierArea;
  }(ObservableComponent));
  /**
   * @public
   */
  var Transform = /** @class */ (function (_super) {
      __extends(Transform, _super);
      function Transform(args) {
          if (args === void 0) { args = {}; }
          var _this = _super.call(this) || this;
          _this.position = args.position || dist.Vector3.Zero();
          _this.rotation = args.rotation || dist.Quaternion.Identity;
          _this.scale = args.scale || new dist.Vector3(1, 1, 1);
          return _this;
      }
      Object.defineProperty(Transform.prototype, "eulerAngles", {
          /**
           * @public
           * The rotation as Euler angles in degrees.
           */
          get: function () {
              return this.rotation.eulerAngles;
          },
          enumerable: false,
          configurable: true
      });
      /**
       * @public
       * Rotates the transform so the forward vector points at target's current position.
       */
      Transform.prototype.lookAt = function (target, worldUp) {
          if (worldUp === void 0) { worldUp = dist.MathTmp.staticUp; }
          var result = new dist.Matrix();
          dist.Matrix.LookAtLHToRef(this.position, target, worldUp, result);
          result.invert();
          dist.Quaternion.FromRotationMatrixToRef(result, this.rotation);
          return this;
      };
      /**
       * @public
       * Applies a rotation of euler angles around the x, y and z axis.
       */
      Transform.prototype.rotate = function (axis, angle) {
          this.rotation.multiplyInPlace(this.rotation.angleAxis(angle, axis));
          return this;
      };
      /**
       * @public
       * Moves the transform in the direction and distance of translation.
       */
      Transform.prototype.translate = function (vec) {
          this.position.addInPlace(vec);
          return this;
      };
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", dist.Vector3)
      ], Transform.prototype, "position", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", dist.Quaternion)
      ], Transform.prototype, "rotation", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", dist.Vector3)
      ], Transform.prototype, "scale", void 0);
      Transform = __decorate([
          Component('engine.transform', exports.CLASS_ID.TRANSFORM),
          __metadata("design:paramtypes", [Object])
      ], Transform);
      return Transform;
  }(ObservableComponent));
  /** @public */
  exports.AttachToAvatarAnchorPointId = void 0;
  (function (AttachToAvatarAnchorPointId) {
      AttachToAvatarAnchorPointId[AttachToAvatarAnchorPointId["Position"] = 0] = "Position";
      AttachToAvatarAnchorPointId[AttachToAvatarAnchorPointId["NameTag"] = 1] = "NameTag";
      /** @internal */
      AttachToAvatarAnchorPointId[AttachToAvatarAnchorPointId["LeftHand"] = 2] = "LeftHand";
      /** @internal */
      AttachToAvatarAnchorPointId[AttachToAvatarAnchorPointId["RightHand"] = 3] = "RightHand";
  })(exports.AttachToAvatarAnchorPointId || (exports.AttachToAvatarAnchorPointId = {}));
  /**
   * @public
   */
  var AttachToAvatar = /** @class */ (function (_super) {
      __extends(AttachToAvatar, _super);
      function AttachToAvatar(args) {
          if (args === void 0) { args = {}; }
          var _this = _super.call(this) || this;
          _this.avatarId = args.avatarId || '';
          _this.anchorPointId =
              args.anchorPointId || exports.AttachToAvatarAnchorPointId.Position;
          return _this;
      }
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", String)
      ], AttachToAvatar.prototype, "avatarId", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], AttachToAvatar.prototype, "anchorPointId", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", String)
      ], AttachToAvatar.prototype, "avatarSceneId", void 0);
      AttachToAvatar = __decorate([
          Component('engine.transform', exports.CLASS_ID.AVATAR_ATTACH),
          __metadata("design:paramtypes", [Object])
      ], AttachToAvatar);
      return AttachToAvatar;
  }(ObservableComponent));
  /**
   * Billboard defines a behavior that makes the entity face the camera in any moment.
   * @public
   */
  var Billboard = /** @class */ (function (_super) {
      __extends(Billboard, _super);
      function Billboard(x, y, z) {
          if (x === void 0) { x = true; }
          if (y === void 0) { y = true; }
          if (z === void 0) { z = true; }
          var _this = _super.call(this) || this;
          _this.x = true;
          _this.y = true;
          _this.z = true;
          _this.x = x;
          _this.y = y;
          _this.z = z;
          return _this;
      }
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Boolean)
      ], Billboard.prototype, "x", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Boolean)
      ], Billboard.prototype, "y", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Boolean)
      ], Billboard.prototype, "z", void 0);
      Billboard = __decorate([
          Component('engine.billboard', exports.CLASS_ID.BILLBOARD),
          __metadata("design:paramtypes", [Boolean, Boolean, Boolean])
      ], Billboard);
      return Billboard;
  }(ObservableComponent));
  /**
   * @public
   */
  var Shape = /** @class */ (function (_super) {
      __extends(Shape, _super);
      function Shape() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          /**
           * Set to true to turn on the collider for the entity.
           */
          _this.withCollisions = true;
          /**
           * Set to true to turn on the PointerEvents blocking for the entity.
           */
          _this.isPointerBlocker = true;
          /**
           * Defines if the entity and its children should be rendered
           */
          _this.visible = true;
          return _this;
      }
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Boolean)
      ], Shape.prototype, "withCollisions", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Boolean)
      ], Shape.prototype, "isPointerBlocker", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Boolean)
      ], Shape.prototype, "visible", void 0);
      return Shape;
  }(ObservableComponent));
  /**
   * @public
   */
  var BoxShape = /** @class */ (function (_super) {
      __extends(BoxShape, _super);
      function BoxShape() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Array)
      ], BoxShape.prototype, "uvs", void 0);
      BoxShape = __decorate([
          DisposableComponent('engine.shape', exports.CLASS_ID.BOX_SHAPE)
      ], BoxShape);
      return BoxShape;
  }(Shape));
  /**
   * @public
   */
  var SphereShape = /** @class */ (function (_super) {
      __extends(SphereShape, _super);
      function SphereShape() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      SphereShape = __decorate([
          DisposableComponent('engine.shape', exports.CLASS_ID.SPHERE_SHAPE)
      ], SphereShape);
      return SphereShape;
  }(Shape));
  /**
   * @public
   */
  var CircleShape = /** @class */ (function (_super) {
      __extends(CircleShape, _super);
      function CircleShape() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], CircleShape.prototype, "segments", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], CircleShape.prototype, "arc", void 0);
      CircleShape = __decorate([
          DisposableComponent('engine.shape', exports.CLASS_ID.CIRCLE_SHAPE)
      ], CircleShape);
      return CircleShape;
  }(Shape));
  /**
   * @public
   */
  var PlaneShape = /** @class */ (function (_super) {
      __extends(PlaneShape, _super);
      function PlaneShape() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          /**
           * Sets the horizontal length of the plane. Defaults to 1.
           */
          _this.width = 1;
          /**
           * Sets the vertical length of the plane. Defaults to 1.
           */
          _this.height = 1;
          return _this;
      }
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], PlaneShape.prototype, "width", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], PlaneShape.prototype, "height", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Array)
      ], PlaneShape.prototype, "uvs", void 0);
      PlaneShape = __decorate([
          DisposableComponent('engine.shape', exports.CLASS_ID.PLANE_SHAPE)
      ], PlaneShape);
      return PlaneShape;
  }(Shape));
  /**
   * @public
   */
  var ConeShape = /** @class */ (function (_super) {
      __extends(ConeShape, _super);
      function ConeShape() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          /**
           * The radius of the top of a truncated cone. Defaults to 0.
           */
          _this.radiusTop = 0;
          /**
           * The radius of the base of the cone. Defaults to 1.
           */
          _this.radiusBottom = 1;
          /**
           * Sets the number of rings along the cone height (positive integer). Defaults to 1.
           */
          _this.segmentsHeight = 1;
          /**
           * Sets the number of cone sides (positive integer). Defaults to 36.
           */
          _this.segmentsRadial = 36;
          /**
           * Adds two extra faces per subdivision to enclose the cone around its height axis.
           * Defaults to false.
           */
          _this.openEnded = false;
          /**
           * Sets the radius of the top and bottom caps at once.
           *
           * Properties `radiusTop` and `radiusBottom` are prioritized over this one.
           */
          _this.radius = null;
          /**
           * Sets the ratio (max 1) to apply to the circumference to slice the cone. Defaults to 360.
           */
          _this.arc = 360;
          return _this;
      }
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], ConeShape.prototype, "radiusTop", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], ConeShape.prototype, "radiusBottom", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], ConeShape.prototype, "segmentsHeight", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], ConeShape.prototype, "segmentsRadial", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Boolean)
      ], ConeShape.prototype, "openEnded", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Object)
      ], ConeShape.prototype, "radius", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], ConeShape.prototype, "arc", void 0);
      ConeShape = __decorate([
          DisposableComponent('engine.shape', exports.CLASS_ID.CONE_SHAPE)
      ], ConeShape);
      return ConeShape;
  }(Shape));
  /**
   * @public
   */
  var CylinderShape = /** @class */ (function (_super) {
      __extends(CylinderShape, _super);
      function CylinderShape() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          /**
           * The radius of the top of the cylinder. Defaults to 0.
           */
          _this.radiusTop = 1;
          /**
           * The radius of the base of the cylinder. Defaults to 1.
           */
          _this.radiusBottom = 1;
          /**
           * Sets the number of rings along the cylinder height (positive integer). Defaults to 1.
           */
          _this.segmentsHeight = 1;
          /**
           * Sets the number of cylinder sides (positive integer). Defaults to 36.
           */
          _this.segmentsRadial = 36;
          /**
           * Adds two extra faces per subdivision to enclose the cylinder around its height axis.
           * Defaults to false.
           */
          _this.openEnded = false;
          /**
           * Sets the radius of the top and bottom caps at once.
           *
           * Properties `radiusTop` and `radiusBottom` are prioritized over this one.
           */
          _this.radius = null;
          /**
           * Sets the ratio (max 1) to apply to the circumference to slice the cylinder. Defaults to 360.
           */
          _this.arc = 360;
          return _this;
      }
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], CylinderShape.prototype, "radiusTop", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], CylinderShape.prototype, "radiusBottom", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], CylinderShape.prototype, "segmentsHeight", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], CylinderShape.prototype, "segmentsRadial", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Boolean)
      ], CylinderShape.prototype, "openEnded", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Object)
      ], CylinderShape.prototype, "radius", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], CylinderShape.prototype, "arc", void 0);
      CylinderShape = __decorate([
          DisposableComponent('engine.shape', exports.CLASS_ID.CYLINDER_SHAPE)
      ], CylinderShape);
      return CylinderShape;
  }(Shape));
  /**
   * @public
   */
  var GLTFShape = /** @class */ (function (_super) {
      __extends(GLTFShape, _super);
      function GLTFShape(src) {
          var _this = _super.call(this) || this;
          _this.src = src;
          return _this;
      }
      __decorate([
          Shape.readonly,
          __metadata("design:type", String)
      ], GLTFShape.prototype, "src", void 0);
      GLTFShape = __decorate([
          DisposableComponent('engine.shape', exports.CLASS_ID.GLTF_SHAPE),
          __metadata("design:paramtypes", [String])
      ], GLTFShape);
      return GLTFShape;
  }(Shape));
  /** @public */
  exports.PictureFrameStyle = void 0;
  (function (PictureFrameStyle) {
      PictureFrameStyle[PictureFrameStyle["Classic"] = 0] = "Classic";
      PictureFrameStyle[PictureFrameStyle["Baroque_Ornament"] = 1] = "Baroque_Ornament";
      PictureFrameStyle[PictureFrameStyle["Diamond_Ornament"] = 2] = "Diamond_Ornament";
      PictureFrameStyle[PictureFrameStyle["Minimal_Wide"] = 3] = "Minimal_Wide";
      PictureFrameStyle[PictureFrameStyle["Minimal_Grey"] = 4] = "Minimal_Grey";
      PictureFrameStyle[PictureFrameStyle["Blocky"] = 5] = "Blocky";
      PictureFrameStyle[PictureFrameStyle["Gold_Edges"] = 6] = "Gold_Edges";
      PictureFrameStyle[PictureFrameStyle["Gold_Carved"] = 7] = "Gold_Carved";
      PictureFrameStyle[PictureFrameStyle["Gold_Wide"] = 8] = "Gold_Wide";
      PictureFrameStyle[PictureFrameStyle["Gold_Rounded"] = 9] = "Gold_Rounded";
      PictureFrameStyle[PictureFrameStyle["Metal_Medium"] = 10] = "Metal_Medium";
      PictureFrameStyle[PictureFrameStyle["Metal_Wide"] = 11] = "Metal_Wide";
      PictureFrameStyle[PictureFrameStyle["Metal_Slim"] = 12] = "Metal_Slim";
      PictureFrameStyle[PictureFrameStyle["Metal_Rounded"] = 13] = "Metal_Rounded";
      PictureFrameStyle[PictureFrameStyle["Pins"] = 14] = "Pins";
      PictureFrameStyle[PictureFrameStyle["Minimal_Black"] = 15] = "Minimal_Black";
      PictureFrameStyle[PictureFrameStyle["Minimal_White"] = 16] = "Minimal_White";
      PictureFrameStyle[PictureFrameStyle["Tape"] = 17] = "Tape";
      PictureFrameStyle[PictureFrameStyle["Wood_Slim"] = 18] = "Wood_Slim";
      PictureFrameStyle[PictureFrameStyle["Wood_Wide"] = 19] = "Wood_Wide";
      PictureFrameStyle[PictureFrameStyle["Wood_Twigs"] = 20] = "Wood_Twigs";
      PictureFrameStyle[PictureFrameStyle["Canvas"] = 21] = "Canvas";
      PictureFrameStyle[PictureFrameStyle["None"] = 22] = "None";
  })(exports.PictureFrameStyle || (exports.PictureFrameStyle = {}));
  /**
   * @public
   */
  var NFTShape = /** @class */ (function (_super) {
      __extends(NFTShape, _super);
      function NFTShape(src, args) {
          if (args === void 0) { args = {}; }
          var _this = _super.call(this) || this;
          _this.src = src;
          var color = new dist.Color3(0.6404918, 0.611472, 0.8584906);
          var style = exports.PictureFrameStyle.Classic;
          // check if args is color (backwards compatibility)
          if ('r' in args) {
              color = args;
          }
          else if (args !== null) {
              if (args.color)
                  color = args.color;
              if (args.style)
                  style = args.style;
          }
          _this.color = color;
          _this.style = style;
          return _this;
      }
      __decorate([
          Shape.readonly,
          __metadata("design:type", String)
      ], NFTShape.prototype, "src", void 0);
      __decorate([
          Shape.readonly,
          __metadata("design:type", Number)
      ], NFTShape.prototype, "style", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", dist.Color3)
      ], NFTShape.prototype, "color", void 0);
      NFTShape = __decorate([
          DisposableComponent('engine.shape', exports.CLASS_ID.NFT_SHAPE),
          __metadata("design:paramtypes", [String, Object])
      ], NFTShape);
      return NFTShape;
  }(Shape));
  /**
   * @public
   */
  var Texture = /** @class */ (function (_super) {
      __extends(Texture, _super);
      function Texture(src, opts) {
          var _this = _super.call(this) || this;
          var base64Test = new RegExp('data:[a-z-]+/[a-z-]+;base64');
          if (src.length > 2048 || base64Test.test(src)) {
              log('⚠️🚨 Base64 textures will be deprecated in version 7 of decentraland-ecs');
          }
          _this.src = src;
          if (opts) {
              for (var i in opts) {
                  var that = _this;
                  that[i] = opts[i];
              }
          }
          return _this;
      }
      __decorate([
          ObservableComponent.readonly,
          __metadata("design:type", String)
      ], Texture.prototype, "src", void 0);
      __decorate([
          ObservableComponent.readonly,
          __metadata("design:type", Number)
      ], Texture.prototype, "samplingMode", void 0);
      __decorate([
          ObservableComponent.readonly,
          __metadata("design:type", Number)
      ], Texture.prototype, "wrap", void 0);
      __decorate([
          ObservableComponent.readonly,
          __metadata("design:type", Boolean)
      ], Texture.prototype, "hasAlpha", void 0);
      Texture = __decorate([
          DisposableComponent('engine.texture', exports.CLASS_ID.TEXTURE),
          __metadata("design:paramtypes", [String, Object])
      ], Texture);
      return Texture;
  }(ObservableComponent));
  /**
   * @public
   */
  var Animator = /** @class */ (function (_super) {
      __extends(Animator, _super);
      function Animator() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.states = [];
          return _this;
      }
      /**
       * Adds an AnimationState to the animation lists.
       */
      Animator.prototype.addClip = function (clip) {
          var _this = this;
          this.states.push(clip);
          clip.onChange(function () {
              _this.dirty = true;
          });
          clip.owner = this;
          return this;
      };
      /**
       * Gets the animation clip instance for the specified clip name.
       * If the clip doesn't exist a new one will be created.
       */
      Animator.prototype.getClip = function (clipName) {
          for (var i = 0; i < this.states.length; i++) {
              var clip = this.states[i];
              if (clip.clip === clipName) {
                  return clip;
              }
          }
          var newClip = new AnimationState(clipName);
          this.addClip(newClip);
          return newClip;
      };
      /**
       * Resets and pauses the animation state, if the clip is null it will stop all animations on this animator
       */
      Animator.prototype.stop = function (clip) {
          if (clip) {
              clip.playing = false;
              clip.shouldReset = true;
          }
          else {
              for (var i = 0; i < this.states.length; i++) {
                  var animationState = this.states[i];
                  this.stop(animationState);
              }
          }
      };
      /**
       * Starts the animation
       */
      Animator.prototype.play = function (clip, reset) {
          if (reset === void 0) { reset = false; }
          for (var i = 0; i < this.states.length; i++) {
              var animationState = this.states[i];
              if (animationState.layer === clip.layer && clip !== animationState) {
                  this.pause(animationState);
              }
          }
          if (reset)
              clip.shouldReset = true;
          clip.playing = true;
          clip.dirty = true;
          clip.data.nonce = Math.random();
      };
      /**
       * Pauses the animation state, if the clip is null it will pause all animations on this animator
       */
      Animator.prototype.pause = function (clip) {
          if (clip) {
              clip.playing = false;
          }
          else {
              for (var i = 0; i < this.states.length; i++) {
                  var animationState = this.states[i];
                  this.pause(animationState);
              }
          }
      };
      __decorate([
          ObservableComponent.readonly,
          __metadata("design:type", Array)
      ], Animator.prototype, "states", void 0);
      Animator = __decorate([
          Component('engine.animator', exports.CLASS_ID.ANIMATION)
      ], Animator);
      return Animator;
  }(Shape));
  /**
   * @public
   */
  var OBJShape = /** @class */ (function (_super) {
      __extends(OBJShape, _super);
      function OBJShape(src) {
          var _this = _super.call(this) || this;
          _this.src = src;
          return _this;
      }
      __decorate([
          ObservableComponent.readonly,
          __metadata("design:type", String)
      ], OBJShape.prototype, "src", void 0);
      OBJShape = __decorate([
          DisposableComponent('engine.shape', exports.CLASS_ID.OBJ_SHAPE),
          __metadata("design:paramtypes", [String])
      ], OBJShape);
      return OBJShape;
  }(Shape));
  /**
   * @public
   */
  var Font = /** @class */ (function (_super) {
      __extends(Font, _super);
      function Font(src) {
          if (src === void 0) { src = ''; }
          var _this = _super.call(this) || this;
          _this.src = src;
          return _this;
      }
      __decorate([
          ObservableComponent.readonly,
          __metadata("design:type", String)
      ], Font.prototype, "src", void 0);
      Font = __decorate([
          DisposableComponent('engine.font', exports.CLASS_ID.FONT),
          __metadata("design:paramtypes", [String])
      ], Font);
      return Font;
  }(ObservableComponent));
  /**
   * @public
   */
  exports.Fonts = void 0;
  (function (Fonts) {
      /** @deprecated SanFrancisco has been deprecated. Use SansSerif instead.*/
      Fonts["SanFrancisco"] = "builtin:SF-UI-Text-Regular SDF";
      /** @deprecated SanFrancisco_Heavy has been deprecated. Use SansSerif_Heavy instead.*/
      Fonts["SanFrancisco_Heavy"] = "builtin:SF-UI-Text-Heavy SDF";
      /** @deprecated SanFrancisco_Semibold has been deprecated. Use SansSerif_SemiBold instead.*/
      Fonts["SanFrancisco_Semibold"] = "builtin:SF-UI-Text-Semibold SDF";
      Fonts["LiberationSans"] = "builtin:LiberationSans SDF";
      Fonts["SansSerif"] = "SansSerif";
      Fonts["SansSerif_Heavy"] = "SansSerif_Heavy";
      Fonts["SansSerif_Bold"] = "SansSerif_Bold";
      Fonts["SansSerif_SemiBold"] = "SansSerif_SemiBold";
  })(exports.Fonts || (exports.Fonts = {}));
  /**
   * @public
   */
  var TextShape = /** @class */ (function (_super) {
      __extends(TextShape, _super);
      function TextShape(value) {
          var _this = _super.call(this) || this;
          _this.outlineWidth = 0;
          _this.outlineColor = new dist.Color3(1, 1, 1);
          _this.color = new dist.Color3(1, 1, 1);
          _this.fontSize = 10;
          _this.opacity = 1.0;
          _this.value = '';
          _this.lineSpacing = '0px';
          _this.lineCount = 0;
          _this.textWrapping = false;
          _this.shadowBlur = 0;
          _this.shadowOffsetX = 0;
          _this.shadowOffsetY = 0;
          _this.shadowColor = new dist.Color3(1, 1, 1);
          _this.hTextAlign = 'center';
          _this.vTextAlign = 'center';
          _this.width = 1;
          _this.height = 1;
          _this.paddingTop = 0;
          _this.paddingRight = 0;
          _this.paddingBottom = 0;
          _this.paddingLeft = 0;
          _this.billboard = false;
          _this.visible = true;
          if (value) {
              _this.value = value;
          }
          return _this;
      }
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], TextShape.prototype, "outlineWidth", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", dist.Color3)
      ], TextShape.prototype, "outlineColor", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", dist.Color3)
      ], TextShape.prototype, "color", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], TextShape.prototype, "fontSize", void 0);
      __decorate([
          ObservableComponent.component,
          __metadata("design:type", Font)
      ], TextShape.prototype, "font", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], TextShape.prototype, "opacity", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", String)
      ], TextShape.prototype, "value", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", String)
      ], TextShape.prototype, "lineSpacing", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], TextShape.prototype, "lineCount", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Boolean)
      ], TextShape.prototype, "textWrapping", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], TextShape.prototype, "shadowBlur", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], TextShape.prototype, "shadowOffsetX", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], TextShape.prototype, "shadowOffsetY", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", dist.Color3)
      ], TextShape.prototype, "shadowColor", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", String)
      ], TextShape.prototype, "hTextAlign", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", String)
      ], TextShape.prototype, "vTextAlign", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], TextShape.prototype, "width", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], TextShape.prototype, "height", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], TextShape.prototype, "paddingTop", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], TextShape.prototype, "paddingRight", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], TextShape.prototype, "paddingBottom", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], TextShape.prototype, "paddingLeft", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Boolean)
      ], TextShape.prototype, "billboard", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Boolean)
      ], TextShape.prototype, "visible", void 0);
      TextShape = __decorate([
          Component('engine.text', exports.CLASS_ID.TEXT_SHAPE),
          __metadata("design:paramtypes", [String])
      ], TextShape);
      return TextShape;
  }(ObservableComponent));
  /**
   * @public
   */
  exports.TransparencyMode = void 0;
  (function (TransparencyMode) {
      TransparencyMode[TransparencyMode["OPAQUE"] = 0] = "OPAQUE";
      TransparencyMode[TransparencyMode["ALPHA_TEST"] = 1] = "ALPHA_TEST";
      TransparencyMode[TransparencyMode["ALPHA_BLEND"] = 2] = "ALPHA_BLEND";
      TransparencyMode[TransparencyMode["ALPHA_TEST_AND_BLEND"] = 3] = "ALPHA_TEST_AND_BLEND";
      TransparencyMode[TransparencyMode["AUTO"] = 4] = "AUTO";
  })(exports.TransparencyMode || (exports.TransparencyMode = {}));
  /**
   * @public
   */
  var Material = /** @class */ (function (_super) {
      __extends(Material, _super);
      function Material() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          /**
           * Cutoff level for ALPHATEST mode. Range is between 0 and 1.
           * Defaults to 0.5
           */
          _this.alphaTest = 0.5;
          /**
           * Allow the material to cast shadows over other objects
           */
          _this.castShadows = true;
          /**
           * Sets the transparency mode of the material.
           * Defaults to -1.
           *
           * | Value | Type                                           |
           * | ----- | ---------------------------------------------- |
           * | 0     | OPAQUE  (default)                              |
           * | 1     | ALPHATEST                                      |
           * | 2     | ALPHABLEND                                     |
           * | 3     | ALPHATESTANDBLEND                              |
           * | 4     | AUTO (ALPHABLEND if alpha OPAQUE otherwise     |
           */
          _this.transparencyMode = exports.TransparencyMode.AUTO;
          return _this;
      }
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], Material.prototype, "alphaTest", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Object)
      ], Material.prototype, "albedoColor", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", dist.Color3
          /**
           * Specifies the metallic scalar of the metallic/roughness workflow.
           * Can also be used to scale the metalness values of the metallic texture.
           * Defaults to  0.5.
           */
          )
      ], Material.prototype, "emissiveColor", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], Material.prototype, "metallic", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], Material.prototype, "roughness", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", dist.Color3
          /**
           * Intensity of the direct lights e.g. the four lights available in scene.
           * This impacts both the direct diffuse and specular highlights.
           * Defaults to 1.
           */
          )
      ], Material.prototype, "reflectivityColor", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], Material.prototype, "directIntensity", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], Material.prototype, "microSurface", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], Material.prototype, "emissiveIntensity", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], Material.prototype, "specularIntensity", void 0);
      __decorate([
          ObservableComponent.component,
          __metadata("design:type", Object)
      ], Material.prototype, "albedoTexture", void 0);
      __decorate([
          ObservableComponent.component,
          __metadata("design:type", Object)
      ], Material.prototype, "alphaTexture", void 0);
      __decorate([
          ObservableComponent.component,
          __metadata("design:type", Object)
      ], Material.prototype, "emissiveTexture", void 0);
      __decorate([
          ObservableComponent.component,
          __metadata("design:type", Object)
      ], Material.prototype, "bumpTexture", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Boolean)
      ], Material.prototype, "castShadows", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], Material.prototype, "transparencyMode", void 0);
      Material = __decorate([
          DisposableComponent('engine.material', exports.CLASS_ID.PBR_MATERIAL)
      ], Material);
      return Material;
  }(ObservableComponent));
  /**
   * @public
   */
  var BasicMaterial = /** @class */ (function (_super) {
      __extends(BasicMaterial, _super);
      function BasicMaterial() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          /**
           * A number between 0 and 1.
           * Any pixel with an alpha lower than this value will be shown as transparent.
           */
          _this.alphaTest = 0.5;
          /**
           * Allow the material to cast shadows over other objects
           */
          _this.castShadows = true;
          return _this;
      }
      __decorate([
          ObservableComponent.component,
          __metadata("design:type", Object)
      ], BasicMaterial.prototype, "texture", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], BasicMaterial.prototype, "alphaTest", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Boolean)
      ], BasicMaterial.prototype, "castShadows", void 0);
      BasicMaterial = __decorate([
          DisposableComponent('engine.material', exports.CLASS_ID.BASIC_MATERIAL)
      ], BasicMaterial);
      return BasicMaterial;
  }(ObservableComponent));
  /**
   * @public
   */
  var OnUUIDEvent = /** @class */ (function (_super) {
      __extends(OnUUIDEvent, _super);
      function OnUUIDEvent(callback) {
          var _this = _super.call(this) || this;
          // @internal
          _this.uuid = newId('UUID');
          if (!callback || !('apply' in callback) || !('call' in callback)) {
              throw new Error('Callback is not a function');
          }
          _this.callback = callback;
          return _this;
      }
      OnUUIDEvent.uuidEvent = function (target, propertyKey) {
          if (delete target[propertyKey]) {
              var componentSymbol_1 = propertyKey + '_' + Math.random();
              target[componentSymbol_1] = undefined;
              Object.defineProperty(target, componentSymbol_1, __assign(__assign({}, Object.getOwnPropertyDescriptor(target, componentSymbol_1)), { enumerable: false }));
              Object.defineProperty(target, propertyKey.toString(), {
                  get: function () {
                      return this[componentSymbol_1];
                  },
                  set: function (value) {
                      var oldValue = this[componentSymbol_1];
                      if (value) {
                          if (value instanceof OnUUIDEvent) {
                              this.data[propertyKey] = value.uuid;
                          }
                          else {
                              throw new Error('value is not an OnUUIDEvent');
                          }
                      }
                      else {
                          this.data[propertyKey] = null;
                      }
                      this[componentSymbol_1] = value;
                      if (value !== oldValue) {
                          this.dirty = true;
                          for (var i = 0; i < this.subscriptions.length; i++) {
                              this.subscriptions[i](propertyKey, value, oldValue);
                          }
                      }
                  },
                  enumerable: true
              });
          }
      };
      OnUUIDEvent.prototype.toJSON = function () {
          return { uuid: this.uuid, type: this.type };
      };
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Function)
      ], OnUUIDEvent.prototype, "callback", void 0);
      return OnUUIDEvent;
  }(ObservableComponent));
  /**
   * @public
   */
  var OnPointerUUIDEvent = /** @class */ (function (_super) {
      __extends(OnPointerUUIDEvent, _super);
      function OnPointerUUIDEvent() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.button = exports.ActionButton.ANY;
          _this.hoverText = 'Interact';
          _this.distance = 10;
          _this.showFeedback = true;
          return _this;
      }
      OnPointerUUIDEvent.prototype.toJSON = function () {
          return {
              uuid: this.uuid,
              type: this.type,
              button: this.button,
              hoverText: this.hoverText,
              distance: this.distance,
              showFeedback: this.showFeedback
          };
      };
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", String)
      ], OnPointerUUIDEvent.prototype, "button", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", String)
      ], OnPointerUUIDEvent.prototype, "hoverText", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], OnPointerUUIDEvent.prototype, "distance", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Boolean)
      ], OnPointerUUIDEvent.prototype, "showFeedback", void 0);
      return OnPointerUUIDEvent;
  }(OnUUIDEvent));
  /**
   * @internal
   */
  var OnPointerLock = /** @class */ (function (_super) {
      __extends(OnPointerLock, _super);
      function OnPointerLock() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.type = 'onPointerLock';
          return _this;
      }
      __decorate([
          ObservableComponent.readonly,
          __metadata("design:type", String)
      ], OnPointerLock.prototype, "type", void 0);
      OnPointerLock = __decorate([
          Component('engine.onPointerLock', exports.CLASS_ID.UUID_CALLBACK)
      ], OnPointerLock);
      return OnPointerLock;
  }(OnUUIDEvent));
  /**
   * @public
   */
  var OnAnimationEnd = /** @class */ (function (_super) {
      __extends(OnAnimationEnd, _super);
      function OnAnimationEnd() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.type = 'onAnimationEnd';
          return _this;
      }
      __decorate([
          ObservableComponent.readonly,
          __metadata("design:type", String)
      ], OnAnimationEnd.prototype, "type", void 0);
      OnAnimationEnd = __decorate([
          Component('engine.onAnimationEnd', exports.CLASS_ID.UUID_CALLBACK)
      ], OnAnimationEnd);
      return OnAnimationEnd;
  }(OnUUIDEvent));
  /**
   * @internal
   */
  var SmartItem = /** @class */ (function (_super) {
      __extends(SmartItem, _super);
      function SmartItem() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      SmartItem = __decorate([
          Component('engine.smartItem', exports.CLASS_ID.SMART_ITEM)
      ], SmartItem);
      return SmartItem;
  }(ObservableComponent));
  /**
   * @public
   */
  var VideoClip = /** @class */ (function (_super) {
      __extends(VideoClip, _super);
      function VideoClip(url) {
          var _this = _super.call(this) || this;
          _this.url = url;
          return _this;
      }
      __decorate([
          ObservableComponent.readonly,
          __metadata("design:type", String)
      ], VideoClip.prototype, "url", void 0);
      VideoClip = __decorate([
          DisposableComponent('engine.VideoClip', exports.CLASS_ID.VIDEO_CLIP),
          __metadata("design:paramtypes", [String])
      ], VideoClip);
      return VideoClip;
  }(ObservableComponent));
  /** @public */
  exports.VideoStatus = void 0;
  (function (VideoStatus) {
      VideoStatus[VideoStatus["NONE"] = 0] = "NONE";
      VideoStatus[VideoStatus["ERROR"] = 1] = "ERROR";
      VideoStatus[VideoStatus["LOADING"] = 2] = "LOADING";
      VideoStatus[VideoStatus["READY"] = 3] = "READY";
      VideoStatus[VideoStatus["PLAYING"] = 4] = "PLAYING";
      VideoStatus[VideoStatus["BUFFERING"] = 5] = "BUFFERING";
  })(exports.VideoStatus || (exports.VideoStatus = {}));
  /**
   * @public
   */
  var VideoTexture = /** @class */ (function (_super) {
      __extends(VideoTexture, _super);
      function VideoTexture(videoClip, opts) {
          var _this = _super.call(this) || this;
          _this.volume = 1;
          _this.playbackRate = 1;
          _this.loop = false;
          _this.seek = -1;
          _this._position = -1;
          _this._videoLength = -1;
          _this._status = exports.VideoStatus.NONE;
          /**
           * Is this VideoTexture playing?
           */
          _this.playing = false;
          if (!(videoClip instanceof VideoClip)) {
              throw new Error("Trying to create VideoTexture(VideoClip) with an invalid VideoClip");
          }
          _this.videoClipId = getComponentId(videoClip);
          if (opts) {
              for (var i in opts) {
                  var that = _this;
                  that[i] = opts[i];
              }
          }
          return _this;
      }
      VideoTexture.prototype.play = function () {
          this.playing = true;
      };
      VideoTexture.prototype.pause = function () {
          this.playing = false;
      };
      VideoTexture.prototype.reset = function () {
          this.seekTime(0);
          this.pause();
      };
      VideoTexture.prototype.seekTime = function (seconds) {
          this.seek = seconds;
          this.dirty = true;
          this.data.nonce = Math.random();
      };
      VideoTexture.prototype.toJSON = function () {
          if (this.seek >= 0) {
              // the seek value was changed/used
              var ret = JSON.parse(JSON.stringify(_super.prototype.toJSON.call(this)));
              this.seek = -1;
              return ret;
          }
          return _super.prototype.toJSON.call(this);
      };
      VideoTexture.prototype.update = function (videoEvent) {
          if (videoEvent.videoClipId === this.videoClipId) {
              this._status = videoEvent.videoStatus || exports.VideoStatus.NONE;
              this._videoLength = videoEvent.totalVideoLength;
              this._position = videoEvent.currentOffset;
          }
      };
      Object.defineProperty(VideoTexture.prototype, "position", {
          get: function () {
              return this._position;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(VideoTexture.prototype, "videoLength", {
          get: function () {
              return this._videoLength;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(VideoTexture.prototype, "status", {
          get: function () {
              return this._status;
          },
          enumerable: false,
          configurable: true
      });
      __decorate([
          ObservableComponent.readonly,
          __metadata("design:type", String)
      ], VideoTexture.prototype, "videoClipId", void 0);
      __decorate([
          ObservableComponent.readonly,
          __metadata("design:type", Number)
      ], VideoTexture.prototype, "samplingMode", void 0);
      __decorate([
          ObservableComponent.readonly,
          __metadata("design:type", Number)
      ], VideoTexture.prototype, "wrap", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], VideoTexture.prototype, "volume", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], VideoTexture.prototype, "playbackRate", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Boolean)
      ], VideoTexture.prototype, "loop", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], VideoTexture.prototype, "seek", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Boolean)
      ], VideoTexture.prototype, "playing", void 0);
      VideoTexture = __decorate([
          DisposableComponent('engine.VideoTexture', exports.CLASS_ID.VIDEO_TEXTURE),
          __metadata("design:paramtypes", [VideoClip, Object])
      ], VideoTexture);
      return VideoTexture;
  }(ObservableComponent));
  /**
   * @public
   */
  var CameraModeArea = /** @class */ (function (_super) {
      __extends(CameraModeArea, _super);
      function CameraModeArea(args) {
          var _this = _super.call(this) || this;
          _this.area = args.area;
          _this.cameraMode = args.cameraMode;
          return _this;
      }
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Object)
      ], CameraModeArea.prototype, "area", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], CameraModeArea.prototype, "cameraMode", void 0);
      CameraModeArea = __decorate([
          Component('engine.cameraModeArea', exports.CLASS_ID.CAMERA_MODE_AREA),
          __metadata("design:paramtypes", [Object])
      ], CameraModeArea);
      return CameraModeArea;
  }(ObservableComponent));
  /**
   * @public
   */
  var AvatarTexture = /** @class */ (function (_super) {
      __extends(AvatarTexture, _super);
      function AvatarTexture(userId, opts) {
          var _this = _super.call(this) || this;
          _this.userId = userId;
          if (opts) {
              for (var i in opts) {
                  var that = _this;
                  that[i] = opts[i];
              }
          }
          return _this;
      }
      __decorate([
          ObservableComponent.readonly,
          __metadata("design:type", String)
      ], AvatarTexture.prototype, "userId", void 0);
      __decorate([
          ObservableComponent.readonly,
          __metadata("design:type", Number)
      ], AvatarTexture.prototype, "samplingMode", void 0);
      __decorate([
          ObservableComponent.readonly,
          __metadata("design:type", Number)
      ], AvatarTexture.prototype, "wrap", void 0);
      __decorate([
          ObservableComponent.readonly,
          __metadata("design:type", Boolean)
      ], AvatarTexture.prototype, "hasAlpha", void 0);
      AvatarTexture = __decorate([
          DisposableComponent('engine.texture', exports.CLASS_ID.AVATAR_TEXTURE),
          __metadata("design:paramtypes", [String, Object])
      ], AvatarTexture);
      return AvatarTexture;
  }(ObservableComponent));

  /**
   * @public
   */
  var Camera = /** @class */ (function () {
      function Camera() {
          var _this = this;
          /** Camera position, relative to the parcel. */
          this.position = new dist.Vector3();
          /** Camera rotation */
          this.rotation = new dist.Quaternion();
          /** Feet position, relative to the parcel.  */
          this.feetPosition = new dist.Vector3();
          /** Camera position, absolute. */
          this.worldPosition = new dist.Vector3();
          // @internal
          this.lastEventPosition = { x: 0, y: 0, z: 0 };
          // @internal
          this.lastEventWorldPosition = { x: 0, y: 0, z: 0 };
          // @internal
          this.lastEventRotation = { x: 0, y: 0, z: 0, w: 1.0 };
          // @internal
          this._playerHeight = 1.6;
          // @internal
          this._cameraMode = exports.CameraMode.ThirdPerson;
          if (typeof dcl !== 'undefined') {
              dcl.subscribe('positionChanged');
              dcl.subscribe('rotationChanged');
              dcl.subscribe('cameraModeChanged');
              dcl.onEvent(function (event) {
                  switch (event.type) {
                      case 'positionChanged':
                          _this.positionChanged(event.data);
                          break;
                      case 'rotationChanged':
                          _this.rotationChanged(event.data);
                          break;
                      case 'cameraModeChanged':
                          _this.cameraModeChanged(event.data);
                          break;
                  }
              });
          }
          Object.defineProperty(this.position, 'x', {
              get: function () { return _this.lastEventPosition.x; }
          });
          Object.defineProperty(this.position, 'y', {
              get: function () { return _this.lastEventPosition.y; }
          });
          Object.defineProperty(this.position, 'z', {
              get: function () { return _this.lastEventPosition.z; }
          });
          Object.defineProperty(this.worldPosition, 'x', {
              get: function () { return _this.lastEventWorldPosition.x; }
          });
          Object.defineProperty(this.worldPosition, 'y', {
              get: function () { return _this.lastEventWorldPosition.y; }
          });
          Object.defineProperty(this.worldPosition, 'z', {
              get: function () { return _this.lastEventWorldPosition.z; }
          });
          Object.defineProperty(this.feetPosition, 'x', {
              get: function () { return _this.lastEventPosition.x; }
          });
          Object.defineProperty(this.feetPosition, 'y', {
              get: function () { return _this.lastEventPosition.y - _this.playerHeight; }
          });
          Object.defineProperty(this.feetPosition, 'z', {
              get: function () { return _this.lastEventPosition.z; }
          });
          Object.defineProperty(this.rotation, 'x', {
              get: function () { return _this.lastEventRotation.x; }
          });
          Object.defineProperty(this.rotation, 'y', {
              get: function () { return _this.lastEventRotation.y; }
          });
          Object.defineProperty(this.rotation, 'z', {
              get: function () { return _this.lastEventRotation.z; }
          });
          Object.defineProperty(this.rotation, 'w', {
              get: function () { return _this.lastEventRotation.w; }
          });
      }
      Object.defineProperty(Camera, "instance", {
          get: function () {
              if (!Camera._instance) {
                  Camera._instance = new Camera();
              }
              return Camera._instance;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(Camera.prototype, "playerHeight", {
          /** Player height. */
          get: function () {
              return this._playerHeight;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(Camera.prototype, "cameraMode", {
          /** @deprecated Use onCameraModeChangedObservable Observable instead. */
          get: function () {
              return this._cameraMode;
          },
          enumerable: false,
          configurable: true
      });
      // @internal
      Camera.prototype.positionChanged = function (e) {
          this.lastEventPosition = e.position;
          this.lastEventWorldPosition = e.cameraPosition;
          this._playerHeight = e.playerHeight;
      };
      // @internal
      Camera.prototype.rotationChanged = function (e) {
          this.lastEventRotation = e.quaternion;
      };
      // @internal
      Camera.prototype.cameraModeChanged = function (e) {
          this._cameraMode = e.cameraMode;
      };
      return Camera;
  }());

  /**
   * @internal
   */
  var QueryPrefix;
  (function (QueryPrefix) {
      QueryPrefix["HitFirst"] = "rqhf";
      QueryPrefix["HitAll"] = "rqha";
  })(QueryPrefix || (QueryPrefix = {}));
  /**
   * @public
   */
  var PhysicsCast = /** @class */ (function () {
      function PhysicsCast() {
          this.queries = {};
      }
      Object.defineProperty(PhysicsCast, "instance", {
          get: function () {
              PhysicsCast.ensureInstance();
              return PhysicsCast._instance;
          },
          enumerable: false,
          configurable: true
      });
      PhysicsCast.ensureInstance = function () {
          if (!PhysicsCast._instance) {
              PhysicsCast._instance = new PhysicsCast();
          }
      };
      PhysicsCast.prototype.getRayFromCamera = function (distance) {
          var rotation = Camera.instance.rotation;
          var rotationMat = dist.Matrix.Identity();
          rotation.toRotationMatrix(rotationMat);
          var direction = dist.Vector3.TransformCoordinates(dist.Vector3.Forward(), rotationMat);
          var ray = {
              origin: Camera.instance.position,
              direction: direction,
              distance: distance
          };
          return ray;
      };
      PhysicsCast.prototype.getRayFromPositions = function (from, to) {
          var direction = to.subtract(from);
          var length = direction.length();
          var ray = {
              origin: from,
              direction: direction.normalize(),
              distance: length
          };
          return ray;
      };
      PhysicsCast.prototype.hitFirst = function (ray, hitCallback, id) {
          var queryId = typeof id === 'number' ? QueryPrefix.HitFirst + id : uuid();
          this.queries[queryId] = hitCallback;
          if (typeof dcl !== 'undefined') {
              dcl.query('raycast', { queryId: queryId, queryType: 'HitFirst', ray: ray });
          }
      };
      PhysicsCast.prototype.hitAll = function (ray, hitCallback, id) {
          var queryId = typeof id === 'number' ? QueryPrefix.HitAll + id : uuid();
          this.queries[queryId] = hitCallback;
          if (typeof dcl !== 'undefined') {
              dcl.query('raycast', { queryId: queryId, queryType: 'HitAll', ray: ray });
          }
      };
      PhysicsCast.prototype.hitFirstAvatar = function (_ray, _hitCallback) {
          log('not implemented yet');
      };
      PhysicsCast.prototype.hitAllAvatars = function (_ray, _hitCallback) {
          log('not implemented yet');
      };
      PhysicsCast.prototype.handleRaycastHitFirstResponse = function (response) {
          this.queries[response.payload.queryId](response.payload.payload);
          delete this.queries[response.payload.queryId];
      };
      PhysicsCast.prototype.handleRaycastHitAllResponse = function (response) {
          this.queries[response.payload.queryId](response.payload.payload);
          delete this.queries[response.payload.queryId];
      };
      return PhysicsCast;
  }());

  /**
   * @public
   */
  var RaycastEventSystem = /** @class */ (function () {
      function RaycastEventSystem() {
      }
      RaycastEventSystem.prototype.activate = function (engine) {
          engine.eventManager.addListener(RaycastResponse, this, function (event) {
              if (event.payload.queryType === 'HitFirst') {
                  PhysicsCast.instance.handleRaycastHitFirstResponse(event);
              }
              else if (event.payload.queryType === 'HitAll') {
                  PhysicsCast.instance.handleRaycastHitAllResponse(event);
              }
          });
          if (typeof dcl !== 'undefined') {
              dcl.subscribe('raycastResponse');
          }
      };
      RaycastEventSystem.prototype.deactivate = function () {
          if (typeof dcl !== 'undefined') {
              dcl.unsubscribe('raycastResponse');
          }
      };
      return RaycastEventSystem;
  }());
  /**
   * @public
   */
  var PointerEventSystem = /** @class */ (function () {
      function PointerEventSystem() {
      }
      PointerEventSystem.prototype.activate = function (engine) {
          engine.eventManager.addListener(PointerEvent, this, function (event) {
              Input.instance.handlePointerEvent(event.payload);
          });
          if (typeof dcl !== 'undefined') {
              dcl.subscribe('pointerUp');
              dcl.subscribe('pointerDown');
              dcl.subscribe('actionButtonEvent');
          }
      };
      PointerEventSystem.prototype.deactivate = function () {
          if (typeof dcl !== 'undefined') {
              dcl.unsubscribe('pointerUp');
              dcl.unsubscribe('pointerDown');
              dcl.unsubscribe('actionButtonEvent');
          }
      };
      return PointerEventSystem;
  }());
  /**
   * @public
   */
  var UUIDEventSystem = /** @class */ (function () {
      function UUIDEventSystem() {
          this.handlerMap = {};
      }
      UUIDEventSystem.prototype.activate = function (engine) {
          engine.eventManager.addListener(UUIDEvent, this, this.handleEvent);
          engine.eventManager.addListener(ComponentAdded, this, this.componentAdded);
          engine.eventManager.addListener(ComponentRemoved, this, this.componentRemoved);
          if (typeof dcl !== 'undefined') {
              dcl.subscribe('uuidEvent');
          }
      };
      UUIDEventSystem.prototype.deactivate = function () {
          if (typeof dcl !== 'undefined') {
              dcl.unsubscribe('uuidEvent');
          }
      };
      UUIDEventSystem.prototype.onAddEntity = function (entity) {
          for (var componentName in entity.components) {
              var component = entity.components[componentName];
              if (component instanceof OnUUIDEvent) {
                  this.handlerMap[component.uuid] = component;
              }
          }
      };
      UUIDEventSystem.prototype.onRemoveEntity = function (entity) {
          for (var componentName in entity.components) {
              var component = entity.components[componentName];
              if (component instanceof OnUUIDEvent) {
                  delete this.handlerMap[component.uuid];
              }
          }
      };
      UUIDEventSystem.prototype.componentAdded = function (event) {
          if (event.entity.isAddedToEngine()) {
              var component = event.entity.components[event.componentName];
              if (component instanceof OnUUIDEvent) {
                  this.handlerMap[component.uuid] = component;
              }
          }
      };
      UUIDEventSystem.prototype.componentRemoved = function (event) {
          if (event.entity.isAddedToEngine()) {
              if (event.component instanceof OnUUIDEvent) {
                  delete this.handlerMap[event.component.uuid];
              }
          }
      };
      UUIDEventSystem.prototype.handleEvent = function (event) {
          if (event.uuid in this.handlerMap) {
              var handler = this.handlerMap[event.uuid];
              if (handler) {
                  if (handler.callback && 'call' in handler.callback) {
                      handler.callback(event.payload);
                  }
              }
          }
      };
      return UUIDEventSystem;
  }());
  /** @internal */
  var raycastEventSystem = new RaycastEventSystem();
  /** @internal */
  var pointerEventSystem = new PointerEventSystem();
  /** @internal */
  var uuidEventSystem = new UUIDEventSystem();

  /**
   * @public
   */
  var AudioClip = /** @class */ (function (_super) {
      __extends(AudioClip, _super);
      function AudioClip(url) {
          var _this = _super.call(this) || this;
          /**
           * Is this clip looping by default?
           */
          _this.loop = false;
          /**
           * Clip's master volume. This volume affects all the AudioSources.
           * Valid ranges from 0 to 1
           */
          _this.volume = 1;
          _this.url = url;
          return _this;
      }
      __decorate([
          ObservableComponent.readonly,
          __metadata("design:type", String)
      ], AudioClip.prototype, "url", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Boolean)
      ], AudioClip.prototype, "loop", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", String)
      ], AudioClip.prototype, "loadingCompleteEventId", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], AudioClip.prototype, "volume", void 0);
      AudioClip = __decorate([
          DisposableComponent('engine.AudioClip', exports.CLASS_ID.AUDIO_CLIP),
          __metadata("design:paramtypes", [String])
      ], AudioClip);
      return AudioClip;
  }(ObservableComponent));
  /**
   * @public
   */
  var AudioSource = /** @class */ (function (_super) {
      __extends(AudioSource, _super);
      function AudioSource(audioClip) {
          var _this = _super.call(this) || this;
          _this.audioClip = audioClip;
          /**
           * Is this clip looping by default?
           */
          _this.loop = false;
          /**
           * Clip's master volume. This volume affects all the AudioSources.
           * Valid ranges from 0 to 1
           */
          _this.volume = 1;
          /**
           * Is this AudioSource playing?
           */
          _this.playing = false;
          /**
           * Pitch, default: 1.0, range from 0.0 to MaxFloat
           */
          _this.pitch = 1.0;
          /**
           * Timestamp of when the playOnce was executed to see if we need to start over the audio
           */
          _this.playedAtTimestamp = Date.now();
          if (!(audioClip instanceof AudioClip)) {
              throw new Error("Trying to create AudioSource(AudioClip) with an invalid AudioClip");
          }
          _this.audioClipId = getComponentId(audioClip);
          return _this;
      }
      /**
       * Disables the looping and plays the current source once.
       * If the sound was playing, it stops and starts over.
       */
      AudioSource.prototype.playOnce = function () {
          this.playing = true;
          this.dirty = true;
          this.playedAtTimestamp = Date.now();
          this.data.nonce = Math.random();
          return this;
      };
      __decorate([
          ObservableComponent.readonly,
          __metadata("design:type", String)
      ], AudioSource.prototype, "audioClipId", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Boolean)
      ], AudioSource.prototype, "loop", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], AudioSource.prototype, "volume", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Boolean)
      ], AudioSource.prototype, "playing", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], AudioSource.prototype, "pitch", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], AudioSource.prototype, "playedAtTimestamp", void 0);
      AudioSource = __decorate([
          Component('engine.AudioSource', exports.CLASS_ID.AUDIO_SOURCE),
          __metadata("design:paramtypes", [AudioClip])
      ], AudioSource);
      return AudioSource;
  }(ObservableComponent));
  /**
   * @public
   */
  var AudioStream = /** @class */ (function (_super) {
      __extends(AudioStream, _super);
      function AudioStream(url) {
          var _this = _super.call(this) || this;
          _this.playing = false;
          _this.volume = 1;
          _this.url = url;
          _this.playing = true;
          return _this;
      }
      __decorate([
          ObservableComponent.readonly,
          __metadata("design:type", String)
      ], AudioStream.prototype, "url", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Boolean)
      ], AudioStream.prototype, "playing", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], AudioStream.prototype, "volume", void 0);
      AudioStream = __decorate([
          Component('engine.AudioStream', exports.CLASS_ID.AUDIO_STREAM),
          __metadata("design:paramtypes", [String])
      ], AudioStream);
      return AudioStream;
  }(ObservableComponent));

  /**
   * Gizmo identifiers
   * @public
   */
  exports.Gizmo = void 0;
  (function (Gizmo) {
      Gizmo["MOVE"] = "MOVE";
      Gizmo["ROTATE"] = "ROTATE";
      Gizmo["SCALE"] = "SCALE";
      Gizmo["NONE"] = "NONE";
  })(exports.Gizmo || (exports.Gizmo = {}));
  /**
   * This event is triggered after the user finalizes dragging a gizmo.
   * @public
   */
  var OnGizmoEvent = /** @class */ (function (_super) {
      __extends(OnGizmoEvent, _super);
      function OnGizmoEvent() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.type = 'gizmoEvent';
          return _this;
      }
      __decorate([
          ObservableComponent.readonly,
          __metadata("design:type", String)
      ], OnGizmoEvent.prototype, "type", void 0);
      OnGizmoEvent = __decorate([
          Component('engine.gizmoEvent', exports.CLASS_ID.UUID_CALLBACK)
      ], OnGizmoEvent);
      return OnGizmoEvent;
  }(OnUUIDEvent));
  /**
   * Enables gizmos in the entity. Gizmos only work in EDITOR, PREVIEW or DEBUG modes.
   * @public
   */
  var Gizmos = /** @class */ (function (_super) {
      __extends(Gizmos, _super);
      function Gizmos() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          /**
           * Enable position gizmo
           */
          _this.position = true;
          /**
           * Enable rotation gizmo
           */
          _this.rotation = true;
          /**
           * Enable scale gizmo
           */
          _this.scale = true;
          /**
           * Cycle through gizmos using click.
           */
          _this.cycle = true;
          /**
           * Align the gizmos to match the local reference system
           */
          _this.localReference = false;
          return _this;
      }
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Boolean)
      ], Gizmos.prototype, "position", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Boolean)
      ], Gizmos.prototype, "rotation", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Boolean)
      ], Gizmos.prototype, "scale", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Boolean)
      ], Gizmos.prototype, "cycle", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", String)
      ], Gizmos.prototype, "selectedGizmo", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Boolean)
      ], Gizmos.prototype, "localReference", void 0);
      Gizmos = __decorate([
          Component('engine.gizmos', exports.CLASS_ID.GIZMOS)
      ], Gizmos);
      return Gizmos;
  }(ObservableComponent));

  /**
   * @public
   */
  var OnFocus = /** @class */ (function (_super) {
      __extends(OnFocus, _super);
      function OnFocus(callback) {
          var _this = _super.call(this, callback) || this;
          _this.type = 'onFocus';
          // This injection is necessary ONLY in events that are ALWAYS turned on and are
          // not assignable to entities. Like events for the UI elements
          // TODO(Brian): This will be removed when UI gets back to the entity parenting.
          uuidEventSystem.handlerMap[_this.uuid] = _this;
          return _this;
      }
      __decorate([
          ObservableComponent.readonly,
          __metadata("design:type", String)
      ], OnFocus.prototype, "type", void 0);
      OnFocus = __decorate([
          Component('engine.onFocus', exports.CLASS_ID.UUID_CALLBACK),
          __metadata("design:paramtypes", [Function])
      ], OnFocus);
      return OnFocus;
  }(OnUUIDEvent));
  /**
   * @public
   */
  var OnTextSubmit = /** @class */ (function (_super) {
      __extends(OnTextSubmit, _super);
      function OnTextSubmit(callback) {
          var _this = _super.call(this, callback) || this;
          _this.type = 'onTextSubmit';
          // This injection is necessary ONLY in events that are ALWAYS turned on and are
          // not assignable to entities. Like events for the UI elements
          // TODO(Brian): This will be removed when UI gets back to the entity parenting.
          uuidEventSystem.handlerMap[_this.uuid] = _this;
          return _this;
      }
      __decorate([
          ObservableComponent.readonly,
          __metadata("design:type", String)
      ], OnTextSubmit.prototype, "type", void 0);
      OnTextSubmit = __decorate([
          Component('engine.onTextSubmit', exports.CLASS_ID.UUID_CALLBACK),
          __metadata("design:paramtypes", [Function])
      ], OnTextSubmit);
      return OnTextSubmit;
  }(OnUUIDEvent));
  /**
   * @public
   */
  var OnBlur = /** @class */ (function (_super) {
      __extends(OnBlur, _super);
      function OnBlur(callback) {
          var _this = _super.call(this, callback) || this;
          _this.type = 'onBlur';
          // This injection is necessary ONLY in events that are ALWAYS turned on and are
          // not assignable to entities. Like events for the UI elements
          // TODO(Brian): This will be removed when UI gets back to the entity parenting.
          uuidEventSystem.handlerMap[_this.uuid] = _this;
          return _this;
      }
      __decorate([
          ObservableComponent.readonly,
          __metadata("design:type", String)
      ], OnBlur.prototype, "type", void 0);
      OnBlur = __decorate([
          Component('engine.onBlur', exports.CLASS_ID.UUID_CALLBACK),
          __metadata("design:paramtypes", [Function])
      ], OnBlur);
      return OnBlur;
  }(OnUUIDEvent));
  /**
   * @public
   */
  var OnEnter = /** @class */ (function (_super) {
      __extends(OnEnter, _super);
      function OnEnter(callback) {
          var _this = _super.call(this, callback) || this;
          _this.type = 'onEnter';
          // This injection is necessary ONLY in events that are ALWAYS turned on and are
          // not assignable to entities. Like events for the UI elements
          // TODO(Brian): This will be removed when UI gets back to the entity parenting.
          uuidEventSystem.handlerMap[_this.uuid] = _this;
          return _this;
      }
      __decorate([
          ObservableComponent.readonly,
          __metadata("design:type", String)
      ], OnEnter.prototype, "type", void 0);
      OnEnter = __decorate([
          Component('engine.onEnter', exports.CLASS_ID.UUID_CALLBACK),
          __metadata("design:paramtypes", [Function])
      ], OnEnter);
      return OnEnter;
  }(OnUUIDEvent));
  /**
   * @public
   */
  var OnChanged = /** @class */ (function (_super) {
      __extends(OnChanged, _super);
      function OnChanged(callback) {
          var _this = _super.call(this, callback) || this;
          _this.type = 'onChange';
          // This injection is necessary ONLY in events that are ALWAYS turned on and are
          // not assignable to entities. Like events for the UI elements
          // TODO(Brian): This will be removed when UI gets back to the entity parenting.
          uuidEventSystem.handlerMap[_this.uuid] = _this;
          return _this;
      }
      __decorate([
          ObservableComponent.readonly,
          __metadata("design:type", String)
      ], OnChanged.prototype, "type", void 0);
      OnChanged = __decorate([
          Component('engine.onChange', exports.CLASS_ID.UUID_CALLBACK),
          __metadata("design:paramtypes", [Function])
      ], OnChanged);
      return OnChanged;
  }(OnUUIDEvent));
  /**
   * @public @deprecated use `OnPointerDown` instead
   */
  var OnClick = /** @class */ (function (_super) {
      __extends(OnClick, _super);
      function OnClick(callback, options) {
          var _this = _super.call(this, callback) || this;
          _this.type = 'onClick';
          // This injection is necessary ONLY in events that are ALWAYS turned on and are
          // not assignable to entities. Like events for the UI elements
          // TODO(Brian): This will be removed when UI gets back to the entity parenting.
          uuidEventSystem.handlerMap[_this.uuid] = _this;
          if (options) {
              _this.showFeedback = !(options.showFeedback === false);
              if (options.button) {
                  _this.button = options.button;
              }
              if (options.hoverText) {
                  _this.hoverText = options.hoverText;
              }
              if (options.distance) {
                  _this.distance = options.distance;
              }
          }
          return _this;
      }
      __decorate([
          ObservableComponent.readonly,
          __metadata("design:type", String)
      ], OnClick.prototype, "type", void 0);
      OnClick = __decorate([
          Component('engine.onClick', exports.CLASS_ID.UUID_CALLBACK),
          __metadata("design:paramtypes", [Function, Object])
      ], OnClick);
      return OnClick;
  }(OnPointerUUIDEvent));
  /**
   * @public
   */
  var OnPointerDown = /** @class */ (function (_super) {
      __extends(OnPointerDown, _super);
      function OnPointerDown(callback, options) {
          var _this = _super.call(this, callback) || this;
          _this.type = 'pointerDown';
          // This injection is necessary ONLY in events that are ALWAYS turned on and are
          // not assignable to entities. Like events for the UI elements
          // TODO(Brian): This will be removed when UI gets back to the entity parenting.
          uuidEventSystem.handlerMap[_this.uuid] = _this;
          if (options) {
              _this.showFeedback = !(options.showFeedback === false);
              if (options.button) {
                  _this.button = options.button;
              }
              if (options.hoverText) {
                  _this.hoverText = options.hoverText;
              }
              if (options.distance) {
                  _this.distance = options.distance;
              }
          }
          return _this;
      }
      __decorate([
          ObservableComponent.readonly,
          __metadata("design:type", String)
      ], OnPointerDown.prototype, "type", void 0);
      OnPointerDown = __decorate([
          Component('engine.pointerDown', exports.CLASS_ID.UUID_CALLBACK),
          __metadata("design:paramtypes", [Function, Object])
      ], OnPointerDown);
      return OnPointerDown;
  }(OnPointerUUIDEvent));
  /**
   * @public
   */
  var OnPointerUp = /** @class */ (function (_super) {
      __extends(OnPointerUp, _super);
      function OnPointerUp(callback, options) {
          var _this = _super.call(this, callback) || this;
          _this.type = 'pointerUp';
          // This injection is necessary ONLY in events that are ALWAYS turned on and are
          // not assignable to entities. Like events for the UI elements
          // TODO(Brian): This will be removed when UI gets back to the entity parenting.
          uuidEventSystem.handlerMap[_this.uuid] = _this;
          if (options) {
              _this.showFeedback = !(options.showFeedback === false);
              if (options.button) {
                  _this.button = options.button;
              }
              if (options.hoverText) {
                  _this.hoverText = options.hoverText;
              }
              if (options.distance) {
                  _this.distance = options.distance;
              }
          }
          return _this;
      }
      __decorate([
          ObservableComponent.readonly,
          __metadata("design:type", String)
      ], OnPointerUp.prototype, "type", void 0);
      OnPointerUp = __decorate([
          Component('engine.pointerUp', exports.CLASS_ID.UUID_CALLBACK),
          __metadata("design:paramtypes", [Function, Object])
      ], OnPointerUp);
      return OnPointerUp;
  }(OnPointerUUIDEvent));
  /**
   * @public
   */
  var OnPointerHoverEnter = /** @class */ (function (_super) {
      __extends(OnPointerHoverEnter, _super);
      function OnPointerHoverEnter(callback, options) {
          var _this = _super.call(this, callback) || this;
          _this.type = 'pointerHoverEnter';
          // This injection is necessary ONLY in events that are ALWAYS turned on and are
          // not assignable to entities. Like events for the UI elements
          // TODO(Brian): This will be removed when UI gets back to the entity parenting.
          uuidEventSystem.handlerMap[_this.uuid] = _this;
          if (options) {
              if (options.distance) {
                  _this.distance = options.distance;
              }
          }
          return _this;
      }
      __decorate([
          ObservableComponent.readonly,
          __metadata("design:type", String)
      ], OnPointerHoverEnter.prototype, "type", void 0);
      OnPointerHoverEnter = __decorate([
          Component('engine.pointerHoverEnter', exports.CLASS_ID.UUID_CALLBACK),
          __metadata("design:paramtypes", [Function, Object])
      ], OnPointerHoverEnter);
      return OnPointerHoverEnter;
  }(OnPointerUUIDEvent));
  /**
   * @public
   */
  var OnPointerHoverExit = /** @class */ (function (_super) {
      __extends(OnPointerHoverExit, _super);
      function OnPointerHoverExit(callback) {
          var _this = _super.call(this, callback) || this;
          _this.type = 'pointerHoverExit';
          // This injection is necessary ONLY in events that are ALWAYS turned on and are
          // not assignable to entities. Like events for the UI elements
          // TODO(Brian): This will be removed when UI gets back to the entity parenting.
          uuidEventSystem.handlerMap[_this.uuid] = _this;
          // Changed default distance value for this component because in most cases we probably
          // don't want for the hover exit event to be limited by a distance, and it default value was too small.
          _this.distance = 160;
          return _this;
      }
      __decorate([
          ObservableComponent.readonly,
          __metadata("design:type", String)
      ], OnPointerHoverExit.prototype, "type", void 0);
      OnPointerHoverExit = __decorate([
          Component('engine.pointerHoverExit', exports.CLASS_ID.UUID_CALLBACK),
          __metadata("design:paramtypes", [Function])
      ], OnPointerHoverExit);
      return OnPointerHoverExit;
  }(OnPointerUUIDEvent));

  /**
   * @public
   */
  var UIShape = /** @class */ (function (_super) {
      __extends(UIShape, _super);
      function UIShape(parent) {
          var _this = _super.call(this) || this;
          /**
           * Defines if the entity and its children should be rendered
           */
          _this.name = null;
          _this.visible = true;
          _this.opacity = 1;
          _this.hAlign = 'center';
          _this.vAlign = 'center';
          _this.width = '100px';
          _this.height = '50px';
          _this.positionX = '0px';
          _this.positionY = '0px';
          _this.isPointerBlocker = true;
          if (parent) {
              _this._parent = parent;
              _this.data.parentComponent = getComponentId(parent);
          }
          return _this;
      }
      Object.defineProperty(UIShape.prototype, "parent", {
          get: function () {
              return this._parent;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(UIShape.prototype, "parentComponent", {
          // @internal
          get: function () {
              return this.data.parentComponent;
          },
          enumerable: false,
          configurable: true
      });
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Object)
      ], UIShape.prototype, "name", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Boolean)
      ], UIShape.prototype, "visible", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], UIShape.prototype, "opacity", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", String)
      ], UIShape.prototype, "hAlign", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", String)
      ], UIShape.prototype, "vAlign", void 0);
      __decorate([
          ObservableComponent.uiValue,
          __metadata("design:type", Object)
      ], UIShape.prototype, "width", void 0);
      __decorate([
          ObservableComponent.uiValue,
          __metadata("design:type", Object)
      ], UIShape.prototype, "height", void 0);
      __decorate([
          ObservableComponent.uiValue,
          __metadata("design:type", Object)
      ], UIShape.prototype, "positionX", void 0);
      __decorate([
          ObservableComponent.uiValue,
          __metadata("design:type", Object)
      ], UIShape.prototype, "positionY", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Boolean)
      ], UIShape.prototype, "isPointerBlocker", void 0);
      return UIShape;
  }(ObservableComponent));
  /**
   * @internal
   * NOTE(Brian): this should be deprecated
   */
  var UIFullScreen = /** @class */ (function (_super) {
      __extends(UIFullScreen, _super);
      function UIFullScreen() {
          return _super.call(this, null) || this;
      }
      UIFullScreen = __decorate([
          DisposableComponent('engine.shape', exports.CLASS_ID.UI_FULLSCREEN_SHAPE),
          __metadata("design:paramtypes", [])
      ], UIFullScreen);
      return UIFullScreen;
  }(UIShape));
  /**
   * @internal
   * NOTE(Brian): this should be deprecated
   */
  var UIWorldSpace = /** @class */ (function (_super) {
      __extends(UIWorldSpace, _super);
      function UIWorldSpace() {
          return _super.call(this, null) || this;
      }
      UIWorldSpace = __decorate([
          DisposableComponent('engine.shape', exports.CLASS_ID.UI_WORLD_SPACE_SHAPE),
          __metadata("design:paramtypes", [])
      ], UIWorldSpace);
      return UIWorldSpace;
  }(UIShape));
  /**
   * @public
   */
  var UICanvas = /** @class */ (function (_super) {
      __extends(UICanvas, _super);
      function UICanvas() {
          return _super.call(this, null) || this;
      }
      UICanvas = __decorate([
          DisposableComponent('engine.shape', exports.CLASS_ID.UI_SCREEN_SPACE_SHAPE),
          __metadata("design:paramtypes", [])
      ], UICanvas);
      return UICanvas;
  }(UIShape));
  /**
   * @public
   */
  var UIContainerRect = /** @class */ (function (_super) {
      __extends(UIContainerRect, _super);
      function UIContainerRect() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.thickness = 0;
          _this.color = dist.Color4.Clear();
          _this.alignmentUsesSize = true;
          return _this;
      }
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], UIContainerRect.prototype, "thickness", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", dist.Color4)
      ], UIContainerRect.prototype, "color", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Boolean)
      ], UIContainerRect.prototype, "alignmentUsesSize", void 0);
      UIContainerRect = __decorate([
          DisposableComponent('engine.shape', exports.CLASS_ID.UI_CONTAINER_RECT)
      ], UIContainerRect);
      return UIContainerRect;
  }(UIShape));
  /**
   * @public
   */
  exports.UIStackOrientation = void 0;
  (function (UIStackOrientation) {
      UIStackOrientation[UIStackOrientation["VERTICAL"] = 0] = "VERTICAL";
      UIStackOrientation[UIStackOrientation["HORIZONTAL"] = 1] = "HORIZONTAL";
  })(exports.UIStackOrientation || (exports.UIStackOrientation = {}));
  /**
   * @public
   */
  var UIContainerStack = /** @class */ (function (_super) {
      __extends(UIContainerStack, _super);
      function UIContainerStack() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.adaptWidth = true;
          _this.adaptHeight = true;
          _this.color = dist.Color4.Clear();
          _this.stackOrientation = exports.UIStackOrientation.VERTICAL;
          _this.spacing = 0;
          return _this;
      }
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Boolean)
      ], UIContainerStack.prototype, "adaptWidth", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Boolean)
      ], UIContainerStack.prototype, "adaptHeight", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", dist.Color4)
      ], UIContainerStack.prototype, "color", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], UIContainerStack.prototype, "stackOrientation", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], UIContainerStack.prototype, "spacing", void 0);
      UIContainerStack = __decorate([
          DisposableComponent('engine.shape', exports.CLASS_ID.UI_CONTAINER_STACK)
      ], UIContainerStack);
      return UIContainerStack;
  }(UIShape));
  /**
   * @public
   */
  var UIButton = /** @class */ (function (_super) {
      __extends(UIButton, _super);
      function UIButton() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.fontSize = 10;
          _this.fontWeight = 'normal';
          _this.thickness = 0;
          _this.cornerRadius = 0;
          _this.color = dist.Color4.White();
          _this.background = dist.Color4.White();
          _this.paddingTop = 0;
          _this.paddingRight = 0;
          _this.paddingBottom = 0;
          _this.paddingLeft = 0;
          _this.shadowBlur = 0;
          _this.shadowOffsetX = 0;
          _this.shadowOffsetY = 0;
          _this.shadowColor = dist.Color4.Black();
          _this.text = 'button';
          return _this;
      }
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], UIButton.prototype, "fontSize", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", String)
      ], UIButton.prototype, "fontWeight", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], UIButton.prototype, "thickness", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], UIButton.prototype, "cornerRadius", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", dist.Color4)
      ], UIButton.prototype, "color", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", dist.Color4)
      ], UIButton.prototype, "background", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], UIButton.prototype, "paddingTop", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], UIButton.prototype, "paddingRight", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], UIButton.prototype, "paddingBottom", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], UIButton.prototype, "paddingLeft", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], UIButton.prototype, "shadowBlur", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], UIButton.prototype, "shadowOffsetX", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], UIButton.prototype, "shadowOffsetY", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", dist.Color4)
      ], UIButton.prototype, "shadowColor", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", String)
      ], UIButton.prototype, "text", void 0);
      UIButton = __decorate([
          DisposableComponent('engine.shape', exports.CLASS_ID.UI_BUTTON_SHAPE)
      ], UIButton);
      return UIButton;
  }(UIShape));
  /**
   * @public
   */
  var UIText = /** @class */ (function (_super) {
      __extends(UIText, _super);
      function UIText() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.outlineWidth = 0;
          _this.outlineColor = dist.Color4.White();
          _this.color = dist.Color4.White();
          _this.fontSize = 10;
          _this.fontAutoSize = false;
          _this.value = '';
          _this.lineSpacing = 0;
          _this.lineCount = 0;
          _this.adaptWidth = false;
          _this.adaptHeight = false;
          _this.textWrapping = false;
          _this.shadowBlur = 0;
          _this.shadowOffsetX = 0;
          _this.shadowOffsetY = 0;
          _this.shadowColor = dist.Color4.Black();
          _this.hTextAlign = 'left';
          _this.vTextAlign = 'bottom';
          _this.paddingTop = 0;
          _this.paddingRight = 0;
          _this.paddingBottom = 0;
          _this.paddingLeft = 0;
          return _this;
      }
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], UIText.prototype, "outlineWidth", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", dist.Color4)
      ], UIText.prototype, "outlineColor", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", dist.Color4)
      ], UIText.prototype, "color", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], UIText.prototype, "fontSize", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Boolean)
      ], UIText.prototype, "fontAutoSize", void 0);
      __decorate([
          ObservableComponent.component,
          __metadata("design:type", Font)
      ], UIText.prototype, "font", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", String)
      ], UIText.prototype, "value", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], UIText.prototype, "lineSpacing", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], UIText.prototype, "lineCount", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Boolean)
      ], UIText.prototype, "adaptWidth", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Boolean)
      ], UIText.prototype, "adaptHeight", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Boolean)
      ], UIText.prototype, "textWrapping", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], UIText.prototype, "shadowBlur", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], UIText.prototype, "shadowOffsetX", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], UIText.prototype, "shadowOffsetY", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", dist.Color4)
      ], UIText.prototype, "shadowColor", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", String)
      ], UIText.prototype, "hTextAlign", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", String)
      ], UIText.prototype, "vTextAlign", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], UIText.prototype, "paddingTop", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], UIText.prototype, "paddingRight", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], UIText.prototype, "paddingBottom", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], UIText.prototype, "paddingLeft", void 0);
      UIText = __decorate([
          DisposableComponent('engine.shape', exports.CLASS_ID.UI_TEXT_SHAPE)
      ], UIText);
      return UIText;
  }(UIShape));
  /**
   * @public
   */
  var UIInputText = /** @class */ (function (_super) {
      __extends(UIInputText, _super);
      function UIInputText(parent) {
          var _this = _super.call(this, parent) || this;
          _this.outlineWidth = 0;
          _this.outlineColor = dist.Color4.Black();
          _this.color = dist.Color4.Clear();
          _this.fontSize = 10;
          _this.value = '';
          _this.placeholder = '';
          _this.margin = 10;
          _this.hTextAlign = 'left';
          _this.vTextAlign = 'bottom';
          _this.focusedBackground = dist.Color4.Black();
          _this.textWrapping = false;
          _this.shadowBlur = 0;
          _this.shadowOffsetX = 0;
          _this.shadowOffsetY = 0;
          _this.shadowColor = dist.Color4.White();
          _this.paddingTop = 0;
          _this.paddingRight = 0;
          _this.paddingBottom = 0;
          _this.paddingLeft = 0;
          _this.onTextSubmit = null;
          _this.onChanged = null;
          _this.onFocus = null;
          _this.onBlur = null;
          _this.onTextChanged = new OnChanged(function (e) {
              var _a = e.value, value = _a.value, isSubmit = _a.isSubmit;
              // NOTE: here we want to keep the same `dirty` state as before changing `this.value`
              // because changing `this.value` will set the component as `dirty` and send a message to the renderer with it value
              // and that message is unnecesary (if the only thing that have changed is `this.value`) since that new value has come from the renderer itself
              var isDirty = _this.dirty;
              _this.value = value;
              _this.dirty = isDirty;
              if (isSubmit && _this.onTextSubmit) {
                  var onSubmitValue = { text: value };
                  _this.onTextSubmit.callback(onSubmitValue);
              }
              else if (!isSubmit && _this.onChanged) {
                  var onChangeValue = {
                      value: value,
                      pointerId: e.pointerId
                  };
                  _this.onChanged.callback(onChangeValue);
              }
          });
          return _this;
      }
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], UIInputText.prototype, "outlineWidth", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", dist.Color4)
      ], UIInputText.prototype, "outlineColor", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", dist.Color4)
      ], UIInputText.prototype, "color", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], UIInputText.prototype, "fontSize", void 0);
      __decorate([
          ObservableComponent.component,
          __metadata("design:type", Font)
      ], UIInputText.prototype, "font", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", String)
      ], UIInputText.prototype, "value", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", String)
      ], UIInputText.prototype, "placeholder", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], UIInputText.prototype, "margin", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", String)
      ], UIInputText.prototype, "hTextAlign", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", String)
      ], UIInputText.prototype, "vTextAlign", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", dist.Color4)
      ], UIInputText.prototype, "focusedBackground", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Boolean)
      ], UIInputText.prototype, "textWrapping", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], UIInputText.prototype, "shadowBlur", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], UIInputText.prototype, "shadowOffsetX", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], UIInputText.prototype, "shadowOffsetY", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", dist.Color4)
      ], UIInputText.prototype, "shadowColor", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], UIInputText.prototype, "paddingTop", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], UIInputText.prototype, "paddingRight", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], UIInputText.prototype, "paddingBottom", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], UIInputText.prototype, "paddingLeft", void 0);
      __decorate([
          OnUUIDEvent.uuidEvent,
          __metadata("design:type", OnChanged)
      ], UIInputText.prototype, "onTextChanged", void 0);
      __decorate([
          OnUUIDEvent.uuidEvent,
          __metadata("design:type", Object)
      ], UIInputText.prototype, "onFocus", void 0);
      __decorate([
          OnUUIDEvent.uuidEvent,
          __metadata("design:type", Object)
      ], UIInputText.prototype, "onBlur", void 0);
      UIInputText = __decorate([
          DisposableComponent('engine.shape', exports.CLASS_ID.UI_INPUT_TEXT_SHAPE),
          __metadata("design:paramtypes", [Object])
      ], UIInputText);
      return UIInputText;
  }(UIShape));
  /**
   * @public
   */
  var UIImage = /** @class */ (function (_super) {
      __extends(UIImage, _super);
      function UIImage(parent, source) {
          var _this = _super.call(this, parent) || this;
          _this.sourceLeft = 0;
          _this.sourceTop = 0;
          _this.sourceWidth = 1;
          _this.sourceHeight = 1;
          _this.paddingTop = 0;
          _this.paddingRight = 0;
          _this.paddingBottom = 0;
          _this.paddingLeft = 0;
          _this.sizeInPixels = true;
          _this.onClick = null;
          _this.source = source;
          return _this;
      }
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], UIImage.prototype, "sourceLeft", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], UIImage.prototype, "sourceTop", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], UIImage.prototype, "sourceWidth", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], UIImage.prototype, "sourceHeight", void 0);
      __decorate([
          ObservableComponent.component,
          __metadata("design:type", Object)
      ], UIImage.prototype, "source", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], UIImage.prototype, "paddingTop", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], UIImage.prototype, "paddingRight", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], UIImage.prototype, "paddingBottom", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], UIImage.prototype, "paddingLeft", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Boolean)
      ], UIImage.prototype, "sizeInPixels", void 0);
      __decorate([
          OnUUIDEvent.uuidEvent,
          __metadata("design:type", Object)
      ], UIImage.prototype, "onClick", void 0);
      UIImage = __decorate([
          DisposableComponent('engine.shape', exports.CLASS_ID.UI_IMAGE_SHAPE),
          __metadata("design:paramtypes", [UIShape, Object])
      ], UIImage);
      return UIImage;
  }(UIShape));
  /**
   * @public
   */
  var UIScrollRect = /** @class */ (function (_super) {
      __extends(UIScrollRect, _super);
      function UIScrollRect() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.valueX = 0;
          _this.valueY = 0;
          _this.backgroundColor = dist.Color4.Clear();
          _this.isHorizontal = false;
          _this.isVertical = false;
          _this.paddingTop = 0;
          _this.paddingRight = 0;
          _this.paddingBottom = 0;
          _this.paddingLeft = 0;
          _this.onChanged = null;
          return _this;
      }
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], UIScrollRect.prototype, "valueX", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], UIScrollRect.prototype, "valueY", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", dist.Color4)
      ], UIScrollRect.prototype, "backgroundColor", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Boolean)
      ], UIScrollRect.prototype, "isHorizontal", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Boolean)
      ], UIScrollRect.prototype, "isVertical", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], UIScrollRect.prototype, "paddingTop", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], UIScrollRect.prototype, "paddingRight", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], UIScrollRect.prototype, "paddingBottom", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], UIScrollRect.prototype, "paddingLeft", void 0);
      __decorate([
          OnUUIDEvent.uuidEvent,
          __metadata("design:type", Object)
      ], UIScrollRect.prototype, "onChanged", void 0);
      UIScrollRect = __decorate([
          DisposableComponent('engine.shape', exports.CLASS_ID.UI_SLIDER_SHAPE)
      ], UIScrollRect);
      return UIScrollRect;
  }(UIShape));

  /**
   * @public
   */
  var AvatarShape = /** @class */ (function (_super) {
      __extends(AvatarShape, _super);
      function AvatarShape() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.useDummyModel = false;
          _this.talking = false;
          return _this;
      }
      AvatarShape_1 = AvatarShape;
      AvatarShape.Dummy = function () {
          var avatarShape = new AvatarShape_1();
          avatarShape.useDummyModel = true;
          return avatarShape;
      };
      var AvatarShape_1;
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", String)
      ], AvatarShape.prototype, "id", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", String)
      ], AvatarShape.prototype, "name", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", String)
      ], AvatarShape.prototype, "expressionTriggerId", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Number)
      ], AvatarShape.prototype, "expressionTriggerTimestamp", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", String)
      ], AvatarShape.prototype, "bodyShape", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Array)
      ], AvatarShape.prototype, "wearables", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Object)
      ], AvatarShape.prototype, "skinColor", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Object)
      ], AvatarShape.prototype, "hairColor", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Object)
      ], AvatarShape.prototype, "eyeColor", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Boolean)
      ], AvatarShape.prototype, "useDummyModel", void 0);
      __decorate([
          ObservableComponent.field,
          __metadata("design:type", Boolean)
      ], AvatarShape.prototype, "talking", void 0);
      AvatarShape = AvatarShape_1 = __decorate([
          Component('engine.avatarShape', exports.CLASS_ID.AVATAR_SHAPE)
      ], AvatarShape);
      return AvatarShape;
  }(ObservableComponent));

  var communicationsController = null;
  var communicationsControllerPromise = null;
  var _messageObserver = null;
  /**
   * @internal
   */
  function getMessageObserver() {
      if (!_messageObserver) {
          _messageObserver = new Observable();
      }
      return _messageObserver;
  }
  function ensureCommunicationsController() {
      if (!communicationsControllerPromise) {
          communicationsControllerPromise = dcl.loadModule('@decentraland/CommunicationsController', {});
          void communicationsControllerPromise.then(function ($) {
              communicationsController = $;
          });
          var observer_1 = getMessageObserver();
          dcl.subscribe('comms');
          dcl.onEvent(function (event) {
              if (event.type === 'comms') {
                  observer_1.notifyObservers(event.data);
              }
          });
      }
      return communicationsControllerPromise;
  }
  /**
   * @public
   */
  var MessageBus = /** @class */ (function () {
      function MessageBus() {
          var _this = this;
          this.messageQueue = [];
          this.connected = false;
          this.flushing = false;
          void ensureCommunicationsController().then(function () {
              _this.connected = true;
              _this.flush();
          });
      }
      MessageBus.prototype.on = function (message, callback) {
          return getMessageObserver().add(function (e) {
              try {
                  var m = JSON.parse(e.message);
                  if (m.message === message) {
                      callback(m.payload, e.sender);
                  }
              }
              catch (e) {
                  dcl.error('Error parsing comms message ' + (e.message || ''), e);
              }
          });
      };
      // @internal
      MessageBus.prototype.sendRaw = function (message) {
          this.messageQueue.push(message);
          if (this.connected) {
              this.flush();
          }
      };
      MessageBus.prototype.emit = function (message, payload) {
          var messageToSend = JSON.stringify({ message: message, payload: payload });
          this.sendRaw(messageToSend);
          getMessageObserver().notifyObservers({
              message: messageToSend,
              sender: 'self'
          });
      };
      MessageBus.prototype.flush = function () {
          var _this = this;
          if (this.messageQueue.length === 0)
              return;
          if (!this.connected)
              return;
          if (!communicationsController)
              return;
          if (this.flushing)
              return;
          var message = this.messageQueue.shift();
          this.flushing = true;
          dcl.callRpc(communicationsController.rpcHandle, 'send', [message]).then(function (_) {
              _this.flushing = false;
              _this.flush();
          }, function (e) {
              _this.flushing = false;
              error('Error flushing MessageBus', e);
          });
      };
      return MessageBus;
  }());

  // CORE DEPENDENCIES
  var entity = new Entity('scene');
  entity.uuid = '0';
  // Initialize engine
  /** @public */
  var engine = new Engine(entity);
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  DisposableComponent.engine = engine;
  // Initialize Decentraland interface
  if (typeof dcl !== 'undefined') {
      engine.addSystem(new DecentralandSynchronizationSystem(dcl), Infinity);
      _initEventObservables(dcl);
  }
  // Initialize UUID Events system
  engine.addSystem(uuidEventSystem);
  // Initialize Pointer Events System
  engine.addSystem(pointerEventSystem);
  // Initialize Raycast Events System
  engine.addSystem(raycastEventSystem);

  exports.AVATAR_OBSERVABLE = AVATAR_OBSERVABLE;
  exports.Angle = dist.Angle;
  exports.AnimationState = AnimationState;
  exports.Animator = Animator;
  exports.Arc2 = dist.Arc2;
  exports.AttachToAvatar = AttachToAvatar;
  exports.Attachable = Attachable;
  exports.AudioClip = AudioClip;
  exports.AudioSource = AudioSource;
  exports.AudioStream = AudioStream;
  exports.AvatarModifierArea = AvatarModifierArea;
  exports.AvatarShape = AvatarShape;
  exports.AvatarTexture = AvatarTexture;
  exports.Axis = dist.Axis;
  exports.BasicMaterial = BasicMaterial;
  exports.BezierCurve = dist.BezierCurve;
  exports.Billboard = Billboard;
  exports.BoxShape = BoxShape;
  exports.Camera = Camera;
  exports.CameraModeArea = CameraModeArea;
  exports.CircleShape = CircleShape;
  exports.Color3 = dist.Color3;
  exports.Color4 = dist.Color4;
  exports.Component = Component;
  exports.ComponentAdded = ComponentAdded;
  exports.ComponentGroup = ComponentGroup;
  exports.ComponentRemoved = ComponentRemoved;
  exports.ConeShape = ConeShape;
  exports.Curve3 = dist.Curve3;
  exports.CylinderShape = CylinderShape;
  exports.DEG2RAD = dist.DEG2RAD;
  exports.DisposableComponent = DisposableComponent;
  exports.DisposableComponentCreated = DisposableComponentCreated;
  exports.DisposableComponentRemoved = DisposableComponentRemoved;
  exports.DisposableComponentUpdated = DisposableComponentUpdated;
  exports.Engine = Engine;
  exports.Entity = Entity;
  exports.Epsilon = dist.Epsilon;
  exports.EventConstructor = EventConstructor;
  exports.EventManager = EventManager;
  exports.Font = Font;
  exports.Frustum = dist.Frustum;
  exports.GLTFShape = GLTFShape;
  exports.Gizmos = Gizmos;
  exports.GlobalPointerDown = GlobalPointerDown;
  exports.GlobalPointerUp = GlobalPointerUp;
  exports.Input = Input;
  exports.Material = Material;
  exports.Matrix = dist.Matrix;
  exports.MessageBus = MessageBus;
  exports.MultiObserver = MultiObserver;
  exports.NFTShape = NFTShape;
  exports.OBJShape = OBJShape;
  exports.Observable = Observable;
  exports.ObservableComponent = ObservableComponent;
  exports.Observer = Observer;
  exports.ObserverEventState = ObserverEventState;
  exports.OnAnimationEnd = OnAnimationEnd;
  exports.OnBlur = OnBlur;
  exports.OnChanged = OnChanged;
  exports.OnClick = OnClick;
  exports.OnEnter = OnEnter;
  exports.OnFocus = OnFocus;
  exports.OnGizmoEvent = OnGizmoEvent;
  exports.OnPointerDown = OnPointerDown;
  exports.OnPointerHoverEnter = OnPointerHoverEnter;
  exports.OnPointerHoverExit = OnPointerHoverExit;
  exports.OnPointerLock = OnPointerLock;
  exports.OnPointerUUIDEvent = OnPointerUUIDEvent;
  exports.OnPointerUp = OnPointerUp;
  exports.OnTextSubmit = OnTextSubmit;
  exports.OnUUIDEvent = OnUUIDEvent;
  exports.Orientation = dist.Orientation;
  exports.ParentChanged = ParentChanged;
  exports.Path2 = dist.Path2;
  exports.Path3D = dist.Path3D;
  exports.PhysicsCast = PhysicsCast;
  exports.Plane = dist.Plane;
  exports.PlaneShape = PlaneShape;
  exports.PointerEvent = PointerEvent;
  exports.PointerEventComponent = PointerEventComponent;
  exports.PointerEventSystem = PointerEventSystem;
  exports.Quaternion = dist.Quaternion;
  exports.RAD2DEG = dist.RAD2DEG;
  exports.RaycastEventSystem = RaycastEventSystem;
  exports.RaycastResponse = RaycastResponse;
  exports.Scalar = dist.Scalar;
  exports.Shape = Shape;
  exports.Size = dist.Size;
  exports.SmartItem = SmartItem;
  exports.Space = dist.Space;
  exports.SphereShape = SphereShape;
  exports.Subscription = Subscription;
  exports.TextShape = TextShape;
  exports.Texture = Texture;
  exports.ToGammaSpace = dist.ToGammaSpace;
  exports.ToLinearSpace = dist.ToLinearSpace;
  exports.Transform = Transform;
  exports.UIButton = UIButton;
  exports.UICanvas = UICanvas;
  exports.UIContainerRect = UIContainerRect;
  exports.UIContainerStack = UIContainerStack;
  exports.UIFullScreen = UIFullScreen;
  exports.UIImage = UIImage;
  exports.UIInputText = UIInputText;
  exports.UIScrollRect = UIScrollRect;
  exports.UIShape = UIShape;
  exports.UIText = UIText;
  exports.UIValue = UIValue;
  exports.UIWorldSpace = UIWorldSpace;
  exports.UUIDEvent = UUIDEvent;
  exports.UUIDEventSystem = UUIDEventSystem;
  exports.Vector2 = dist.Vector2;
  exports.Vector3 = dist.Vector3;
  exports.Vector4 = dist.Vector4;
  exports.VideoClip = VideoClip;
  exports.VideoTexture = VideoTexture;
  exports._initEventObservables = _initEventObservables;
  exports.buildArray = buildArray$1;
  exports.engine = engine;
  exports.error = error;
  exports.executeTask = executeTask;
  exports.getComponentClassId = getComponentClassId;
  exports.getComponentId = getComponentId;
  exports.getComponentName = getComponentName;
  exports.getMessageObserver = getMessageObserver;
  exports.isDisposableComponent = isDisposableComponent;
  exports.log = log;
  exports.newId = newId;
  exports.onCameraModeChangedObservable = onCameraModeChangedObservable;
  exports.onEnterScene = onEnterScene;
  exports.onEnterSceneObservable = onEnterSceneObservable;
  exports.onIdleStateChangedObservable = onIdleStateChangedObservable;
  exports.onLeaveScene = onLeaveScene;
  exports.onLeaveSceneObservable = onLeaveSceneObservable;
  exports.onPlayerClickedObservable = onPlayerClickedObservable;
  exports.onPlayerConnectedObservable = onPlayerConnectedObservable;
  exports.onPlayerDisconnectedObservable = onPlayerDisconnectedObservable;
  exports.onPlayerExpressionObservable = onPlayerExpressionObservable;
  exports.onPointerLockedStateChange = onPointerLockedStateChange;
  exports.onProfileChanged = onProfileChanged;
  exports.onRealmChangedObservable = onRealmChangedObservable;
  exports.onSceneReadyObservable = onSceneReadyObservable;
  exports.onVideoEvent = onVideoEvent;
  exports.openExternalURL = openExternalURL;
  exports.openNFTDialog = openNFTDialog;
  exports.pointerEventSystem = pointerEventSystem;
  exports.raycastEventSystem = raycastEventSystem;
  exports.teleportTo = teleportTo;
  exports.uuid = uuid;
  exports.uuidEventSystem = uuidEventSystem;

  Object.defineProperty(exports, '__esModule', { value: true });

}(this.self = this.self || {}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uL3NyYy9lY3MvQXR0YWNoYWJsZS50cyIsIi4uL3NyYy9lY3MvaGVscGVycy50cyIsIi4uL3NyYy9lY3MvRXZlbnRNYW5hZ2VyLnRzIiwiLi4vc3JjL2Vjcy9JRW50aXR5LnRzIiwiLi4vc3JjL2Vjcy9VSVZhbHVlLnRzIiwiLi4vc3JjL2Vjcy9Db21wb25lbnQudHMiLCIuLi9zcmMvZWNzL0NvbXBvbmVudEdyb3VwLnRzIiwiLi4vc3JjL2Vjcy9FbnRpdHkudHMiLCIuLi9zcmMvZWNzL0VuZ2luZS50cyIsIi4uL3NyYy9lY3MvVGFzay50cyIsIi4uL3NyYy9lY3MvT2JzZXJ2YWJsZS50cyIsIi4uL3NyYy9lY3MvVXNlckFjdGlvbnMudHMiLCIuLi9zcmMvZGVjZW50cmFsYW5kL0V2ZW50cy50cyIsIi4uL3NyYy9kZWNlbnRyYWxhbmQvSW1wbGVtZW50YXRpb24udHMiLCIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MtbWF0aC9kaXN0L3R5cGVzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzLW1hdGgvZGlzdC91dGlscy5qcyIsIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy1tYXRoL2Rpc3QvU2NhbGFyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzLW1hdGgvZGlzdC9WZWN0b3I0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzLW1hdGgvZGlzdC9NYXRyaXguanMiLCIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MtbWF0aC9kaXN0L1F1YXRlcm5pb24uanMiLCIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MtbWF0aC9kaXN0L1ZlY3RvcjMuanMiLCIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MtbWF0aC9kaXN0L3ByZWFsbG9jYXRlZFZhcmlhYmxlcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy1tYXRoL2Rpc3QvQW5nbGUuanMiLCIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MtbWF0aC9kaXN0L1ZlY3RvcjIuanMiLCIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MtbWF0aC9kaXN0L0FyYzIuanMiLCIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MtbWF0aC9kaXN0L0F4aXMuanMiLCIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MtbWF0aC9kaXN0L0JlemllckN1cnZlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzLW1hdGgvZGlzdC9Db2xvcjQuanMiLCIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MtbWF0aC9kaXN0L0NvbG9yMy5qcyIsIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy1tYXRoL2Rpc3QvQ3VydmUzZC5qcyIsIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy1tYXRoL2Rpc3QvUGxhbmUuanMiLCIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MtbWF0aC9kaXN0L0Z1cnN0dW0uanMiLCIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MtbWF0aC9kaXN0L1BhdGgyZC5qcyIsIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy1tYXRoL2Rpc3QvUGF0aDNkLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzLW1hdGgvZGlzdC9TaXplLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzLW1hdGgvZGlzdC9pbmRleC5qcyIsIi4uL3NyYy9kZWNlbnRyYWxhbmQvQW5pbWF0aW9uU3RhdGUudHMiLCIuLi9zcmMvZGVjZW50cmFsYW5kL1R5cGVzLnRzIiwiLi4vc3JjL2RlY2VudHJhbGFuZC9JbnB1dC50cyIsIi4uL3NyYy9kZWNlbnRyYWxhbmQvQ29tcG9uZW50cy50cyIsIi4uL3NyYy9kZWNlbnRyYWxhbmQvQ2FtZXJhLnRzIiwiLi4vc3JjL2RlY2VudHJhbGFuZC9QaHlzaWNzQ2FzdC50cyIsIi4uL3NyYy9kZWNlbnRyYWxhbmQvU3lzdGVtcy50cyIsIi4uL3NyYy9kZWNlbnRyYWxhbmQvQXVkaW8udHMiLCIuLi9zcmMvZGVjZW50cmFsYW5kL0dpem1vcy50cyIsIi4uL3NyYy9kZWNlbnRyYWxhbmQvVUlFdmVudHMudHMiLCIuLi9zcmMvZGVjZW50cmFsYW5kL1VJU2hhcGVzLnRzIiwiLi4vc3JjL2RlY2VudHJhbGFuZC9BdmF0YXJTaGFwZS50cyIsIi4uL3NyYy9kZWNlbnRyYWxhbmQvTWVzc2FnZUJ1cy50cyIsIi4uL3NyYy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJRW50aXR5LCBJRW5naW5lIH0gZnJvbSAnLi9JRW50aXR5J1xuXG4vKipcbiAqIEVudGl0aWVzIGNhbiBiZSBhdHRhY2hlZCB0byBlYWNoIG90aGVyIGJ5IHVzaW5nIHRoZSBgc2V0UGFyZW50YCBtZXRob2QuIEhvd2V2ZXIsIHRoZXJlIGFyZSBjYXNlcyB3aGVyZSB3ZSBtaWdodCB3YW50IHRvIGF0dGFjaCBlbnRpdGllc1xuICogdG8gb3RoZXIgb2JqZWN0cyB0aGF0IGFyZSBub3QgZW50aXRpZXMgY3JlYXRlZCBieSB0aGUgc2FtZSBzY2VuZSAoZm9yIGV4YW1wbGUsIHRoZSBwbGF5ZXIncyBhdmF0YXIpLiBGb3IgdGhvc2UgY2FzZXMsIHdlIGhhdmUgdGhpcyBjbGFzcy5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEF0dGFjaGFibGUge1xuICAvKiogVXNlZCB0byBhdHRhY2ggZW50aXRpZXMgdG8gdGhlIGF2YXRhci4gRW50aXRpZXMgd2lsbCBmb2xsb3cgdGhlIGF2YXRhciB3aGVuIGl0IG1vdmVzICovXG4gIHN0YXRpYyByZWFkb25seSBBVkFUQVI6IEF0dGFjaGFibGUgPSB7XG4gICAgZ2V0RW50aXR5UmVwcmVzZW50YXRpb246IChlbmdpbmU6IElFbmdpbmUpID0+IGVuZ2luZS5hdmF0YXJFbnRpdHlcbiAgfSBhcyBjb25zdFxuICAvKiogVXNlZCB0byBhdHRhY2ggZW50aXRpZXMgdG8gdGhlIGNhbWVyYS4gV2hlbiBpbiBmaXJzdCBwZXJzb24gbW9kZSwgdGhlIGF0dGFjaGVkIGVudGl0aWVzIHdpbGwgYWxzbyByb3RhdGUgd2l0aCB0aGUgY2FtZXJhICovXG4gIHN0YXRpYyByZWFkb25seSBGSVJTVF9QRVJTT05fQ0FNRVJBOiBBdHRhY2hhYmxlID0ge1xuICAgIGdldEVudGl0eVJlcHJlc2VudGF0aW9uOiAoZW5naW5lOiBJRW5naW5lKSA9PiBlbmdpbmUuZmlyc3RQZXJzb25DYW1lcmFFbnRpdHlcbiAgfSBhcyBjb25zdFxuXG4gIC8vIEBpbnRlcm5hbFxuICAvKiogRW50aXRpZXMgbXVzdCBiZSBhdHRhY2hlZCB0byBlbnRpdGllcywgc28gaW4gdGhpcyBjYXNlLCBlYWNoIGF0dGFjaGFibGUgb2JqZWN0IG11c3QgcmV0dXJuIHRoZSBlbnRpdHkgdXNlZCB0byBwcmVzZW50IGl0ICovXG4gIGFic3RyYWN0IGdldEVudGl0eVJlcHJlc2VudGF0aW9uKGVuZ2luZTogSUVuZ2luZSk6IElFbnRpdHlcbn1cbiIsImxldCBsYXN0R2VuZXJhdGVkSWQgPSAwXG5cbmRlY2xhcmUgbGV0IGNvbnNvbGU6IGFueVxuXG4vKipcbiAqIExvZyBmdW5jdGlvbi4gT25seSB3b3JrcyBpbiBkZWJ1ZyBtb2RlLCBvdGhlcndpc2UgaXQgZG9lcyBub3RoaW5nLlxuICogQHBhcmFtIGFyZ3MgLSBhbnkgbG9nZ2FibGUgcGFyYW1ldGVyXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsb2coLi4uYXJnczogYW55W10pIHtcbiAgaWYgKHR5cGVvZiBkY2wgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgZGNsLmxvZyguLi5hcmdzKVxuICB9IGVsc2Uge1xuICAgIGNvbnNvbGUubG9nKCdERUJVRzonLCAuLi5hcmdzKVxuICB9XG59XG5cbi8qKlxuICogRXJyb3IgZnVuY3Rpb24uIFByaW50cyBhIGNvbnNvbGUgZXJyb3IuIE9ubHkgd29ya3MgaW4gZGVidWcgbW9kZSwgb3RoZXJ3aXNlIGl0IGRvZXMgbm90aGluZy5cbiAqIEBwYXJhbSBlcnJvciAtIHN0cmluZyBvciBFcnJvciBvYmplY3QuXG4gKiBAcGFyYW0gZGF0YSAtIGFueSBkZWJ1ZyBpbmZvcm1hdGlvbi5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVycm9yKGVycm9yOiBzdHJpbmcgfCBFcnJvciwgZGF0YT86IGFueSkge1xuICBpZiAodHlwZW9mIGRjbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBkY2wuZXJyb3IoZXJyb3IgYXMgYW55LCBkYXRhKVxuICB9IGVsc2Uge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0VSUk9SOicsIGVycm9yLCBkYXRhKVxuICB9XG59XG5cbi8qKlxuICogR2VuZXJhdGVzIGEgbmV3IHByZWZpeGVkIGlkXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBuZXdJZCh0eXBlOiBzdHJpbmcpIHtcbiAgbGFzdEdlbmVyYXRlZElkKytcbiAgaWYgKHR5cGUubGVuZ3RoID09PSAwKVxuICAgIHRocm93IG5ldyBFcnJvcignbmV3SWQodHlwZTogc3RyaW5nKTogdHlwZSBjYW5ub3QgYmUgZW1wdHknKVxuICByZXR1cm4gdHlwZSArIGxhc3RHZW5lcmF0ZWRJZC50b1N0cmluZygzNilcbn1cblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHV1aWQoKSB7XG4gIHJldHVybiAneHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4Jy5yZXBsYWNlKC9beHldL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgY29uc3QgciA9IChNYXRoLnJhbmRvbSgpICogMTYpIHwgMFxuICAgIGNvbnN0IHYgPSBjID09PSAneCcgPyByIDogKHIgJiAweDMpIHwgMHg4XG4gICAgcmV0dXJuIHYudG9TdHJpbmcoMTYpXG4gIH0pXG59XG5cbi8qKlxuICogUmV0dXJucyBhbiBhcnJheSBvZiB0aGUgZ2l2ZW4gc2l6ZSBmaWxsZWQgd2l0aCBlbGVtZW50IGJ1aWx0IGZyb20gdGhlIGdpdmVuIGNvbnN0cnVjdG9yIGFuZCB0aGUgcGFyYW10ZXJzXG4gKiBAcGFyYW0gc2l6ZSAtIHRoZSBudW1iZXIgb2YgZWxlbWVudCB0byBjb25zdHJ1Y3QgYW5kIHB1dCBpbiB0aGUgYXJyYXlcbiAqIEBwYXJhbSBpdGVtQnVpbGRlciAtIGEgY2FsbGJhY2sgcmVzcG9uc2libGUgZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZSBvZiBpdGVtLiBDYWxsZWQgb25jZSBwZXIgYXJyYXkgZW50cnkuXG4gKiBAcmV0dXJucyBhIG5ldyBhcnJheSBmaWxsZWQgd2l0aCBuZXcgb2JqZWN0c1xuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBidWlsZEFycmF5PFQ+KHNpemU6IG51bWJlciwgaXRlbUJ1aWxkZXI6ICgpID0+IFQpOiBBcnJheTxUPiB7XG4gIGNvbnN0IGE6IFRbXSA9IFtdXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2l6ZTsgKytpKSB7XG4gICAgYS5wdXNoKGl0ZW1CdWlsZGVyKCkpXG4gIH1cbiAgcmV0dXJuIGFcbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvcGVuRXh0ZXJuYWxVUkwodXJsOiBzdHJpbmcpIHtcbiAgaWYgKHR5cGVvZiBkY2wgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgZGNsLm9wZW5FeHRlcm5hbFVybCh1cmwpXG4gIH0gZWxzZSB7XG4gICAgZXJyb3IoJ0VSUk9SOiBvcGVuRXh0ZXJuYWxVUkwgZGNsIGlzIHVuZGVmaW5lZCcpXG4gIH1cbn1cblxuLyoqXG4gKiBQb3B1cCBORlQgaW5mbyBkaWFsb2dcbiAqIEBwYXJhbSBzY3IgLSAnZXRoZXJldW06Ly9jb250cmFjdEFkZHJlc3MvdG9rZW5JRCdcbiAqIEBwYXJhbSBjb21tZW50IC0gb3B0aW9uYWwuIGFkZCBhIGNvbW1lbnQuXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvcGVuTkZURGlhbG9nKHNjcjogc3RyaW5nLCBjb21tZW50OiBzdHJpbmcgfCBudWxsID0gbnVsbCkge1xuICBpZiAodHlwZW9mIGRjbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjb25zdCByZWdleCA9IC9ldGhlcmV1bTpcXC9cXC8oLispXFwvKC4rKS9cbiAgICBjb25zdCBtYXRjaGVzID0gc2NyLm1hdGNoKHJlZ2V4KVxuXG4gICAgaWYgKCFtYXRjaGVzIHx8IG1hdGNoZXMubGVuZ3RoIDwgMykge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgZGNsLm9wZW5ORlREaWFsb2cobWF0Y2hlc1sxXSwgbWF0Y2hlc1syXSwgY29tbWVudClcbiAgfSBlbHNlIHtcbiAgICBlcnJvcignRVJST1I6IG9wZW5ORlREaWFsb2cgZGNsIGlzIHVuZGVmaW5lZCcpXG4gIH1cbn1cbiIsImltcG9ydCB7IGVycm9yLCBuZXdJZCB9IGZyb20gJy4vaGVscGVycydcblxuY29uc3QgZXZlbnROYW1lU3ltYm9sID0gJ19fZXZlbnRfbmFtZV9fJ1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJRXZlbnRDb25zdHJ1Y3RvcjxUPiB7XG4gIC8vIEBpbnRlcm5hbFxuICBbZXZlbnROYW1lU3ltYm9sXT86IHN0cmluZ1xuICBuZXcgKC4uLmFyZ3M6IGFueVtdKTogVFxufVxuXG5jb25zdCB0YWtlbkV2ZW50TmFtZXM6IHN0cmluZ1tdID0gW11cblxuZnVuY3Rpb24gZ2V0RXZlbnROYW1lRnJvbUNvbnN0cnVjdG9yPFQ+KGN0b3I6IElFdmVudENvbnN0cnVjdG9yPFQ+KTogc3RyaW5nIHtcbiAgaWYgKCEoZXZlbnROYW1lU3ltYm9sIGluIGN0b3IpIHx8IHR5cGVvZiBjdG9yW2V2ZW50TmFtZVN5bWJvbF0gIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgRXZlbnRDb25zdHJ1Y3RvciBpcyBub3QgcmVnaXN0ZXJlZCcpXG4gIH1cbiAgcmV0dXJuIGN0b3JbZXZlbnROYW1lU3ltYm9sXSBhcyBhbnkgYXMgc3RyaW5nXG59XG5cbnR5cGUgRXZlbnRMaXN0ZW5lcjxYPiA9IHtcbiAgbGlzdGVuZXI6IFhcbiAgZm46ICh0aGlzOiBYLCBldmVudDogYW55KSA9PiB2b2lkXG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgRXZlbnRNYW5hZ2VyIHtcbiAgcHJpdmF0ZSBsaXN0ZW5lcnM6IFJlY29yZDxzdHJpbmcsIEFycmF5PEV2ZW50TGlzdGVuZXI8YW55Pj4+ID0ge31cblxuICBhZGRMaXN0ZW5lcjxULCBYPihcbiAgICBldmVudENsYXNzOiBJRXZlbnRDb25zdHJ1Y3RvcjxUPixcbiAgICBsaXN0ZW5lcjogWCxcbiAgICBsaXN0ZW5lckZ1bmN0aW9uOiAodGhpczogWCwgZXZlbnQ6IFQpID0+IHZvaWRcbiAgKSB7XG4gICAgaWYgKCFldmVudENsYXNzIHx8IHR5cGVvZiAoZXZlbnRDbGFzcyBhcyBhbnkpICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgRXZlbnRDb25zdHJ1Y3RvcicpXG4gICAgfVxuICAgIGNvbnN0IGV2ZW50TmFtZSA9IGdldEV2ZW50TmFtZUZyb21Db25zdHJ1Y3RvcihldmVudENsYXNzKVxuXG4gICAgbGV0IGxpc3RlbmVycyA9IHRoaXMubGlzdGVuZXJzW2V2ZW50TmFtZV1cblxuICAgIGlmICghbGlzdGVuZXJzKSB7XG4gICAgICBsaXN0ZW5lcnMgPSB0aGlzLmxpc3RlbmVyc1tldmVudE5hbWVdID0gW11cbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgeCA9IGxpc3RlbmVyc1tpXVxuICAgICAgaWYgKHgubGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIHByb3ZpZGVkIGxpc3RlbmVyIGlzIGFscmVhZHkgcmVnaXN0ZXJlZCcpXG4gICAgICB9XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLnB1c2goe1xuICAgICAgbGlzdGVuZXIsXG4gICAgICBmbjogbGlzdGVuZXJGdW5jdGlvblxuICAgIH0pXG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgcmVtb3ZlTGlzdGVuZXI8WD4obGlzdGVuZXI6IFgsIGV2ZW50Q2xhc3M6IElFdmVudENvbnN0cnVjdG9yPGFueT4pOiBib29sZWFuIHtcbiAgICBpZiAoIWV2ZW50Q2xhc3MgfHwgdHlwZW9mIChldmVudENsYXNzIGFzIGFueSkgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBFdmVudENvbnN0cnVjdG9yJylcbiAgICB9XG5cbiAgICBjb25zdCBldmVudE5hbWUgPSBnZXRFdmVudE5hbWVGcm9tQ29uc3RydWN0b3IoZXZlbnRDbGFzcylcblxuICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMubGlzdGVuZXJzW2V2ZW50TmFtZV1cblxuICAgIGlmICghbGlzdGVuZXJzKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgeCA9IGxpc3RlbmVyc1tpXVxuICAgICAgaWYgKHgubGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgIGxpc3RlbmVycy5zcGxpY2UoaSwgMSlcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIGZpcmVFdmVudDxUIGV4dGVuZHMgb2JqZWN0PihldmVudDogVCkge1xuICAgIGNvbnN0IGV2ZW50TmFtZSA9IGdldEV2ZW50TmFtZUZyb21Db25zdHJ1Y3RvcigoZXZlbnQgYXMgYW55KS5jb25zdHJ1Y3RvcilcblxuICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMubGlzdGVuZXJzW2V2ZW50TmFtZV1cblxuICAgIGlmIChsaXN0ZW5lcnMpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgbCA9IGxpc3RlbmVyc1tpXVxuICAgICAgICAgIGwuZm4uY2FsbChsLmxpc3RlbmVyLCBldmVudClcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIFRPRE86IGUgbWF5IG5vdCBiZSBhbiBpbnN0YW5jZSBvZiBFcnJvclxuICAgICAgICAgIGVycm9yKGUgYXMgYW55KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIEV2ZW50Q29uc3RydWN0b3IoKTogQ2xhc3NEZWNvcmF0b3Ige1xuICBjb25zdCBldmVudE5hbWUgPSBuZXdJZCgnRVYnKVxuXG4gIGlmICh0YWtlbkV2ZW50TmFtZXMuaW5kZXhPZihldmVudE5hbWUpICE9PSAtMSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgVGhlIGV2ZW50IG5hbWUgJHtldmVudE5hbWV9IGlzIGFscmVhZHkgdGFrZW5gKVxuICB9XG5cbiAgdGFrZW5FdmVudE5hbWVzLnB1c2goZXZlbnROYW1lKVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXR5cGVzXG4gIHJldHVybiA8VEZ1bmN0aW9uIGV4dGVuZHMgRnVuY3Rpb24+KHRhcmdldDogVEZ1bmN0aW9uKTogVEZ1bmN0aW9uIHwgdm9pZCA9PiB7XG4gICAgOyh0YXJnZXQgYXMgYW55KVtldmVudE5hbWVTeW1ib2xdID0gZXZlbnROYW1lXG4gICAgcmV0dXJuIHRhcmdldFxuICB9XG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnRMaWtlLCBDb21wb25lbnRDb25zdHJ1Y3RvciB9IGZyb20gJy4vQ29tcG9uZW50J1xuaW1wb3J0IHsgRXZlbnRDb25zdHJ1Y3RvciwgRXZlbnRNYW5hZ2VyIH0gZnJvbSAnLi9FdmVudE1hbmFnZXInXG5pbXBvcnQgeyBBdHRhY2hhYmxlIH0gZnJvbSAnLi9BdHRhY2hhYmxlJ1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJU3lzdGVtIHtcbiAgYWN0aXZlPzogYm9vbGVhblxuXG4gIGFjdGl2YXRlPyhlbmdpbmU6IElFbmdpbmUpOiB2b2lkXG4gIGRlYWN0aXZhdGU/KCk6IHZvaWRcblxuICB1cGRhdGU/KGR0OiBudW1iZXIpOiB2b2lkXG5cbiAgb25BZGRFbnRpdHk/KGVudGl0eTogSUVudGl0eSk6IHZvaWRcbiAgb25SZW1vdmVFbnRpdHk/KGVudGl0eTogSUVudGl0eSk6IHZvaWRcbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUVuZ2luZSB7XG4gIHJvb3RFbnRpdHk6IElFbnRpdHlcbiAgcmVhZG9ubHkgZmlyc3RQZXJzb25DYW1lcmFFbnRpdHk6IElFbnRpdHlcbiAgcmVhZG9ubHkgYXZhdGFyRW50aXR5OiBJRW50aXR5XG4gIHJlYWRvbmx5IGVudGl0aWVzOiBSZWFkb25seTxSZWNvcmQ8c3RyaW5nLCBJRW50aXR5Pj5cblxuICBhZGRFbnRpdHkoZW50aXR5OiBJRW50aXR5KTogdm9pZFxuICByZW1vdmVFbnRpdHkoZW50aXR5OiBJRW50aXR5KTogdm9pZFxuICBhZGRTeXN0ZW0oc3lzdGVtOiBJU3lzdGVtLCBwcmlvcml0eTogbnVtYmVyKTogdm9pZFxuICByZW1vdmVTeXN0ZW0oc3lzdGVtOiBJU3lzdGVtKTogdm9pZFxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJRW50aXR5IHtcbiAgY2hpbGRyZW46IFJlY29yZDxzdHJpbmcsIElFbnRpdHk+XG4gIGV2ZW50TWFuYWdlcjogRXZlbnRNYW5hZ2VyIHwgbnVsbFxuICBhbGl2ZTogYm9vbGVhblxuICByZWFkb25seSB1dWlkOiBzdHJpbmdcbiAgcmVhZG9ubHkgY29tcG9uZW50czogUmVjb3JkPHN0cmluZywgYW55PlxuXG4gIGlzQWRkZWRUb0VuZ2luZSgpOiBib29sZWFuXG4gIGdldFBhcmVudCgpOiBJRW50aXR5IHwgbnVsbFxuICBzZXRQYXJlbnQoZTogSUVudGl0eSB8IEF0dGFjaGFibGUgfCBudWxsKTogdm9pZFxuXG4gIGdldENvbXBvbmVudDxUID0gYW55Pihjb21wb25lbnQ6IHN0cmluZyk6IFRcbiAgZ2V0Q29tcG9uZW50PFQgZXh0ZW5kcyBDb21wb25lbnRMaWtlPihjb21wb25lbnQ6IENvbXBvbmVudENvbnN0cnVjdG9yPFQ+KTogVFxuICBnZXRDb21wb25lbnQ8VCBleHRlbmRzIENvbXBvbmVudExpa2U+KFxuICAgIGNvbXBvbmVudDogQ29tcG9uZW50Q29uc3RydWN0b3I8VD4gfCBzdHJpbmdcbiAgKTogVFxuXG4gIC8qKlxuICAgKiBHZXRzIGEgY29tcG9uZW50LCBpZiBpdCBkb2Vzbid0IGV4aXN0LCBpdCByZXR1cm5zIG51bGwuXG4gICAqIEBwYXJhbSBjb21wb25lbnQgLSBjb21wb25lbnQgY2xhc3Mgb3IgbmFtZVxuICAgKi9cbiAgZ2V0Q29tcG9uZW50T3JOdWxsPFQgPSBhbnk+KGNvbXBvbmVudDogc3RyaW5nKTogVCB8IG51bGxcbiAgZ2V0Q29tcG9uZW50T3JOdWxsPFQgZXh0ZW5kcyBDb21wb25lbnRMaWtlPihcbiAgICBjb21wb25lbnQ6IENvbXBvbmVudENvbnN0cnVjdG9yPFQ+XG4gICk6IFQgfCBudWxsXG4gIGdldENvbXBvbmVudE9yTnVsbDxUIGV4dGVuZHMgQ29tcG9uZW50TGlrZT4oXG4gICAgY29tcG9uZW50OiBDb21wb25lbnRDb25zdHJ1Y3RvcjxUPiB8IHN0cmluZ1xuICApOiBUIHwgbnVsbFxuXG4gIGdldENvbXBvbmVudE9yQ3JlYXRlPFQgZXh0ZW5kcyBDb21wb25lbnRMaWtlPihcbiAgICBjb21wb25lbnQ6IENvbXBvbmVudENvbnN0cnVjdG9yPFQ+ICYgeyBuZXcgKCk6IFQgfVxuICApOiBUXG5cbiAgLyoqXG4gICAqIEFkZHMgYSBjb21wb25lbnQuIElmIHRoZSBjb21wb25lbnQgYWxyZWFkeSBleGlzdCwgaXQgdGhyb3dzIGFuIEVycm9yLlxuICAgKiBAcGFyYW0gY29tcG9uZW50IC0gY29tcG9uZW50IGluc3RhbmNlLlxuICAgKi9cbiAgYWRkQ29tcG9uZW50PFQgZXh0ZW5kcyBvYmplY3Q+KGNvbXBvbmVudDogVCk6IHZvaWRcblxuICBhZGRDb21wb25lbnRPclJlcGxhY2U8VCBleHRlbmRzIG9iamVjdD4oY29tcG9uZW50OiBUKTogdm9pZFxuXG4gIHJlbW92ZUNvbXBvbmVudChjb21wb25lbnQ6IHN0cmluZywgdHJpZ2dlclJlbW92ZWRFdmVudD86IGJvb2xlYW4pOiB2b2lkXG4gIHJlbW92ZUNvbXBvbmVudDxUIGV4dGVuZHMgb2JqZWN0PihcbiAgICBjb21wb25lbnQ6IFQsXG4gICAgdHJpZ2dlclJlbW92ZWRFdmVudD86IGJvb2xlYW5cbiAgKTogdm9pZFxuICByZW1vdmVDb21wb25lbnQoXG4gICAgY29tcG9uZW50OiBDb21wb25lbnRDb25zdHJ1Y3Rvcjxhbnk+LFxuICAgIHRyaWdnZXJSZW1vdmVkRXZlbnQ/OiBib29sZWFuXG4gICk6IHZvaWRcbiAgcmVtb3ZlQ29tcG9uZW50KFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXR5cGVzXG4gICAgY29tcG9uZW50OiBvYmplY3QgfCBzdHJpbmcgfCBGdW5jdGlvbixcbiAgICB0cmlnZ2VyUmVtb3ZlZEV2ZW50OiBhbnlcbiAgKTogdm9pZFxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgaGFzQ29tcG9uZW50PFQgPSBhbnk+KGNvbXBvbmVudDogc3RyaW5nKTogYm9vbGVhblxuICBoYXNDb21wb25lbnQ8VCBleHRlbmRzIENvbXBvbmVudExpa2U+KFxuICAgIGNvbXBvbmVudDogQ29tcG9uZW50Q29uc3RydWN0b3I8VD5cbiAgKTogYm9vbGVhblxuICBoYXNDb21wb25lbnQ8VCBleHRlbmRzIG9iamVjdD4oY29tcG9uZW50OiBUKTogYm9vbGVhblxuICBoYXNDb21wb25lbnQ8VCBleHRlbmRzIENvbXBvbmVudExpa2U+KFxuICAgIGNvbXBvbmVudDogQ29tcG9uZW50Q29uc3RydWN0b3I8VD4gfCBzdHJpbmdcbiAgKTogYm9vbGVhblxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQEV2ZW50Q29uc3RydWN0b3IoKVxuZXhwb3J0IGNsYXNzIENvbXBvbmVudFJlbW92ZWQge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgZW50aXR5OiBJRW50aXR5LFxuICAgIHB1YmxpYyBjb21wb25lbnROYW1lOiBzdHJpbmcsXG4gICAgcHVibGljIGNvbXBvbmVudDogQ29tcG9uZW50TGlrZVxuICApIHtcbiAgICAvLyBzdHViXG4gIH1cbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbkBFdmVudENvbnN0cnVjdG9yKClcbmV4cG9ydCBjbGFzcyBDb21wb25lbnRBZGRlZCB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBlbnRpdHk6IElFbnRpdHksXG4gICAgcHVibGljIGNvbXBvbmVudE5hbWU6IHN0cmluZyxcbiAgICBwdWJsaWMgY2xhc3NJZDogbnVtYmVyIHwgbnVsbFxuICApIHtcbiAgICAvLyBzdHViXG4gIH1cbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbkBFdmVudENvbnN0cnVjdG9yKClcbmV4cG9ydCBjbGFzcyBQYXJlbnRDaGFuZ2VkIHtcbiAgY29uc3RydWN0b3IocHVibGljIGVudGl0eTogSUVudGl0eSwgcHVibGljIHBhcmVudDogSUVudGl0eSB8IG51bGwpIHtcbiAgICAvLyBzdHViXG4gIH1cbn1cbiIsIi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZW51bSBVSVZhbHVlVHlwZSB7XG4gIFBFUkNFTlQgPSAwLFxuICBQSVhFTFMgPSAxXG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgVUlWYWx1ZSB7XG4gIHZhbHVlOiBudW1iZXJcbiAgdHlwZTogVUlWYWx1ZVR5cGVcblxuICBjb25zdHJ1Y3Rvcih2YWx1ZTogc3RyaW5nIHwgbnVtYmVyKSB7XG4gICAgdGhpcy50eXBlID0gVUlWYWx1ZVR5cGUuUElYRUxTXG5cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgY29uc3QgdmFsdWVBc1N0cmluZzogc3RyaW5nID0gdmFsdWVcbiAgICAgIGlmICh2YWx1ZUFzU3RyaW5nLmluZGV4T2YoJ3B4JykgPiAtMSkge1xuICAgICAgICB0aGlzLnR5cGUgPSBVSVZhbHVlVHlwZS5QSVhFTFNcbiAgICAgIH0gZWxzZSBpZiAodmFsdWVBc1N0cmluZy5pbmRleE9mKCclJykgPiAtMSkge1xuICAgICAgICB0aGlzLnR5cGUgPSBVSVZhbHVlVHlwZS5QRVJDRU5UXG4gICAgICB9XG5cbiAgICAgIHRoaXMudmFsdWUgPSBwYXJzZUZsb2F0KHZhbHVlQXNTdHJpbmcpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZVxuICAgIH1cbiAgfVxuXG4gIHRvU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgbGV0IHJlc3VsdDogc3RyaW5nID0gdGhpcy52YWx1ZS50b1N0cmluZygpXG5cbiAgICBpZiAodGhpcy50eXBlID09PSBVSVZhbHVlVHlwZS5QRVJDRU5UKSB7XG4gICAgICByZXN1bHQgKz0gJyUnXG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCArPSAncHgnXG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG59XG4iLCJpbXBvcnQgeyBuZXdJZCB9IGZyb20gJy4vaGVscGVycydcbmltcG9ydCB7IEV2ZW50Q29uc3RydWN0b3IgfSBmcm9tICcuL0V2ZW50TWFuYWdlcidcbmltcG9ydCB7IFVJVmFsdWUgfSBmcm9tICcuL1VJVmFsdWUnXG5cbmNvbnN0IGNvbXBvbmVudFN5bWJvbCA9ICdfX25hbWVfX3N5bWJvbF8nXG5jb25zdCBjb21wb25lbnRDbGFzc0lkU3ltYm9sID0gJ19fY2xhc3NJZF9fc3ltYm9sXydcbmNvbnN0IGNvbXBvbmVudElkU3ltYm9sID0gJ19fY29tcG9uZW50X19pZF8nXG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgaW50ZXJmYWNlIENvbXBvbmVudExpa2Uge1xuICAvLyBAaW50ZXJuYWxcbiAgW2NvbXBvbmVudFN5bWJvbF0/OiBzdHJpbmdcbiAgLy8gQGludGVybmFsXG4gIFtjb21wb25lbnRDbGFzc0lkU3ltYm9sXT86IG51bWJlclxuXG4gIC8vIEBpbnRlcm5hbFxuICBhZGRlZFRvRW50aXR5PyhlbnRpdHk6IGFueSk6IHZvaWRcbiAgLy8gQGludGVybmFsXG4gIHJlbW92ZWRGcm9tRW50aXR5PyhlbnRpdHk6IGFueSk6IHZvaWRcbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGlzcG9zYWJsZUNvbXBvbmVudExpa2UgZXh0ZW5kcyBDb21wb25lbnRMaWtlIHtcbiAgLy8gQGludGVybmFsXG4gIFtjb21wb25lbnRJZFN5bWJvbF0/OiBzdHJpbmdcbiAgb25EaXNwb3NlPygpOiB2b2lkXG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgaW50ZXJmYWNlIENvbXBvbmVudENvbnN0cnVjdG9yPFQgZXh0ZW5kcyBDb21wb25lbnRMaWtlPiB7XG4gIC8vIEBpbnRlcm5hbFxuICBbY29tcG9uZW50U3ltYm9sXT86IHN0cmluZ1xuICAvLyBAaW50ZXJuYWxcbiAgW2NvbXBvbmVudENsYXNzSWRTeW1ib2xdPzogbnVtYmVyXG4gIGlzQ29tcG9uZW50PzogYm9vbGVhblxuICBvcmlnaW5hbENsYXNzTmFtZT86IHN0cmluZ1xuICBuZXcgKC4uLmFyZ3M6IGFueVtdKTogVFxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBEaXNwb3NhYmxlQ29tcG9uZW50Q29uc3RydWN0b3I8XG4gIFQgZXh0ZW5kcyBEaXNwb3NhYmxlQ29tcG9uZW50TGlrZVxuPiB7XG4gIC8vIEBpbnRlcm5hbFxuICBbY29tcG9uZW50U3ltYm9sXT86IHN0cmluZ1xuICAvLyBAaW50ZXJuYWxcbiAgW2NvbXBvbmVudENsYXNzSWRTeW1ib2xdPzogbnVtYmVyXG4gIGlzQ29tcG9uZW50PzogYm9vbGVhblxuICBpc0Rpc3Bvc2FibGVDb21wb25lbnQ/OiB0cnVlXG4gIG9yaWdpbmFsQ2xhc3NOYW1lPzogc3RyaW5nXG4gIG5ldyAoLi4uYXJnczogYW55W10pOiBUXG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5ARXZlbnRDb25zdHJ1Y3RvcigpXG5leHBvcnQgY2xhc3MgRGlzcG9zYWJsZUNvbXBvbmVudENyZWF0ZWQge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgY29tcG9uZW50SWQ6IHN0cmluZyxcbiAgICBwdWJsaWMgY29tcG9uZW50TmFtZTogc3RyaW5nLFxuICAgIHB1YmxpYyBjbGFzc0lkOiBudW1iZXJcbiAgKSB7XG4gICAgLy8gc3R1YlxuICB9XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5ARXZlbnRDb25zdHJ1Y3RvcigpXG5leHBvcnQgY2xhc3MgRGlzcG9zYWJsZUNvbXBvbmVudFJlbW92ZWQge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgY29tcG9uZW50SWQ6IHN0cmluZykge1xuICAgIC8vIHN0dWJcbiAgfVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQEV2ZW50Q29uc3RydWN0b3IoKVxuZXhwb3J0IGNsYXNzIERpc3Bvc2FibGVDb21wb25lbnRVcGRhdGVkIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIGNvbXBvbmVudElkOiBzdHJpbmcsXG4gICAgcHVibGljIGNvbXBvbmVudDogRGlzcG9zYWJsZUNvbXBvbmVudExpa2VcbiAgKSB7XG4gICAgLy8gc3R1YlxuICB9XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gQ29tcG9uZW50KGNvbXBvbmVudE5hbWU6IHN0cmluZywgY2xhc3NJZD86IG51bWJlcikge1xuICByZXR1cm4gZnVuY3Rpb24gPFRGdW5jdGlvbiBleHRlbmRzIENvbXBvbmVudENvbnN0cnVjdG9yPGFueT4+KFxuICAgIHRhcmdldDogVEZ1bmN0aW9uXG4gICk6IFRGdW5jdGlvbiB8IHZvaWQge1xuICAgIGlmICh0YXJnZXQuaXNDb21wb25lbnQpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgIGBZb3UgY2Fubm90IGV4dGVuZCBhIGNvbXBvbmVudC4gVHJ5aW5nIHRvIGV4dGVuZCAke3RhcmdldC5vcmlnaW5hbENsYXNzTmFtZX0gd2l0aDogJHtjb21wb25lbnROYW1lfWBcbiAgICAgIClcbiAgICB9XG5cbiAgICBjb25zdCBleHRlbmRlZENsYXNzID0gdGFyZ2V0IGFzIGFueVxuXG4gICAgY29uc3QgUmVnaXN0ZXJlZENvbXBvbmVudDogYW55ID0gZnVuY3Rpb24gUmVnaXN0ZXJlZENvbXBvbmVudCgpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItcmVzdC1wYXJhbXNcbiAgICAgIGNvbnN0IGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpXG4gICAgICBjb25zdCByZXQgPSBuZXcgZXh0ZW5kZWRDbGFzcyguLi5hcmdzKVxuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocmV0LCBjb21wb25lbnRTeW1ib2wsIHtcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgICAgdmFsdWU6IGNvbXBvbmVudE5hbWVcbiAgICAgIH0pXG5cbiAgICAgIGlmIChjbGFzc0lkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJldCwgY29tcG9uZW50Q2xhc3NJZFN5bWJvbCwge1xuICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgICAgIHZhbHVlOiBjbGFzc0lkXG4gICAgICAgIH0pXG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXRcbiAgICB9XG5cbiAgICBpZiAoY2xhc3NJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBSZWdpc3RlcmVkQ29tcG9uZW50W2NvbXBvbmVudENsYXNzSWRTeW1ib2xdID0gY2xhc3NJZFxuICAgIH1cblxuICAgIFJlZ2lzdGVyZWRDb21wb25lbnRbY29tcG9uZW50U3ltYm9sXSA9IGNvbXBvbmVudE5hbWVcbiAgICBSZWdpc3RlcmVkQ29tcG9uZW50LmlzQ29tcG9uZW50ID0gdHJ1ZVxuICAgIFJlZ2lzdGVyZWRDb21wb25lbnQub3JpZ2luYWxDbGFzc05hbWUgPSBjb21wb25lbnROYW1lXG5cbiAgICBSZWdpc3RlcmVkQ29tcG9uZW50LnByb3RvdHlwZSA9IHRhcmdldC5wcm90b3R5cGVcbiAgICBSZWdpc3RlcmVkQ29tcG9uZW50LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHRhcmdldFxuXG4gICAgcmV0dXJuIFJlZ2lzdGVyZWRDb21wb25lbnQgYXMgVEZ1bmN0aW9uXG4gIH1cbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIERpc3Bvc2FibGVDb21wb25lbnQoY29tcG9uZW50TmFtZTogc3RyaW5nLCBjbGFzc0lkOiBudW1iZXIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIDxURnVuY3Rpb24gZXh0ZW5kcyBEaXNwb3NhYmxlQ29tcG9uZW50Q29uc3RydWN0b3I8YW55Pj4oXG4gICAgdGFyZ2V0OiBURnVuY3Rpb25cbiAgKTogVEZ1bmN0aW9uIHwgdm9pZCB7XG4gICAgaWYgKHRhcmdldC5pc0NvbXBvbmVudCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgYFlvdSBjYW5ub3QgZXh0ZW5kIGEgY29tcG9uZW50LiBUcnlpbmcgdG8gZXh0ZW5kICR7dGFyZ2V0Lm9yaWdpbmFsQ2xhc3NOYW1lfSB3aXRoOiAke2NvbXBvbmVudE5hbWV9YFxuICAgICAgKVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgKGNsYXNzSWQgYXMgYW55KSAhPT0gJ251bWJlcicgfHwgaXNOYU4oY2xhc3NJZCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgY2xhc3NJZDogJHtjbGFzc0lkfSBpcyBhbiBpbnZhbGlkIGludGVnZXJgKVxuICAgIH1cblxuICAgIGNvbnN0IGV4dGVuZGVkQ2xhc3MgPSB0YXJnZXRcblxuICAgIGNvbnN0IFJlZ2lzdGVyZWRDb21wb25lbnQ6IGFueSA9IGZ1bmN0aW9uIFJlZ2lzdGVyZWRDb21wb25lbnQoKSB7XG4gICAgICBpZiAoIURpc3Bvc2FibGVDb21wb25lbnQuZW5naW5lKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnWW91IG5lZWQgdG8gc2V0IGEgRGlzcG9zYWJsZUNvbXBvbmVudC5lbmdpbmUgYmVmb3JlIGNyZWF0aW5nIGRpc3Bvc2FibGUgY29tcG9uZW50cydcbiAgICAgICAgKVxuICAgICAgfVxuXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXJlc3QtcGFyYW1zXG4gICAgICBjb25zdCBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKVxuICAgICAgY29uc3QgcmV0ID0gbmV3IGV4dGVuZGVkQ2xhc3MoLi4uKGFyZ3MgYXMgYW55KSlcbiAgICAgIGNvbnN0IGlkID0gbmV3SWQoJ0MnKVxuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocmV0LCBjb21wb25lbnRTeW1ib2wsIHtcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgICAgdmFsdWU6IGNvbXBvbmVudE5hbWVcbiAgICAgIH0pXG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXQsIGNvbXBvbmVudElkU3ltYm9sLCB7XG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgIHZhbHVlOiBpZFxuICAgICAgfSlcblxuICAgICAgaWYgKChjbGFzc0lkIGFzIGFueSkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocmV0LCBjb21wb25lbnRDbGFzc0lkU3ltYm9sLCB7XG4gICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgICAgdmFsdWU6IGNsYXNzSWRcbiAgICAgICAgfSlcbiAgICAgIH1cblxuICAgICAgaWYgKERpc3Bvc2FibGVDb21wb25lbnQuZW5naW5lKSB7XG4gICAgICAgIERpc3Bvc2FibGVDb21wb25lbnQuZW5naW5lLnJlZ2lzdGVyQ29tcG9uZW50KHJldClcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJldFxuICAgIH1cblxuICAgIGlmICgoY2xhc3NJZCBhcyBhbnkpICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIFJlZ2lzdGVyZWRDb21wb25lbnRbY29tcG9uZW50Q2xhc3NJZFN5bWJvbF0gPSBjbGFzc0lkXG4gICAgfVxuXG4gICAgUmVnaXN0ZXJlZENvbXBvbmVudFtjb21wb25lbnRTeW1ib2xdID0gY29tcG9uZW50TmFtZVxuICAgIFJlZ2lzdGVyZWRDb21wb25lbnQuaXNDb21wb25lbnQgPSB0cnVlXG4gICAgUmVnaXN0ZXJlZENvbXBvbmVudC5pc0Rpc3Bvc2FibGVDb21wb25lbnQgPSB0cnVlXG4gICAgUmVnaXN0ZXJlZENvbXBvbmVudC5vcmlnaW5hbENsYXNzTmFtZSA9IGNvbXBvbmVudE5hbWVcblxuICAgIFJlZ2lzdGVyZWRDb21wb25lbnQucHJvdG90eXBlID0gdGFyZ2V0LnByb3RvdHlwZVxuICAgIFJlZ2lzdGVyZWRDb21wb25lbnQucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gdGFyZ2V0XG5cbiAgICByZXR1cm4gUmVnaXN0ZXJlZENvbXBvbmVudCBhcyBURnVuY3Rpb25cbiAgfVxufVxuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgbmFtZXNwYWNlIERpc3Bvc2FibGVDb21wb25lbnQge1xuICAvKiogQGludGVybmFsICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItY29uc3RcbiAgZXhwb3J0IGxldCBlbmdpbmU6IGFueSA9IG51bGxcbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb21wb25lbnROYW1lPFQgZXh0ZW5kcyBSZWNvcmQ8YW55LCBhbnk+ID0gYW55PihcbiAgY29tcG9uZW50OiBUIHwgQ29tcG9uZW50Q29uc3RydWN0b3I8VD5cbik6IHN0cmluZyB7XG4gIGlmICghY29tcG9uZW50KSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihjb21wb25lbnQgKyAnIGlzIG5vdCBhIGNvbXBvbmVudC4nKVxuICB9XG4gIGlmIChjb21wb25lbnRbY29tcG9uZW50U3ltYm9sXSkge1xuICAgIHJldHVybiBjb21wb25lbnRbY29tcG9uZW50U3ltYm9sXSBhcyBzdHJpbmdcbiAgfVxuICB0aHJvdyBuZXcgVHlwZUVycm9yKGNvbXBvbmVudCArICcgaXMgbm90IGEgcmVnaXN0ZXJlZCBjb21wb25lbnQuJylcbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb21wb25lbnRDbGFzc0lkPFQgZXh0ZW5kcyBSZWNvcmQ8YW55LCBhbnk+ID0gYW55PihcbiAgY29tcG9uZW50OiBUIHwgQ29tcG9uZW50Q29uc3RydWN0b3I8VD5cbik6IG51bWJlciB8IG51bGwge1xuICBpZiAoIWNvbXBvbmVudCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoY29tcG9uZW50ICsgJyBpcyBub3QgYSBjb21wb25lbnQuJylcbiAgfVxuICBpZiAoY29tcG9uZW50W2NvbXBvbmVudENsYXNzSWRTeW1ib2xdKSB7XG4gICAgcmV0dXJuIGNvbXBvbmVudFtjb21wb25lbnRDbGFzc0lkU3ltYm9sXSBhcyBudW1iZXJcbiAgfVxuICBpZiAoIWNvbXBvbmVudFtjb21wb25lbnRTeW1ib2xdKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihjb21wb25lbnQgKyAnIGlzIG5vdCBhIHJlZ2lzdGVyZWQgY29tcG9uZW50LicpXG4gIH1cblxuICByZXR1cm4gbnVsbFxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldENvbXBvbmVudElkPFQgZXh0ZW5kcyBEaXNwb3NhYmxlQ29tcG9uZW50TGlrZT4oXG4gIGNvbXBvbmVudDogVFxuKTogc3RyaW5nIHtcbiAgaWYgKCFjb21wb25lbnQpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGNvbXBvbmVudCArICcgaXMgbm90IGEgY29tcG9uZW50LicpXG4gIH1cbiAgaWYgKGNvbXBvbmVudFtjb21wb25lbnRJZFN5bWJvbF0pIHtcbiAgICByZXR1cm4gY29tcG9uZW50W2NvbXBvbmVudElkU3ltYm9sXSBhcyBhbnkgYXMgc3RyaW5nXG4gIH1cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihjb21wb25lbnQgKyAnIGlzIG5vdCBhIHJlZ2lzdGVyZWQgZGlzcG9zYWJsZSBjb21wb25lbnQuJylcbn1cblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCB0eXBlIE9ic2VydmFibGVDb21wb25lbnRTdWJzY3JpcHRpb24gPSAoXG4gIGtleTogc3RyaW5nLFxuICBuZXdWYWw6IGFueSxcbiAgb2xkVmFsOiBhbnlcbikgPT4gdm9pZFxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIE9ic2VydmFibGVDb21wb25lbnQge1xuICAvLyBAaW50ZXJuYWxcbiAgZGlydHk6IGJvb2xlYW4gPSBmYWxzZVxuICAvLyBAaW50ZXJuYWxcbiAgZGF0YTogYW55ID0ge31cbiAgcHJpdmF0ZSBzdWJzY3JpcHRpb25zOiBBcnJheTxPYnNlcnZhYmxlQ29tcG9uZW50U3Vic2NyaXB0aW9uPiA9IFtdXG5cbiAgc3RhdGljIGNvbXBvbmVudCh0YXJnZXQ6IE9ic2VydmFibGVDb21wb25lbnQsIHByb3BlcnR5S2V5OiBzdHJpbmcpIHtcbiAgICBpZiAoZGVsZXRlICh0YXJnZXQgYXMgYW55KVtwcm9wZXJ0eUtleV0pIHtcbiAgICAgIGNvbnN0IGNvbXBvbmVudFN5bWJvbCA9IHByb3BlcnR5S2V5ICsgJ18nICsgTWF0aC5yYW5kb20oKVxuICAgICAgOyh0YXJnZXQgYXMgYW55KVtjb21wb25lbnRTeW1ib2xdID0gdW5kZWZpbmVkXG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGNvbXBvbmVudFN5bWJvbCwge1xuICAgICAgICAuLi5PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgY29tcG9uZW50U3ltYm9sKSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2VcbiAgICAgIH0pXG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LnRvU3RyaW5nKCksIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXNbY29tcG9uZW50U3ltYm9sXVxuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIGNvbnN0IG9sZFZhbHVlID0gdGhpc1tjb21wb25lbnRTeW1ib2xdXG5cbiAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YVtwcm9wZXJ0eUtleV0gPSBnZXRDb21wb25lbnRJZCh2YWx1ZSlcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5kYXRhW3Byb3BlcnR5S2V5XSA9IG51bGxcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzW2NvbXBvbmVudFN5bWJvbF0gPSB2YWx1ZVxuXG4gICAgICAgICAgaWYgKHZhbHVlICE9PSBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IHRydWVcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnN1YnNjcmlwdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zW2ldKHByb3BlcnR5S2V5LCB2YWx1ZSwgb2xkVmFsdWUpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBmaWVsZCh0YXJnZXQ6IE9ic2VydmFibGVDb21wb25lbnQsIHByb3BlcnR5S2V5OiBzdHJpbmcpIHtcbiAgICBpZiAoZGVsZXRlICh0YXJnZXQgYXMgYW55KVtwcm9wZXJ0eUtleV0pIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LnRvU3RyaW5nKCksIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAodGhpczogT2JzZXJ2YWJsZUNvbXBvbmVudCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmRhdGFbcHJvcGVydHlLZXldXG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHRoaXM6IE9ic2VydmFibGVDb21wb25lbnQsIHZhbHVlKSB7XG4gICAgICAgICAgY29uc3Qgb2xkVmFsdWUgPSB0aGlzLmRhdGFbcHJvcGVydHlLZXldXG4gICAgICAgICAgdGhpcy5kYXRhW3Byb3BlcnR5S2V5XSA9IHZhbHVlXG5cbiAgICAgICAgICBpZiAodmFsdWUgIT09IG9sZFZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmRpcnR5ID0gdHJ1ZVxuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc3Vic2NyaXB0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnNbaV0ocHJvcGVydHlLZXksIHZhbHVlLCBvbGRWYWx1ZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIHVpVmFsdWUodGFyZ2V0OiBPYnNlcnZhYmxlQ29tcG9uZW50LCBwcm9wZXJ0eUtleTogc3RyaW5nKSB7XG4gICAgaWYgKGRlbGV0ZSAodGFyZ2V0IGFzIGFueSlbcHJvcGVydHlLZXldKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleS50b1N0cmluZygpLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKHRoaXM6IE9ic2VydmFibGVDb21wb25lbnQpOiBzdHJpbmcgfCBudW1iZXIge1xuICAgICAgICAgIHJldHVybiB0aGlzLmRhdGFbcHJvcGVydHlLZXldLnRvU3RyaW5nKClcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodGhpczogT2JzZXJ2YWJsZUNvbXBvbmVudCwgdmFsdWU6IHN0cmluZyB8IG51bWJlcikge1xuICAgICAgICAgIGNvbnN0IG9sZFZhbHVlID0gdGhpcy5kYXRhW3Byb3BlcnR5S2V5XVxuXG4gICAgICAgICAgY29uc3QgZmluYWxWYWx1ZSA9IG5ldyBVSVZhbHVlKHZhbHVlKVxuXG4gICAgICAgICAgdGhpcy5kYXRhW3Byb3BlcnR5S2V5XSA9IGZpbmFsVmFsdWVcblxuICAgICAgICAgIGlmIChmaW5hbFZhbHVlICE9PSBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IHRydWVcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnN1YnNjcmlwdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zW2ldKHByb3BlcnR5S2V5LCBmaW5hbFZhbHVlLCBvbGRWYWx1ZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIHJlYWRvbmx5KHRhcmdldDogT2JzZXJ2YWJsZUNvbXBvbmVudCwgcHJvcGVydHlLZXk6IHN0cmluZykge1xuICAgIGlmIChkZWxldGUgKHRhcmdldCBhcyBhbnkpW3Byb3BlcnR5S2V5XSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXkudG9TdHJpbmcoKSwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICh0aGlzOiBPYnNlcnZhYmxlQ29tcG9uZW50KSB7XG4gICAgICAgICAgaWYgKHByb3BlcnR5S2V5IGluIHRoaXMuZGF0YSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlIGZpZWxkICR7cHJvcGVydHlLZXl9IGlzIHVuaW5pdGlhbGl6ZWRgKVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhpcy5kYXRhW3Byb3BlcnR5S2V5XVxuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh0aGlzOiBPYnNlcnZhYmxlQ29tcG9uZW50LCB2YWx1ZSkge1xuICAgICAgICAgIGlmIChwcm9wZXJ0eUtleSBpbiB0aGlzLmRhdGEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlIGZpZWxkICR7cHJvcGVydHlLZXl9IGlzIHJlYWRvbmx5YClcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5kYXRhW3Byb3BlcnR5S2V5XSA9IHZhbHVlXG4gICAgICAgICAgdGhpcy5kaXJ0eSA9IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBvbkNoYW5nZShmbjogT2JzZXJ2YWJsZUNvbXBvbmVudFN1YnNjcmlwdGlvbikge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKGZuKVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YVxuICB9XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gaXNEaXNwb3NhYmxlQ29tcG9uZW50KGNvbXBvbmVudDogQ29tcG9uZW50TGlrZSkge1xuICByZXR1cm4gY29tcG9uZW50SWRTeW1ib2wgaW4gY29tcG9uZW50XG59XG4iLCJpbXBvcnQgeyBnZXRDb21wb25lbnROYW1lLCBDb21wb25lbnRDb25zdHJ1Y3RvciB9IGZyb20gJy4vQ29tcG9uZW50J1xuaW1wb3J0IHsgSUVudGl0eSB9IGZyb20gJy4vSUVudGl0eSdcblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBDb21wb25lbnRHcm91cCB7XG4gIHJlYWRvbmx5IGVudGl0aWVzOiBSZWFkb25seUFycmF5PElFbnRpdHk+ID0gW11cbiAgcmVhZG9ubHkgcmVxdWlyZXMhOiBSZWFkb25seUFycmF5PENvbXBvbmVudENvbnN0cnVjdG9yPGFueT4+XG4gIHJlYWRvbmx5IHJlcXVpcmVzTmFtZXMhOiBSZWFkb25seUFycmF5PHN0cmluZz5cblxuICBhY3RpdmU6IGJvb2xlYW4gPSBmYWxzZVxuXG4gIHByaXZhdGUgX3JlcXVpcmVzTmFtZXM6IHN0cmluZ1tdID0gW11cblxuICBjb25zdHJ1Y3RvciguLi5yZXF1aXJlczogQ29tcG9uZW50Q29uc3RydWN0b3I8YW55PltdKSB7XG4gICAgLy8gdmFsaWRhdGUgcmVxdWlyZXMgbGlzdFxuICAgIGlmICghcmVxdWlyZXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ29tcG9uZW50R3JvdXA6IENvdWxkIG5vdCBsb2FkIHRoZSByZXF1aXJlcyBsaXN0JylcbiAgICB9XG4gICAgaWYgKCEocmVxdWlyZXMgaW5zdGFuY2VvZiBBcnJheSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ29tcG9uZW50R3JvdXA6IHJlcXVpcmVzIGxpc3QgaXMgbm90IGFuIEFycmF5JylcbiAgICB9XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3JlcXVpcmVzJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiByZXF1aXJlcy5zbGljZSgpXG4gICAgICB9XG4gICAgfSlcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAncmVxdWlyZXNOYW1lcycsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWlyZXNOYW1lcy5zbGljZSgpXG4gICAgICB9XG4gICAgfSlcblxuICAgIGZvciAobGV0IGl4ID0gMDsgaXggPCByZXF1aXJlcy5sZW5ndGg7IGl4KyspIHtcbiAgICAgIGNvbnN0IGNvbXBvbmVudCA9IHJlcXVpcmVzW2l4XVxuICAgICAgbGV0IG5hbWU6IHN0cmluZyB8IG51bGwgPSBudWxsXG5cbiAgICAgIGlmICghY29tcG9uZW50KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBgQ29tcG9uZW50R3JvdXA6IHRoZSByZXF1aXJlZCBjb21wb25lbnQgYXQgbG9jYXRpb24gJHtpeH0gaXMgaW52YWxpZGBcbiAgICAgICAgKVxuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZShjb21wb25lbnQpXG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBgQ29tcG9uZW50R3JvdXA6IHRoZSByZXF1aXJlZCBjb21wb25lbnQgYXQgbG9jYXRpb24gJHtpeH0gaXMgbm90IHJlZ2lzdGVyZWQgYXMgYSBAQ29tcG9uZW50LiBSZW1lbWJlciB0byBwcm92aWRlIHRoZSBjbGFzcyBvZiB0aGUgY29tcG9uZW50LCBub3QgdGhlIG5hbWVgXG4gICAgICAgIClcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX3JlcXVpcmVzTmFtZXMuc29tZSgoJCkgPT4gJCA9PT0gbmFtZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGBDb21wb25lbnRHcm91cDogdGhlIHJlcXVpcmVkIGNvbXBvbmVudCBsaXN0IGhhcyBhIHJlcGVhdGVkIG5hbWUgJHtuYW1lfWBcbiAgICAgICAgKVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9yZXF1aXJlc05hbWVzLnB1c2gobmFtZSlcbiAgICB9XG4gIH1cblxuICBoYXNFbnRpdHkoZW50aXR5OiBJRW50aXR5KTogYm9vbGVhbiB7XG4gICAgaWYgKCFlbnRpdHkuaXNBZGRlZFRvRW5naW5lKCkpIHJldHVybiBmYWxzZVxuXG4gICAgcmV0dXJuIHRoaXMuZW50aXRpZXMuaW5kZXhPZihlbnRpdHkpICE9PSAtMVxuICB9XG5cbiAgLy8gQGludGVybmFsXG4gIGFkZEVudGl0eShlbnRpdHk6IElFbnRpdHkpIHtcbiAgICBpZiAoIWVudGl0eS5pc0FkZGVkVG9FbmdpbmUoKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgJ0NvbXBvbmVudEdyb3VwOiBDYW5ub3QgYWRkIGEgZW50aXR5IHRoYXQgaXMgbm90IGFkZGVkIHRvIHRoZSBlbmdpbmUnXG4gICAgICApXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZW50aXRpZXMuaW5kZXhPZihlbnRpdHkpID09PSAtMSkge1xuICAgICAgOyh0aGlzLmVudGl0aWVzIGFzIElFbnRpdHlbXSkucHVzaChlbnRpdHkpXG4gICAgfVxuICB9XG5cbiAgLy8gQGludGVybmFsXG4gIHJlbW92ZUVudGl0eShlbnRpdHk6IElFbnRpdHkpIHtcbiAgICBjb25zdCBpZCA9IHRoaXMuZW50aXRpZXMuaW5kZXhPZihlbnRpdHkpXG5cbiAgICBpZiAoaWQgIT09IC0xKSB7XG4gICAgICA7KHRoaXMuZW50aXRpZXMgYXMgSUVudGl0eVtdKS5zcGxpY2UoaWQsIDEpXG4gICAgfVxuICB9XG5cbiAgLy8gQGludGVybmFsXG4gIGNvbXBvbmVudFJlbW92ZWQoZW50aXR5OiBJRW50aXR5LCBjb21wb25lbnQ6IHN0cmluZykge1xuICAgIGlmICh0aGlzLl9yZXF1aXJlc05hbWVzLmluZGV4T2YoY29tcG9uZW50KSAhPT0gLTEpIHtcbiAgICAgIHRoaXMucmVtb3ZlRW50aXR5KGVudGl0eSlcbiAgICB9XG4gIH1cblxuICAvLyBAaW50ZXJuYWxcbiAgbWVldHNSZXF1aXJlbWVudHMoZW50aXR5OiBJRW50aXR5KSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9yZXF1aXJlc05hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBjb21wb25lbnROYW1lID0gdGhpcy5fcmVxdWlyZXNOYW1lc1tpXVxuICAgICAgaWYgKCEoY29tcG9uZW50TmFtZSBpbiBlbnRpdHkuY29tcG9uZW50cykpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlXG4gIH1cbn1cbiIsImltcG9ydCB7XG4gIGdldENvbXBvbmVudE5hbWUsXG4gIENvbXBvbmVudENvbnN0cnVjdG9yLFxuICBnZXRDb21wb25lbnRDbGFzc0lkLFxuICBDb21wb25lbnRMaWtlXG59IGZyb20gJy4vQ29tcG9uZW50J1xuaW1wb3J0IHtcbiAgSUVuZ2luZSxcbiAgSUVudGl0eSxcbiAgQ29tcG9uZW50QWRkZWQsXG4gIENvbXBvbmVudFJlbW92ZWQsXG4gIFBhcmVudENoYW5nZWRcbn0gZnJvbSAnLi9JRW50aXR5J1xuaW1wb3J0IHsgRXZlbnRNYW5hZ2VyIH0gZnJvbSAnLi9FdmVudE1hbmFnZXInXG5pbXBvcnQgeyBuZXdJZCwgbG9nIH0gZnJvbSAnLi9oZWxwZXJzJ1xuaW1wb3J0IHsgQXR0YWNoYWJsZSB9IGZyb20gJy4vQXR0YWNoYWJsZSdcblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBFbnRpdHkgaW1wbGVtZW50cyBJRW50aXR5IHtcbiAgcHVibGljIGNoaWxkcmVuOiBSZWNvcmQ8c3RyaW5nLCBJRW50aXR5PiA9IHt9XG4gIHB1YmxpYyBldmVudE1hbmFnZXI6IEV2ZW50TWFuYWdlciB8IG51bGwgPSBudWxsXG4gIHB1YmxpYyBhbGl2ZTogYm9vbGVhbiA9IGZhbHNlXG5cbiAgcHVibGljIHJlYWRvbmx5IHV1aWQ6IHN0cmluZyA9IG5ld0lkKCdFJylcbiAgcHVibGljIHJlYWRvbmx5IGNvbXBvbmVudHM6IFJlY29yZDxzdHJpbmcsIGFueT4gPSB7fVxuXG4gIC8vIEBpbnRlcm5hbFxuICBwdWJsaWMgZW5naW5lOiBJRW5naW5lIHwgbnVsbCA9IG51bGxcblxuICAvLyBAaW50ZXJuYWxcbiAgcHJpdmF0ZSBfcGFyZW50OiBJRW50aXR5IHwgbnVsbCA9IG51bGxcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgbmFtZT86IHN0cmluZykge1xuICAgIC8vIHN0dWJcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIG9yIHJlcGxhY2VzIGEgY29tcG9uZW50IGluIHRoZSBlbnRpdHkuXG4gICAqIEBwYXJhbSBjb21wb25lbnQgLSBjb21wb25lbnQgaW5zdGFuY2UuXG4gICAqL1xuICBhZGRDb21wb25lbnRPclJlcGxhY2U8VCBleHRlbmRzIG9iamVjdD4oY29tcG9uZW50OiBUKTogVCB7XG4gICAgaWYgKHR5cGVvZiBjb21wb25lbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1lvdSBwYXNzZWQgYSBmdW5jdGlvbiBvciBjbGFzcyBhcyBhIGNvbXBvbmVudCwgYW4gaW5zdGFuY2Ugb2YgY29tcG9uZW50IGlzIGV4cGVjdGVkJ1xuICAgICAgKVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgY29tcG9uZW50ICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgWW91IHBhc3NlZCBhICR7dHlwZW9mIGNvbXBvbmVudH0sIGFuIGluc3RhbmNlIG9mIGNvbXBvbmVudCBpcyBleHBlY3RlZGBcbiAgICAgIClcbiAgICB9XG5cbiAgICBjb25zdCBjb21wb25lbnROYW1lID0gZ2V0Q29tcG9uZW50TmFtZShjb21wb25lbnQpXG5cbiAgICBpZiAodGhpcy5jb21wb25lbnRzW2NvbXBvbmVudE5hbWVdKSB7XG4gICAgICBpZiAodGhpcy5jb21wb25lbnRzW2NvbXBvbmVudE5hbWVdID09PSBjb21wb25lbnQpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBvbmVudFxuICAgICAgfVxuICAgICAgdGhpcy5yZW1vdmVDb21wb25lbnQodGhpcy5jb21wb25lbnRzW2NvbXBvbmVudE5hbWVdLCBmYWxzZSlcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5hZGRDb21wb25lbnQoY29tcG9uZW50KVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBib29sZWFuIGluZGljYXRpbmcgaWYgYSBjb21wb25lbnQgaXMgcHJlc2VudCBpbiB0aGUgZW50aXR5LlxuICAgKiBAcGFyYW0gY29tcG9uZW50IC0gY29tcG9uZW50IGNsYXNzLCBpbnN0YW5jZSBvciBuYW1lXG4gICAqL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gIGhhc0NvbXBvbmVudDxUID0gYW55Pihjb21wb25lbnQ6IHN0cmluZyk6IGJvb2xlYW5cbiAgaGFzQ29tcG9uZW50PFQgZXh0ZW5kcyBDb21wb25lbnRMaWtlPihcbiAgICBjb21wb25lbnQ6IENvbXBvbmVudENvbnN0cnVjdG9yPFQ+XG4gICk6IGJvb2xlYW5cbiAgaGFzQ29tcG9uZW50PFQgZXh0ZW5kcyBvYmplY3Q+KGNvbXBvbmVudDogVCk6IGJvb2xlYW5cbiAgaGFzQ29tcG9uZW50PFQgZXh0ZW5kcyBDb21wb25lbnRMaWtlPihcbiAgICBjb21wb25lbnQ6IENvbXBvbmVudENvbnN0cnVjdG9yPFQ+IHwgc3RyaW5nXG4gICk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHR5cGVPZkNvbXBvbmVudCA9IHR5cGVvZiBjb21wb25lbnRcblxuICAgIGlmIChcbiAgICAgIHR5cGVPZkNvbXBvbmVudCAhPT0gJ3N0cmluZycgJiZcbiAgICAgIHR5cGVPZkNvbXBvbmVudCAhPT0gJ29iamVjdCcgJiZcbiAgICAgIHR5cGVPZkNvbXBvbmVudCAhPT0gJ2Z1bmN0aW9uJ1xuICAgICkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnRW50aXR5I2hhcyhjb21wb25lbnQpOiBjb21wb25lbnQgaXMgbm90IGEgY2xhc3MsIG5hbWUgb3IgaW5zdGFuY2UnXG4gICAgICApXG4gICAgfVxuXG4gICAgaWYgKChjb21wb25lbnQgYXMgYW55KSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlXG5cbiAgICBjb25zdCBjb21wb25lbnROYW1lID1cbiAgICAgIHR5cGVPZkNvbXBvbmVudCA9PT0gJ3N0cmluZydcbiAgICAgICAgPyAoY29tcG9uZW50IGFzIHN0cmluZylcbiAgICAgICAgOiBnZXRDb21wb25lbnROYW1lKGNvbXBvbmVudCBhcyBhbnkpXG5cbiAgICBjb25zdCBzdG9yZWRDb21wb25lbnQgPSB0aGlzLmNvbXBvbmVudHNbY29tcG9uZW50TmFtZV1cblxuICAgIGlmICghc3RvcmVkQ29tcG9uZW50KSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICBpZiAodHlwZU9mQ29tcG9uZW50ID09PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuIHN0b3JlZENvbXBvbmVudCA9PT0gY29tcG9uZW50XG4gICAgfVxuXG4gICAgaWYgKHR5cGVPZkNvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIHN0b3JlZENvbXBvbmVudCBpbnN0YW5jZW9mIChjb21wb25lbnQgYXMgQ29tcG9uZW50Q29uc3RydWN0b3I8VD4pXG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGEgY29tcG9uZW50LCBpZiBpdCBkb2Vzbid0IGV4aXN0LCBpdCB0aHJvd3MgYW4gRXJyb3IuXG4gICAqIEBwYXJhbSBjb21wb25lbnQgLSBjb21wb25lbnQgY2xhc3Mgb3IgbmFtZVxuICAgKi9cbiAgZ2V0Q29tcG9uZW50PFQgPSBhbnk+KGNvbXBvbmVudDogc3RyaW5nKTogVFxuICBnZXRDb21wb25lbnQ8VCBleHRlbmRzIENvbXBvbmVudExpa2U+KGNvbXBvbmVudDogQ29tcG9uZW50Q29uc3RydWN0b3I8VD4pOiBUXG4gIGdldENvbXBvbmVudDxUIGV4dGVuZHMgQ29tcG9uZW50TGlrZT4oXG4gICAgY29tcG9uZW50OiBDb21wb25lbnRDb25zdHJ1Y3RvcjxUPiB8IHN0cmluZ1xuICApOiBUIHtcbiAgICBjb25zdCB0eXBlT2ZDb21wb25lbnQgPSB0eXBlb2YgY29tcG9uZW50XG5cbiAgICBpZiAodHlwZU9mQ29tcG9uZW50ICE9PSAnc3RyaW5nJyAmJiB0eXBlT2ZDb21wb25lbnQgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRW50aXR5I2dldChjb21wb25lbnQpOiBjb21wb25lbnQgaXMgbm90IGEgY2xhc3Mgb3IgbmFtZScpXG4gICAgfVxuXG4gICAgY29uc3QgY29tcG9uZW50TmFtZSA9XG4gICAgICB0eXBlT2ZDb21wb25lbnQgPT09ICdzdHJpbmcnXG4gICAgICAgID8gKGNvbXBvbmVudCBhcyBzdHJpbmcpXG4gICAgICAgIDogZ2V0Q29tcG9uZW50TmFtZShjb21wb25lbnQgYXMgYW55KVxuXG4gICAgY29uc3Qgc3RvcmVkQ29tcG9uZW50ID0gdGhpcy5jb21wb25lbnRzW2NvbXBvbmVudE5hbWVdXG5cbiAgICBpZiAoIXN0b3JlZENvbXBvbmVudCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgQ2FuIG5vdCBnZXQgY29tcG9uZW50IFwiJHtjb21wb25lbnROYW1lfVwiIGZyb20gZW50aXR5IFwiJHt0aGlzLmlkZW50aWZpZXJ9XCJgXG4gICAgICApXG4gICAgfVxuXG4gICAgaWYgKHR5cGVPZkNvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKHN0b3JlZENvbXBvbmVudCBpbnN0YW5jZW9mIChjb21wb25lbnQgYXMgQ29tcG9uZW50Q29uc3RydWN0b3I8VD4pKSB7XG4gICAgICAgIHJldHVybiBzdG9yZWRDb21wb25lbnRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBgQ2FuIG5vdCBnZXQgY29tcG9uZW50IFwiJHtjb21wb25lbnROYW1lfVwiIGZyb20gZW50aXR5IFwiJHt0aGlzLmlkZW50aWZpZXJ9XCIgKGJ5IGluc3RhbmNlKWBcbiAgICAgICAgKVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzdG9yZWRDb21wb25lbnRcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGEgY29tcG9uZW50LCBpZiBpdCBkb2Vzbid0IGV4aXN0LCBpdCByZXR1cm5zIG51bGwuXG4gICAqIEBwYXJhbSBjb21wb25lbnQgLSBjb21wb25lbnQgY2xhc3Mgb3IgbmFtZVxuICAgKi9cbiAgZ2V0Q29tcG9uZW50T3JOdWxsPFQgPSBhbnk+KGNvbXBvbmVudDogc3RyaW5nKTogVCB8IG51bGxcbiAgZ2V0Q29tcG9uZW50T3JOdWxsPFQgZXh0ZW5kcyBDb21wb25lbnRMaWtlPihcbiAgICBjb21wb25lbnQ6IENvbXBvbmVudENvbnN0cnVjdG9yPFQ+XG4gICk6IFQgfCBudWxsXG4gIGdldENvbXBvbmVudE9yTnVsbDxUIGV4dGVuZHMgQ29tcG9uZW50TGlrZT4oXG4gICAgY29tcG9uZW50OiBDb21wb25lbnRDb25zdHJ1Y3RvcjxUPiB8IHN0cmluZ1xuICApOiBUIHwgbnVsbCB7XG4gICAgY29uc3QgdHlwZU9mQ29tcG9uZW50ID0gdHlwZW9mIGNvbXBvbmVudFxuXG4gICAgaWYgKHR5cGVPZkNvbXBvbmVudCAhPT0gJ3N0cmluZycgJiYgdHlwZU9mQ29tcG9uZW50ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdFbnRpdHkjZ2V0T3JOdWxsKGNvbXBvbmVudCk6IGNvbXBvbmVudCBpcyBub3QgYSBjbGFzcyBvciBuYW1lJ1xuICAgICAgKVxuICAgIH1cblxuICAgIGNvbnN0IGNvbXBvbmVudE5hbWUgPVxuICAgICAgdHlwZU9mQ29tcG9uZW50ID09PSAnc3RyaW5nJ1xuICAgICAgICA/IChjb21wb25lbnQgYXMgc3RyaW5nKVxuICAgICAgICA6IGdldENvbXBvbmVudE5hbWUoY29tcG9uZW50IGFzIGFueSlcblxuICAgIGNvbnN0IHN0b3JlZENvbXBvbmVudCA9IHRoaXMuY29tcG9uZW50c1tjb21wb25lbnROYW1lXVxuXG4gICAgaWYgKCFzdG9yZWRDb21wb25lbnQpIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuXG4gICAgaWYgKHR5cGVPZkNvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKHN0b3JlZENvbXBvbmVudCBpbnN0YW5jZW9mIChjb21wb25lbnQgYXMgQ29tcG9uZW50Q29uc3RydWN0b3I8VD4pKSB7XG4gICAgICAgIHJldHVybiBzdG9yZWRDb21wb25lbnRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0b3JlZENvbXBvbmVudFxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgYSBjb21wb25lbnQsIGlmIGl0IGRvZXNuJ3QgZXhpc3QsIGl0IGNyZWF0ZXMgdGhlIGNvbXBvbmVudCBhbmQgcmV0dXJucyBpdC5cbiAgICogQHBhcmFtIGNvbXBvbmVudCAtIGNvbXBvbmVudCBjbGFzc1xuICAgKi9cbiAgZ2V0Q29tcG9uZW50T3JDcmVhdGU8VCBleHRlbmRzIENvbXBvbmVudExpa2U+KFxuICAgIGNvbXBvbmVudDogQ29tcG9uZW50Q29uc3RydWN0b3I8VD4gJiB7IG5ldyAoKTogVCB9XG4gICk6IFQge1xuICAgIGlmICh0eXBlb2YgKGNvbXBvbmVudCBhcyBhbnkpICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0VudGl0eSNnZXRPckNyZWF0ZShjb21wb25lbnQpOiBjb21wb25lbnQgaXMgbm90IGEgY2xhc3MnKVxuICAgIH1cblxuICAgIGxldCByZXQgPSB0aGlzLmdldENvbXBvbmVudE9yTnVsbChjb21wb25lbnQpXG5cbiAgICBpZiAoIXJldCkge1xuICAgICAgcmV0ID0gbmV3IGNvbXBvbmVudCgpXG4gICAgICAvLyBTYWZlLWd1YXJkIHRvIG9ubHkgYWRkIHJlZ2lzdGVyZWQgY29tcG9uZW50cyB0byBlbnRpdGllc1xuICAgICAgZ2V0Q29tcG9uZW50TmFtZShyZXQpXG4gICAgICB0aGlzLmFkZENvbXBvbmVudE9yUmVwbGFjZShyZXQgYXMgYW55KVxuICAgIH1cblxuICAgIHJldHVybiByZXRcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGEgY29tcG9uZW50LiBJZiB0aGUgY29tcG9uZW50IGFscmVhZHkgZXhpc3QsIGl0IHRocm93cyBhbiBFcnJvci5cbiAgICogQHBhcmFtIGNvbXBvbmVudCAtIGNvbXBvbmVudCBpbnN0YW5jZS5cbiAgICovXG4gIGFkZENvbXBvbmVudDxUIGV4dGVuZHMgb2JqZWN0Pihjb21wb25lbnQ6IFQpOiBUIHtcbiAgICBpZiAodHlwZW9mIGNvbXBvbmVudCAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0VudGl0eSNhZGQoY29tcG9uZW50KTogWW91IHBhc3NlZCBhIGZ1bmN0aW9uIG9yIGNsYXNzIGFzIGEgY29tcG9uZW50LCBhbiBpbnN0YW5jZSBvZiBjb21wb25lbnQgaXMgZXhwZWN0ZWQnXG4gICAgICApXG4gICAgfVxuXG4gICAgY29uc3QgY29tcG9uZW50TmFtZSA9IGdldENvbXBvbmVudE5hbWUoY29tcG9uZW50KVxuICAgIGNvbnN0IGNsYXNzSWQgPSBnZXRDb21wb25lbnRDbGFzc0lkKGNvbXBvbmVudClcblxuICAgIGlmICh0aGlzLmNvbXBvbmVudHNbY29tcG9uZW50TmFtZV0pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYEEgY29tcG9uZW50IG9mIHR5cGUgXCIke2NvbXBvbmVudE5hbWV9XCIgaXMgYWxyZWFkeSBwcmVzZW50IGluIGVudGl0eSBcIiR7dGhpcy5pZGVudGlmaWVyfVwiYFxuICAgICAgKVxuICAgIH1cblxuICAgIHRoaXMuY29tcG9uZW50c1tjb21wb25lbnROYW1lXSA9IGNvbXBvbmVudFxuXG4gICAgaWYgKHRoaXMuZXZlbnRNYW5hZ2VyKSB7XG4gICAgICB0aGlzLmV2ZW50TWFuYWdlci5maXJlRXZlbnQoXG4gICAgICAgIG5ldyBDb21wb25lbnRBZGRlZCh0aGlzLCBjb21wb25lbnROYW1lLCBjbGFzc0lkKVxuICAgICAgKVxuICAgIH1cblxuICAgIGNvbnN0IHN0b3JlZENvbXBvbmVudCA9IGNvbXBvbmVudCBhcyBDb21wb25lbnRMaWtlXG5cbiAgICBpZiAodHlwZW9mIHN0b3JlZENvbXBvbmVudC5hZGRlZFRvRW50aXR5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBzdG9yZWRDb21wb25lbnQuYWRkZWRUb0VudGl0eSh0aGlzKVxuICAgIH1cbiAgICByZXR1cm4gY29tcG9uZW50XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhIGNvbXBvbmVudCBpbnN0YW5jZSBmcm9tIHRoZSBlbnRpdHkuXG4gICAqIEBwYXJhbSBjb21wb25lbnQgLSBjb21wb25lbnQgaW5zdGFuY2UgdG8gcmVtb3ZlXG4gICAqIEBwYXJhbSB0cmlnZ2VyUmVtb3ZlZEV2ZW50IC0gc2hvdWxkIHRoaXMgYWN0aW9uIHRyaWdnZXIgYW4gZXZlbnQ/XG4gICAqL1xuICByZW1vdmVDb21wb25lbnQoY29tcG9uZW50OiBzdHJpbmcsIHRyaWdnZXJSZW1vdmVkRXZlbnQ/OiBib29sZWFuKTogdm9pZFxuICByZW1vdmVDb21wb25lbnQ8VCBleHRlbmRzIG9iamVjdD4oXG4gICAgY29tcG9uZW50OiBULFxuICAgIHRyaWdnZXJSZW1vdmVkRXZlbnQ/OiBib29sZWFuXG4gICk6IHZvaWRcbiAgcmVtb3ZlQ29tcG9uZW50KFxuICAgIGNvbXBvbmVudDogQ29tcG9uZW50Q29uc3RydWN0b3I8YW55PixcbiAgICB0cmlnZ2VyUmVtb3ZlZEV2ZW50PzogYm9vbGVhblxuICApOiB2b2lkXG4gIHJlbW92ZUNvbXBvbmVudChcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10eXBlc1xuICAgIGNvbXBvbmVudDogb2JqZWN0IHwgc3RyaW5nIHwgRnVuY3Rpb24sXG4gICAgdHJpZ2dlclJlbW92ZWRFdmVudCA9IHRydWVcbiAgKTogdm9pZCB7XG4gICAgY29uc3QgdHlwZU9mQ29tcG9uZW50ID0gdHlwZW9mIGNvbXBvbmVudFxuXG4gICAgaWYgKFxuICAgICAgdHlwZU9mQ29tcG9uZW50ICE9PSAnc3RyaW5nJyAmJlxuICAgICAgdHlwZU9mQ29tcG9uZW50ICE9PSAnZnVuY3Rpb24nICYmXG4gICAgICB0eXBlT2ZDb21wb25lbnQgIT09ICdvYmplY3QnXG4gICAgKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdFbnRpdHkjcmVtb3ZlKGNvbXBvbmVudCk6IGNvbXBvbmVudCBpcyBub3QgYSBjbGFzcywgY2xhc3Mgb3IgbmFtZSdcbiAgICAgIClcbiAgICB9XG5cbiAgICBjb25zdCBjb21wb25lbnROYW1lID1cbiAgICAgIHR5cGVPZkNvbXBvbmVudCA9PT0gJ3N0cmluZydcbiAgICAgICAgPyAoY29tcG9uZW50IGFzIHN0cmluZylcbiAgICAgICAgOiBnZXRDb21wb25lbnROYW1lKGNvbXBvbmVudCBhcyBhbnkpXG5cbiAgICBjb25zdCBzdG9yZWRDb21wb25lbnQgPSB0aGlzLmNvbXBvbmVudHNbXG4gICAgICBjb21wb25lbnROYW1lXG4gICAgXSBhcyBDb21wb25lbnRMaWtlIHwgdm9pZFxuXG4gICAgaWYgKCFzdG9yZWRDb21wb25lbnQpIHtcbiAgICAgIGxvZyhcbiAgICAgICAgYEVudGl0eSBXYXJuaW5nOiBUcnlpbmcgdG8gcmVtb3ZlIGluZXhpc3RpbmcgY29tcG9uZW50IFwiJHtjb21wb25lbnROYW1lfVwiIGZyb20gZW50aXR5IFwiJHt0aGlzLmlkZW50aWZpZXJ9XCJgXG4gICAgICApXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAodHlwZU9mQ29tcG9uZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAoc3RvcmVkQ29tcG9uZW50IGluc3RhbmNlb2YgKGNvbXBvbmVudCBhcyBDb21wb25lbnRDb25zdHJ1Y3Rvcjxhbnk+KSkge1xuICAgICAgICBkZWxldGUgdGhpcy5jb21wb25lbnRzW2NvbXBvbmVudE5hbWVdXG5cbiAgICAgICAgaWYgKHN0b3JlZENvbXBvbmVudCkge1xuICAgICAgICAgIGlmICh0cmlnZ2VyUmVtb3ZlZEV2ZW50ICYmIHRoaXMuZXZlbnRNYW5hZ2VyKSB7XG4gICAgICAgICAgICB0aGlzLmV2ZW50TWFuYWdlci5maXJlRXZlbnQoXG4gICAgICAgICAgICAgIG5ldyBDb21wb25lbnRSZW1vdmVkKHRoaXMsIGNvbXBvbmVudE5hbWUsIHN0b3JlZENvbXBvbmVudClcbiAgICAgICAgICAgIClcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodHlwZW9mIHN0b3JlZENvbXBvbmVudC5yZW1vdmVkRnJvbUVudGl0eSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgc3RvcmVkQ29tcG9uZW50LnJlbW92ZWRGcm9tRW50aXR5KHRoaXMpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVyblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG9nKFxuICAgICAgICAgIGBFbnRpdHkgV2FybmluZzogVHJ5aW5nIHRvIHJlbW92ZSB3cm9uZyAoYnkgY29uc3RydWN0b3IpIGNvbXBvbmVudCBcIiR7Y29tcG9uZW50TmFtZX1cIiBmcm9tIGVudGl0eSBcIiR7dGhpcy5pZGVudGlmaWVyfVwiYFxuICAgICAgICApXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgIH1cblxuICAgIGRlbGV0ZSB0aGlzLmNvbXBvbmVudHNbY29tcG9uZW50TmFtZV1cblxuICAgIGlmIChzdG9yZWRDb21wb25lbnQpIHtcbiAgICAgIGlmICh0cmlnZ2VyUmVtb3ZlZEV2ZW50ICYmIHRoaXMuZXZlbnRNYW5hZ2VyKSB7XG4gICAgICAgIHRoaXMuZXZlbnRNYW5hZ2VyLmZpcmVFdmVudChcbiAgICAgICAgICBuZXcgQ29tcG9uZW50UmVtb3ZlZCh0aGlzLCBjb21wb25lbnROYW1lLCBzdG9yZWRDb21wb25lbnQpXG4gICAgICAgIClcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBzdG9yZWRDb21wb25lbnQucmVtb3ZlZEZyb21FbnRpdHkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgc3RvcmVkQ29tcG9uZW50LnJlbW92ZWRGcm9tRW50aXR5KHRoaXMpXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBlbnRpdHkgaXMgYWxyZWFkeSBhZGRlZCB0byB0aGUgZW5naW5lLlxuICAgKiBSZXR1cm5zIGZhbHNlIGlmIG5vIGVuZ2luZSB3YXMgZGVmaW5lZC5cbiAgICovXG4gIGlzQWRkZWRUb0VuZ2luZSgpOiBib29sZWFuIHtcbiAgICBpZiAoXG4gICAgICB0aGlzLmVuZ2luZSAmJlxuICAgICAgKHRoaXMudXVpZCBpbiB0aGlzLmVuZ2luZS5lbnRpdGllcyB8fCB0aGlzLmVuZ2luZS5yb290RW50aXR5ID09PSB0aGlzKVxuICAgICkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBwYXJlbnQgZW50aXR5XG4gICAqL1xuICBzZXRQYXJlbnQoX3BhcmVudDogSUVudGl0eSB8IEF0dGFjaGFibGUgfCBudWxsKTogSUVudGl0eSB7XG4gICAgbGV0IG5ld1BhcmVudDogSUVudGl0eSB8IG51bGxcblxuICAgIC8vIENoZWNrIGlmIHBhcmVudCBpcyBvZiB0eXBlIEF0dGFjaGFibGVcbiAgICBpZiAoX3BhcmVudCAmJiAnZ2V0RW50aXR5UmVwcmVzZW50YXRpb24nIGluIF9wYXJlbnQpIHtcbiAgICAgIGlmICghdGhpcy5lbmdpbmUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGBJbiBvcmRlciB0byBzZXQgYW4gYXR0YWNoYWJsZSBhcyBwYXJlbnQsIHlvdSBmaXJzdCBuZWVkIHRvIGFkZCB0aGUgZW50aXR5IHRvIHRoZSBlbmdpbmUuYFxuICAgICAgICApXG4gICAgICB9XG4gICAgICBuZXdQYXJlbnQgPSBfcGFyZW50LmdldEVudGl0eVJlcHJlc2VudGF0aW9uKHRoaXMuZW5naW5lKVxuICAgIH0gZWxzZSB7XG4gICAgICBuZXdQYXJlbnQgPSAhX3BhcmVudCAmJiB0aGlzLmVuZ2luZSA/IHRoaXMuZW5naW5lLnJvb3RFbnRpdHkgOiBfcGFyZW50XG4gICAgfVxuICAgIGNvbnN0IGN1cnJlbnRQYXJlbnQgPSB0aGlzLmdldFBhcmVudCgpXG5cbiAgICBpZiAobmV3UGFyZW50ID09PSB0aGlzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBGYWlsZWQgdG8gc2V0IHBhcmVudCBmb3IgZW50aXR5IFwiJHt0aGlzLmlkZW50aWZpZXJ9XCI6IEFuIGVudGl0eSBjYW4ndCBzZXQgaXRzZWxmIGFzIGEgaXRzIG93biBwYXJlbnRgXG4gICAgICApXG4gICAgfVxuXG4gICAgaWYgKG5ld1BhcmVudCA9PT0gY3VycmVudFBhcmVudCkge1xuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICBjb25zdCBjaXJjdWxhckFuY2VzdG9yID0gdGhpcy5nZXRDaXJjdWxhckFuY2VzdG9yKG5ld1BhcmVudClcblxuICAgIGlmIChjaXJjdWxhckFuY2VzdG9yKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBGYWlsZWQgdG8gc2V0IHBhcmVudCBmb3IgZW50aXR5IFwiJHt0aGlzLmlkZW50aWZpZXJ9XCI6IENpcmN1bGFyIHBhcmVudCByZWZlcmVuY2VzIGFyZSBub3QgYWxsb3dlZCAoU2VlIGVudGl0eSBcIiR7Y2lyY3VsYXJBbmNlc3Rvcn1cIilgXG4gICAgICApXG4gICAgfVxuXG4gICAgaWYgKGN1cnJlbnRQYXJlbnQpIHtcbiAgICAgIGRlbGV0ZSBjdXJyZW50UGFyZW50LmNoaWxkcmVuW3RoaXMudXVpZF1cbiAgICB9XG5cbiAgICAvLyBNYWtlIHN1cmUgdGhhdCB0aGUgcGFyZW50IGFuZCBjaGlsZCBhcmUgYm90aCBvbiB0aGUgZW5naW5lLCBvciBvZmYgdGhlIGVuZ2luZSwgdG9nZXRoZXJcbiAgICBpZiAobmV3UGFyZW50ICE9PSBudWxsICYmIG5ld1BhcmVudC51dWlkICE9PSAnMCcpIHtcbiAgICAgIGlmICghbmV3UGFyZW50LmlzQWRkZWRUb0VuZ2luZSgpICYmIHRoaXMuaXNBZGRlZFRvRW5naW5lKCkpIHtcbiAgICAgICAgdGhpcy5lbmdpbmUhLnJlbW92ZUVudGl0eSh0aGlzKVxuICAgICAgfVxuICAgICAgaWYgKG5ld1BhcmVudC5pc0FkZGVkVG9FbmdpbmUoKSAmJiAhdGhpcy5pc0FkZGVkVG9FbmdpbmUoKSkge1xuICAgICAgICA7KG5ld1BhcmVudCBhcyBFbnRpdHkpLmVuZ2luZSEuYWRkRW50aXR5KHRoaXMpXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5fcGFyZW50ID0gbmV3UGFyZW50IHx8IG51bGxcbiAgICB0aGlzLnJlZ2lzdGVyQXNDaGlsZCgpXG5cbiAgICBpZiAodGhpcy5ldmVudE1hbmFnZXIgJiYgdGhpcy5lbmdpbmUpIHtcbiAgICAgIHRoaXMuZXZlbnRNYW5hZ2VyLmZpcmVFdmVudChuZXcgUGFyZW50Q2hhbmdlZCh0aGlzLCBuZXdQYXJlbnQpKVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgcGFyZW50IGVudGl0eVxuICAgKi9cbiAgZ2V0UGFyZW50KCk6IElFbnRpdHkgfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy5fcGFyZW50XG4gIH1cblxuICBwcml2YXRlIGdldCBpZGVudGlmaWVyKCkge1xuICAgIHJldHVybiB0aGlzLm5hbWUgfHwgdGhpcy51dWlkXG4gIH1cblxuICBwcml2YXRlIGdldENpcmN1bGFyQW5jZXN0b3IoZW50OiBJRW50aXR5IHwgbnVsbCk6IHN0cmluZyB8IG51bGwge1xuICAgIGNvbnN0IHJvb3QgPSB0aGlzLmVuZ2luZSA/IHRoaXMuZW5naW5lLnJvb3RFbnRpdHkgOiBudWxsXG4gICAgbGV0IGU6IElFbnRpdHkgfCBudWxsID0gZW50XG5cbiAgICB3aGlsZSAoZSAmJiBlICE9PSByb290KSB7XG4gICAgICBjb25zdCBwYXJlbnQ6IElFbnRpdHkgfCBudWxsID0gZS5nZXRQYXJlbnQoKVxuICAgICAgaWYgKHBhcmVudCA9PT0gdGhpcykge1xuICAgICAgICByZXR1cm4gZS51dWlkXG4gICAgICB9XG4gICAgICBlID0gcGFyZW50XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIHByaXZhdGUgcmVnaXN0ZXJBc0NoaWxkKCkge1xuICAgIGNvbnN0IHBhcmVudCA9IHRoaXMuZ2V0UGFyZW50KClcblxuICAgIGlmICh0aGlzLnV1aWQgJiYgcGFyZW50KSB7XG4gICAgICBwYXJlbnQuY2hpbGRyZW5bdGhpcy51dWlkXSA9IHRoaXNcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7XG4gIElFbmdpbmUsXG4gIElTeXN0ZW0sXG4gIElFbnRpdHksXG4gIENvbXBvbmVudEFkZGVkLFxuICBDb21wb25lbnRSZW1vdmVkXG59IGZyb20gJy4vSUVudGl0eSdcblxuaW1wb3J0IHtcbiAgZ2V0Q29tcG9uZW50TmFtZSxcbiAgZ2V0Q29tcG9uZW50SWQsXG4gIERpc3Bvc2FibGVDb21wb25lbnRVcGRhdGVkLFxuICBEaXNwb3NhYmxlQ29tcG9uZW50TGlrZSxcbiAgQ29tcG9uZW50Q29uc3RydWN0b3IsXG4gIERpc3Bvc2FibGVDb21wb25lbnRDcmVhdGVkLFxuICBEaXNwb3NhYmxlQ29tcG9uZW50UmVtb3ZlZCxcbiAgZ2V0Q29tcG9uZW50Q2xhc3NJZFxufSBmcm9tICcuL0NvbXBvbmVudCdcbmltcG9ydCB7IEV2ZW50TWFuYWdlciB9IGZyb20gJy4vRXZlbnRNYW5hZ2VyJ1xuaW1wb3J0IHsgQ29tcG9uZW50R3JvdXAgfSBmcm9tICcuL0NvbXBvbmVudEdyb3VwJ1xuXG5pbXBvcnQgeyBsb2csIGVycm9yIH0gZnJvbSAnLi9oZWxwZXJzJ1xuaW1wb3J0IHsgRW50aXR5IH0gZnJvbSAnLi9FbnRpdHknXG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbnR5cGUgU3lzdGVtRW50cnkgPSB7IHN5c3RlbTogSVN5c3RlbTsgcHJpb3JpdHk6IG51bWJlciB9XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgRW5naW5lIGltcGxlbWVudHMgSUVuZ2luZSB7XG4gIHJlYWRvbmx5IGV2ZW50TWFuYWdlcjogRXZlbnRNYW5hZ2VyID0gbmV3IEV2ZW50TWFuYWdlcigpXG4gIHJlYWRvbmx5IHJvb3RFbnRpdHk6IElFbnRpdHlcbiAgcmVhZG9ubHkgZmlyc3RQZXJzb25DYW1lcmFFbnRpdHk6IElFbnRpdHlcbiAgcmVhZG9ubHkgYXZhdGFyRW50aXR5OiBJRW50aXR5XG5cbiAgLy8gQGludGVybmFsXG4gIHJlYWRvbmx5IHN5c3RlbXM6IFN5c3RlbUVudHJ5W10gPSBbXVxuXG4gIC8vIEBpbnRlcm5hbFxuICByZWFkb25seSBlbnRpdHlMaXN0czogUmVjb3JkPHN0cmluZywgUmVjb3JkPHN0cmluZywgSUVudGl0eT4+ID0ge31cblxuICAvLyBAaW50ZXJuYWxcbiAgcmVhZG9ubHkgYWRkZWRTeXN0ZW1zOiBJU3lzdGVtW10gPSBbXVxuXG4gIHByaXZhdGUgcmVhZG9ubHkgX2VudGl0aWVzOiBSZWNvcmQ8c3RyaW5nLCBJRW50aXR5PiA9IHt9XG4gIHByaXZhdGUgcmVhZG9ubHkgX2Rpc3Bvc2FibGVDb21wb25lbnRzOiBSZWNvcmQ8XG4gICAgc3RyaW5nLFxuICAgIERpc3Bvc2FibGVDb21wb25lbnRMaWtlXG4gID4gPSB7fVxuICBwcml2YXRlIHJlYWRvbmx5IF9jb21wb25lbnRHcm91cHM6IFJlY29yZDxzdHJpbmcsIENvbXBvbmVudEdyb3VwW10+ID0ge31cblxuICAvLyBzeXN0ZW1zIHRoYXQgZG9lc24ndCByZXF1aXJlIGFueSBjb21wb25lbnQgb3IgaGFuZGxlIHRoZWlyIG93biBsb2dpY1xuICBwcml2YXRlIHJlYWRvbmx5IHNpbXBsZVN5c3RlbXM6IElTeXN0ZW1bXSA9IFtdXG5cbiAgZ2V0IGVudGl0aWVzKCkge1xuICAgIHJldHVybiB0aGlzLl9lbnRpdGllcyBhcyBSZWFkb25seTxSZWNvcmQ8c3RyaW5nLCBJRW50aXR5Pj5cbiAgfVxuXG4gIGdldCBkaXNwb3NhYmxlQ29tcG9uZW50cygpIHtcbiAgICByZXR1cm4gdGhpcy5fZGlzcG9zYWJsZUNvbXBvbmVudHMgYXMgUmVhZG9ubHk8XG4gICAgICBSZWNvcmQ8c3RyaW5nLCBEaXNwb3NhYmxlQ29tcG9uZW50TGlrZT5cbiAgICA+XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihyb290RW50aXR5OiBJRW50aXR5KSB7XG4gICAgdGhpcy5ldmVudE1hbmFnZXIuYWRkTGlzdGVuZXIoXG4gICAgICBDb21wb25lbnRBZGRlZCxcbiAgICAgIHRoaXMsXG4gICAgICB0aGlzLmNvbXBvbmVudEFkZGVkSGFuZGxlclxuICAgIClcbiAgICB0aGlzLmV2ZW50TWFuYWdlci5hZGRMaXN0ZW5lcihcbiAgICAgIENvbXBvbmVudFJlbW92ZWQsXG4gICAgICB0aGlzLFxuICAgICAgdGhpcy5jb21wb25lbnRSZW1vdmVkSGFuZGxlclxuICAgIClcbiAgICB0aGlzLnJvb3RFbnRpdHkgPSByb290RW50aXR5XG4gICAgdGhpcy5maXJzdFBlcnNvbkNhbWVyYUVudGl0eSA9IG5ldyBFbnRpdHkoKVxuICAgIDsodGhpcy5maXJzdFBlcnNvbkNhbWVyYUVudGl0eSBhcyBhbnkpLnV1aWQgPVxuICAgICAgJ0ZpcnN0UGVyc29uQ2FtZXJhRW50aXR5UmVmZXJlbmNlJ1xuICAgIHRoaXMuYWRkRW50aXR5KHRoaXMuZmlyc3RQZXJzb25DYW1lcmFFbnRpdHkpXG4gICAgdGhpcy5hdmF0YXJFbnRpdHkgPSBuZXcgRW50aXR5KClcbiAgICA7KHRoaXMuYXZhdGFyRW50aXR5IGFzIGFueSkudXVpZCA9ICdBdmF0YXJFbnRpdHlSZWZlcmVuY2UnXG4gICAgdGhpcy5hZGRFbnRpdHkodGhpcy5hdmF0YXJFbnRpdHkpXG4gIH1cblxuICBhZGRFbnRpdHkoZW50aXR5OiBJRW50aXR5KTogSUVudGl0eSB7XG4gICAgY29uc3QgcGFyZW50ID0gZW50aXR5LmdldFBhcmVudCgpXG5cbiAgICBpZiAoZW50aXR5LmlzQWRkZWRUb0VuZ2luZSgpKSB7XG4gICAgICByZXR1cm4gZW50aXR5XG4gICAgfVxuXG4gICAgZW50aXR5LmV2ZW50TWFuYWdlciA9IHRoaXMuZXZlbnRNYW5hZ2VyXG4gICAgOyhlbnRpdHkgYXMgRW50aXR5KS5lbmdpbmUgPSB0aGlzXG5cbiAgICB0aGlzLl9lbnRpdGllc1tlbnRpdHkudXVpZF0gPSBlbnRpdHlcblxuICAgIHRoaXMuY2hlY2tSZXF1aXJlbWVudHNBbmRBZGQoZW50aXR5KVxuXG4gICAgaWYgKCFwYXJlbnQpIHtcbiAgICAgIGVudGl0eS5zZXRQYXJlbnQodGhpcy5yb290RW50aXR5KVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIXBhcmVudC5pc0FkZGVkVG9FbmdpbmUoKSAmJiBwYXJlbnQgIT09IHRoaXMucm9vdEVudGl0eSkge1xuICAgICAgICBsb2coXG4gICAgICAgICAgJ0VuZ2luZTogd2FybmluZywgYWRkZWQgYW4gZW50aXR5IHdpdGggYSBwYXJlbnQgbm90IHByZXNlbnQgaW4gdGhlIGVuZ2luZS4gUGFyZW50IGlkOiAnICtcbiAgICAgICAgICAgIHBhcmVudC51dWlkXG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBlbnRpdHkuYWxpdmUgPSB0cnVlXG5cbiAgICBmb3IgKGNvbnN0IGkgaW4gZW50aXR5LmNoaWxkcmVuKSB7XG4gICAgICBjb25zdCBjaGlsZCA9IGVudGl0eS5jaGlsZHJlbltpXVxuICAgICAgaWYgKGNoaWxkKSB7XG4gICAgICAgIGlmICghY2hpbGQuaXNBZGRlZFRvRW5naW5lKCkpIHtcbiAgICAgICAgICB0aGlzLmFkZEVudGl0eShjaGlsZClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBlbnRpdHlcbiAgfVxuXG4gIHJlbW92ZUVudGl0eShlbnRpdHk6IElFbnRpdHkpOiBib29sZWFuIHtcbiAgICBjb25zdCBpZCA9IGVudGl0eS51dWlkXG5cbiAgICBpZiAoZW50aXR5LmlzQWRkZWRUb0VuZ2luZSgpKSB7XG4gICAgICBmb3IgKGNvbnN0IGNvbXBvbmVudE5hbWUgaW4gZW50aXR5LmNvbXBvbmVudHMpIHtcbiAgICAgICAgY29uc3QgY29tcG9uZW50R3JvdXBzID0gdGhpcy5fY29tcG9uZW50R3JvdXBzW2NvbXBvbmVudE5hbWVdXG5cbiAgICAgICAgaWYgKGNvbXBvbmVudEdyb3Vwcykge1xuICAgICAgICAgIGZvciAoY29uc3QgZ3JvdXBJbmRleCBpbiBjb21wb25lbnRHcm91cHMpIHtcbiAgICAgICAgICAgIGNvbXBvbmVudEdyb3Vwc1tncm91cEluZGV4XS5yZW1vdmVFbnRpdHkoZW50aXR5KVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGRlbGV0ZSB0aGlzLmVudGl0eUxpc3RzW2NvbXBvbmVudE5hbWVdW2lkXVxuICAgICAgfVxuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc2ltcGxlU3lzdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBzeXN0ZW0gPSB0aGlzLnNpbXBsZVN5c3RlbXNbaV1cblxuICAgICAgICBpZiAoc3lzdGVtLm9uUmVtb3ZlRW50aXR5KSB7XG4gICAgICAgICAgc3lzdGVtLm9uUmVtb3ZlRW50aXR5KGVudGl0eSlcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKGNvbnN0IGkgaW4gZW50aXR5LmNoaWxkcmVuKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkID0gZW50aXR5LmNoaWxkcmVuW2ldXG4gICAgICAgIGlmIChjaGlsZCkge1xuICAgICAgICAgIHRoaXMucmVtb3ZlRW50aXR5KGNoaWxkKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGVudGl0eS5hbGl2ZSA9IGZhbHNlXG4gICAgICBlbnRpdHkuZXZlbnRNYW5hZ2VyID0gbnVsbFxuXG4gICAgICBkZWxldGUgdGhpcy5fZW50aXRpZXNbaWRdXG5cbiAgICAgIHJldHVybiB0cnVlXG4gICAgfSBlbHNlIHtcbiAgICAgIGxvZygnRW5naW5lOiBUcnlpbmcgdG8gcmVtb3ZlIG5vbiBleGlzdGVudCBlbnRpdHkgZnJvbSBlbmdpbmUuJylcbiAgICAgIGlmICghZW50aXR5LmlzQWRkZWRUb0VuZ2luZSgpKSB7XG4gICAgICAgIGxvZyhcbiAgICAgICAgICBgRW5naW5lOiBFbnRpdHkgXCIke2VudGl0eS51dWlkfVwiIGhhcyBub3QgYmVlbiBhZGRlZCB0byBhbnkgZW5naW5lIHlldC5gXG4gICAgICAgIClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvZygnRW5naW5lOiBFbnRpdHkgaWQ6ICcgKyBpZClcbiAgICAgIH1cbiAgICAgIGxvZyhcIkVuZ2luZTogRW50aXR5J3MgY29tcG9uZW50czpcIilcbiAgICAgIGZvciAoY29uc3QgY29tcG9uZW50TmFtZSBpbiBlbnRpdHkuY29tcG9uZW50cykge1xuICAgICAgICBsb2coY29tcG9uZW50TmFtZSlcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfVxuXG4gIGFkZFN5c3RlbShzeXN0ZW06IElTeXN0ZW0sIHByaW9yaXR5OiBudW1iZXIgPSAwKSB7XG4gICAgaWYgKHRoaXMuYWRkZWRTeXN0ZW1zLmluZGV4T2Yoc3lzdGVtKSAhPT0gLTEpIHtcbiAgICAgIGxvZygnRW5naW5lOiBUcnlpbmcgdG8gYWRkIGEgc3lzdGVtIHRoYXQgaXMgYWxyZWFkeSBhZGRlZC4gQWJvcnRpbmcnKVxuICAgICAgcmV0dXJuIHN5c3RlbVxuICAgIH1cblxuICAgIGlmICh0aGlzLnN5c3RlbXMubGVuZ3RoID4gMCkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnN5c3RlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgZW50cnkgPSB0aGlzLnN5c3RlbXNbaV1cbiAgICAgICAgY29uc3QgaXNMYXN0ID0gaSA9PT0gdGhpcy5zeXN0ZW1zLmxlbmd0aCAtIDFcblxuICAgICAgICBpZiAoZW50cnkucHJpb3JpdHkgPiBwcmlvcml0eSkge1xuICAgICAgICAgIHRoaXMuYWRkZWRTeXN0ZW1zLnB1c2goc3lzdGVtKVxuICAgICAgICAgIHRoaXMuc3lzdGVtcy5zcGxpY2UoaSwgMCwgeyBzeXN0ZW0sIHByaW9yaXR5IH0pXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfSBlbHNlIGlmIChpc0xhc3QpIHtcbiAgICAgICAgICB0aGlzLmFkZGVkU3lzdGVtcy5wdXNoKHN5c3RlbSlcbiAgICAgICAgICB0aGlzLnN5c3RlbXMuc3BsaWNlKGkgKyAxLCAwLCB7IHN5c3RlbSwgcHJpb3JpdHkgfSlcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYWRkZWRTeXN0ZW1zLnB1c2goc3lzdGVtKVxuICAgICAgdGhpcy5zeXN0ZW1zLnNwbGljZSgxLCAwLCB7IHN5c3RlbSwgcHJpb3JpdHkgfSlcbiAgICB9XG5cbiAgICB0aGlzLnJlZ2lzdGVyU3lzdGVtKHN5c3RlbSlcblxuICAgIHJldHVybiBzeXN0ZW1cbiAgfVxuXG4gIHJlbW92ZVN5c3RlbShzeXN0ZW06IElTeXN0ZW0pIHtcbiAgICBjb25zdCBpZHggPSB0aGlzLmFkZGVkU3lzdGVtcy5pbmRleE9mKHN5c3RlbSlcblxuICAgIGlmIChpZHggIT09IC0xKSB7XG4gICAgICBzeXN0ZW0uYWN0aXZlID0gZmFsc2VcblxuICAgICAgaWYgKHN5c3RlbS5kZWFjdGl2YXRlKSB7XG4gICAgICAgIHN5c3RlbS5kZWFjdGl2YXRlKClcbiAgICAgIH1cblxuICAgICAgdGhpcy5hZGRlZFN5c3RlbXMuc3BsaWNlKGlkeCwgMSlcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnN5c3RlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3Qgc3lzID0gdGhpcy5zeXN0ZW1zW2ldLnN5c3RlbVxuICAgICAgICBpZiAoc3lzID09PSBzeXN0ZW0pIHtcbiAgICAgICAgICB0aGlzLnN5c3RlbXMuc3BsaWNlKGksIDEpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgdXBkYXRlKGR0OiBudW1iZXIpIHtcbiAgICBmb3IgKGNvbnN0IGkgaW4gdGhpcy5zeXN0ZW1zKSB7XG4gICAgICBjb25zdCBzeXN0ZW0gPSB0aGlzLnN5c3RlbXNbaV0uc3lzdGVtXG4gICAgICBpZiAoc3lzdGVtLmFjdGl2ZSAmJiBzeXN0ZW0udXBkYXRlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgc3lzdGVtLnVwZGF0ZShkdClcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIFRPRE86IGUgbWF5IG5vdCBiZSBhbiBFcnJvclxuICAgICAgICAgIGVycm9yKGUgYXMgYW55KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBnZXRFbnRpdGllc1dpdGhDb21wb25lbnQoY29tcG9uZW50OiBzdHJpbmcpOiBSZWNvcmQ8c3RyaW5nLCBhbnk+XG4gIGdldEVudGl0aWVzV2l0aENvbXBvbmVudChcbiAgICBjb21wb25lbnQ6IENvbXBvbmVudENvbnN0cnVjdG9yPGFueT5cbiAgKTogUmVjb3JkPHN0cmluZywgSUVudGl0eT5cbiAgZ2V0RW50aXRpZXNXaXRoQ29tcG9uZW50KFxuICAgIGNvbXBvbmVudDogQ29tcG9uZW50Q29uc3RydWN0b3I8YW55PiB8IHN0cmluZ1xuICApOiBSZWNvcmQ8c3RyaW5nLCBJRW50aXR5PiB7XG4gICAgY29uc3QgY29tcG9uZW50TmFtZSA9XG4gICAgICB0eXBlb2YgY29tcG9uZW50ID09PSAnc3RyaW5nJyA/IGNvbXBvbmVudCA6IGdldENvbXBvbmVudE5hbWUoY29tcG9uZW50KVxuXG4gICAgaWYgKGNvbXBvbmVudE5hbWUgaW4gdGhpcy5lbnRpdHlMaXN0cykge1xuICAgICAgcmV0dXJuIHRoaXMuZW50aXR5TGlzdHNbY29tcG9uZW50TmFtZV1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICh0aGlzLmVudGl0eUxpc3RzW2NvbXBvbmVudE5hbWVdID0ge30pXG4gICAgfVxuICB9XG5cbiAgcmVnaXN0ZXJDb21wb25lbnQoY29tcG9uZW50OiBEaXNwb3NhYmxlQ29tcG9uZW50TGlrZSkge1xuICAgIGNvbnN0IGlkID0gZ2V0Q29tcG9uZW50SWQoY29tcG9uZW50KVxuICAgIGNvbnN0IG5hbWUgPSBnZXRDb21wb25lbnROYW1lKGNvbXBvbmVudClcbiAgICBjb25zdCBjbGFzc0lkID0gZ2V0Q29tcG9uZW50Q2xhc3NJZChjb21wb25lbnQpXG4gICAgdGhpcy5fZGlzcG9zYWJsZUNvbXBvbmVudHNbaWRdID0gY29tcG9uZW50XG4gICAgaWYgKGNsYXNzSWQgIT09IG51bGwpIHtcbiAgICAgIHRoaXMuZXZlbnRNYW5hZ2VyLmZpcmVFdmVudChcbiAgICAgICAgbmV3IERpc3Bvc2FibGVDb21wb25lbnRDcmVhdGVkKGlkLCBuYW1lLCBjbGFzc0lkKVxuICAgICAgKVxuICAgICAgdGhpcy5ldmVudE1hbmFnZXIuZmlyZUV2ZW50KG5ldyBEaXNwb3NhYmxlQ29tcG9uZW50VXBkYXRlZChpZCwgY29tcG9uZW50KSlcbiAgICB9XG4gIH1cblxuICBkaXNwb3NlQ29tcG9uZW50KGNvbXBvbmVudDogRGlzcG9zYWJsZUNvbXBvbmVudExpa2UpIHtcbiAgICBjb25zdCBpZCA9IGdldENvbXBvbmVudElkKGNvbXBvbmVudClcblxuICAgIGlmIChkZWxldGUgdGhpcy5fZGlzcG9zYWJsZUNvbXBvbmVudHNbaWRdKSB7XG4gICAgICB0aGlzLmV2ZW50TWFuYWdlci5maXJlRXZlbnQobmV3IERpc3Bvc2FibGVDb21wb25lbnRSZW1vdmVkKGlkKSlcblxuICAgICAgaWYgKGNvbXBvbmVudC5vbkRpc3Bvc2UpIHtcbiAgICAgICAgY29tcG9uZW50Lm9uRGlzcG9zZSgpXG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIHVwZGF0ZUNvbXBvbmVudChjb21wb25lbnQ6IERpc3Bvc2FibGVDb21wb25lbnRMaWtlKSB7XG4gICAgdGhpcy5ldmVudE1hbmFnZXIuZmlyZUV2ZW50KFxuICAgICAgbmV3IERpc3Bvc2FibGVDb21wb25lbnRVcGRhdGVkKGdldENvbXBvbmVudElkKGNvbXBvbmVudCksIGNvbXBvbmVudClcbiAgICApXG4gIH1cblxuICBnZXRDb21wb25lbnRHcm91cCguLi5yZXF1aXJlczogQ29tcG9uZW50Q29uc3RydWN0b3I8YW55PltdKSB7XG4gICAgbGV0IGNvbXBvbmVudEdyb3VwID0gdW5kZWZpbmVkXG5cbiAgICAvLyBSZXR1cm4gYW4gYWxyZWFkeSBjcmVhdGVkIGNvbXBvbmVudC1ncm91cCBpZiBpdCBhbHJlYWR5IGV4aXN0c1xuICAgIGlmIChyZXF1aXJlcy5sZW5ndGggPiAwKSB7XG4gICAgICAvLyAxLiBnZXQgY29tcG9uZW50IGdyb3VwcyBmb3IgZmlyc3QgcmVxdWlyZVxuICAgICAgY29uc3QgY29tcG9uZW50R3JvdXBzID1cbiAgICAgICAgdGhpcy5fY29tcG9uZW50R3JvdXBzW2dldENvbXBvbmVudE5hbWUocmVxdWlyZXNbMF0pXVxuXG4gICAgICBpZiAoY29tcG9uZW50R3JvdXBzKSB7XG4gICAgICAgIGNvbnN0IGNvbXBvbmVudHMgPSByZXF1aXJlcy5zbGljZSgpXG5cbiAgICAgICAgLy8gMi4gc2VhcmNoIGZvciBhIGNvbXBvbmVudCBncm91cCB0aGF0IGhhcyBhbGwgdGhlIHNhbWUgcmVxdWlyZW1lbnRzXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29tcG9uZW50R3JvdXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgY29uc3QgdHJhdmVyc2VkQ29tcG9uZW50R3JvdXAgPSBjb21wb25lbnRHcm91cHNbaV1cblxuICAgICAgICAgIGlmIChjb21wb25lbnRzLmxlbmd0aCA9PT0gdHJhdmVyc2VkQ29tcG9uZW50R3JvdXAucmVxdWlyZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNvbXBvbmVudHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIHRyYXZlcnNlZENvbXBvbmVudEdyb3VwLnJlcXVpcmVzLmluZGV4T2YoY29tcG9uZW50c1tqXSkgPT09IC0xXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICBicmVha1xuXG4gICAgICAgICAgICAgIGlmIChqID09PSBjb21wb25lbnRzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICBjb21wb25lbnRHcm91cCA9IHRyYXZlcnNlZENvbXBvbmVudEdyb3VwXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNvbXBvbmVudEdyb3VwKSBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb21wb25lbnRHcm91cCkge1xuICAgICAgLy8gMy4gRm91bmQgYW4gZXhpc3RlbnQgY29tcG9uZW50IGdyb3VwIHdpdGggdGhlIGV4YWN0IHNhbWUgcmVxdWlyZW1lbnRzXG4gICAgICByZXR1cm4gY29tcG9uZW50R3JvdXBcbiAgICB9XG5cbiAgICAvLyBPdGhlcndpc2UgY3JlYXRlIGFuZCBzdG9yZSBpdFxuICAgIGNvbXBvbmVudEdyb3VwID0gbmV3IENvbXBvbmVudEdyb3VwKC4uLnJlcXVpcmVzKVxuXG4gICAgY29tcG9uZW50R3JvdXAuYWN0aXZlID0gdHJ1ZVxuXG4gICAgY29uc3QgcmVxdWlyZXNOYW1lcyA9IGNvbXBvbmVudEdyb3VwLnJlcXVpcmVzTmFtZXNcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVxdWlyZXNOYW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgY29tcG9uZW50TmFtZSA9IHJlcXVpcmVzTmFtZXNbaV1cblxuICAgICAgbGV0IGNvbXBvbmVudEdyb3VwcyA9IHRoaXMuX2NvbXBvbmVudEdyb3Vwc1tjb21wb25lbnROYW1lXVxuXG4gICAgICBpZiAoIWNvbXBvbmVudEdyb3Vwcykge1xuICAgICAgICB0aGlzLl9jb21wb25lbnRHcm91cHNbY29tcG9uZW50TmFtZV0gPSBjb21wb25lbnRHcm91cHMgPSBbXVxuICAgICAgfVxuXG4gICAgICBpZiAoY29tcG9uZW50R3JvdXBzLmluZGV4T2YoY29tcG9uZW50R3JvdXApID09PSAtMSkge1xuICAgICAgICBjb21wb25lbnRHcm91cHMucHVzaChjb21wb25lbnRHcm91cClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IGVudGl0eUlkIGluIHRoaXMuX2VudGl0aWVzKSB7XG4gICAgICB0aGlzLmNoZWNrUmVxdWlyZW1lbnRzKHRoaXMuX2VudGl0aWVzW2VudGl0eUlkXSwgY29tcG9uZW50R3JvdXApXG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbXBvbmVudEdyb3VwXG4gIH1cblxuICByZW1vdmVDb21wb25lbnRHcm91cChjb21wb25lbnRHcm91cDogQ29tcG9uZW50R3JvdXApIHtcbiAgICBpZiAoY29tcG9uZW50R3JvdXAuYWN0aXZlKSB7XG4gICAgICBjb21wb25lbnRHcm91cC5hY3RpdmUgPSBmYWxzZVxuICAgICAgY29uc3QgcmVxdWlyZXNOYW1lcyA9IGNvbXBvbmVudEdyb3VwLnJlcXVpcmVzTmFtZXNcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVxdWlyZXNOYW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBjb21wb25lbnROYW1lID0gcmVxdWlyZXNOYW1lc1tpXVxuXG4gICAgICAgIGNvbnN0IGNvbXBvbmVudEdyb3VwcyA9IHRoaXMuX2NvbXBvbmVudEdyb3Vwc1tjb21wb25lbnROYW1lXVxuXG4gICAgICAgIGlmIChjb21wb25lbnRHcm91cHMpIHtcbiAgICAgICAgICBjb25zdCBpZHggPSBjb21wb25lbnRHcm91cHMuaW5kZXhPZihjb21wb25lbnRHcm91cClcbiAgICAgICAgICBpZiAoaWR4ICE9PSAtMSkge1xuICAgICAgICAgICAgY29tcG9uZW50R3JvdXBzLnNwbGljZShpZHgsIDEpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIHByaXZhdGUgcmVnaXN0ZXJTeXN0ZW0oc3lzdGVtOiBJU3lzdGVtKSB7XG4gICAgc3lzdGVtLmFjdGl2ZSA9IHRydWVcblxuICAgIGlmIChzeXN0ZW0uYWN0aXZhdGUpIHtcbiAgICAgIHN5c3RlbS5hY3RpdmF0ZSh0aGlzKVxuICAgIH1cblxuICAgIHRoaXMuc2ltcGxlU3lzdGVtcy5wdXNoKHN5c3RlbSlcbiAgfVxuXG4gIHByaXZhdGUgY2hlY2tSZXF1aXJlbWVudHNBbmRBZGQoZW50aXR5OiBJRW50aXR5KSB7XG4gICAgaWYgKCFlbnRpdHkuaXNBZGRlZFRvRW5naW5lKCkpIHJldHVyblxuXG4gICAgZm9yIChjb25zdCBjb21wb25lbnROYW1lIGluIGVudGl0eS5jb21wb25lbnRzKSB7XG4gICAgICBpZiAoIShjb21wb25lbnROYW1lIGluIHRoaXMuZW50aXR5TGlzdHMpKSB7XG4gICAgICAgIHRoaXMuZW50aXR5TGlzdHNbY29tcG9uZW50TmFtZV0gPSB7fVxuICAgICAgfVxuXG4gICAgICB0aGlzLmVudGl0eUxpc3RzW2NvbXBvbmVudE5hbWVdW2VudGl0eS51dWlkXSA9IGVudGl0eVxuXG4gICAgICBjb25zdCBjb21wb25lbnRHcm91cHMgPSB0aGlzLl9jb21wb25lbnRHcm91cHNbY29tcG9uZW50TmFtZV1cblxuICAgICAgaWYgKGNvbXBvbmVudEdyb3Vwcykge1xuICAgICAgICBmb3IgKGNvbnN0IHN5c3RlbUluZGV4IGluIGNvbXBvbmVudEdyb3Vwcykge1xuICAgICAgICAgIHRoaXMuY2hlY2tSZXF1aXJlbWVudHMoZW50aXR5LCBjb21wb25lbnRHcm91cHNbc3lzdGVtSW5kZXhdKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnNpbXBsZVN5c3RlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHN5c3RlbSA9IHRoaXMuc2ltcGxlU3lzdGVtc1tpXVxuXG4gICAgICBpZiAoc3lzdGVtLm9uQWRkRW50aXR5KSB7XG4gICAgICAgIHN5c3RlbS5vbkFkZEVudGl0eShlbnRpdHkpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBjaGVja1JlcXVpcmVtZW50cyhlbnRpdHk6IElFbnRpdHksIHN5c3RlbTogQ29tcG9uZW50R3JvdXApIHtcbiAgICBpZiAoc3lzdGVtLm1lZXRzUmVxdWlyZW1lbnRzKGVudGl0eSkpIHtcbiAgICAgIGlmICghc3lzdGVtLmhhc0VudGl0eShlbnRpdHkpKSB7XG4gICAgICAgIHN5c3RlbS5hZGRFbnRpdHkoZW50aXR5KVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoc3lzdGVtLmhhc0VudGl0eShlbnRpdHkpKSB7XG4gICAgICAgIHN5c3RlbS5yZW1vdmVFbnRpdHkoZW50aXR5KVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY29tcG9uZW50QWRkZWRIYW5kbGVyKGV2ZW50OiBDb21wb25lbnRBZGRlZCkge1xuICAgIGNvbnN0IHsgZW50aXR5LCBjb21wb25lbnROYW1lIH0gPSBldmVudFxuXG4gICAgaWYgKCFlbnRpdHkuaXNBZGRlZFRvRW5naW5lKCkpIHJldHVyblxuXG4gICAgaWYgKCF0aGlzLmVudGl0eUxpc3RzW2NvbXBvbmVudE5hbWVdKSB7XG4gICAgICB0aGlzLmVudGl0eUxpc3RzW2NvbXBvbmVudE5hbWVdID0geyBbZW50aXR5LnV1aWRdOiBlbnRpdHkgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVudGl0eUxpc3RzW2NvbXBvbmVudE5hbWVdW2VudGl0eS51dWlkXSA9IGVudGl0eVxuICAgIH1cblxuICAgIGNvbnN0IGNvbXBvbmVudEdyb3VwcyA9IHRoaXMuX2NvbXBvbmVudEdyb3Vwc1tjb21wb25lbnROYW1lXVxuXG4gICAgaWYgKGNvbXBvbmVudEdyb3Vwcykge1xuICAgICAgZm9yIChjb25zdCBpIGluIGNvbXBvbmVudEdyb3Vwcykge1xuICAgICAgICB0aGlzLmNoZWNrUmVxdWlyZW1lbnRzKGVudGl0eSwgY29tcG9uZW50R3JvdXBzW2ldKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY29tcG9uZW50UmVtb3ZlZEhhbmRsZXIoZXZlbnQ6IENvbXBvbmVudFJlbW92ZWQpIHtcbiAgICAvLyBJbiBjYXNlIGEgc2luZ2xlIGNvbXBvbmVudCBnZXRzIHJlbW92ZWQgZnJvbSBhbiBlbnRpdHksIHdlIGluZm9ybVxuICAgIC8vIGFsbCBzeXN0ZW1zIHRoYXQgdGhpcyBlbnRpdHkgbG9zdCB0aGlzIHNwZWNpZmljIGNvbXBvbmVudC5cbiAgICBjb25zdCB7IGVudGl0eSwgY29tcG9uZW50TmFtZSB9ID0gZXZlbnRcblxuICAgIGlmICghZW50aXR5LmlzQWRkZWRUb0VuZ2luZSgpKSByZXR1cm5cblxuICAgIGRlbGV0ZSB0aGlzLmVudGl0eUxpc3RzW2NvbXBvbmVudE5hbWVdW2VudGl0eS51dWlkXVxuXG4gICAgY29uc3QgY29tcG9uZW50R3JvdXBzID0gdGhpcy5fY29tcG9uZW50R3JvdXBzW2NvbXBvbmVudE5hbWVdXG5cbiAgICBpZiAoY29tcG9uZW50R3JvdXBzKSB7XG4gICAgICBmb3IgKGNvbnN0IGkgaW4gY29tcG9uZW50R3JvdXBzKSB7XG4gICAgICAgIHRoaXMuY2hlY2tSZXF1aXJlbWVudHMoZW50aXR5LCBjb21wb25lbnRHcm91cHNbaV0pXG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBlcnJvciB9IGZyb20gJy4vaGVscGVycydcblxuZGVjbGFyZSBsZXQgUHJvbWlzZTogYW55XG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgdHlwZSBUYXNrUmVzdWx0PFQ+ID0gUHJvbWlzZTxUPiAmIHtcbiAgaXNDb21wbGV0ZTogYm9vbGVhblxuICBkaWRGYWlsPzogYm9vbGVhblxuICBlcnJvcj86IEVycm9yXG4gIHJlc3VsdD86IFRcbn1cblxuY29uc3QgX2RlZmVyID0gUHJvbWlzZS5yZXNvbHZlKCkudGhlbi5iaW5kKFByb21pc2UucmVzb2x2ZSgpKVxuXG4vKipcbiAqIEV4ZWN1dGVzIGFuIGFzeW5jaHJvbm91cyB0YXNrXG4gKiBAcGFyYW0gdGFzayAtIHRoZSB0YXNrIHRvIGV4ZWN1dGVcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4ZWN1dGVUYXNrPFQ+KHRhc2s6ICgpID0+IFByb21pc2U8VD4pOiBUYXNrUmVzdWx0PFQ+IHtcbiAgY29uc3QgcmVzdWx0OiBUYXNrUmVzdWx0PFQ+ID0gX2RlZmVyKHRhc2spXG5cbiAgcmVzdWx0LmlzQ29tcGxldGUgPSBmYWxzZVxuXG4gIHJlc3VsdFxuICAgIC50aGVuKCgkKSA9PiB7XG4gICAgICByZXN1bHQuaXNDb21wbGV0ZSA9IHRydWVcbiAgICAgIHJlc3VsdC5yZXN1bHQgPSAkXG4gICAgICByZXN1bHQuZGlkRmFpbCA9IGZhbHNlXG4gICAgfSlcbiAgICAuY2F0Y2goKCQpID0+IHtcbiAgICAgIHJlc3VsdC5pc0NvbXBsZXRlID0gdHJ1ZVxuICAgICAgcmVzdWx0LmVycm9yID0gJFxuICAgICAgcmVzdWx0LmRpZEZhaWwgPSB0cnVlXG4gICAgICBlcnJvcignZXhlY3V0ZVRhc2s6IEZBSUxFRCAnICsgJC50b1N0cmluZygpLCAkKVxuICAgIH0pXG5cbiAgcmV0dXJuIHJlc3VsdFxufVxuIiwiaW1wb3J0IHsgZXhlY3V0ZVRhc2sgfSBmcm9tICcuL1Rhc2snXG5cbmRlY2xhcmUgbGV0IFByb21pc2U6IGFueVxuXG4vKipcbiAqIEEgY2xhc3Mgc2VydmVzIGFzIGEgbWVkaXVtIGJldHdlZW4gdGhlIG9ic2VydmFibGUgYW5kIGl0cyBvYnNlcnZlcnNcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIE9ic2VydmVyRXZlbnRTdGF0ZSB7XG4gIC8qKlxuICAgKiBBbiBPYnNlcnZlciBjYW4gc2V0IHRoaXMgcHJvcGVydHkgdG8gdHJ1ZSB0byBwcmV2ZW50IHN1YnNlcXVlbnQgb2JzZXJ2ZXJzIG9mIGJlaW5nIG5vdGlmaWVkXG4gICAqL1xuICBwdWJsaWMgc2tpcE5leHRPYnNlcnZlcnMhOiBib29sZWFuXG5cbiAgLyoqXG4gICAqIEdldCB0aGUgbWFzayB2YWx1ZSB0aGF0IHdlcmUgdXNlZCB0byB0cmlnZ2VyIHRoZSBldmVudCBjb3JyZXNwb25kaW5nIHRvIHRoaXMgRXZlbnRTdGF0ZSBvYmplY3RcbiAgICovXG4gIHB1YmxpYyBtYXNrITogbnVtYmVyXG5cbiAgLyoqXG4gICAqIFRoZSBvYmplY3QgdGhhdCBvcmlnaW5hbGx5IG5vdGlmaWVkIHRoZSBldmVudFxuICAgKi9cbiAgcHVibGljIHRhcmdldD86IGFueVxuXG4gIC8qKlxuICAgKiBUaGUgY3VycmVudCBvYmplY3QgaW4gdGhlIGJ1YmJsaW5nIHBoYXNlXG4gICAqL1xuICBwdWJsaWMgY3VycmVudFRhcmdldD86IGFueVxuXG4gIC8qKlxuICAgKiBUaGlzIHdpbGwgYmUgcG9wdWxhdGVkIHdpdGggdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgbGFzdCBmdW5jdGlvbiB0aGF0IHdhcyBleGVjdXRlZC5cbiAgICogSWYgaXQgaXMgdGhlIGZpcnN0IGZ1bmN0aW9uIGluIHRoZSBjYWxsYmFjayBjaGFpbiBpdCB3aWxsIGJlIHRoZSBldmVudCBkYXRhLlxuICAgKi9cbiAgcHVibGljIGxhc3RSZXR1cm5WYWx1ZT86IGFueVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgRXZlbnRTdGF0ZVxuICAgKiBAcGFyYW0gbWFzayAtIGRlZmluZXMgdGhlIG1hc2sgYXNzb2NpYXRlZCB3aXRoIHRoaXMgc3RhdGVcbiAgICogQHBhcmFtIHNraXBOZXh0T2JzZXJ2ZXJzIC0gZGVmaW5lcyBhIGZsYWcgd2hpY2ggd2lsbCBpbnN0cnVjdCB0aGUgb2JzZXJ2YWJsZSB0byBza2lwIGZvbGxvd2luZyBvYnNlcnZlcnMgd2hlbiBzZXQgdG8gdHJ1ZVxuICAgKiBAcGFyYW0gdGFyZ2V0IC0gZGVmaW5lcyB0aGUgb3JpZ2luYWwgdGFyZ2V0IG9mIHRoZSBzdGF0ZVxuICAgKiBAcGFyYW0gY3VycmVudFRhcmdldCAtIGRlZmluZXMgdGhlIGN1cnJlbnQgdGFyZ2V0IG9mIHRoZSBzdGF0ZVxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgbWFzazogbnVtYmVyLFxuICAgIHNraXBOZXh0T2JzZXJ2ZXJzID0gZmFsc2UsXG4gICAgdGFyZ2V0PzogYW55LFxuICAgIGN1cnJlbnRUYXJnZXQ/OiBhbnlcbiAgKSB7XG4gICAgdGhpcy5pbml0YWxpemUobWFzaywgc2tpcE5leHRPYnNlcnZlcnMsIHRhcmdldCwgY3VycmVudFRhcmdldClcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplIHRoZSBjdXJyZW50IGV2ZW50IHN0YXRlXG4gICAqIEBwYXJhbSBtYXNrIC0gZGVmaW5lcyB0aGUgbWFzayBhc3NvY2lhdGVkIHdpdGggdGhpcyBzdGF0ZVxuICAgKiBAcGFyYW0gc2tpcE5leHRPYnNlcnZlcnMgLSBkZWZpbmVzIGEgZmxhZyB3aGljaCB3aWxsIGluc3RydWN0IHRoZSBvYnNlcnZhYmxlIHRvIHNraXAgZm9sbG93aW5nIG9ic2VydmVycyB3aGVuIHNldCB0byB0cnVlXG4gICAqIEBwYXJhbSB0YXJnZXQgLSBkZWZpbmVzIHRoZSBvcmlnaW5hbCB0YXJnZXQgb2YgdGhlIHN0YXRlXG4gICAqIEBwYXJhbSBjdXJyZW50VGFyZ2V0IC0gZGVmaW5lcyB0aGUgY3VycmVudCB0YXJnZXQgb2YgdGhlIHN0YXRlXG4gICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IGV2ZW50IHN0YXRlXG4gICAqL1xuICBwdWJsaWMgaW5pdGFsaXplKFxuICAgIG1hc2s6IG51bWJlcixcbiAgICBza2lwTmV4dE9ic2VydmVycyA9IGZhbHNlLFxuICAgIHRhcmdldD86IGFueSxcbiAgICBjdXJyZW50VGFyZ2V0PzogYW55XG4gICk6IE9ic2VydmVyRXZlbnRTdGF0ZSB7XG4gICAgdGhpcy5tYXNrID0gbWFza1xuICAgIHRoaXMuc2tpcE5leHRPYnNlcnZlcnMgPSBza2lwTmV4dE9ic2VydmVyc1xuICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0XG4gICAgdGhpcy5jdXJyZW50VGFyZ2V0ID0gY3VycmVudFRhcmdldFxuICAgIHJldHVybiB0aGlzXG4gIH1cbn1cblxuLyoqXG4gKiBSZXByZXNlbnQgYW4gT2JzZXJ2ZXIgcmVnaXN0ZXJlZCB0byBhIGdpdmVuIE9ic2VydmFibGUgb2JqZWN0LlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgT2JzZXJ2ZXI8VD4ge1xuICAvKipcbiAgICogR2V0cyBvciBzZXRzIGEgcHJvcGVydHkgZGVmaW5pbmcgdGhhdCB0aGUgb2JzZXJ2ZXIgYXMgdG8gYmUgdW5yZWdpc3RlcmVkIGFmdGVyIHRoZSBuZXh0IG5vdGlmaWNhdGlvblxuICAgKi9cbiAgcHVibGljIHVucmVnaXN0ZXJPbk5leHRDYWxsID0gZmFsc2VcblxuICAvKiogRm9yIGludGVybmFsIHVzYWdlICovXG4gIHB1YmxpYyBfd2lsbEJlVW5yZWdpc3RlcmVkID0gZmFsc2VcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBvYnNlcnZlclxuICAgKiBAcGFyYW0gY2FsbGJhY2sgLSBkZWZpbmVzIHRoZSBjYWxsYmFjayB0byBjYWxsIHdoZW4gdGhlIG9ic2VydmVyIGlzIG5vdGlmaWVkXG4gICAqIEBwYXJhbSBtYXNrIC0gZGVmaW5lcyB0aGUgbWFzayBvZiB0aGUgb2JzZXJ2ZXIgKHVzZWQgdG8gZmlsdGVyIG5vdGlmaWNhdGlvbnMpXG4gICAqIEBwYXJhbSBzY29wZSAtIGRlZmluZXMgdGhlIGN1cnJlbnQgc2NvcGUgdXNlZCB0byByZXN0b3JlIHRoZSBKUyBjb250ZXh0XG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBjYWxsYmFjayB0byBjYWxsIHdoZW4gdGhlIG9ic2VydmVyIGlzIG5vdGlmaWVkXG4gICAgICovXG4gICAgcHVibGljIGNhbGxiYWNrOiAoZXZlbnREYXRhOiBULCBldmVudFN0YXRlOiBPYnNlcnZlckV2ZW50U3RhdGUpID0+IHZvaWQsXG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgbWFzayBvZiB0aGUgb2JzZXJ2ZXIgKHVzZWQgdG8gZmlsdGVyIG5vdGlmaWNhdGlvbnMpXG4gICAgICovXG4gICAgcHVibGljIG1hc2s6IG51bWJlcixcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBjdXJyZW50IHNjb3BlIHVzZWQgdG8gcmVzdG9yZSB0aGUgSlMgY29udGV4dFxuICAgICAqL1xuICAgIHB1YmxpYyBzY29wZTogYW55ID0gbnVsbFxuICApIHt9XG59XG5cbi8qKlxuICogUmVwcmVzZW50IGEgbGlzdCBvZiBvYnNlcnZlcnMgcmVnaXN0ZXJlZCB0byBtdWx0aXBsZSBPYnNlcnZhYmxlcyBvYmplY3QuXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBNdWx0aU9ic2VydmVyPFQ+IHtcbiAgcHJpdmF0ZSBfb2JzZXJ2ZXJzOiBPYnNlcnZlcjxUPltdIHwgbnVsbCA9IG51bGxcbiAgcHJpdmF0ZSBfb2JzZXJ2YWJsZXM6IE9ic2VydmFibGU8VD5bXSB8IG51bGwgPSBudWxsXG5cbiAgLyoqXG4gICAqIFJhaXNlIGEgY2FsbGJhY2sgd2hlbiBvbmUgb2YgdGhlIG9ic2VydmFibGUgd2lsbCBub3RpZnlcbiAgICogQHBhcmFtIG9ic2VydmFibGVzIC0gZGVmaW5lcyBhIGxpc3Qgb2Ygb2JzZXJ2YWJsZXMgdG8gd2F0Y2hcbiAgICogQHBhcmFtIGNhbGxiYWNrIC0gZGVmaW5lcyB0aGUgY2FsbGJhY2sgdG8gY2FsbCBvbiBub3RpZmljYXRpb25cbiAgICogQHBhcmFtIG1hc2sgLSBkZWZpbmVzIHRoZSBtYXNrIHVzZWQgdG8gZmlsdGVyIG5vdGlmaWNhdGlvbnNcbiAgICogQHBhcmFtIHNjb3BlIC0gZGVmaW5lcyB0aGUgY3VycmVudCBzY29wZSB1c2VkIHRvIHJlc3RvcmUgdGhlIEpTIGNvbnRleHRcbiAgICogQHJldHVybnMgdGhlIG5ldyBNdWx0aU9ic2VydmVyXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIFdhdGNoPFQ+KFxuICAgIG9ic2VydmFibGVzOiBPYnNlcnZhYmxlPFQ+W10sXG4gICAgY2FsbGJhY2s6IChldmVudERhdGE6IFQsIGV2ZW50U3RhdGU6IE9ic2VydmVyRXZlbnRTdGF0ZSkgPT4gdm9pZCxcbiAgICBtYXNrOiBudW1iZXIgPSAtMSxcbiAgICBzY29wZTogYW55ID0gbnVsbFxuICApOiBNdWx0aU9ic2VydmVyPFQ+IHtcbiAgICBjb25zdCByZXN1bHQgPSBuZXcgTXVsdGlPYnNlcnZlcjxUPigpXG5cbiAgICByZXN1bHQuX29ic2VydmVycyA9IG5ldyBBcnJheTxPYnNlcnZlcjxUPj4oKVxuICAgIHJlc3VsdC5fb2JzZXJ2YWJsZXMgPSBvYnNlcnZhYmxlc1xuXG4gICAgZm9yIChjb25zdCBvYnNlcnZhYmxlIG9mIG9ic2VydmFibGVzKSB7XG4gICAgICBjb25zdCBvYnNlcnZlciA9IG9ic2VydmFibGUuYWRkKGNhbGxiYWNrLCBtYXNrLCBmYWxzZSwgc2NvcGUpXG4gICAgICBpZiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgcmVzdWx0Ll9vYnNlcnZlcnMucHVzaChvYnNlcnZlcilcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICAvKipcbiAgICogUmVsZWFzZSBhc3NvY2lhdGVkIHJlc291cmNlc1xuICAgKi9cbiAgcHVibGljIGRpc3Bvc2UoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX29ic2VydmVycyAmJiB0aGlzLl9vYnNlcnZhYmxlcykge1xuICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuX29ic2VydmVycy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgdGhpcy5fb2JzZXJ2YWJsZXNbaW5kZXhdLnJlbW92ZSh0aGlzLl9vYnNlcnZlcnNbaW5kZXhdKVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX29ic2VydmVycyA9IG51bGxcbiAgICB0aGlzLl9vYnNlcnZhYmxlcyA9IG51bGxcbiAgfVxufVxuXG4vKipcbiAqIFRoZSBPYnNlcnZhYmxlIGNsYXNzIGlzIGEgc2ltcGxlIGltcGxlbWVudGF0aW9uIG9mIHRoZSBPYnNlcnZhYmxlIHBhdHRlcm4uXG4gKlxuICogVGhlcmUncyBvbmUgc2xpZ2h0IHBhcnRpY3VsYXJpdHkgdGhvdWdoOiBhIGdpdmVuIE9ic2VydmFibGUgY2FuIG5vdGlmeSBpdHMgb2JzZXJ2ZXIgdXNpbmcgYSBwYXJ0aWN1bGFyIG1hc2sgdmFsdWUsIG9ubHkgdGhlIE9ic2VydmVycyByZWdpc3RlcmVkIHdpdGggdGhpcyBtYXNrIHZhbHVlIHdpbGwgYmUgbm90aWZpZWQuXG4gKiBUaGlzIGVuYWJsZSBhIG1vcmUgZmluZSBncmFpbmVkIGV4ZWN1dGlvbiB3aXRob3V0IGhhdmluZyB0byByZWx5IG9uIG11bHRpcGxlIGRpZmZlcmVudCBPYnNlcnZhYmxlIG9iamVjdHMuXG4gKiBGb3IgaW5zdGFuY2UgeW91IG1heSBoYXZlIGEgZ2l2ZW4gT2JzZXJ2YWJsZSB0aGF0IGhhdmUgZm91ciBkaWZmZXJlbnQgdHlwZXMgb2Ygbm90aWZpY2F0aW9uczogTW92ZSAobWFzayA9IDB4MDEpLCBTdG9wIChtYXNrID0gMHgwMiksIFR1cm4gUmlnaHQgKG1hc2sgPSAwWDA0KSwgVHVybiBMZWZ0IChtYXNrID0gMFgwOCkuXG4gKiBBIGdpdmVuIG9ic2VydmVyIGNhbiByZWdpc3RlciBpdHNlbGYgd2l0aCBvbmx5IE1vdmUgYW5kIFN0b3AgKG1hc2sgPSAweDAzKSwgdGhlbiBpdCB3aWxsIG9ubHkgYmUgbm90aWZpZWQgd2hlbiBvbmUgb2YgdGhlc2UgdHdvIG9jY3VycyBhbmQgd2lsbCBuZXZlciBiZSBmb3IgVHVybiBMZWZ0L1JpZ2h0LlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIE9ic2VydmFibGU8VD4ge1xuICBwcml2YXRlIF9vYnNlcnZlcnMgPSBuZXcgQXJyYXk8T2JzZXJ2ZXI8VD4+KClcblxuICBwcml2YXRlIF9ldmVudFN0YXRlOiBPYnNlcnZlckV2ZW50U3RhdGVcblxuICBwcml2YXRlIF9vbk9ic2VydmVyQWRkZWQ6IG51bGwgfCAoKG9ic2VydmVyOiBPYnNlcnZlcjxUPikgPT4gdm9pZCkgPSBudWxsXG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgb2JzZXJ2YWJsZVxuICAgKiBAcGFyYW0gb25PYnNlcnZlckFkZGVkIC0gZGVmaW5lcyBhIGNhbGxiYWNrIHRvIGNhbGwgd2hlbiBhIG5ldyBvYnNlcnZlciBpcyBhZGRlZFxuICAgKi9cbiAgY29uc3RydWN0b3Iob25PYnNlcnZlckFkZGVkPzogKG9ic2VydmVyOiBPYnNlcnZlcjxUPikgPT4gdm9pZCkge1xuICAgIHRoaXMuX2V2ZW50U3RhdGUgPSBuZXcgT2JzZXJ2ZXJFdmVudFN0YXRlKDApXG5cbiAgICBpZiAob25PYnNlcnZlckFkZGVkKSB7XG4gICAgICB0aGlzLl9vbk9ic2VydmVyQWRkZWQgPSBvbk9ic2VydmVyQWRkZWRcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IE9ic2VydmVyIHdpdGggdGhlIHNwZWNpZmllZCBjYWxsYmFja1xuICAgKiBAcGFyYW0gY2FsbGJhY2sgLSB0aGUgY2FsbGJhY2sgdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIGZvciB0aGF0IE9ic2VydmVyXG4gICAqIEBwYXJhbSBtYXNrIC0gdGhlIG1hc2sgdXNlZCB0byBmaWx0ZXIgb2JzZXJ2ZXJzXG4gICAqIEBwYXJhbSBpbnNlcnRGaXJzdCAtIGlmIHRydWUgdGhlIGNhbGxiYWNrIHdpbGwgYmUgaW5zZXJ0ZWQgYXQgdGhlIGZpcnN0IHBvc2l0aW9uLCBoZW5jZSBleGVjdXRlZCBiZWZvcmUgdGhlIG90aGVycyBvbmVzLiBJZiBmYWxzZSAoZGVmYXVsdCBiZWhhdmlvcikgdGhlIGNhbGxiYWNrIHdpbGwgYmUgaW5zZXJ0ZWQgYXQgdGhlIGxhc3QgcG9zaXRpb24sIGV4ZWN1dGVkIGFmdGVyIGFsbCB0aGUgb3RoZXJzIGFscmVhZHkgcHJlc2VudC5cbiAgICogQHBhcmFtIHNjb3BlIC0gb3B0aW9uYWwgc2NvcGUgZm9yIHRoZSBjYWxsYmFjayB0byBiZSBjYWxsZWQgZnJvbVxuICAgKiBAcGFyYW0gdW5yZWdpc3Rlck9uRmlyc3RDYWxsIC0gZGVmaW5lcyBpZiB0aGUgb2JzZXJ2ZXIgYXMgdG8gYmUgdW5yZWdpc3RlcmVkIGFmdGVyIHRoZSBuZXh0IG5vdGlmaWNhdGlvblxuICAgKiBAcmV0dXJucyB0aGUgbmV3IG9ic2VydmVyIGNyZWF0ZWQgZm9yIHRoZSBjYWxsYmFja1xuICAgKi9cbiAgcHVibGljIGFkZChcbiAgICBjYWxsYmFjazogKGV2ZW50RGF0YTogVCwgZXZlbnRTdGF0ZTogT2JzZXJ2ZXJFdmVudFN0YXRlKSA9PiB2b2lkLFxuICAgIG1hc2s6IG51bWJlciA9IC0xLFxuICAgIGluc2VydEZpcnN0ID0gZmFsc2UsXG4gICAgc2NvcGU6IGFueSA9IG51bGwsXG4gICAgdW5yZWdpc3Rlck9uRmlyc3RDYWxsID0gZmFsc2VcbiAgKTogbnVsbCB8IE9ic2VydmVyPFQ+IHtcbiAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IE9ic2VydmVyKGNhbGxiYWNrLCBtYXNrLCBzY29wZSlcbiAgICBvYnNlcnZlci51bnJlZ2lzdGVyT25OZXh0Q2FsbCA9IHVucmVnaXN0ZXJPbkZpcnN0Q2FsbFxuXG4gICAgaWYgKGluc2VydEZpcnN0KSB7XG4gICAgICB0aGlzLl9vYnNlcnZlcnMudW5zaGlmdChvYnNlcnZlcilcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fb2JzZXJ2ZXJzLnB1c2gob2JzZXJ2ZXIpXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX29uT2JzZXJ2ZXJBZGRlZCkge1xuICAgICAgdGhpcy5fb25PYnNlcnZlckFkZGVkKG9ic2VydmVyKVxuICAgIH1cblxuICAgIHJldHVybiBvYnNlcnZlclxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBPYnNlcnZlciB3aXRoIHRoZSBzcGVjaWZpZWQgY2FsbGJhY2sgYW5kIHVucmVnaXN0ZXJzIGFmdGVyIHRoZSBuZXh0IG5vdGlmaWNhdGlvblxuICAgKiBAcGFyYW0gY2FsbGJhY2sgLSB0aGUgY2FsbGJhY2sgdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIGZvciB0aGF0IE9ic2VydmVyXG4gICAqIEByZXR1cm5zIHRoZSBuZXcgb2JzZXJ2ZXIgY3JlYXRlZCBmb3IgdGhlIGNhbGxiYWNrXG4gICAqL1xuICBwdWJsaWMgYWRkT25jZShcbiAgICBjYWxsYmFjazogKGV2ZW50RGF0YTogVCwgZXZlbnRTdGF0ZTogT2JzZXJ2ZXJFdmVudFN0YXRlKSA9PiB2b2lkXG4gICk6IG51bGwgfCBPYnNlcnZlcjxUPiB7XG4gICAgcmV0dXJuIHRoaXMuYWRkKGNhbGxiYWNrLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB0cnVlKVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhbiBPYnNlcnZlciBmcm9tIHRoZSBPYnNlcnZhYmxlIG9iamVjdFxuICAgKiBAcGFyYW0gb2JzZXJ2ZXIgLSB0aGUgaW5zdGFuY2Ugb2YgdGhlIE9ic2VydmVyIHRvIHJlbW92ZVxuICAgKiBAcmV0dXJucyBmYWxzZSBpZiBpdCBkb2Vzbid0IGJlbG9uZyB0byB0aGlzIE9ic2VydmFibGVcbiAgICovXG4gIHB1YmxpYyByZW1vdmUob2JzZXJ2ZXI6IG51bGwgfCBPYnNlcnZlcjxUPik6IGJvb2xlYW4ge1xuICAgIGlmICghb2JzZXJ2ZXIpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5fb2JzZXJ2ZXJzLmluZGV4T2Yob2JzZXJ2ZXIpXG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICB0aGlzLl9kZWZlclVucmVnaXN0ZXIob2JzZXJ2ZXIpXG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gdGhlIE9ic2VydmFibGUgb2JqZWN0XG4gICAqIEBwYXJhbSBjYWxsYmFjayAtIHRoZSBjYWxsYmFjayB0byByZW1vdmVcbiAgICogQHBhcmFtIHNjb3BlIC0gb3B0aW9uYWwgc2NvcGUuIElmIHVzZWQgb25seSB0aGUgY2FsbGJhY2tzIHdpdGggdGhpcyBzY29wZSB3aWxsIGJlIHJlbW92ZWRcbiAgICogQHJldHVybnMgZmFsc2UgaWYgaXQgZG9lc24ndCBiZWxvbmcgdG8gdGhpcyBPYnNlcnZhYmxlXG4gICAqL1xuICBwdWJsaWMgcmVtb3ZlQ2FsbGJhY2soXG4gICAgY2FsbGJhY2s6IChldmVudERhdGE6IFQsIGV2ZW50U3RhdGU6IE9ic2VydmVyRXZlbnRTdGF0ZSkgPT4gdm9pZCxcbiAgICBzY29wZT86IGFueVxuICApOiBib29sZWFuIHtcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5fb2JzZXJ2ZXJzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgaWYgKFxuICAgICAgICB0aGlzLl9vYnNlcnZlcnNbaW5kZXhdLmNhbGxiYWNrID09PSBjYWxsYmFjayAmJlxuICAgICAgICAoIXNjb3BlIHx8IHNjb3BlID09PSB0aGlzLl9vYnNlcnZlcnNbaW5kZXhdLnNjb3BlKVxuICAgICAgKSB7XG4gICAgICAgIHRoaXMuX2RlZmVyVW5yZWdpc3Rlcih0aGlzLl9vYnNlcnZlcnNbaW5kZXhdKVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLyoqXG4gICAqIE5vdGlmeSBhbGwgT2JzZXJ2ZXJzIGJ5IGNhbGxpbmcgdGhlaXIgcmVzcGVjdGl2ZSBjYWxsYmFjayB3aXRoIHRoZSBnaXZlbiBkYXRhXG4gICAqIFdpbGwgcmV0dXJuIHRydWUgaWYgYWxsIG9ic2VydmVycyB3ZXJlIGV4ZWN1dGVkLCBmYWxzZSBpZiBhbiBvYnNlcnZlciBzZXQgc2tpcE5leHRPYnNlcnZlcnMgdG8gdHJ1ZSwgdGhlbiBwcmV2ZW50IHRoZSBzdWJzZXF1ZW50IG9uZXMgdG8gZXhlY3V0ZVxuICAgKiBAcGFyYW0gZXZlbnREYXRhIC0gZGVmaW5lcyB0aGUgZGF0YSB0byBzZW5kIHRvIGFsbCBvYnNlcnZlcnNcbiAgICogQHBhcmFtIG1hc2sgLSBkZWZpbmVzIHRoZSBtYXNrIG9mIHRoZSBjdXJyZW50IG5vdGlmaWNhdGlvbiAob2JzZXJ2ZXJzIHdpdGggaW5jb21wYXRpYmxlIG1hc2sgKGllIG1hc2sgJiBvYnNlcnZlci5tYXNrID09PSAwKSB3aWxsIG5vdCBiZSBub3RpZmllZClcbiAgICogQHBhcmFtIHRhcmdldCAtIGRlZmluZXMgdGhlIG9yaWdpbmFsIHRhcmdldCBvZiB0aGUgc3RhdGVcbiAgICogQHBhcmFtIGN1cnJlbnRUYXJnZXQgLSBkZWZpbmVzIHRoZSBjdXJyZW50IHRhcmdldCBvZiB0aGUgc3RhdGVcbiAgICogQHJldHVybnMgZmFsc2UgaWYgdGhlIGNvbXBsZXRlIG9ic2VydmVyIGNoYWluIHdhcyBub3QgcHJvY2Vzc2VkIChiZWNhdXNlIG9uZSBvYnNlcnZlciBzZXQgdGhlIHNraXBOZXh0T2JzZXJ2ZXJzIHRvIHRydWUpXG4gICAqL1xuICBwdWJsaWMgbm90aWZ5T2JzZXJ2ZXJzKFxuICAgIGV2ZW50RGF0YTogVCxcbiAgICBtYXNrOiBudW1iZXIgPSAtMSxcbiAgICB0YXJnZXQ/OiBhbnksXG4gICAgY3VycmVudFRhcmdldD86IGFueVxuICApOiBib29sZWFuIHtcbiAgICBpZiAoIXRoaXMuX29ic2VydmVycy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgY29uc3Qgc3RhdGUgPSB0aGlzLl9ldmVudFN0YXRlXG4gICAgc3RhdGUubWFzayA9IG1hc2tcbiAgICBzdGF0ZS50YXJnZXQgPSB0YXJnZXRcbiAgICBzdGF0ZS5jdXJyZW50VGFyZ2V0ID0gY3VycmVudFRhcmdldFxuICAgIHN0YXRlLnNraXBOZXh0T2JzZXJ2ZXJzID0gZmFsc2VcbiAgICBzdGF0ZS5sYXN0UmV0dXJuVmFsdWUgPSBldmVudERhdGFcblxuICAgIGZvciAoY29uc3Qgb2JzIG9mIHRoaXMuX29ic2VydmVycykge1xuICAgICAgaWYgKG9icy5fd2lsbEJlVW5yZWdpc3RlcmVkKSB7XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIGlmIChvYnMubWFzayAmIG1hc2spIHtcbiAgICAgICAgaWYgKG9icy5zY29wZSkge1xuICAgICAgICAgIHN0YXRlLmxhc3RSZXR1cm5WYWx1ZSA9IG9icy5jYWxsYmFjay5hcHBseShvYnMuc2NvcGUsIFtcbiAgICAgICAgICAgIGV2ZW50RGF0YSxcbiAgICAgICAgICAgIHN0YXRlXG4gICAgICAgICAgXSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdGF0ZS5sYXN0UmV0dXJuVmFsdWUgPSBvYnMuY2FsbGJhY2soZXZlbnREYXRhLCBzdGF0ZSlcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvYnMudW5yZWdpc3Rlck9uTmV4dENhbGwpIHtcbiAgICAgICAgICB0aGlzLl9kZWZlclVucmVnaXN0ZXIob2JzKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3RhdGUuc2tpcE5leHRPYnNlcnZlcnMpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICAvKipcbiAgICogQ2FsbGluZyB0aGlzIHdpbGwgZXhlY3V0ZSBlYWNoIGNhbGxiYWNrLCBleHBlY3RpbmcgaXQgdG8gYmUgYSBwcm9taXNlIG9yIHJldHVybiBhIHZhbHVlLlxuICAgKiBJZiBhdCBhbnkgcG9pbnQgaW4gdGhlIGNoYWluIG9uZSBmdW5jdGlvbiBmYWlscywgdGhlIHByb21pc2Ugd2lsbCBmYWlsIGFuZCB0aGUgZXhlY3V0aW9uIHdpbGwgbm90IGNvbnRpbnVlLlxuICAgKiBUaGlzIGlzIHVzZWZ1bCB3aGVuIGEgY2hhaW4gb2YgZXZlbnRzIChzb21ldGltZXMgYXN5bmMgZXZlbnRzKSBpcyBuZWVkZWQgdG8gaW5pdGlhbGl6ZSBhIGNlcnRhaW4gb2JqZWN0XG4gICAqIGFuZCBpdCBpcyBjcnVjaWFsIHRoYXQgYWxsIGNhbGxiYWNrcyB3aWxsIGJlIGV4ZWN1dGVkLlxuICAgKiBUaGUgb3JkZXIgb2YgdGhlIGNhbGxiYWNrcyBpcyBrZXB0LCBjYWxsYmFja3MgYXJlIG5vdCBleGVjdXRlZCBwYXJhbGxlbC5cbiAgICpcbiAgICogQHBhcmFtIGV2ZW50RGF0YSAtIFRoZSBkYXRhIHRvIGJlIHNlbnQgdG8gZWFjaCBjYWxsYmFja1xuICAgKiBAcGFyYW0gbWFzayAtIGlzIHVzZWQgdG8gZmlsdGVyIG9ic2VydmVycyBkZWZhdWx0cyB0byAtMVxuICAgKiBAcGFyYW0gdGFyZ2V0IC0gZGVmaW5lcyB0aGUgY2FsbGJhY2sgdGFyZ2V0IChzZWUgRXZlbnRTdGF0ZSlcbiAgICogQHBhcmFtIGN1cnJlbnRUYXJnZXQgLSBkZWZpbmVzIGhlIGN1cnJlbnQgb2JqZWN0IGluIHRoZSBidWJibGluZyBwaGFzZVxuICAgKiBAcmV0dXJucyB3aWxsIHJldHVybiBhIFByb21pc2UgdGhhbiByZXNvbHZlcyB3aGVuIGFsbCBjYWxsYmFja3MgZXhlY3V0ZWQgc3VjY2Vzc2Z1bGx5LlxuICAgKi9cbiAgcHVibGljIG5vdGlmeU9ic2VydmVyc1dpdGhQcm9taXNlKFxuICAgIGV2ZW50RGF0YTogVCxcbiAgICBtYXNrOiBudW1iZXIgPSAtMSxcbiAgICB0YXJnZXQ/OiBhbnksXG4gICAgY3VycmVudFRhcmdldD86IGFueVxuICApOiBQcm9taXNlPFQ+IHtcbiAgICAvLyBjcmVhdGUgYW4gZW1wdHkgcHJvbWlzZVxuICAgIGxldCBwOiBQcm9taXNlPGFueT4gPSBQcm9taXNlLnJlc29sdmUoZXZlbnREYXRhKVxuXG4gICAgLy8gbm8gb2JzZXJ2ZXJzPyByZXR1cm4gdGhpcyBwcm9taXNlLlxuICAgIGlmICghdGhpcy5fb2JzZXJ2ZXJzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHBcbiAgICB9XG5cbiAgICBjb25zdCBzdGF0ZSA9IHRoaXMuX2V2ZW50U3RhdGVcbiAgICBzdGF0ZS5tYXNrID0gbWFza1xuICAgIHN0YXRlLnRhcmdldCA9IHRhcmdldFxuICAgIHN0YXRlLmN1cnJlbnRUYXJnZXQgPSBjdXJyZW50VGFyZ2V0XG4gICAgc3RhdGUuc2tpcE5leHRPYnNlcnZlcnMgPSBmYWxzZVxuXG4gICAgLy8gZXhlY3V0ZSBvbmUgY2FsbGJhY2sgYWZ0ZXIgYW5vdGhlciAobm90IHVzaW5nIFByb21pc2UuYWxsLCB0aGUgb3JkZXIgaXMgaW1wb3J0YW50KVxuICAgIHRoaXMuX29ic2VydmVycy5mb3JFYWNoKChvYnMpID0+IHtcbiAgICAgIGlmIChzdGF0ZS5za2lwTmV4dE9ic2VydmVycykge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIGlmIChvYnMuX3dpbGxCZVVucmVnaXN0ZXJlZCkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIGlmIChvYnMubWFzayAmIG1hc2spIHtcbiAgICAgICAgaWYgKG9icy5zY29wZSkge1xuICAgICAgICAgIHAgPSBwLnRoZW4oKGxhc3RSZXR1cm5lZFZhbHVlKSA9PiB7XG4gICAgICAgICAgICBzdGF0ZS5sYXN0UmV0dXJuVmFsdWUgPSBsYXN0UmV0dXJuZWRWYWx1ZVxuICAgICAgICAgICAgcmV0dXJuIG9icy5jYWxsYmFjay5hcHBseShvYnMuc2NvcGUsIFtldmVudERhdGEsIHN0YXRlXSlcbiAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHAgPSBwLnRoZW4oKGxhc3RSZXR1cm5lZFZhbHVlKSA9PiB7XG4gICAgICAgICAgICBzdGF0ZS5sYXN0UmV0dXJuVmFsdWUgPSBsYXN0UmV0dXJuZWRWYWx1ZVxuICAgICAgICAgICAgcmV0dXJuIG9icy5jYWxsYmFjayhldmVudERhdGEsIHN0YXRlKVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9icy51bnJlZ2lzdGVyT25OZXh0Q2FsbCkge1xuICAgICAgICAgIHRoaXMuX2RlZmVyVW5yZWdpc3RlcihvYnMpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuXG4gICAgLy8gcmV0dXJuIHRoZSBldmVudERhdGFcbiAgICByZXR1cm4gcC50aGVuKCgpID0+IHtcbiAgICAgIHJldHVybiBldmVudERhdGFcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIE5vdGlmeSBhIHNwZWNpZmljIG9ic2VydmVyXG4gICAqIEBwYXJhbSBvYnNlcnZlciAtIGRlZmluZXMgdGhlIG9ic2VydmVyIHRvIG5vdGlmeVxuICAgKiBAcGFyYW0gZXZlbnREYXRhIC0gZGVmaW5lcyB0aGUgZGF0YSB0byBiZSBzZW50IHRvIGVhY2ggY2FsbGJhY2tcbiAgICogQHBhcmFtIG1hc2sgLSBpcyB1c2VkIHRvIGZpbHRlciBvYnNlcnZlcnMgZGVmYXVsdHMgdG8gLTFcbiAgICovXG4gIHB1YmxpYyBub3RpZnlPYnNlcnZlcihcbiAgICBvYnNlcnZlcjogT2JzZXJ2ZXI8VD4sXG4gICAgZXZlbnREYXRhOiBULFxuICAgIG1hc2s6IG51bWJlciA9IC0xXG4gICk6IHZvaWQge1xuICAgIGNvbnN0IHN0YXRlID0gdGhpcy5fZXZlbnRTdGF0ZVxuICAgIHN0YXRlLm1hc2sgPSBtYXNrXG4gICAgc3RhdGUuc2tpcE5leHRPYnNlcnZlcnMgPSBmYWxzZVxuXG4gICAgb2JzZXJ2ZXIuY2FsbGJhY2soZXZlbnREYXRhLCBzdGF0ZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGEgYm9vbGVhbiBpbmRpY2F0aW5nIGlmIHRoZSBvYnNlcnZhYmxlIGhhcyBhdCBsZWFzdCBvbmUgb2JzZXJ2ZXJcbiAgICogQHJldHVybnMgdHJ1ZSBpcyB0aGUgT2JzZXJ2YWJsZSBoYXMgYXQgbGVhc3Qgb25lIE9ic2VydmVyIHJlZ2lzdGVyZWRcbiAgICovXG4gIHB1YmxpYyBoYXNPYnNlcnZlcnMoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX29ic2VydmVycy5sZW5ndGggPiAwXG4gIH1cblxuICAvKipcbiAgICogQ2xlYXIgdGhlIGxpc3Qgb2Ygb2JzZXJ2ZXJzXG4gICAqL1xuICBwdWJsaWMgY2xlYXIoKTogdm9pZCB7XG4gICAgdGhpcy5fb2JzZXJ2ZXJzID0gbmV3IEFycmF5PE9ic2VydmVyPFQ+PigpXG4gICAgdGhpcy5fb25PYnNlcnZlckFkZGVkID0gbnVsbFxuICB9XG5cbiAgLyoqXG4gICAqIENsb25lIHRoZSBjdXJyZW50IG9ic2VydmFibGVcbiAgICogQHJldHVybnMgYSBuZXcgb2JzZXJ2YWJsZVxuICAgKi9cbiAgcHVibGljIGNsb25lKCk6IE9ic2VydmFibGU8VD4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBPYnNlcnZhYmxlPFQ+KClcblxuICAgIHJlc3VsdC5fb2JzZXJ2ZXJzID0gdGhpcy5fb2JzZXJ2ZXJzLnNsaWNlKDApXG5cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICAvKipcbiAgICogRG9lcyB0aGlzIG9ic2VydmFibGUgaGFuZGxlcyBvYnNlcnZlciByZWdpc3RlcmVkIHdpdGggYSBnaXZlbiBtYXNrXG4gICAqIEBwYXJhbSBtYXNrIC0gZGVmaW5lcyB0aGUgbWFzayB0byBiZSB0ZXN0ZWRcbiAgICogQHJldHVybnMgd2hldGhlciBvciBub3Qgb25lIG9ic2VydmVyIHJlZ2lzdGVyZWQgd2l0aCB0aGUgZ2l2ZW4gbWFzayBpcyBoYW5kZWxlZFxuICAgKi9cbiAgcHVibGljIGhhc1NwZWNpZmljTWFzayhtYXNrOiBudW1iZXIgPSAtMSk6IGJvb2xlYW4ge1xuICAgIGZvciAoY29uc3Qgb2JzIG9mIHRoaXMuX29ic2VydmVycykge1xuICAgICAgaWYgKG9icy5tYXNrICYgbWFzayB8fCBvYnMubWFzayA9PT0gbWFzaykge1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIHByaXZhdGUgX2RlZmVyVW5yZWdpc3RlcihvYnNlcnZlcjogT2JzZXJ2ZXI8VD4pOiB2b2lkIHtcbiAgICBvYnNlcnZlci51bnJlZ2lzdGVyT25OZXh0Q2FsbCA9IGZhbHNlXG4gICAgb2JzZXJ2ZXIuX3dpbGxCZVVucmVnaXN0ZXJlZCA9IHRydWVcbiAgICB2b2lkIGV4ZWN1dGVUYXNrKGFzeW5jICgpID0+IHRoaXMuX3JlbW92ZShvYnNlcnZlcikpXG4gIH1cblxuICAvLyBUaGlzIHNob3VsZCBvbmx5IGJlIGNhbGxlZCB3aGVuIG5vdCBpdGVyYXRpbmcgb3ZlciBfb2JzZXJ2ZXJzIHRvIGF2b2lkIGNhbGxiYWNrIHNraXBwaW5nLlxuICAvLyBSZW1vdmVzIGFuIG9ic2VydmVyIGZyb20gdGhlIF9vYnNlcnZlciBBcnJheS5cbiAgcHJpdmF0ZSBfcmVtb3ZlKG9ic2VydmVyOiBudWxsIHwgT2JzZXJ2ZXI8VD4pOiBib29sZWFuIHtcbiAgICBpZiAoIW9ic2VydmVyKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICBjb25zdCBpbmRleCA9IHRoaXMuX29ic2VydmVycy5pbmRleE9mKG9ic2VydmVyKVxuXG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgdGhpcy5fb2JzZXJ2ZXJzLnNwbGljZShpbmRleCwgMSlcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cbiIsImxldCBtb2R1bGVQcm9taXNlOiBhbnlcblxuLyoqXG4gKiB0ZWxlcG9ydCBwbGF5ZXIgdG8gYSBkZXN0aW5hdGlvblxuICogQHBhcmFtIGRlc3RpbmF0aW9uIC0gXCJjb29yZFgsY29vcmRZXCIsIFwibWFnaWNcIiwgXCJjcm93ZFwiXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0ZWxlcG9ydFRvKGRlc3RpbmF0aW9uOiBzdHJpbmcpIHtcbiAgLy8gZXJyb3IoYHRlbGVwb3J0VG8oZGVzdGluYXRpb24pIHdhcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlOlxuXG4gIC8vIGltcG9ydCB7cmVxdWVzdFRlbGVwb3J0fSBmcm9tICdAZGVjZW50cmFsYW5kL1VzZXJBY3Rpb25Nb2R1bGUnXG4gIC8vIGV4ZWN1dGVUYXNrKGFzeW5jICgpID0+IHtcbiAgLy8gICBhd2FpdCByZXF1ZXN0VGVsZXBvcnQoZGVzdGluYXRpb24pXG4gIC8vIH0pYClcbiAgY2FsbE1vZHVsZVJwYygncmVxdWVzdFRlbGVwb3J0JywgW2Rlc3RpbmF0aW9uXSlcbn1cblxuZnVuY3Rpb24gZW5zdXJlTW9kdWxlKCk6IGJvb2xlYW4ge1xuICBpZiAodHlwZW9mIG1vZHVsZVByb21pc2UgPT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkY2wgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgbW9kdWxlUHJvbWlzZSA9IGRjbC5sb2FkTW9kdWxlKCdAZGVjZW50cmFsYW5kL1VzZXJBY3Rpb25Nb2R1bGUnLCB7fSlcbiAgfVxuICByZXR1cm4gdHlwZW9mIG1vZHVsZVByb21pc2UgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkY2wgIT09ICd1bmRlZmluZWQnXG59XG5cbmZ1bmN0aW9uIGNhbGxNb2R1bGVScGMobWV0aG9kTmFtZTogc3RyaW5nLCBhcmdzOiBhbnlbXSk6IHZvaWQge1xuICBpZiAoZW5zdXJlTW9kdWxlKCkpIHtcbiAgICBtb2R1bGVQcm9taXNlLnRoZW4oKCQ6IGFueSkgPT4ge1xuICAgICAgdm9pZCBkY2wuY2FsbFJwYygkLnJwY0hhbmRsZSwgbWV0aG9kTmFtZSwgYXJncylcbiAgICB9KVxuICB9XG59XG4iLCJpbXBvcnQgeyBFdmVudENvbnN0cnVjdG9yIH0gZnJvbSAnLi4vZWNzL0V2ZW50TWFuYWdlcidcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9lY3MvT2JzZXJ2YWJsZSdcbmltcG9ydCB7IFZpZGVvVGV4dHVyZSB9IGZyb20gJy4vQ29tcG9uZW50cydcbmltcG9ydCB7IERpc3Bvc2FibGVDb21wb25lbnQgfSBmcm9tICcuLi9lY3MvQ29tcG9uZW50J1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQEV2ZW50Q29uc3RydWN0b3IoKVxuZXhwb3J0IGNsYXNzIFVVSURFdmVudDxUID0gYW55PiB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyByZWFkb25seSB1dWlkOiBzdHJpbmcsIHB1YmxpYyByZWFkb25seSBwYXlsb2FkOiBUKSB7fVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQEV2ZW50Q29uc3RydWN0b3IoKVxuZXhwb3J0IGNsYXNzIFJheWNhc3RSZXNwb25zZTxUPiB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyByZWFkb25seSBwYXlsb2FkOiBSYXljYXN0UmVzcG9uc2VQYXlsb2FkPFQ+KSB7fVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQEV2ZW50Q29uc3RydWN0b3IoKVxuZXhwb3J0IGNsYXNzIFBvaW50ZXJFdmVudDxHbG9iYWxJbnB1dEV2ZW50UmVzdWx0PiB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyByZWFkb25seSBwYXlsb2FkOiBHbG9iYWxJbnB1dEV2ZW50UmVzdWx0KSB7fVxufVxuXG5sZXQgaW50ZXJuYWxEY2w6IERlY2VudHJhbGFuZEludGVyZmFjZSB8IHZvaWRcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqIFRoaXMgZnVuY3Rpb24gZ2VuZXJhdGVzIGEgY2FsbGJhY2sgdGhhdCBpcyBwYXNzZWQgdG8gdGhlIE9ic2VydmFibGVcbiAqIGNvbnN0cnVjdG9yIHRvIHN1YnNjcmliZSB0byB0aGUgZXZlbnRzIG9mIHRoZSBEZWNlbnRyYWxhbmRJbnRlcmZhY2VcbiAqL1xuZnVuY3Rpb24gY3JlYXRlU3Vic2NyaWJlcihldmVudE5hbWU6IGtleW9mIElFdmVudHMpIHtcbiAgcmV0dXJuICgpID0+IHtcbiAgICBpZiAoaW50ZXJuYWxEY2wpIHtcbiAgICAgIGludGVybmFsRGNsLnN1YnNjcmliZShldmVudE5hbWUpXG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogVGhpcyBldmVudCBpcyB0cmlnZ2VyZWQgd2hlbiB5b3UgY2hhbmdlIHlvdXIgY2FtZXJhIGJldHdlZW4gMXN0IGFuZCAzcmQgcGVyc29uXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBvbkNhbWVyYU1vZGVDaGFuZ2VkT2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlPFxuICBJRXZlbnRzWydjYW1lcmFNb2RlQ2hhbmdlZCddXG4+KGNyZWF0ZVN1YnNjcmliZXIoJ2NhbWVyYU1vZGVDaGFuZ2VkJykpXG5cbi8qKlxuICogVGhpcyBldmVudCBpcyB0cmlnZ2VyZWQgd2hlbiB5b3UgY2hhbmdlIHlvdXIgY2FtZXJhIGJldHdlZW4gMXN0IGFuZCAzcmQgcGVyc29uXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBvbklkbGVTdGF0ZUNoYW5nZWRPYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGU8XG4gIElFdmVudHNbJ2lkbGVTdGF0ZUNoYW5nZWQnXVxuPihjcmVhdGVTdWJzY3JpYmVyKCdpZGxlU3RhdGVDaGFuZ2VkJykpXG5cbi8qKlxuICogVGhlc2UgZXZlbnRzIGFyZSB0cmlnZ2VyZWQgYWZ0ZXIgeW91ciBjaGFyYWN0ZXIgZW50ZXJzIHRoZSBzY2VuZS5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IG9uRW50ZXJTY2VuZU9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZTxJRXZlbnRzWydvbkVudGVyU2NlbmUnXT4oXG4gIGNyZWF0ZVN1YnNjcmliZXIoJ29uRW50ZXJTY2VuZScpXG4pXG5cbi8qKiBAcHVibGljIEBkZXByZWNhdGVkIFVzZSBvbkVudGVyU2NlbmVPYnNlcnZhYmxlIGluc3RlYWQuICovXG5leHBvcnQgY29uc3Qgb25FbnRlclNjZW5lID0gb25FbnRlclNjZW5lT2JzZXJ2YWJsZVxuXG4vKipcbiAqIFRoZXNlIGV2ZW50cyBhcmUgdHJpZ2dlcmVkIGFmdGVyIHlvdXIgY2hhcmFjdGVyIGxlYXZlcyB0aGUgc2NlbmUuXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBvbkxlYXZlU2NlbmVPYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGU8SUV2ZW50c1snb25MZWF2ZVNjZW5lJ10+KFxuICBjcmVhdGVTdWJzY3JpYmVyKCdvbkxlYXZlU2NlbmUnKVxuKVxuXG4vKiogQHB1YmxpYyBAZGVwcmVjYXRlZCBVc2Ugb25MZWF2ZVNjZW5lT2JzZXJ2YWJsZSBpbnN0ZWFkLiAqL1xuZXhwb3J0IGNvbnN0IG9uTGVhdmVTY2VuZSA9IG9uTGVhdmVTY2VuZU9ic2VydmFibGVcblxuLyoqXG4gKiBUaGlzIGV2ZW50IGlzIHRyaWdnZXJlZCBhZnRlciBhbGwgdGhlIHJlc291cmNlcyBvZiB0aGUgc2NlbmUgd2VyZSBsb2FkZWQgKG1vZGVscywgdGV4dHVyZXMsIGV0Yy4uLilcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IG9uU2NlbmVSZWFkeU9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZTxJRXZlbnRzWydzY2VuZVN0YXJ0J10+KFxuICBjcmVhdGVTdWJzY3JpYmVyKCdzY2VuZVN0YXJ0JylcbilcblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBvblBsYXllckV4cHJlc3Npb25PYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGU8XG4gIElFdmVudHNbJ3BsYXllckV4cHJlc3Npb24nXVxuPihjcmVhdGVTdWJzY3JpYmVyKCdwbGF5ZXJFeHByZXNzaW9uJykpXG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3Qgb25Qb2ludGVyTG9ja2VkU3RhdGVDaGFuZ2UgPSBuZXcgT2JzZXJ2YWJsZTxcbiAgSUV2ZW50c1snb25Qb2ludGVyTG9jayddXG4+KGNyZWF0ZVN1YnNjcmliZXIoJ29uUG9pbnRlckxvY2snKSlcblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBvblZpZGVvRXZlbnQgPSBuZXcgT2JzZXJ2YWJsZTxJRXZlbnRzWyd2aWRlb0V2ZW50J10+KFxuICBjcmVhdGVTdWJzY3JpYmVyKCd2aWRlb0V2ZW50JylcbilcblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBvblByb2ZpbGVDaGFuZ2VkID0gbmV3IE9ic2VydmFibGU8SUV2ZW50c1sncHJvZmlsZUNoYW5nZWQnXT4oXG4gIGNyZWF0ZVN1YnNjcmliZXIoJ3Byb2ZpbGVDaGFuZ2VkJylcbilcblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBvblBsYXllckNvbm5lY3RlZE9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZTxcbiAgSUV2ZW50c1sncGxheWVyQ29ubmVjdGVkJ11cbj4oY3JlYXRlU3Vic2NyaWJlcigncGxheWVyQ29ubmVjdGVkJykpXG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3Qgb25QbGF5ZXJEaXNjb25uZWN0ZWRPYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGU8XG4gIElFdmVudHNbJ3BsYXllckRpc2Nvbm5lY3RlZCddXG4+KGNyZWF0ZVN1YnNjcmliZXIoJ3BsYXllckRpc2Nvbm5lY3RlZCcpKVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IG9uUmVhbG1DaGFuZ2VkT2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlPFxuICBJRXZlbnRzWydvblJlYWxtQ2hhbmdlZCddXG4+KGNyZWF0ZVN1YnNjcmliZXIoJ29uUmVhbG1DaGFuZ2VkJykpXG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3Qgb25QbGF5ZXJDbGlja2VkT2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlPFxuICBJRXZlbnRzWydwbGF5ZXJDbGlja2VkJ11cbj4oY3JlYXRlU3Vic2NyaWJlcigncGxheWVyQ2xpY2tlZCcpKVxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICogVGhpcyBmdW5jdGlvbiBhZGRzIF9vbmVfIGxpc3RlbmVyIHRvIHRoZSBvbkV2ZW50IGV2ZW50IG9mIGRjbCBpbnRlcmZhY2UuXG4gKiBMZXZlcmFnaW5nIGEgc3dpdGNoIHRvIHJvdXRlIGV2ZW50cyB0byB0aGUgT2JzZXJ2YWJsZSBoYW5kbGVycy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIF9pbml0RXZlbnRPYnNlcnZhYmxlcyhkY2w6IERlY2VudHJhbGFuZEludGVyZmFjZSkge1xuICAvLyBzdG9yZSBpbnRlcm5hbCByZWZlcmVuY2UgdG8gZGNsLCBpdCBpcyBnb2luZyB0byBiZSB1c2VkIHRvIHN1YnNjcmliZSB0byB0aGUgZXZlbnRzXG4gIGludGVybmFsRGNsID0gZGNsXG5cbiAgaWYgKGludGVybmFsRGNsKSB7XG4gICAgaW50ZXJuYWxEY2wub25FdmVudCgoZXZlbnQpID0+IHtcbiAgICAgIHN3aXRjaCAoZXZlbnQudHlwZSkge1xuICAgICAgICBjYXNlICdvbkVudGVyU2NlbmUnOiB7XG4gICAgICAgICAgb25FbnRlclNjZW5lT2JzZXJ2YWJsZS5ub3RpZnlPYnNlcnZlcnMoXG4gICAgICAgICAgICBldmVudC5kYXRhIGFzIElFdmVudHNbJ29uRW50ZXJTY2VuZSddXG4gICAgICAgICAgKVxuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ29uTGVhdmVTY2VuZSc6IHtcbiAgICAgICAgICBvbkxlYXZlU2NlbmVPYnNlcnZhYmxlLm5vdGlmeU9ic2VydmVycyhcbiAgICAgICAgICAgIGV2ZW50LmRhdGEgYXMgSUV2ZW50c1snb25MZWF2ZVNjZW5lJ11cbiAgICAgICAgICApXG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnY2FtZXJhTW9kZUNoYW5nZWQnOiB7XG4gICAgICAgICAgb25DYW1lcmFNb2RlQ2hhbmdlZE9ic2VydmFibGUubm90aWZ5T2JzZXJ2ZXJzKFxuICAgICAgICAgICAgZXZlbnQuZGF0YSBhcyBJRXZlbnRzWydjYW1lcmFNb2RlQ2hhbmdlZCddXG4gICAgICAgICAgKVxuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ2lkbGVTdGF0ZUNoYW5nZWQnOiB7XG4gICAgICAgICAgb25JZGxlU3RhdGVDaGFuZ2VkT2JzZXJ2YWJsZS5ub3RpZnlPYnNlcnZlcnMoXG4gICAgICAgICAgICBldmVudC5kYXRhIGFzIElFdmVudHNbJ2lkbGVTdGF0ZUNoYW5nZWQnXVxuICAgICAgICAgIClcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBjYXNlICdzY2VuZVN0YXJ0Jzoge1xuICAgICAgICAgIG9uU2NlbmVSZWFkeU9ic2VydmFibGUubm90aWZ5T2JzZXJ2ZXJzKFxuICAgICAgICAgICAgZXZlbnQuZGF0YSBhcyBJRXZlbnRzWydzY2VuZVN0YXJ0J11cbiAgICAgICAgICApXG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAncGxheWVyRXhwcmVzc2lvbic6IHtcbiAgICAgICAgICBvblBsYXllckV4cHJlc3Npb25PYnNlcnZhYmxlLm5vdGlmeU9ic2VydmVycyhcbiAgICAgICAgICAgIGV2ZW50LmRhdGEgYXMgSUV2ZW50c1sncGxheWVyRXhwcmVzc2lvbiddXG4gICAgICAgICAgKVxuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ3ZpZGVvRXZlbnQnOiB7XG4gICAgICAgICAgY29uc3QgdmlkZW9EYXRhID0gZXZlbnQuZGF0YSBhcyBJRXZlbnRzWyd2aWRlb0V2ZW50J11cbiAgICAgICAgICBjb25zdCBjb21wb25lbnQgPSBEaXNwb3NhYmxlQ29tcG9uZW50LmVuZ2luZS5kaXNwb3NhYmxlQ29tcG9uZW50c1tcbiAgICAgICAgICAgIHZpZGVvRGF0YS5jb21wb25lbnRJZFxuICAgICAgICAgIF0gYXMgVmlkZW9UZXh0dXJlXG4gICAgICAgICAgaWYgKGNvbXBvbmVudCkge1xuICAgICAgICAgICAgY29tcG9uZW50LnVwZGF0ZSh2aWRlb0RhdGEpXG4gICAgICAgICAgfVxuICAgICAgICAgIG9uVmlkZW9FdmVudC5ub3RpZnlPYnNlcnZlcnModmlkZW9EYXRhKVxuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ3Byb2ZpbGVDaGFuZ2VkJzoge1xuICAgICAgICAgIG9uUHJvZmlsZUNoYW5nZWQubm90aWZ5T2JzZXJ2ZXJzKFxuICAgICAgICAgICAgZXZlbnQuZGF0YSBhcyBJRXZlbnRzWydwcm9maWxlQ2hhbmdlZCddXG4gICAgICAgICAgKVxuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ29uUG9pbnRlckxvY2snOiB7XG4gICAgICAgICAgb25Qb2ludGVyTG9ja2VkU3RhdGVDaGFuZ2Uubm90aWZ5T2JzZXJ2ZXJzKFxuICAgICAgICAgICAgZXZlbnQuZGF0YSBhcyBJRXZlbnRzWydvblBvaW50ZXJMb2NrJ11cbiAgICAgICAgICApXG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAncGxheWVyQ29ubmVjdGVkJzoge1xuICAgICAgICAgIG9uUGxheWVyQ29ubmVjdGVkT2JzZXJ2YWJsZS5ub3RpZnlPYnNlcnZlcnMoXG4gICAgICAgICAgICBldmVudC5kYXRhIGFzIElFdmVudHNbJ3BsYXllckNvbm5lY3RlZCddXG4gICAgICAgICAgKVxuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ3BsYXllckRpc2Nvbm5lY3RlZCc6IHtcbiAgICAgICAgICBvblBsYXllckRpc2Nvbm5lY3RlZE9ic2VydmFibGUubm90aWZ5T2JzZXJ2ZXJzKFxuICAgICAgICAgICAgZXZlbnQuZGF0YSBhcyBJRXZlbnRzWydwbGF5ZXJEaXNjb25uZWN0ZWQnXVxuICAgICAgICAgIClcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBjYXNlICdvblJlYWxtQ2hhbmdlZCc6IHtcbiAgICAgICAgICBvblJlYWxtQ2hhbmdlZE9ic2VydmFibGUubm90aWZ5T2JzZXJ2ZXJzKFxuICAgICAgICAgICAgZXZlbnQuZGF0YSBhcyBJRXZlbnRzWydvblJlYWxtQ2hhbmdlZCddXG4gICAgICAgICAgKVxuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ3BsYXllckNsaWNrZWQnOiB7XG4gICAgICAgICAgb25QbGF5ZXJDbGlja2VkT2JzZXJ2YWJsZS5ub3RpZnlPYnNlcnZlcnMoXG4gICAgICAgICAgICBldmVudC5kYXRhIGFzIElFdmVudHNbJ3BsYXllckNsaWNrZWQnXVxuICAgICAgICAgIClcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gIH1cbn1cbiIsImltcG9ydCB7XG4gIERpc3Bvc2FibGVDb21wb25lbnRDcmVhdGVkLFxuICBEaXNwb3NhYmxlQ29tcG9uZW50UmVtb3ZlZCxcbiAgRGlzcG9zYWJsZUNvbXBvbmVudFVwZGF0ZWQsXG4gIGdldENvbXBvbmVudENsYXNzSWQsXG4gIGdldENvbXBvbmVudElkLFxuICBpc0Rpc3Bvc2FibGVDb21wb25lbnQsXG4gIE9ic2VydmFibGVDb21wb25lbnRcbn0gZnJvbSAnLi4vZWNzL0NvbXBvbmVudCdcbmltcG9ydCB7IEVuZ2luZSB9IGZyb20gJy4uL2Vjcy9FbmdpbmUnXG5pbXBvcnQge1xuICBDb21wb25lbnRBZGRlZCxcbiAgQ29tcG9uZW50UmVtb3ZlZCxcbiAgSUVudGl0eSxcbiAgSVN5c3RlbSxcbiAgUGFyZW50Q2hhbmdlZFxufSBmcm9tICcuLi9lY3MvSUVudGl0eSdcbmltcG9ydCB7IFVVSURFdmVudCwgUG9pbnRlckV2ZW50LCBSYXljYXN0UmVzcG9uc2UgfSBmcm9tICcuL0V2ZW50cydcbmltcG9ydCB7IFJheWNhc3RIaXRFbnRpdGllcywgUmF5Y2FzdEhpdEVudGl0eSB9IGZyb20gJy4vUGh5c2ljc0Nhc3QnXG5cbi8vIFRoaXMgbnVtYmVyIGlzIGRlZmluZWQgaW4gdGhlIHByb3RvY29sIEVDUy5TZXRFbnRpdHlQYXJlbnQuM1xuY29uc3QgUk9PVF9FTlRJVFlfSUQgPSAnMCdcblxuZXhwb3J0IGNsYXNzIERlY2VudHJhbGFuZFN5bmNocm9uaXphdGlvblN5c3RlbSBpbXBsZW1lbnRzIElTeXN0ZW0ge1xuICBjYWNoZWRDb21wb25lbnRzOiBSZWNvcmQ8c3RyaW5nLCBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+PiA9IHt9XG4gIGVuZ2luZSE6IEVuZ2luZVxuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBkY2w6IERlY2VudHJhbGFuZEludGVyZmFjZSkge31cblxuICBhY3RpdmF0ZShlbmdpbmU6IEVuZ2luZSkge1xuICAgIHRoaXMuZW5naW5lID0gZW5naW5lXG4gICAgZW5naW5lLmV2ZW50TWFuYWdlci5hZGRMaXN0ZW5lcihDb21wb25lbnRBZGRlZCwgdGhpcywgdGhpcy5jb21wb25lbnRBZGRlZClcbiAgICBlbmdpbmUuZXZlbnRNYW5hZ2VyLmFkZExpc3RlbmVyKFxuICAgICAgQ29tcG9uZW50UmVtb3ZlZCxcbiAgICAgIHRoaXMsXG4gICAgICB0aGlzLmNvbXBvbmVudFJlbW92ZWRcbiAgICApXG4gICAgZW5naW5lLmV2ZW50TWFuYWdlci5hZGRMaXN0ZW5lcihcbiAgICAgIERpc3Bvc2FibGVDb21wb25lbnRDcmVhdGVkLFxuICAgICAgdGhpcyxcbiAgICAgIHRoaXMuZGlzcG9zYWJsZUNvbXBvbmVudENyZWF0ZWRcbiAgICApXG4gICAgZW5naW5lLmV2ZW50TWFuYWdlci5hZGRMaXN0ZW5lcihcbiAgICAgIERpc3Bvc2FibGVDb21wb25lbnRSZW1vdmVkLFxuICAgICAgdGhpcyxcbiAgICAgIHRoaXMuZGlzcG9zYWJsZUNvbXBvbmVudFJlbW92ZWRcbiAgICApXG4gICAgZW5naW5lLmV2ZW50TWFuYWdlci5hZGRMaXN0ZW5lcihcbiAgICAgIERpc3Bvc2FibGVDb21wb25lbnRVcGRhdGVkLFxuICAgICAgdGhpcyxcbiAgICAgIHRoaXMuZGlzcG9zYWJsZUNvbXBvbmVudFVwZGF0ZWRcbiAgICApXG4gICAgZW5naW5lLmV2ZW50TWFuYWdlci5hZGRMaXN0ZW5lcihQYXJlbnRDaGFuZ2VkLCB0aGlzLCB0aGlzLnBhcmVudENoYW5nZWQpXG5cbiAgICBjb25zdCByb290SWQgPSBlbmdpbmUucm9vdEVudGl0eS51dWlkXG5cbiAgICB0aGlzLmRjbC5hZGRFbnRpdHkocm9vdElkKVxuXG4gICAgLy8gVE9ETyhhZ3VzKTogc2VuZCBkaXNwb3NhYmxlQ29tcG9uZW50cyBpZiBleGlzdFxuXG4gICAgdGhpcy5kY2wub25VcGRhdGUoKGR0KSA9PiB7XG4gICAgICBlbmdpbmUudXBkYXRlKGR0KVxuICAgICAgdGhpcy5wcmVzZW50RW50aXRpZXMoKVxuICAgIH0pXG5cbiAgICB0aGlzLmRjbC5vbkV2ZW50KChldmVudCkgPT4ge1xuICAgICAgY29uc3QgZGF0YSA9IGV2ZW50LmRhdGEgYXMgYW55XG4gICAgICBzd2l0Y2ggKGV2ZW50LnR5cGUpIHtcbiAgICAgICAgY2FzZSAndXVpZEV2ZW50JzpcbiAgICAgICAgICBlbmdpbmUuZXZlbnRNYW5hZ2VyLmZpcmVFdmVudChuZXcgVVVJREV2ZW50KGRhdGEudXVpZCwgZGF0YS5wYXlsb2FkKSlcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICdyYXljYXN0UmVzcG9uc2UnOlxuICAgICAgICAgIGlmIChkYXRhLnF1ZXJ5VHlwZSA9PT0gJ0hpdEZpcnN0Jykge1xuICAgICAgICAgICAgZW5naW5lLmV2ZW50TWFuYWdlci5maXJlRXZlbnQoXG4gICAgICAgICAgICAgIG5ldyBSYXljYXN0UmVzcG9uc2U8UmF5Y2FzdEhpdEVudGl0eT4oZGF0YSlcbiAgICAgICAgICAgIClcbiAgICAgICAgICB9IGVsc2UgaWYgKGRhdGEucXVlcnlUeXBlID09PSAnSGl0QWxsJykge1xuICAgICAgICAgICAgZW5naW5lLmV2ZW50TWFuYWdlci5maXJlRXZlbnQoXG4gICAgICAgICAgICAgIG5ldyBSYXljYXN0UmVzcG9uc2U8UmF5Y2FzdEhpdEVudGl0aWVzPihkYXRhKVxuICAgICAgICAgICAgKVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICdhY3Rpb25CdXR0b25FdmVudCc6XG4gICAgICAgICAgZW5naW5lLmV2ZW50TWFuYWdlci5maXJlRXZlbnQobmV3IFBvaW50ZXJFdmVudChkYXRhLnBheWxvYWQpKVxuICAgICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBzeXN0ZW0ub25BZGRFbnRpdHkgaXMgY2FsbGVkIGJ5IHRoZSBlbmdpbmUgd2hlbiBhIGVudGl0eSBpcyBhZGRlZCB0byB0aGVcbiAgICogZW5naW5lLlxuICAgKi9cbiAgb25BZGRFbnRpdHkoZW50aXR5OiBJRW50aXR5KSB7XG4gICAgaWYgKGVudGl0eSAmJiBlbnRpdHkuaXNBZGRlZFRvRW5naW5lKCkpIHtcbiAgICAgIGNvbnN0IGVudGl0eUlkID0gZW50aXR5LnV1aWRcbiAgICAgIGNvbnN0IHBhcmVudCA9IGVudGl0eS5nZXRQYXJlbnQoKVxuXG4gICAgICB0aGlzLmRjbC5hZGRFbnRpdHkoZW50aXR5SWQpXG5cbiAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgLy8gSWYgdGhlIGVudGl0eSBoYXMgYSBwYXJlbnQsIHdlIHNlbmQgdGhlIHRoZSBlbnBhcmVudGluZyBzaWduYWxcbiAgICAgICAgLy8gb3RoZXJ3aXNlIHRoZSBlbmdpbmUgd2lsbCBrbm93IHRoZSBlbnRpdHkgaXMgc2V0IGFzIGEgY2hpbGQgb2ZcbiAgICAgICAgLy8gZW5naW5lLnJvb3RFbnRpdHkgYnkgZGVmYXVsdFxuICAgICAgICB0aGlzLmRjbC5zZXRQYXJlbnQoZW50aXR5SWQsIHBhcmVudC51dWlkKVxuICAgICAgfVxuXG4gICAgICAvLyBUaGlzIGNyZWF0ZXMgYSBjYWNoZSBkaWN0aW9uYXJ5IHRvIGF2b2lkIHNlbmQgcmVkdW5kYW50IGluZm9ybWF0aW9uIHRvXG4gICAgICAvLyB0aGUgZW5naW5lIGluIG9yZGVyIHRvIGF2b2lkIHVubmVjZXNzYXJ5IHdvcmsgaW4gdGhlIG1haW4gdGhyZWFkLlxuICAgICAgdGhpcy5jYWNoZWRDb21wb25lbnRzW2VudGl0eUlkXSA9IHt9XG5cbiAgICAgIC8vIHRoaXMgaXRlcmF0b3Igc2VuZHMgdGhlIGN1cnJlbnQgY29tcG9uZW50cyBvZiB0ZSBlbmdpbmUgYXQgdGhlIG1vbWVudFxuICAgICAgLy8gb2YgYWRkaXRpb25cbiAgICAgIGZvciAoY29uc3QgY29tcG9uZW50TmFtZSBpbiBlbnRpdHkuY29tcG9uZW50cykge1xuICAgICAgICBjb25zdCBjb21wb25lbnQgPSBlbnRpdHkuY29tcG9uZW50c1tjb21wb25lbnROYW1lXVxuICAgICAgICBjb25zdCBjbGFzc0lkID0gZ2V0Q29tcG9uZW50Q2xhc3NJZChjb21wb25lbnQpXG5cbiAgICAgICAgaWYgKGNsYXNzSWQgIT09IG51bGwpIHtcbiAgICAgICAgICBpZiAoaXNEaXNwb3NhYmxlQ29tcG9uZW50KGNvbXBvbmVudCkpIHtcbiAgICAgICAgICAgIC8vIFNlbmQgdGhlIGF0dGFjaCBjb21wb25lbnQgc2lnbmFsXG4gICAgICAgICAgICB0aGlzLmRjbC5hdHRhY2hFbnRpdHlDb21wb25lbnQoXG4gICAgICAgICAgICAgIGVudGl0eS51dWlkLFxuICAgICAgICAgICAgICBjb21wb25lbnROYW1lLFxuICAgICAgICAgICAgICBnZXRDb21wb25lbnRJZChjb21wb25lbnQpXG4gICAgICAgICAgICApXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbXBvbmVudEpzb246IHN0cmluZyA9IEpTT04uc3RyaW5naWZ5KGNvbXBvbmVudClcblxuICAgICAgICAgICAgLy8gU2VuZCB0aGUgdXBkYXRlZCBjb21wb25lbnRcbiAgICAgICAgICAgIHRoaXMuZGNsLnVwZGF0ZUVudGl0eUNvbXBvbmVudChcbiAgICAgICAgICAgICAgZW50aXR5SWQsXG4gICAgICAgICAgICAgIGNvbXBvbmVudE5hbWUsXG4gICAgICAgICAgICAgIGNsYXNzSWQsXG4gICAgICAgICAgICAgIGNvbXBvbmVudEpzb25cbiAgICAgICAgICAgIClcblxuICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBjYWNoZWQgY29weSBvZiB0aGUgc2VudCBjb21wb25lbnRcbiAgICAgICAgICAgIHRoaXMuY2FjaGVkQ29tcG9uZW50c1tlbnRpdHlJZF1bY29tcG9uZW50TmFtZV0gPSBjb21wb25lbnRKc29uXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIHN5c3RlbS5vblJlbW92ZUVudGl0eSBpcyBjYWxsZWQgYnkgdGhlIGVuZ2luZSB3aGVuIGEgZW50aXR5IGdldHMgcmVtb3ZlZFxuICAgKiBmcm9tIHRoZSBlbmdpbmUuXG4gICAqL1xuICBvblJlbW92ZUVudGl0eShlbnRpdHk6IElFbnRpdHkpIHtcbiAgICBpZiAoZW50aXR5LmlzQWRkZWRUb0VuZ2luZSgpKSB7XG4gICAgICBjb25zdCBlbnRpdHlJZCA9IGVudGl0eS51dWlkXG5cbiAgICAgIC8vIFNlbmQgdGhlIHJlbW92ZUVudGl0eSBzaWduYWxcbiAgICAgIHRoaXMuZGNsLnJlbW92ZUVudGl0eShlbnRpdHlJZClcblxuICAgICAgLy8gUmVtb3ZlIHRoZSBjYWNoZXMgZnJvbSBsb2NhbCBtZW1vcnlcbiAgICAgIGRlbGV0ZSB0aGlzLmNhY2hlZENvbXBvbmVudHNbZW50aXR5SWRdXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCBhdCB0aGUgZW5kIG9mIGV2ZXJ5IHVwZGF0ZSBjeWNsZS5cbiAgICogSXQgZmluZHMgYW5kIHNlbmRzIHVwZGF0ZXMgaW4gY29tcG9uZW50cyBvZiB0aGUgZW5naW5lIGVudGl0aWVzLlxuICAgKi9cbiAgcHJpdmF0ZSBwcmVzZW50RW50aXRpZXMoKSB7XG4gICAgZm9yIChjb25zdCBpIGluIHRoaXMuZW5naW5lLmVudGl0aWVzKSB7XG4gICAgICBjb25zdCBlbnRpdHkgPSB0aGlzLmVuZ2luZS5lbnRpdGllc1tpXVxuXG4gICAgICBmb3IgKGNvbnN0IGNvbXBvbmVudE5hbWUgaW4gZW50aXR5LmNvbXBvbmVudHMpIHtcbiAgICAgICAgY29uc3QgY29tcG9uZW50ID0gZW50aXR5LmNvbXBvbmVudHNbY29tcG9uZW50TmFtZV1cbiAgICAgICAgY29uc3QgY2xhc3NJZCA9IGdldENvbXBvbmVudENsYXNzSWQoY29tcG9uZW50KVxuXG4gICAgICAgIGlmIChjbGFzc0lkICE9PSBudWxsICYmICFpc0Rpc3Bvc2FibGVDb21wb25lbnQoY29tcG9uZW50KSkge1xuICAgICAgICAgIGNvbnN0IGpzb25SZXByZXNlbnRhdGlvbiA9IHRoaXMuZ2V0SnNvbklmRGlydHkoXG4gICAgICAgICAgICBlbnRpdHkudXVpZCxcbiAgICAgICAgICAgIGNvbXBvbmVudE5hbWUsXG4gICAgICAgICAgICBjb21wb25lbnRcbiAgICAgICAgICApXG4gICAgICAgICAgaWYgKGpzb25SZXByZXNlbnRhdGlvbikge1xuICAgICAgICAgICAgLy8gU2VuZCB0aGUgdXBkYXRlZCBjb21wb25lbnRcbiAgICAgICAgICAgIHRoaXMuZGNsLnVwZGF0ZUVudGl0eUNvbXBvbmVudChcbiAgICAgICAgICAgICAgZW50aXR5LnV1aWQsXG4gICAgICAgICAgICAgIGNvbXBvbmVudE5hbWUsXG4gICAgICAgICAgICAgIGNsYXNzSWQsXG4gICAgICAgICAgICAgIGpzb25SZXByZXNlbnRhdGlvblxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgdGhpcy5jbGVhckRpcnR5KFxuICAgICAgICAgICAgICBlbnRpdHkudXVpZCxcbiAgICAgICAgICAgICAgY29tcG9uZW50TmFtZSxcbiAgICAgICAgICAgICAgY29tcG9uZW50LFxuICAgICAgICAgICAgICBqc29uUmVwcmVzZW50YXRpb25cbiAgICAgICAgICAgIClcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IGlkIGluIHRoaXMuZW5naW5lLmRpc3Bvc2FibGVDb21wb25lbnRzKSB7XG4gICAgICBjb25zdCBjb21wb25lbnQgPSB0aGlzLmVuZ2luZS5kaXNwb3NhYmxlQ29tcG9uZW50c1tpZF1cbiAgICAgIGlmIChjb21wb25lbnQgaW5zdGFuY2VvZiBPYnNlcnZhYmxlQ29tcG9uZW50ICYmIGNvbXBvbmVudC5kaXJ0eSkge1xuICAgICAgICB0aGlzLmRjbC5jb21wb25lbnRVcGRhdGVkKGlkLCBKU09OLnN0cmluZ2lmeShjb21wb25lbnQpKVxuICAgICAgICBjb21wb25lbnQuZGlydHkgPSBmYWxzZVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgYWZ0ZXIgYSBjb21wb25lbnQgaXMgYWRkZWQgdG8gYW4gZW50aXR5LiBUaGUgZXZlbnRcbiAgICogKHBhcmFtIDEpIGNvbnRhaW5zIHRoZSBuZWNlc3NhcnkgaW5mb3JtYXRpb24gdG8gbm90aWZ5IHRoZSBlbmdpbmUgYWJvdXQgdGhlXG4gICAqIGNvbXBvbmVudCB0aGF0IHdhcyBhZGRlZCBhbmQgdGhlIGVudGl0eS5cbiAgICovXG4gIHByaXZhdGUgY29tcG9uZW50QWRkZWQoZXZlbnQ6IENvbXBvbmVudEFkZGVkKSB7XG4gICAgaWYgKGV2ZW50LmVudGl0eS5pc0FkZGVkVG9FbmdpbmUoKSkge1xuICAgICAgY29uc3QgY29tcG9uZW50ID0gZXZlbnQuZW50aXR5LmNvbXBvbmVudHNbZXZlbnQuY29tcG9uZW50TmFtZV1cblxuICAgICAgaWYgKGlzRGlzcG9zYWJsZUNvbXBvbmVudChjb21wb25lbnQpKSB7XG4gICAgICAgIHRoaXMuZGNsLmF0dGFjaEVudGl0eUNvbXBvbmVudChcbiAgICAgICAgICBldmVudC5lbnRpdHkudXVpZCxcbiAgICAgICAgICBldmVudC5jb21wb25lbnROYW1lLFxuICAgICAgICAgIGdldENvbXBvbmVudElkKGNvbXBvbmVudClcbiAgICAgICAgKVxuICAgICAgfSBlbHNlIGlmIChldmVudC5jbGFzc0lkICE9PSBudWxsKSB7XG4gICAgICAgIGNvbnN0IGNvbXBvbmVudEpzb246IHN0cmluZyA9IEpTT04uc3RyaW5naWZ5KGNvbXBvbmVudClcblxuICAgICAgICAvLyBTZW5kIHRoZSB1cGRhdGVkIGNvbXBvbmVudFxuICAgICAgICB0aGlzLmRjbC51cGRhdGVFbnRpdHlDb21wb25lbnQoXG4gICAgICAgICAgZXZlbnQuZW50aXR5LnV1aWQsXG4gICAgICAgICAgZXZlbnQuY29tcG9uZW50TmFtZSxcbiAgICAgICAgICBldmVudC5jbGFzc0lkLFxuICAgICAgICAgIGNvbXBvbmVudEpzb25cbiAgICAgICAgKVxuXG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgY2FjaGVkIGNvcHkgb2YgdGhlIHNlbnQgY29tcG9uZW50XG4gICAgICAgIHRoaXMuY2FjaGVkQ29tcG9uZW50c1tldmVudC5lbnRpdHkudXVpZF1bZXZlbnQuY29tcG9uZW50TmFtZV0gPVxuICAgICAgICAgIGNvbXBvbmVudEpzb25cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBtZXRob2QgaXMgY2FsbGVkIHdoZW4gYSBjb21wb25lbnQgaXMgcmVtb3ZlZCBmcm9tIGFuIGVudGl0eS5cbiAgICovXG4gIHByaXZhdGUgY29tcG9uZW50UmVtb3ZlZChldmVudDogQ29tcG9uZW50UmVtb3ZlZCkge1xuICAgIGlmIChldmVudC5lbnRpdHkuaXNBZGRlZFRvRW5naW5lKCkpIHtcbiAgICAgIHRoaXMuZGNsLnJlbW92ZUVudGl0eUNvbXBvbmVudChldmVudC5lbnRpdHkudXVpZCwgZXZlbnQuY29tcG9uZW50TmFtZSlcblxuICAgICAgLy8gUmVtb3ZlIHRoZSBjYWNoZWQgY29tcG9uZW50IHNvIHdlIGNhbiBzZW5kIGl0IGFnYWluIHdoZW4gcmUtYWRkaW5nXG4gICAgICBkZWxldGUgdGhpcy5jYWNoZWRDb21wb25lbnRzW2V2ZW50LmVudGl0eS51dWlkXVtldmVudC5jb21wb25lbnROYW1lXVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgYWZ0ZXIgYSBkaXNwb3NhYmxlQ29tcG9uZW50IGlzIGNyZWF0ZWQuXG4gICAqIEl0IGluc3RhbnRpYXRlcyB0aGUgY29tcG9uZW50IGluIHRoZSBlbmdpbmUsIHRoZSBldmVudCB0aGF0IHVwZGF0ZXMgdGhlXG4gICAqIGNyZWF0ZWQgY29tcG9uZW50IGlzIGZpcmVkIGltbWVkaWF0bHkgYWZ0ZXIuXG4gICAqL1xuICBwcml2YXRlIGRpc3Bvc2FibGVDb21wb25lbnRDcmVhdGVkKGV2ZW50OiBEaXNwb3NhYmxlQ29tcG9uZW50Q3JlYXRlZCkge1xuICAgIHRoaXMuZGNsLmNvbXBvbmVudENyZWF0ZWQoXG4gICAgICBldmVudC5jb21wb25lbnRJZCxcbiAgICAgIGV2ZW50LmNvbXBvbmVudE5hbWUsXG4gICAgICBldmVudC5jbGFzc0lkXG4gICAgKVxuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCBhZnRlciBhIGRpc3Bvc2FibGVDb21wb25lbnQgaXMgdXBkYXRlZCwgb25jZSBwZXJcbiAgICogdXBkYXRlIGN5Y2xlIGFuZCBvbmNlIGFmdGVyIGNyZWF0aW9uLlxuICAgKi9cbiAgcHJpdmF0ZSBkaXNwb3NhYmxlQ29tcG9uZW50UmVtb3ZlZChldmVudDogRGlzcG9zYWJsZUNvbXBvbmVudFJlbW92ZWQpIHtcbiAgICB0aGlzLmRjbC5jb21wb25lbnREaXNwb3NlZChldmVudC5jb21wb25lbnRJZClcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgcmlnaHQgYWZ0ZXIgYSBkaXBvc2FibGVDb21wb25lbnQgZ2V0cyBkaXNwb3NlZC4gVGhhdFxuICAgKiBwcm9jZXNzIGlzIG1hbnVhbC5cbiAgICpcbiAgICogVE9ETyhtZW5kdXosZGFuaSk6IFdoYXQgaGFwcGVucyBpZiBhIGRpc3Bvc2FibGVDb21wb25lbnQgZ2V0cyBkaXNwb3NlZCBhbmRcbiAgICogaXQgcmVtYWlucyBhdHRhY2hlZCB0byBzb21lIGVudGl0aWVzP1xuICAgKi9cbiAgcHJpdmF0ZSBkaXNwb3NhYmxlQ29tcG9uZW50VXBkYXRlZChldmVudDogRGlzcG9zYWJsZUNvbXBvbmVudFVwZGF0ZWQpIHtcbiAgICB0aGlzLmRjbC5jb21wb25lbnRVcGRhdGVkKFxuICAgICAgZXZlbnQuY29tcG9uZW50SWQsXG4gICAgICBKU09OLnN0cmluZ2lmeShldmVudC5jb21wb25lbnQpXG4gICAgKVxuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCB3aGVuIGEgcGFyZW50IGNoYW5nZXMgaW4gYW4gZW50aXR5LlxuICAgKi9cbiAgcHJpdmF0ZSBwYXJlbnRDaGFuZ2VkKGV2ZW50OiBQYXJlbnRDaGFuZ2VkKSB7XG4gICAgdGhpcy5kY2wuc2V0UGFyZW50KFxuICAgICAgZXZlbnQuZW50aXR5LnV1aWQsXG4gICAgICBldmVudC5wYXJlbnQgPyBldmVudC5wYXJlbnQudXVpZCA6IFJPT1RfRU5USVRZX0lEXG4gICAgKVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRKc29uSWZEaXJ0eShcbiAgICBlbnRpdHlJZDogc3RyaW5nLFxuICAgIGNvbXBvbmVudE5hbWU6IHN0cmluZyxcbiAgICBjb21wb25lbnQ6IGFueVxuICApOiBmYWxzZSB8IHN0cmluZyB7XG4gICAgY29uc3QganNvblJlcHJlc2VudGF0aW9uID0gSlNPTi5zdHJpbmdpZnkoY29tcG9uZW50KVxuICAgIHJldHVybiAoXG4gICAgICBqc29uUmVwcmVzZW50YXRpb24gIT09IHRoaXMuY2FjaGVkQ29tcG9uZW50c1tlbnRpdHlJZF1bY29tcG9uZW50TmFtZV0gJiZcbiAgICAgIGpzb25SZXByZXNlbnRhdGlvblxuICAgIClcbiAgfVxuXG4gIHByaXZhdGUgY2xlYXJEaXJ0eShcbiAgICBlbnRpdHlJZDogc3RyaW5nLFxuICAgIGNvbXBvbmVudE5hbWU6IHN0cmluZyxcbiAgICBjb21wb25lbnQ6IGFueSxcbiAgICBqc29uUmVwcmVzZW50YXRpb246IHN0cmluZ1xuICApIHtcbiAgICB0aGlzLmNhY2hlZENvbXBvbmVudHNbZW50aXR5SWRdW2NvbXBvbmVudE5hbWVdID0ganNvblJlcHJlc2VudGF0aW9uXG4gIH1cbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5SQUQyREVHID0gZXhwb3J0cy5ERUcyUkFEID0gZXhwb3J0cy5FcHNpbG9uID0gZXhwb3J0cy5Ub0xpbmVhclNwYWNlID0gZXhwb3J0cy5Ub0dhbW1hU3BhY2UgPSBleHBvcnRzLlNwYWNlID0gZXhwb3J0cy5PcmllbnRhdGlvbiA9IHZvaWQgMDtcbi8qKlxuICogRGVmaW5lcyBwb3RlbnRpYWwgb3JpZW50YXRpb24gZm9yIGJhY2sgZmFjZSBjdWxsaW5nXG4gKiBAcHVibGljXG4gKi9cbnZhciBPcmllbnRhdGlvbjtcbihmdW5jdGlvbiAoT3JpZW50YXRpb24pIHtcbiAgICAvKipcbiAgICAgKiBDbG9ja3dpc2VcbiAgICAgKi9cbiAgICBPcmllbnRhdGlvbltPcmllbnRhdGlvbltcIkNXXCJdID0gMF0gPSBcIkNXXCI7XG4gICAgLyoqIENvdW50ZXIgY2xvY2t3aXNlICovXG4gICAgT3JpZW50YXRpb25bT3JpZW50YXRpb25bXCJDQ1dcIl0gPSAxXSA9IFwiQ0NXXCI7XG59KShPcmllbnRhdGlvbiA9IGV4cG9ydHMuT3JpZW50YXRpb24gfHwgKGV4cG9ydHMuT3JpZW50YXRpb24gPSB7fSkpO1xuLyoqXG4gKiBEZWZpbmVzIHN1cHBvcnRlZCBzcGFjZXNcbiAqIEBwdWJsaWNcbiAqL1xudmFyIFNwYWNlO1xuKGZ1bmN0aW9uIChTcGFjZSkge1xuICAgIC8qKiBMb2NhbCAob2JqZWN0KSBzcGFjZSAqL1xuICAgIFNwYWNlW1NwYWNlW1wiTE9DQUxcIl0gPSAwXSA9IFwiTE9DQUxcIjtcbiAgICAvKiogV29ybGQgc3BhY2UgKi9cbiAgICBTcGFjZVtTcGFjZVtcIldPUkxEXCJdID0gMV0gPSBcIldPUkxEXCI7XG4gICAgLyoqIEJvbmUgc3BhY2UgKi9cbiAgICBTcGFjZVtTcGFjZVtcIkJPTkVcIl0gPSAyXSA9IFwiQk9ORVwiO1xufSkoU3BhY2UgPSBleHBvcnRzLlNwYWNlIHx8IChleHBvcnRzLlNwYWNlID0ge30pKTtcbi8qKlxuICogQ29uc3RhbnQgdXNlZCB0byBjb252ZXJ0IGEgdmFsdWUgdG8gZ2FtbWEgc3BhY2VcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0cy5Ub0dhbW1hU3BhY2UgPSAxIC8gMi4yO1xuLyoqXG4gKiBDb25zdGFudCB1c2VkIHRvIGNvbnZlcnQgYSB2YWx1ZSB0byBsaW5lYXIgc3BhY2VcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0cy5Ub0xpbmVhclNwYWNlID0gMi4yO1xuLyoqXG4gKiBDb25zdGFudCB1c2VkIHRvIGRlZmluZSB0aGUgbWluaW1hbCBudW1iZXIgdmFsdWUgaW4gQmFieWxvbi5qc1xuICogQHB1YmxpY1xuICovXG5leHBvcnRzLkVwc2lsb24gPSAwLjAwMDAwMTtcbi8qKlxuICogQ29uc3RhbnQgdXNlZCB0byBjb252ZXJ0IGZyb20gRXVsZXIgZGVncmVlcyB0byByYWRpYW5zXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydHMuREVHMlJBRCA9IE1hdGguUEkgLyAxODA7XG4vKipcbiAqIENvbnN0YW50IHVzZWQgdG8gY29udmVydCBmcm9tIHJhZGlhbnMgdG8gRXVsZXIgZGVncmVlc1xuICogQHB1YmxpY1xuICovXG5leHBvcnRzLlJBRDJERUcgPSAzNjAgLyAoTWF0aC5QSSAqIDIpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmJ1aWxkQXJyYXkgPSB2b2lkIDA7XG4vKipcbiAqIEBpbnRlcm5hbFxuICogUmV0dXJucyBhbiBhcnJheSBvZiB0aGUgZ2l2ZW4gc2l6ZSBmaWxsZWQgd2l0aCBlbGVtZW50IGJ1aWx0IGZyb20gdGhlIGdpdmVuIGNvbnN0cnVjdG9yIGFuZCB0aGUgcGFyYW10ZXJzXG4gKiBAcGFyYW0gc2l6ZSAtIHRoZSBudW1iZXIgb2YgZWxlbWVudCB0byBjb25zdHJ1Y3QgYW5kIHB1dCBpbiB0aGUgYXJyYXlcbiAqIEBwYXJhbSBpdGVtQnVpbGRlciAtIGEgY2FsbGJhY2sgcmVzcG9uc2libGUgZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZSBvZiBpdGVtLiBDYWxsZWQgb25jZSBwZXIgYXJyYXkgZW50cnkuXG4gKiBAcmV0dXJucyBhIG5ldyBhcnJheSBmaWxsZWQgd2l0aCBuZXcgb2JqZWN0c1xuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGJ1aWxkQXJyYXkoc2l6ZSwgaXRlbUJ1aWxkZXIpIHtcbiAgICBjb25zdCBhID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaXplOyArK2kpIHtcbiAgICAgICAgYS5wdXNoKGl0ZW1CdWlsZGVyKCkpO1xuICAgIH1cbiAgICByZXR1cm4gYTtcbn1cbmV4cG9ydHMuYnVpbGRBcnJheSA9IGJ1aWxkQXJyYXk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU2NhbGFyID0gdm9pZCAwO1xuLyoqXG4gKiBTY2FsYXIgY29tcHV0YXRpb24gbGlicmFyeVxuICogQHB1YmxpY1xuICovXG5jbGFzcyBTY2FsYXIge1xuICAgIC8qKlxuICAgICAqIEJvb2xlYW4gOiB0cnVlIGlmIHRoZSBhYnNvbHV0ZSBkaWZmZXJlbmNlIGJldHdlZW4gYSBhbmQgYiBpcyBsb3dlciB0aGFuIGVwc2lsb24gKGRlZmF1bHQgPSAxLjQwMTI5OEUtNDUpXG4gICAgICogQHBhcmFtIGEgLSBudW1iZXJcbiAgICAgKiBAcGFyYW0gYiAtIG51bWJlclxuICAgICAqIEBwYXJhbSBlcHNpbG9uIC0gKGRlZmF1bHQgPSAxLjQwMTI5OEUtNDUpXG4gICAgICogQHJldHVybnMgdHJ1ZSBpZiB0aGUgYWJzb2x1dGUgZGlmZmVyZW5jZSBiZXR3ZWVuIGEgYW5kIGIgaXMgbG93ZXIgdGhhbiBlcHNpbG9uIChkZWZhdWx0ID0gMS40MDEyOThFLTQ1KVxuICAgICAqL1xuICAgIHN0YXRpYyBXaXRoaW5FcHNpbG9uKGEsIGIsIGVwc2lsb24gPSAxLjQwMTI5OGUtNDUpIHtcbiAgICAgICAgY29uc3QgbnVtID0gYSAtIGI7XG4gICAgICAgIHJldHVybiAtZXBzaWxvbiA8PSBudW0gJiYgbnVtIDw9IGVwc2lsb247XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBzdHJpbmcgOiB0aGUgdXBwZXIgY2FzZSB0cmFuc2xhdGlvbiBvZiB0aGUgbnVtYmVyIGkgdG8gaGV4YWRlY2ltYWwuXG4gICAgICogQHBhcmFtIGkgLSBudW1iZXJcbiAgICAgKiBAcmV0dXJucyB0aGUgdXBwZXIgY2FzZSB0cmFuc2xhdGlvbiBvZiB0aGUgbnVtYmVyIGkgdG8gaGV4YWRlY2ltYWwuXG4gICAgICovXG4gICAgc3RhdGljIFRvSGV4KGkpIHtcbiAgICAgICAgY29uc3Qgc3RyID0gaS50b1N0cmluZygxNik7XG4gICAgICAgIGlmIChpIDw9IDE1KSB7XG4gICAgICAgICAgICByZXR1cm4gKCcwJyArIHN0cikudG9VcHBlckNhc2UoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RyLnRvVXBwZXJDYXNlKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgLTEgaWYgdmFsdWUgaXMgbmVnYXRpdmUgYW5kICsxIGlzIHZhbHVlIGlzIHBvc2l0aXZlLlxuICAgICAqIEBwYXJhbSBfdmFsdWUgLSB0aGUgdmFsdWVcbiAgICAgKiBAcmV0dXJucyB0aGUgdmFsdWUgaXRzZWxmIGlmIGl0J3MgZXF1YWwgdG8gemVyby5cbiAgICAgKi9cbiAgICBzdGF0aWMgU2lnbih2YWx1ZSkge1xuICAgICAgICBjb25zdCBfdmFsdWUgPSArdmFsdWU7IC8vIGNvbnZlcnQgdG8gYSBudW1iZXJcbiAgICAgICAgaWYgKF92YWx1ZSA9PT0gMCB8fCBpc05hTihfdmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gX3ZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfdmFsdWUgPiAwID8gMSA6IC0xO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB2YWx1ZSBpdHNlbGYgaWYgaXQncyBiZXR3ZWVuIG1pbiBhbmQgbWF4LlxuICAgICAqIFJldHVybnMgbWluIGlmIHRoZSB2YWx1ZSBpcyBsb3dlciB0aGFuIG1pbi5cbiAgICAgKiBSZXR1cm5zIG1heCBpZiB0aGUgdmFsdWUgaXMgZ3JlYXRlciB0aGFuIG1heC5cbiAgICAgKiBAcGFyYW0gdmFsdWUgLSB0aGUgdmFsdWUgdG8gY2xtYXBcbiAgICAgKiBAcGFyYW0gbWluIC0gdGhlIG1pbiB2YWx1ZSB0byBjbGFtcCB0byAoZGVmYXVsdDogMClcbiAgICAgKiBAcGFyYW0gbWF4IC0gdGhlIG1heCB2YWx1ZSB0byBjbGFtcCB0byAoZGVmYXVsdDogMSlcbiAgICAgKiBAcmV0dXJucyB0aGUgY2xhbXBlZCB2YWx1ZVxuICAgICAqL1xuICAgIHN0YXRpYyBDbGFtcCh2YWx1ZSwgbWluID0gMCwgbWF4ID0gMSkge1xuICAgICAgICByZXR1cm4gTWF0aC5taW4obWF4LCBNYXRoLm1heChtaW4sIHZhbHVlKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIHRoZSBsb2cyIG9mIHZhbHVlLlxuICAgICAqIEBwYXJhbSB2YWx1ZSAtIHRoZSB2YWx1ZSB0byBjb21wdXRlIGxvZzIgb2ZcbiAgICAgKiBAcmV0dXJucyB0aGUgbG9nMiBvZiB2YWx1ZS5cbiAgICAgKi9cbiAgICBzdGF0aWMgTG9nMih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gTWF0aC5sb2codmFsdWUpICogTWF0aC5MT0cyRTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTG9vcHMgdGhlIHZhbHVlLCBzbyB0aGF0IGl0IGlzIG5ldmVyIGxhcmdlciB0aGFuIGxlbmd0aCBhbmQgbmV2ZXIgc21hbGxlciB0aGFuIDAuXG4gICAgICpcbiAgICAgKiBUaGlzIGlzIHNpbWlsYXIgdG8gdGhlIG1vZHVsbyBvcGVyYXRvciBidXQgaXQgd29ya3Mgd2l0aCBmbG9hdGluZyBwb2ludCBudW1iZXJzLlxuICAgICAqIEZvciBleGFtcGxlLCB1c2luZyAzLjAgZm9yIHQgYW5kIDIuNSBmb3IgbGVuZ3RoLCB0aGUgcmVzdWx0IHdvdWxkIGJlIDAuNS5cbiAgICAgKiBXaXRoIHQgPSA1IGFuZCBsZW5ndGggPSAyLjUsIHRoZSByZXN1bHQgd291bGQgYmUgMC4wLlxuICAgICAqIE5vdGUsIGhvd2V2ZXIsIHRoYXQgdGhlIGJlaGF2aW91ciBpcyBub3QgZGVmaW5lZCBmb3IgbmVnYXRpdmUgbnVtYmVycyBhcyBpdCBpcyBmb3IgdGhlIG1vZHVsbyBvcGVyYXRvclxuICAgICAqIEBwYXJhbSB2YWx1ZSAtIHRoZSB2YWx1ZVxuICAgICAqIEBwYXJhbSBsZW5ndGggLSB0aGUgbGVuZ3RoXG4gICAgICogQHJldHVybnMgdGhlIGxvb3BlZCB2YWx1ZVxuICAgICAqL1xuICAgIHN0YXRpYyBSZXBlYXQodmFsdWUsIGxlbmd0aCkge1xuICAgICAgICByZXR1cm4gdmFsdWUgLSBNYXRoLmZsb29yKHZhbHVlIC8gbGVuZ3RoKSAqIGxlbmd0aDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTm9ybWFsaXplIHRoZSB2YWx1ZSBiZXR3ZWVuIDAuMCBhbmQgMS4wIHVzaW5nIG1pbiBhbmQgbWF4IHZhbHVlc1xuICAgICAqIEBwYXJhbSB2YWx1ZSAtIHZhbHVlIHRvIG5vcm1hbGl6ZVxuICAgICAqIEBwYXJhbSBtaW4gLSBtYXggdG8gbm9ybWFsaXplIGJldHdlZW5cbiAgICAgKiBAcGFyYW0gbWF4IC0gbWluIHRvIG5vcm1hbGl6ZSBiZXR3ZWVuXG4gICAgICogQHJldHVybnMgdGhlIG5vcm1hbGl6ZWQgdmFsdWVcbiAgICAgKi9cbiAgICBzdGF0aWMgTm9ybWFsaXplKHZhbHVlLCBtaW4sIG1heCkge1xuICAgICAgICByZXR1cm4gKHZhbHVlIC0gbWluKSAvIChtYXggLSBtaW4pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZW5vcm1hbGl6ZSB0aGUgdmFsdWUgZnJvbSAwLjAgYW5kIDEuMCB1c2luZyBtaW4gYW5kIG1heCB2YWx1ZXNcbiAgICAgKiBAcGFyYW0gbm9ybWFsaXplZCAtIHZhbHVlIHRvIGRlbm9ybWFsaXplXG4gICAgICogQHBhcmFtIG1pbiAtIG1heCB0byBkZW5vcm1hbGl6ZSBiZXR3ZWVuXG4gICAgICogQHBhcmFtIG1heCAtIG1pbiB0byBkZW5vcm1hbGl6ZSBiZXR3ZWVuXG4gICAgICogQHJldHVybnMgdGhlIGRlbm9ybWFsaXplZCB2YWx1ZVxuICAgICAqL1xuICAgIHN0YXRpYyBEZW5vcm1hbGl6ZShub3JtYWxpemVkLCBtaW4sIG1heCkge1xuICAgICAgICByZXR1cm4gbm9ybWFsaXplZCAqIChtYXggLSBtaW4pICsgbWluO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGVzIHRoZSBzaG9ydGVzdCBkaWZmZXJlbmNlIGJldHdlZW4gdHdvIGdpdmVuIGFuZ2xlcyBnaXZlbiBpbiBkZWdyZWVzLlxuICAgICAqIEBwYXJhbSBjdXJyZW50IC0gY3VycmVudCBhbmdsZSBpbiBkZWdyZWVzXG4gICAgICogQHBhcmFtIHRhcmdldCAtIHRhcmdldCBhbmdsZSBpbiBkZWdyZWVzXG4gICAgICogQHJldHVybnMgdGhlIGRlbHRhXG4gICAgICovXG4gICAgc3RhdGljIERlbHRhQW5nbGUoY3VycmVudCwgdGFyZ2V0KSB7XG4gICAgICAgIGxldCBudW0gPSBTY2FsYXIuUmVwZWF0KHRhcmdldCAtIGN1cnJlbnQsIDM2MC4wKTtcbiAgICAgICAgaWYgKG51bSA+IDE4MC4wKSB7XG4gICAgICAgICAgICBudW0gLT0gMzYwLjA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGluZ1BvbmdzIHRoZSB2YWx1ZSB0LCBzbyB0aGF0IGl0IGlzIG5ldmVyIGxhcmdlciB0aGFuIGxlbmd0aCBhbmQgbmV2ZXIgc21hbGxlciB0aGFuIDAuXG4gICAgICogQHBhcmFtIHR4IC0gdmFsdWVcbiAgICAgKiBAcGFyYW0gbGVuZ3RoIC0gbGVuZ3RoXG4gICAgICogQHJldHVybnMgVGhlIHJldHVybmVkIHZhbHVlIHdpbGwgbW92ZSBiYWNrIGFuZCBmb3J0aCBiZXR3ZWVuIDAgYW5kIGxlbmd0aFxuICAgICAqL1xuICAgIHN0YXRpYyBQaW5nUG9uZyh0eCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHQgPSBTY2FsYXIuUmVwZWF0KHR4LCBsZW5ndGggKiAyLjApO1xuICAgICAgICByZXR1cm4gbGVuZ3RoIC0gTWF0aC5hYnModCAtIGxlbmd0aCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEludGVycG9sYXRlcyBiZXR3ZWVuIG1pbiBhbmQgbWF4IHdpdGggc21vb3RoaW5nIGF0IHRoZSBsaW1pdHMuXG4gICAgICpcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGludGVycG9sYXRlcyBiZXR3ZWVuIG1pbiBhbmQgbWF4IGluIGEgc2ltaWxhciB3YXkgdG8gTGVycC4gSG93ZXZlciwgdGhlIGludGVycG9sYXRpb24gd2lsbCBncmFkdWFsbHkgc3BlZWQgdXBcbiAgICAgKiBmcm9tIHRoZSBzdGFydCBhbmQgc2xvdyBkb3duIHRvd2FyZCB0aGUgZW5kLiBUaGlzIGlzIHVzZWZ1bCBmb3IgY3JlYXRpbmcgbmF0dXJhbC1sb29raW5nIGFuaW1hdGlvbiwgZmFkaW5nIGFuZCBvdGhlciB0cmFuc2l0aW9ucy5cbiAgICAgKiBAcGFyYW0gZnJvbSAtIGZyb21cbiAgICAgKiBAcGFyYW0gdG8gLSB0b1xuICAgICAqIEBwYXJhbSB0eCAtIHZhbHVlXG4gICAgICogQHJldHVybnMgdGhlIHNtb290aCBzdGVwcGVkIHZhbHVlXG4gICAgICovXG4gICAgc3RhdGljIFNtb290aFN0ZXAoZnJvbSwgdG8sIHR4KSB7XG4gICAgICAgIGxldCB0ID0gU2NhbGFyLkNsYW1wKHR4KTtcbiAgICAgICAgdCA9IC0yLjAgKiB0ICogdCAqIHQgKyAzLjAgKiB0ICogdDtcbiAgICAgICAgcmV0dXJuIHRvICogdCArIGZyb20gKiAoMS4wIC0gdCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1vdmVzIGEgdmFsdWUgY3VycmVudCB0b3dhcmRzIHRhcmdldC5cbiAgICAgKlxuICAgICAqIFRoaXMgaXMgZXNzZW50aWFsbHkgdGhlIHNhbWUgYXMgTWF0aGYuTGVycCBidXQgaW5zdGVhZCB0aGUgZnVuY3Rpb24gd2lsbCBlbnN1cmUgdGhhdCB0aGUgc3BlZWQgbmV2ZXIgZXhjZWVkcyBtYXhEZWx0YS5cbiAgICAgKiBOZWdhdGl2ZSB2YWx1ZXMgb2YgbWF4RGVsdGEgcHVzaGVzIHRoZSB2YWx1ZSBhd2F5IGZyb20gdGFyZ2V0LlxuICAgICAqIEBwYXJhbSBjdXJyZW50IC0gY3VycmVudCB2YWx1ZVxuICAgICAqIEBwYXJhbSB0YXJnZXQgLSB0YXJnZXQgdmFsdWVcbiAgICAgKiBAcGFyYW0gbWF4RGVsdGEgLSBtYXggZGlzdGFuY2UgdG8gbW92ZVxuICAgICAqIEByZXR1cm5zIHJlc3VsdGluZyB2YWx1ZVxuICAgICAqL1xuICAgIHN0YXRpYyBNb3ZlVG93YXJkcyhjdXJyZW50LCB0YXJnZXQsIG1heERlbHRhKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSAwO1xuICAgICAgICBpZiAoTWF0aC5hYnModGFyZ2V0IC0gY3VycmVudCkgPD0gbWF4RGVsdGEpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHRhcmdldDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGN1cnJlbnQgKyBTY2FsYXIuU2lnbih0YXJnZXQgLSBjdXJyZW50KSAqIG1heERlbHRhO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNhbWUgYXMgTW92ZVRvd2FyZHMgYnV0IG1ha2VzIHN1cmUgdGhlIHZhbHVlcyBpbnRlcnBvbGF0ZSBjb3JyZWN0bHkgd2hlbiB0aGV5IHdyYXAgYXJvdW5kIDM2MCBkZWdyZWVzLlxuICAgICAqXG4gICAgICogVmFyaWFibGVzIGN1cnJlbnQgYW5kIHRhcmdldCBhcmUgYXNzdW1lZCB0byBiZSBpbiBkZWdyZWVzLiBGb3Igb3B0aW1pemF0aW9uIHJlYXNvbnMsIG5lZ2F0aXZlIHZhbHVlcyBvZiBtYXhEZWx0YVxuICAgICAqICBhcmUgbm90IHN1cHBvcnRlZCBhbmQgbWF5IGNhdXNlIG9zY2lsbGF0aW9uLiBUbyBwdXNoIGN1cnJlbnQgYXdheSBmcm9tIGEgdGFyZ2V0IGFuZ2xlLCBhZGQgMTgwIHRvIHRoYXQgYW5nbGUgaW5zdGVhZC5cbiAgICAgKiBAcGFyYW0gY3VycmVudCAtIGN1cnJlbnQgdmFsdWVcbiAgICAgKiBAcGFyYW0gdGFyZ2V0IC0gdGFyZ2V0IHZhbHVlXG4gICAgICogQHBhcmFtIG1heERlbHRhIC0gbWF4IGRpc3RhbmNlIHRvIG1vdmVcbiAgICAgKiBAcmV0dXJucyByZXN1bHRpbmcgYW5nbGVcbiAgICAgKi9cbiAgICBzdGF0aWMgTW92ZVRvd2FyZHNBbmdsZShjdXJyZW50LCB0YXJnZXQsIG1heERlbHRhKSB7XG4gICAgICAgIGNvbnN0IG51bSA9IFNjYWxhci5EZWx0YUFuZ2xlKGN1cnJlbnQsIHRhcmdldCk7XG4gICAgICAgIGxldCByZXN1bHQgPSAwO1xuICAgICAgICBpZiAoLW1heERlbHRhIDwgbnVtICYmIG51bSA8IG1heERlbHRhKSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0YXJnZXQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQgPSBTY2FsYXIuTW92ZVRvd2FyZHMoY3VycmVudCwgY3VycmVudCArIG51bSwgbWF4RGVsdGEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgc2NhbGFyIHdpdGggdmFsdWVzIGxpbmVhcmx5IGludGVycG9sYXRlZCBvZiBcImFtb3VudFwiIGJldHdlZW4gdGhlIHN0YXJ0IHNjYWxhciBhbmQgdGhlIGVuZCBzY2FsYXIuXG4gICAgICogQHBhcmFtIHN0YXJ0IC0gc3RhcnQgdmFsdWVcbiAgICAgKiBAcGFyYW0gZW5kIC0gdGFyZ2V0IHZhbHVlXG4gICAgICogQHBhcmFtIGFtb3VudCAtIGFtb3VudCB0byBsZXJwIGJldHdlZW5cbiAgICAgKiBAcmV0dXJucyB0aGUgbGVycGVkIHZhbHVlXG4gICAgICovXG4gICAgc3RhdGljIExlcnAoc3RhcnQsIGVuZCwgYW1vdW50KSB7XG4gICAgICAgIHJldHVybiBzdGFydCArIChlbmQgLSBzdGFydCkgKiBhbW91bnQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNhbWUgYXMgTGVycCBidXQgbWFrZXMgc3VyZSB0aGUgdmFsdWVzIGludGVycG9sYXRlIGNvcnJlY3RseSB3aGVuIHRoZXkgd3JhcCBhcm91bmQgMzYwIGRlZ3JlZXMuXG4gICAgICogVGhlIHBhcmFtZXRlciB0IGlzIGNsYW1wZWQgdG8gdGhlIHJhbmdlIFswLCAxXS4gVmFyaWFibGVzIGEgYW5kIGIgYXJlIGFzc3VtZWQgdG8gYmUgaW4gZGVncmVlcy5cbiAgICAgKiBAcGFyYW0gc3RhcnQgLSBzdGFydCB2YWx1ZVxuICAgICAqIEBwYXJhbSBlbmQgLSB0YXJnZXQgdmFsdWVcbiAgICAgKiBAcGFyYW0gYW1vdW50IC0gYW1vdW50IHRvIGxlcnAgYmV0d2VlblxuICAgICAqIEByZXR1cm5zIHRoZSBsZXJwZWQgdmFsdWVcbiAgICAgKi9cbiAgICBzdGF0aWMgTGVycEFuZ2xlKHN0YXJ0LCBlbmQsIGFtb3VudCkge1xuICAgICAgICBsZXQgbnVtID0gU2NhbGFyLlJlcGVhdChlbmQgLSBzdGFydCwgMzYwLjApO1xuICAgICAgICBpZiAobnVtID4gMTgwLjApIHtcbiAgICAgICAgICAgIG51bSAtPSAzNjAuMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RhcnQgKyBudW0gKiBTY2FsYXIuQ2xhbXAoYW1vdW50KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlcyB0aGUgbGluZWFyIHBhcmFtZXRlciB0IHRoYXQgcHJvZHVjZXMgdGhlIGludGVycG9sYW50IHZhbHVlIHdpdGhpbiB0aGUgcmFuZ2UgW2EsIGJdLlxuICAgICAqIEBwYXJhbSBhIC0gc3RhcnQgdmFsdWVcbiAgICAgKiBAcGFyYW0gYiAtIHRhcmdldCB2YWx1ZVxuICAgICAqIEBwYXJhbSB2YWx1ZSAtIHZhbHVlIGJldHdlZW4gYSBhbmQgYlxuICAgICAqIEByZXR1cm5zIHRoZSBpbnZlcnNlTGVycCB2YWx1ZVxuICAgICAqL1xuICAgIHN0YXRpYyBJbnZlcnNlTGVycChhLCBiLCB2YWx1ZSkge1xuICAgICAgICBsZXQgcmVzdWx0ID0gMDtcbiAgICAgICAgaWYgKGEgIT09IGIpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IFNjYWxhci5DbGFtcCgodmFsdWUgLSBhKSAvIChiIC0gYSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0ID0gMC4wO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgc2NhbGFyIGxvY2F0ZWQgZm9yIFwiYW1vdW50XCIgKGZsb2F0KSBvbiB0aGUgSGVybWl0ZSBzcGxpbmUgZGVmaW5lZCBieSB0aGUgc2NhbGFycyBcInZhbHVlMVwiLCBcInZhbHVlM1wiLCBcInRhbmdlbnQxXCIsIFwidGFuZ2VudDJcIi5cbiAgICAgKiB7QGxpbmsgaHR0cDovL21hdGh3b3JsZC53b2xmcmFtLmNvbS9IZXJtaXRlUG9seW5vbWlhbC5odG1sfVxuICAgICAqIEBwYXJhbSB2YWx1ZTEgLSBzcGxpbmUgdmFsdWVcbiAgICAgKiBAcGFyYW0gdGFuZ2VudDEgLSBzcGxpbmUgdmFsdWVcbiAgICAgKiBAcGFyYW0gdmFsdWUyIC0gc3BsaW5lIHZhbHVlXG4gICAgICogQHBhcmFtIHRhbmdlbnQyIC0gc3BsaW5lIHZhbHVlXG4gICAgICogQHBhcmFtIGFtb3VudCAtIGlucHV0IHZhbHVlXG4gICAgICogQHJldHVybnMgaGVybWl0ZSByZXN1bHRcbiAgICAgKi9cbiAgICBzdGF0aWMgSGVybWl0ZSh2YWx1ZTEsIHRhbmdlbnQxLCB2YWx1ZTIsIHRhbmdlbnQyLCBhbW91bnQpIHtcbiAgICAgICAgY29uc3Qgc3F1YXJlZCA9IGFtb3VudCAqIGFtb3VudDtcbiAgICAgICAgY29uc3QgY3ViZWQgPSBhbW91bnQgKiBzcXVhcmVkO1xuICAgICAgICBjb25zdCBwYXJ0MSA9IDIuMCAqIGN1YmVkIC0gMy4wICogc3F1YXJlZCArIDEuMDtcbiAgICAgICAgY29uc3QgcGFydDIgPSAtMi4wICogY3ViZWQgKyAzLjAgKiBzcXVhcmVkO1xuICAgICAgICBjb25zdCBwYXJ0MyA9IGN1YmVkIC0gMi4wICogc3F1YXJlZCArIGFtb3VudDtcbiAgICAgICAgY29uc3QgcGFydDQgPSBjdWJlZCAtIHNxdWFyZWQ7XG4gICAgICAgIHJldHVybiB2YWx1ZTEgKiBwYXJ0MSArIHZhbHVlMiAqIHBhcnQyICsgdGFuZ2VudDEgKiBwYXJ0MyArIHRhbmdlbnQyICogcGFydDQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSByYW5kb20gZmxvYXQgbnVtYmVyIGJldHdlZW4gYW5kIG1pbiBhbmQgbWF4IHZhbHVlc1xuICAgICAqIEBwYXJhbSBtaW4gLSBtaW4gdmFsdWUgb2YgcmFuZG9tXG4gICAgICogQHBhcmFtIG1heCAtIG1heCB2YWx1ZSBvZiByYW5kb21cbiAgICAgKiBAcmV0dXJucyByYW5kb20gdmFsdWVcbiAgICAgKi9cbiAgICBzdGF0aWMgUmFuZG9tUmFuZ2UobWluLCBtYXgpIHtcbiAgICAgICAgaWYgKG1pbiA9PT0gbWF4KSB7XG4gICAgICAgICAgICByZXR1cm4gbWluO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbikgKyBtaW47XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gcmV0dXJucyBwZXJjZW50YWdlIG9mIGEgbnVtYmVyIGluIGEgZ2l2ZW4gcmFuZ2UuXG4gICAgICpcbiAgICAgKiBSYW5nZVRvUGVyY2VudCg0MCwyMCw2MCkgd2lsbCByZXR1cm4gMC41ICg1MCUpXG4gICAgICogUmFuZ2VUb1BlcmNlbnQoMzQsMCwxMDApIHdpbGwgcmV0dXJuIDAuMzQgKDM0JSlcbiAgICAgKiBAcGFyYW0gbnVtIC0gdG8gY29udmVydCB0byBwZXJjZW50YWdlXG4gICAgICogQHBhcmFtIG1pbiAtIG1pbiByYW5nZVxuICAgICAqIEBwYXJhbSBtYXggLSBtYXggcmFuZ2VcbiAgICAgKiBAcmV0dXJucyB0aGUgcGVyY2VudGFnZVxuICAgICAqL1xuICAgIHN0YXRpYyBSYW5nZVRvUGVyY2VudChudW0sIG1pbiwgbWF4KSB7XG4gICAgICAgIHJldHVybiAobnVtIC0gbWluKSAvIChtYXggLSBtaW4pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgbnVtYmVyIHRoYXQgY29ycmVzcG9uZHMgdG8gdGhlIHBlcmNlbnRhZ2UgaW4gYSBnaXZlbiByYW5nZS5cbiAgICAgKlxuICAgICAqIFBlcmNlbnRUb1JhbmdlKDAuMzQsMCwxMDApIHdpbGwgcmV0dXJuIDM0LlxuICAgICAqIEBwYXJhbSBwZXJjZW50IC0gdG8gY29udmVydCB0byBudW1iZXJcbiAgICAgKiBAcGFyYW0gbWluIC0gbWluIHJhbmdlXG4gICAgICogQHBhcmFtIG1heCAtIG1heCByYW5nZVxuICAgICAqIEByZXR1cm5zIHRoZSBudW1iZXJcbiAgICAgKi9cbiAgICBzdGF0aWMgUGVyY2VudFRvUmFuZ2UocGVyY2VudCwgbWluLCBtYXgpIHtcbiAgICAgICAgcmV0dXJuIChtYXggLSBtaW4pICogcGVyY2VudCArIG1pbjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgYW5nbGUgY29udmVydGVkIHRvIGVxdWl2YWxlbnQgdmFsdWUgYmV0d2VlbiAtTWF0aC5QSSBhbmQgTWF0aC5QSSByYWRpYW5zLlxuICAgICAqIEBwYXJhbSBhbmdsZSAtIFRoZSBhbmdsZSB0byBub3JtYWxpemUgaW4gcmFkaWFuLlxuICAgICAqIEByZXR1cm5zIFRoZSBjb252ZXJ0ZWQgYW5nbGUuXG4gICAgICovXG4gICAgc3RhdGljIE5vcm1hbGl6ZVJhZGlhbnMoYW5nbGUpIHtcbiAgICAgICAgLy8gTW9yZSBwcmVjaXNlIGJ1dCBzbG93ZXIgdmVyc2lvbiBrZXB0IGZvciByZWZlcmVuY2UuXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlOm5vLWNvbW1lbnRlZC1vdXQtY29kZVxuICAgICAgICAvKlxuICAgICAgICAgIC8vIGFuZ2xlID0gYW5nbGUgJSBUb29scy5Ud29QaTtcbiAgICAgICAgICAvLyBhbmdsZSA9IChhbmdsZSArIFRvb2xzLlR3b1BpKSAlIFRvb2xzLlR3b1BpO1xuICAgIFxuICAgICAgICAgIC8vaWYgKGFuZ2xlID4gTWF0aC5QSSkge1xuICAgICAgICAgIC8vXHRhbmdsZSAtPSBUb29scy5Ud29QaTtcbiAgICAgICAgICAvL31cbiAgICAgICAgICAgKi9cbiAgICAgICAgcmV0dXJuIGFuZ2xlIC0gU2NhbGFyLlR3b1BpICogTWF0aC5mbG9vcigoYW5nbGUgKyBNYXRoLlBJKSAvIFNjYWxhci5Ud29QaSk7XG4gICAgfVxufVxuZXhwb3J0cy5TY2FsYXIgPSBTY2FsYXI7XG4vKipcbiAqIFR3byBwaSBjb25zdGFudHMgY29udmVuaWVudCBmb3IgY29tcHV0YXRpb24uXG4gKi9cblNjYWxhci5Ud29QaSA9IE1hdGguUEkgKiAyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U2NhbGFyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5WZWN0b3I0ID0gdm9pZCAwO1xuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCIuL3R5cGVzXCIpO1xuY29uc3QgU2NhbGFyXzEgPSByZXF1aXJlKFwiLi9TY2FsYXJcIik7XG5jb25zdCBWZWN0b3IzXzEgPSByZXF1aXJlKFwiLi9WZWN0b3IzXCIpO1xuLyoqXG4gKiBWZWN0b3I0IGNsYXNzIGNyZWF0ZWQgZm9yIEV1bGVyQW5nbGUgY2xhc3MgY29udmVyc2lvbiB0byBRdWF0ZXJuaW9uXG4gKiBAcHVibGljXG4gKi9cbmNsYXNzIFZlY3RvcjQge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBWZWN0b3I0IG9iamVjdCBmcm9tIHRoZSBnaXZlbiBmbG9hdHMuXG4gICAgICogQHBhcmFtIHggLSB4IHZhbHVlIG9mIHRoZSB2ZWN0b3JcbiAgICAgKiBAcGFyYW0geSAtIHkgdmFsdWUgb2YgdGhlIHZlY3RvclxuICAgICAqIEBwYXJhbSB6IC0geiB2YWx1ZSBvZiB0aGUgdmVjdG9yXG4gICAgICogQHBhcmFtIHcgLSB3IHZhbHVlIG9mIHRoZSB2ZWN0b3JcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKiogeCB2YWx1ZSBvZiB0aGUgdmVjdG9yICovXG4gICAgeCwgXG4gICAgLyoqIHkgdmFsdWUgb2YgdGhlIHZlY3RvciAqL1xuICAgIHksIFxuICAgIC8qKiB6IHZhbHVlIG9mIHRoZSB2ZWN0b3IgKi9cbiAgICB6LCBcbiAgICAvKiogdyB2YWx1ZSBvZiB0aGUgdmVjdG9yICovXG4gICAgdykge1xuICAgICAgICB0aGlzLnggPSB4O1xuICAgICAgICB0aGlzLnkgPSB5O1xuICAgICAgICB0aGlzLnogPSB6O1xuICAgICAgICB0aGlzLncgPSB3O1xuICAgIH1cbiAgICAvLyBTdGF0aWNzXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBWZWN0b3I0IGFzIHRoZSByZXN1bHQgb2YgdGhlIGFkZGl0aW9uIG9mIHRoZSB0d28gZ2l2ZW4gdmVjdG9ycy5cbiAgICAgKiBAcGFyYW0gdmVjdG9yMSAtIHRoZSBmaXJzdCB2ZWN0b3JcbiAgICAgKiBAcGFyYW0gdmVjdG9yMiAtIHRoZSBzZWNvbmQgdmVjdG9yXG4gICAgICogQHJldHVybnMgdGhlIHJlc3VsdGluZyB2ZWN0b3JcbiAgICAgKi9cbiAgICBzdGF0aWMgQWRkKHZlY3RvcjEsIHZlY3RvcjIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3I0KHZlY3RvcjEueCwgdmVjdG9yMS55LCB2ZWN0b3IxLnosIHZlY3RvcjEudykuYWRkSW5QbGFjZSh2ZWN0b3IyKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBWZWN0b3I0IHNldCBmcm9tIHRoZSBzdGFydGluZyBpbmRleCBvZiB0aGUgZ2l2ZW4gYXJyYXkuXG4gICAgICogQHBhcmFtIGFycmF5IC0gdGhlIGFycmF5IHRvIHB1bGwgdmFsdWVzIGZyb21cbiAgICAgKiBAcGFyYW0gb2Zmc2V0IC0gdGhlIG9mZnNldCBpbnRvIHRoZSBhcnJheSB0byBzdGFydCBhdFxuICAgICAqIEByZXR1cm5zIHRoZSBuZXcgdmVjdG9yXG4gICAgICovXG4gICAgc3RhdGljIEZyb21BcnJheShhcnJheSwgb2Zmc2V0ID0gMCkge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjQoYXJyYXlbb2Zmc2V0XSwgYXJyYXlbb2Zmc2V0ICsgMV0sIGFycmF5W29mZnNldCArIDJdLCBhcnJheVtvZmZzZXQgKyAzXSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGdpdmVuIHZlY3RvciBcInJlc3VsdFwiIGZyb20gdGhlIHN0YXJ0aW5nIGluZGV4IG9mIHRoZSBnaXZlbiBhcnJheS5cbiAgICAgKiBAcGFyYW0gYXJyYXkgLSB0aGUgYXJyYXkgdG8gcHVsbCB2YWx1ZXMgZnJvbVxuICAgICAqIEBwYXJhbSBvZmZzZXQgLSB0aGUgb2Zmc2V0IGludG8gdGhlIGFycmF5IHRvIHN0YXJ0IGF0XG4gICAgICogQHBhcmFtIHJlc3VsdCAtIHRoZSB2ZWN0b3IgdG8gc3RvcmUgdGhlIHJlc3VsdCBpblxuICAgICAqL1xuICAgIHN0YXRpYyBGcm9tQXJyYXlUb1JlZihhcnJheSwgb2Zmc2V0LCByZXN1bHQpIHtcbiAgICAgICAgcmVzdWx0LnggPSBhcnJheVtvZmZzZXRdO1xuICAgICAgICByZXN1bHQueSA9IGFycmF5W29mZnNldCArIDFdO1xuICAgICAgICByZXN1bHQueiA9IGFycmF5W29mZnNldCArIDJdO1xuICAgICAgICByZXN1bHQudyA9IGFycmF5W29mZnNldCArIDNdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBnaXZlbiB2ZWN0b3IgXCJyZXN1bHRcIiBmcm9tIHRoZSBzdGFydGluZyBpbmRleCBvZiB0aGUgZ2l2ZW4gRmxvYXRBcnJheS5cbiAgICAgKiBAcGFyYW0gYXJyYXkgLSB0aGUgYXJyYXkgdG8gcHVsbCB2YWx1ZXMgZnJvbVxuICAgICAqIEBwYXJhbSBvZmZzZXQgLSB0aGUgb2Zmc2V0IGludG8gdGhlIGFycmF5IHRvIHN0YXJ0IGF0XG4gICAgICogQHBhcmFtIHJlc3VsdCAtIHRoZSB2ZWN0b3IgdG8gc3RvcmUgdGhlIHJlc3VsdCBpblxuICAgICAqL1xuICAgIHN0YXRpYyBGcm9tRmxvYXRBcnJheVRvUmVmKGFycmF5LCBvZmZzZXQsIHJlc3VsdCkge1xuICAgICAgICBWZWN0b3I0LkZyb21BcnJheVRvUmVmKGFycmF5LCBvZmZzZXQsIHJlc3VsdCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGdpdmVuIHZlY3RvciBcInJlc3VsdFwiIGNvb3JkaW5hdGVzIGZyb20gdGhlIGdpdmVuIGZsb2F0cy5cbiAgICAgKiBAcGFyYW0geCAtIGZsb2F0IHRvIHNldCBmcm9tXG4gICAgICogQHBhcmFtIHkgLSBmbG9hdCB0byBzZXQgZnJvbVxuICAgICAqIEBwYXJhbSB6IC0gZmxvYXQgdG8gc2V0IGZyb21cbiAgICAgKiBAcGFyYW0gdyAtIGZsb2F0IHRvIHNldCBmcm9tXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIHRoZSB2ZWN0b3IgdG8gdGhlIGZsb2F0cyBpblxuICAgICAqL1xuICAgIHN0YXRpYyBGcm9tRmxvYXRzVG9SZWYoeCwgeSwgeiwgdywgcmVzdWx0KSB7XG4gICAgICAgIHJlc3VsdC54ID0geDtcbiAgICAgICAgcmVzdWx0LnkgPSB5O1xuICAgICAgICByZXN1bHQueiA9IHo7XG4gICAgICAgIHJlc3VsdC53ID0gdztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBWZWN0b3I0IHNldCB0byAoMC4wLCAwLjAsIDAuMCwgMC4wKVxuICAgICAqIEByZXR1cm5zIHRoZSBuZXcgdmVjdG9yXG4gICAgICovXG4gICAgc3RhdGljIFplcm8oKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yNCgwLjAsIDAuMCwgMC4wLCAwLjApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IFZlY3RvcjQgc2V0IHRvICgxLjAsIDEuMCwgMS4wLCAxLjApXG4gICAgICogQHJldHVybnMgdGhlIG5ldyB2ZWN0b3JcbiAgICAgKi9cbiAgICBzdGF0aWMgT25lKCkge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjQoMS4wLCAxLjAsIDEuMCwgMS4wKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBub3JtYWxpemVkIFZlY3RvcjQgZnJvbSB0aGUgZ2l2ZW4gb25lLlxuICAgICAqIEBwYXJhbSB2ZWN0b3IgLSB0aGUgdmVjdG9yIHRvIG5vcm1hbGl6ZVxuICAgICAqIEByZXR1cm5zIHRoZSB2ZWN0b3JcbiAgICAgKi9cbiAgICBzdGF0aWMgTm9ybWFsaXplKHZlY3Rvcikge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBWZWN0b3I0Llplcm8oKTtcbiAgICAgICAgVmVjdG9yNC5Ob3JtYWxpemVUb1JlZih2ZWN0b3IsIHJlc3VsdCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGdpdmVuIHZlY3RvciBcInJlc3VsdFwiIGZyb20gdGhlIG5vcm1hbGl6YXRpb24gb2YgdGhlIGdpdmVuIG9uZS5cbiAgICAgKiBAcGFyYW0gdmVjdG9yIC0gdGhlIHZlY3RvciB0byBub3JtYWxpemVcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gdGhlIHZlY3RvciB0byBzdG9yZSB0aGUgcmVzdWx0IGluXG4gICAgICovXG4gICAgc3RhdGljIE5vcm1hbGl6ZVRvUmVmKHZlY3RvciwgcmVzdWx0KSB7XG4gICAgICAgIHJlc3VsdC5jb3B5RnJvbSh2ZWN0b3IpO1xuICAgICAgICByZXN1bHQubm9ybWFsaXplKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSB2ZWN0b3Igd2l0aCB0aGUgbWluaW11bSB2YWx1ZXMgZnJvbSB0aGUgbGVmdCBhbmQgcmlnaHQgdmVjdG9yc1xuICAgICAqIEBwYXJhbSBsZWZ0IC0gbGVmdCB2ZWN0b3IgdG8gbWluaW1pemVcbiAgICAgKiBAcGFyYW0gcmlnaHQgLSByaWdodCB2ZWN0b3IgdG8gbWluaW1pemVcbiAgICAgKiBAcmV0dXJucyBhIG5ldyB2ZWN0b3Igd2l0aCB0aGUgbWluaW11bSBvZiB0aGUgbGVmdCBhbmQgcmlnaHQgdmVjdG9yIHZhbHVlc1xuICAgICAqL1xuICAgIHN0YXRpYyBNaW5pbWl6ZShsZWZ0LCByaWdodCkge1xuICAgICAgICBjb25zdCBtaW4gPSBuZXcgVmVjdG9yNChsZWZ0LngsIGxlZnQueSwgbGVmdC56LCBsZWZ0LncpO1xuICAgICAgICBtaW4ubWluaW1pemVJblBsYWNlKHJpZ2h0KTtcbiAgICAgICAgcmV0dXJuIG1pbjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHZlY3RvciB3aXRoIHRoZSBtYXhpbXVtIHZhbHVlcyBmcm9tIHRoZSBsZWZ0IGFuZCByaWdodCB2ZWN0b3JzXG4gICAgICogQHBhcmFtIGxlZnQgLSBsZWZ0IHZlY3RvciB0byBtYXhpbWl6ZVxuICAgICAqIEBwYXJhbSByaWdodCAtIHJpZ2h0IHZlY3RvciB0byBtYXhpbWl6ZVxuICAgICAqIEByZXR1cm5zIGEgbmV3IHZlY3RvciB3aXRoIHRoZSBtYXhpbXVtIG9mIHRoZSBsZWZ0IGFuZCByaWdodCB2ZWN0b3IgdmFsdWVzXG4gICAgICovXG4gICAgc3RhdGljIE1heGltaXplKGxlZnQsIHJpZ2h0KSB7XG4gICAgICAgIGNvbnN0IG1heCA9IG5ldyBWZWN0b3I0KGxlZnQueCwgbGVmdC55LCBsZWZ0LnosIGxlZnQudyk7XG4gICAgICAgIG1heC5tYXhpbWl6ZUluUGxhY2UocmlnaHQpO1xuICAgICAgICByZXR1cm4gbWF4O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBkaXN0YW5jZSAoZmxvYXQpIGJldHdlZW4gdGhlIHZlY3RvcnMgXCJ2YWx1ZTFcIiBhbmQgXCJ2YWx1ZTJcIi5cbiAgICAgKiBAcGFyYW0gdmFsdWUxIC0gdmFsdWUgdG8gY2FsdWxhdGUgdGhlIGRpc3RhbmNlIGJldHdlZW5cbiAgICAgKiBAcGFyYW0gdmFsdWUyIC0gdmFsdWUgdG8gY2FsdWxhdGUgdGhlIGRpc3RhbmNlIGJldHdlZW5cbiAgICAgKiBAcmV0dXJucyB0aGUgZGlzdGFuY2UgYmV0d2VlbiB0aGUgdHdvIHZlY3RvcnNcbiAgICAgKi9cbiAgICBzdGF0aWMgRGlzdGFuY2UodmFsdWUxLCB2YWx1ZTIpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguc3FydChWZWN0b3I0LkRpc3RhbmNlU3F1YXJlZCh2YWx1ZTEsIHZhbHVlMikpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBzcXVhcmVkIGRpc3RhbmNlIChmbG9hdCkgYmV0d2VlbiB0aGUgdmVjdG9ycyBcInZhbHVlMVwiIGFuZCBcInZhbHVlMlwiLlxuICAgICAqIEBwYXJhbSB2YWx1ZTEgLSB2YWx1ZSB0byBjYWx1bGF0ZSB0aGUgZGlzdGFuY2UgYmV0d2VlblxuICAgICAqIEBwYXJhbSB2YWx1ZTIgLSB2YWx1ZSB0byBjYWx1bGF0ZSB0aGUgZGlzdGFuY2UgYmV0d2VlblxuICAgICAqIEByZXR1cm5zIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIHRoZSB0d28gdmVjdG9ycyBzcXVhcmVkXG4gICAgICovXG4gICAgc3RhdGljIERpc3RhbmNlU3F1YXJlZCh2YWx1ZTEsIHZhbHVlMikge1xuICAgICAgICBjb25zdCB4ID0gdmFsdWUxLnggLSB2YWx1ZTIueDtcbiAgICAgICAgY29uc3QgeSA9IHZhbHVlMS55IC0gdmFsdWUyLnk7XG4gICAgICAgIGNvbnN0IHogPSB2YWx1ZTEueiAtIHZhbHVlMi56O1xuICAgICAgICBjb25zdCB3ID0gdmFsdWUxLncgLSB2YWx1ZTIudztcbiAgICAgICAgcmV0dXJuIHggKiB4ICsgeSAqIHkgKyB6ICogeiArIHcgKiB3O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IFZlY3RvcjQgbG9jYXRlZCBhdCB0aGUgY2VudGVyIGJldHdlZW4gdGhlIHZlY3RvcnMgXCJ2YWx1ZTFcIiBhbmQgXCJ2YWx1ZTJcIi5cbiAgICAgKiBAcGFyYW0gdmFsdWUxIC0gdmFsdWUgdG8gY2FsdWxhdGUgdGhlIGNlbnRlciBiZXR3ZWVuXG4gICAgICogQHBhcmFtIHZhbHVlMiAtIHZhbHVlIHRvIGNhbHVsYXRlIHRoZSBjZW50ZXIgYmV0d2VlblxuICAgICAqIEByZXR1cm5zIHRoZSBjZW50ZXIgYmV0d2VlbiB0aGUgdHdvIHZlY3RvcnNcbiAgICAgKi9cbiAgICBzdGF0aWMgQ2VudGVyKHZhbHVlMSwgdmFsdWUyKSB7XG4gICAgICAgIGNvbnN0IGNlbnRlciA9IFZlY3RvcjQuQWRkKHZhbHVlMSwgdmFsdWUyKTtcbiAgICAgICAgY2VudGVyLnNjYWxlSW5QbGFjZSgwLjUpO1xuICAgICAgICByZXR1cm4gY2VudGVyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IFZlY3RvcjQgc2V0IHdpdGggdGhlIHJlc3VsdCBvZiB0aGUgbm9ybWFsIHRyYW5zZm9ybWF0aW9uIGJ5IHRoZSBnaXZlbiBtYXRyaXggb2YgdGhlIGdpdmVuIHZlY3Rvci5cbiAgICAgKiBUaGlzIG1ldGhvZHMgY29tcHV0ZXMgdHJhbnNmb3JtZWQgbm9ybWFsaXplZCBkaXJlY3Rpb24gdmVjdG9ycyBvbmx5LlxuICAgICAqIEBwYXJhbSB2ZWN0b3IgLSB0aGUgdmVjdG9yIHRvIHRyYW5zZm9ybVxuICAgICAqIEBwYXJhbSB0cmFuc2Zvcm1hdGlvbiAtIHRoZSB0cmFuc2Zvcm1hdGlvbiBtYXRyaXggdG8gYXBwbHlcbiAgICAgKiBAcmV0dXJucyB0aGUgbmV3IHZlY3RvclxuICAgICAqL1xuICAgIHN0YXRpYyBUcmFuc2Zvcm1Ob3JtYWwodmVjdG9yLCB0cmFuc2Zvcm1hdGlvbikge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBWZWN0b3I0Llplcm8oKTtcbiAgICAgICAgVmVjdG9yNC5UcmFuc2Zvcm1Ob3JtYWxUb1JlZih2ZWN0b3IsIHRyYW5zZm9ybWF0aW9uLCByZXN1bHQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBnaXZlbiB2ZWN0b3IgXCJyZXN1bHRcIiB3aXRoIHRoZSByZXN1bHQgb2YgdGhlIG5vcm1hbCB0cmFuc2Zvcm1hdGlvbiBieSB0aGUgZ2l2ZW4gbWF0cml4IG9mIHRoZSBnaXZlbiB2ZWN0b3IuXG4gICAgICogVGhpcyBtZXRob2RzIGNvbXB1dGVzIHRyYW5zZm9ybWVkIG5vcm1hbGl6ZWQgZGlyZWN0aW9uIHZlY3RvcnMgb25seS5cbiAgICAgKiBAcGFyYW0gdmVjdG9yIC0gdGhlIHZlY3RvciB0byB0cmFuc2Zvcm1cbiAgICAgKiBAcGFyYW0gdHJhbnNmb3JtYXRpb24gLSB0aGUgdHJhbnNmb3JtYXRpb24gbWF0cml4IHRvIGFwcGx5XG4gICAgICogQHBhcmFtIHJlc3VsdCAtIHRoZSB2ZWN0b3IgdG8gc3RvcmUgdGhlIHJlc3VsdCBpblxuICAgICAqL1xuICAgIHN0YXRpYyBUcmFuc2Zvcm1Ob3JtYWxUb1JlZih2ZWN0b3IsIHRyYW5zZm9ybWF0aW9uLCByZXN1bHQpIHtcbiAgICAgICAgY29uc3QgbSA9IHRyYW5zZm9ybWF0aW9uLm07XG4gICAgICAgIGNvbnN0IHggPSB2ZWN0b3IueCAqIG1bMF0gKyB2ZWN0b3IueSAqIG1bNF0gKyB2ZWN0b3IueiAqIG1bOF07XG4gICAgICAgIGNvbnN0IHkgPSB2ZWN0b3IueCAqIG1bMV0gKyB2ZWN0b3IueSAqIG1bNV0gKyB2ZWN0b3IueiAqIG1bOV07XG4gICAgICAgIGNvbnN0IHogPSB2ZWN0b3IueCAqIG1bMl0gKyB2ZWN0b3IueSAqIG1bNl0gKyB2ZWN0b3IueiAqIG1bMTBdO1xuICAgICAgICByZXN1bHQueCA9IHg7XG4gICAgICAgIHJlc3VsdC55ID0geTtcbiAgICAgICAgcmVzdWx0LnogPSB6O1xuICAgICAgICByZXN1bHQudyA9IHZlY3Rvci53O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBnaXZlbiB2ZWN0b3IgXCJyZXN1bHRcIiB3aXRoIHRoZSByZXN1bHQgb2YgdGhlIG5vcm1hbCB0cmFuc2Zvcm1hdGlvbiBieSB0aGUgZ2l2ZW4gbWF0cml4IG9mIHRoZSBnaXZlbiBmbG9hdHMgKHgsIHksIHosIHcpLlxuICAgICAqIFRoaXMgbWV0aG9kcyBjb21wdXRlcyB0cmFuc2Zvcm1lZCBub3JtYWxpemVkIGRpcmVjdGlvbiB2ZWN0b3JzIG9ubHkuXG4gICAgICogQHBhcmFtIHggLSB2YWx1ZSB0byB0cmFuc2Zvcm1cbiAgICAgKiBAcGFyYW0geSAtIHZhbHVlIHRvIHRyYW5zZm9ybVxuICAgICAqIEBwYXJhbSB6IC0gdmFsdWUgdG8gdHJhbnNmb3JtXG4gICAgICogQHBhcmFtIHcgLSB2YWx1ZSB0byB0cmFuc2Zvcm1cbiAgICAgKiBAcGFyYW0gdHJhbnNmb3JtYXRpb24gLSB0aGUgdHJhbnNmb3JtYXRpb24gbWF0cml4IHRvIGFwcGx5XG4gICAgICogQHBhcmFtIHJlc3VsdCAtIHRoZSB2ZWN0b3IgdG8gc3RvcmUgdGhlIHJlc3VsdHMgaW5cbiAgICAgKi9cbiAgICBzdGF0aWMgVHJhbnNmb3JtTm9ybWFsRnJvbUZsb2F0c1RvUmVmKHgsIHksIHosIHcsIHRyYW5zZm9ybWF0aW9uLCByZXN1bHQpIHtcbiAgICAgICAgY29uc3QgbSA9IHRyYW5zZm9ybWF0aW9uLm07XG4gICAgICAgIHJlc3VsdC54ID0geCAqIG1bMF0gKyB5ICogbVs0XSArIHogKiBtWzhdO1xuICAgICAgICByZXN1bHQueSA9IHggKiBtWzFdICsgeSAqIG1bNV0gKyB6ICogbVs5XTtcbiAgICAgICAgcmVzdWx0LnogPSB4ICogbVsyXSArIHkgKiBtWzZdICsgeiAqIG1bMTBdO1xuICAgICAgICByZXN1bHQudyA9IHc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHN0cmluZyB3aXRoIHRoZSBWZWN0b3I0IGNvb3JkaW5hdGVzLlxuICAgICAqIEByZXR1cm5zIGEgc3RyaW5nIGNvbnRhaW5pbmcgYWxsIHRoZSB2ZWN0b3IgdmFsdWVzXG4gICAgICovXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiAoJ3tYOiAnICsgdGhpcy54ICsgJyBZOicgKyB0aGlzLnkgKyAnIFo6JyArIHRoaXMueiArICcgVzonICsgdGhpcy53ICsgJ30nKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgc3RyaW5nIFwiVmVjdG9yNFwiLlxuICAgICAqIEByZXR1cm5zIFwiVmVjdG9yNFwiXG4gICAgICovXG4gICAgZ2V0Q2xhc3NOYW1lKCkge1xuICAgICAgICByZXR1cm4gJ1ZlY3RvcjQnO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBWZWN0b3I0IGhhc2ggY29kZS5cbiAgICAgKiBAcmV0dXJucyBhIHVuaXF1ZSBoYXNoIGNvZGVcbiAgICAgKi9cbiAgICBnZXRIYXNoQ29kZSgpIHtcbiAgICAgICAgbGV0IGhhc2ggPSB0aGlzLnggfHwgMDtcbiAgICAgICAgaGFzaCA9IChoYXNoICogMzk3KSBeICh0aGlzLnkgfHwgMCk7XG4gICAgICAgIGhhc2ggPSAoaGFzaCAqIDM5NykgXiAodGhpcy56IHx8IDApO1xuICAgICAgICBoYXNoID0gKGhhc2ggKiAzOTcpIF4gKHRoaXMudyB8fCAwKTtcbiAgICAgICAgcmV0dXJuIGhhc2g7XG4gICAgfVxuICAgIC8vIE9wZXJhdG9yc1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgYXJyYXkgcG9wdWxhdGVkIHdpdGggNCBlbGVtZW50cyA6IHRoZSBWZWN0b3I0IGNvb3JkaW5hdGVzLlxuICAgICAqIEByZXR1cm5zIHRoZSByZXN1bHRpbmcgYXJyYXlcbiAgICAgKi9cbiAgICBhc0FycmF5KCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgdGhpcy50b0FycmF5KHJlc3VsdCwgMCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBvcHVsYXRlcyB0aGUgZ2l2ZW4gYXJyYXkgZnJvbSB0aGUgZ2l2ZW4gaW5kZXggd2l0aCB0aGUgVmVjdG9yNCBjb29yZGluYXRlcy5cbiAgICAgKiBAcGFyYW0gYXJyYXkgLSBhcnJheSB0byBwb3B1bGF0ZVxuICAgICAqIEBwYXJhbSBpbmRleCAtIGluZGV4IG9mIHRoZSBhcnJheSB0byBzdGFydCBhdCAoZGVmYXVsdDogMClcbiAgICAgKiBAcmV0dXJucyB0aGUgVmVjdG9yNC5cbiAgICAgKi9cbiAgICB0b0FycmF5KGFycmF5LCBpbmRleCA9IDApIHtcbiAgICAgICAgYXJyYXlbaW5kZXhdID0gdGhpcy54O1xuICAgICAgICBhcnJheVtpbmRleCArIDFdID0gdGhpcy55O1xuICAgICAgICBhcnJheVtpbmRleCArIDJdID0gdGhpcy56O1xuICAgICAgICBhcnJheVtpbmRleCArIDNdID0gdGhpcy53O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkcyB0aGUgZ2l2ZW4gdmVjdG9yIHRvIHRoZSBjdXJyZW50IFZlY3RvcjQuXG4gICAgICogQHBhcmFtIG90aGVyVmVjdG9yIC0gdGhlIHZlY3RvciB0byBhZGRcbiAgICAgKiBAcmV0dXJucyB0aGUgdXBkYXRlZCBWZWN0b3I0LlxuICAgICAqL1xuICAgIGFkZEluUGxhY2Uob3RoZXJWZWN0b3IpIHtcbiAgICAgICAgdGhpcy54ICs9IG90aGVyVmVjdG9yLng7XG4gICAgICAgIHRoaXMueSArPSBvdGhlclZlY3Rvci55O1xuICAgICAgICB0aGlzLnogKz0gb3RoZXJWZWN0b3IuejtcbiAgICAgICAgdGhpcy53ICs9IG90aGVyVmVjdG9yLnc7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IFZlY3RvcjQgYXMgdGhlIHJlc3VsdCBvZiB0aGUgYWRkaXRpb24gb2YgdGhlIGN1cnJlbnQgVmVjdG9yNCBhbmQgdGhlIGdpdmVuIG9uZS5cbiAgICAgKiBAcGFyYW0gb3RoZXJWZWN0b3IgLSB0aGUgdmVjdG9yIHRvIGFkZFxuICAgICAqIEByZXR1cm5zIHRoZSByZXN1bHRpbmcgdmVjdG9yXG4gICAgICovXG4gICAgYWRkKG90aGVyVmVjdG9yKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yNCh0aGlzLnggKyBvdGhlclZlY3Rvci54LCB0aGlzLnkgKyBvdGhlclZlY3Rvci55LCB0aGlzLnogKyBvdGhlclZlY3Rvci56LCB0aGlzLncgKyBvdGhlclZlY3Rvci53KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgZ2l2ZW4gdmVjdG9yIFwicmVzdWx0XCIgd2l0aCB0aGUgcmVzdWx0IG9mIHRoZSBhZGRpdGlvbiBvZiB0aGUgY3VycmVudCBWZWN0b3I0IGFuZCB0aGUgZ2l2ZW4gb25lLlxuICAgICAqIEBwYXJhbSBvdGhlclZlY3RvciAtIHRoZSB2ZWN0b3IgdG8gYWRkXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIHRoZSB2ZWN0b3IgdG8gc3RvcmUgdGhlIHJlc3VsdFxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IFZlY3RvcjQuXG4gICAgICovXG4gICAgYWRkVG9SZWYob3RoZXJWZWN0b3IsIHJlc3VsdCkge1xuICAgICAgICByZXN1bHQueCA9IHRoaXMueCArIG90aGVyVmVjdG9yLng7XG4gICAgICAgIHJlc3VsdC55ID0gdGhpcy55ICsgb3RoZXJWZWN0b3IueTtcbiAgICAgICAgcmVzdWx0LnogPSB0aGlzLnogKyBvdGhlclZlY3Rvci56O1xuICAgICAgICByZXN1bHQudyA9IHRoaXMudyArIG90aGVyVmVjdG9yLnc7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdWJ0cmFjdCBpbiBwbGFjZSB0aGUgZ2l2ZW4gdmVjdG9yIGZyb20gdGhlIGN1cnJlbnQgVmVjdG9yNC5cbiAgICAgKiBAcGFyYW0gb3RoZXJWZWN0b3IgLSB0aGUgdmVjdG9yIHRvIHN1YnRyYWN0XG4gICAgICogQHJldHVybnMgdGhlIHVwZGF0ZWQgVmVjdG9yNC5cbiAgICAgKi9cbiAgICBzdWJ0cmFjdEluUGxhY2Uob3RoZXJWZWN0b3IpIHtcbiAgICAgICAgdGhpcy54IC09IG90aGVyVmVjdG9yLng7XG4gICAgICAgIHRoaXMueSAtPSBvdGhlclZlY3Rvci55O1xuICAgICAgICB0aGlzLnogLT0gb3RoZXJWZWN0b3IuejtcbiAgICAgICAgdGhpcy53IC09IG90aGVyVmVjdG9yLnc7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IFZlY3RvcjQgd2l0aCB0aGUgcmVzdWx0IG9mIHRoZSBzdWJ0cmFjdGlvbiBvZiB0aGUgZ2l2ZW4gdmVjdG9yIGZyb20gdGhlIGN1cnJlbnQgVmVjdG9yNC5cbiAgICAgKiBAcGFyYW0gb3RoZXJWZWN0b3IgLSB0aGUgdmVjdG9yIHRvIGFkZFxuICAgICAqIEByZXR1cm5zIHRoZSBuZXcgdmVjdG9yIHdpdGggdGhlIHJlc3VsdFxuICAgICAqL1xuICAgIHN1YnRyYWN0KG90aGVyVmVjdG9yKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yNCh0aGlzLnggLSBvdGhlclZlY3Rvci54LCB0aGlzLnkgLSBvdGhlclZlY3Rvci55LCB0aGlzLnogLSBvdGhlclZlY3Rvci56LCB0aGlzLncgLSBvdGhlclZlY3Rvci53KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZ2l2ZW4gdmVjdG9yIFwicmVzdWx0XCIgd2l0aCB0aGUgcmVzdWx0IG9mIHRoZSBzdWJ0cmFjdGlvbiBvZiB0aGUgZ2l2ZW4gdmVjdG9yIGZyb20gdGhlIGN1cnJlbnQgVmVjdG9yNC5cbiAgICAgKiBAcGFyYW0gb3RoZXJWZWN0b3IgLSB0aGUgdmVjdG9yIHRvIHN1YnRyYWN0XG4gICAgICogQHBhcmFtIHJlc3VsdCAtIHRoZSB2ZWN0b3IgdG8gc3RvcmUgdGhlIHJlc3VsdFxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IFZlY3RvcjQuXG4gICAgICovXG4gICAgc3VidHJhY3RUb1JlZihvdGhlclZlY3RvciwgcmVzdWx0KSB7XG4gICAgICAgIHJlc3VsdC54ID0gdGhpcy54IC0gb3RoZXJWZWN0b3IueDtcbiAgICAgICAgcmVzdWx0LnkgPSB0aGlzLnkgLSBvdGhlclZlY3Rvci55O1xuICAgICAgICByZXN1bHQueiA9IHRoaXMueiAtIG90aGVyVmVjdG9yLno7XG4gICAgICAgIHJlc3VsdC53ID0gdGhpcy53IC0gb3RoZXJWZWN0b3IudztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yNCBzZXQgd2l0aCB0aGUgcmVzdWx0IG9mIHRoZSBzdWJ0cmFjdGlvbiBvZiB0aGUgZ2l2ZW4gZmxvYXRzIGZyb20gdGhlIGN1cnJlbnQgVmVjdG9yNCBjb29yZGluYXRlcy5cbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IFZlY3RvcjQgc2V0IHdpdGggdGhlIHJlc3VsdCBvZiB0aGUgc3VidHJhY3Rpb24gb2YgdGhlIGdpdmVuIGZsb2F0cyBmcm9tIHRoZSBjdXJyZW50IFZlY3RvcjQgY29vcmRpbmF0ZXMuXG4gICAgICogQHBhcmFtIHggLSB2YWx1ZSB0byBzdWJ0cmFjdFxuICAgICAqIEBwYXJhbSB5IC0gdmFsdWUgdG8gc3VidHJhY3RcbiAgICAgKiBAcGFyYW0geiAtIHZhbHVlIHRvIHN1YnRyYWN0XG4gICAgICogQHBhcmFtIHcgLSB2YWx1ZSB0byBzdWJ0cmFjdFxuICAgICAqIEByZXR1cm5zIG5ldyB2ZWN0b3IgY29udGFpbmluZyB0aGUgcmVzdWx0XG4gICAgICovXG4gICAgc3VidHJhY3RGcm9tRmxvYXRzKHgsIHksIHosIHcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3I0KHRoaXMueCAtIHgsIHRoaXMueSAtIHksIHRoaXMueiAtIHosIHRoaXMudyAtIHcpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBnaXZlbiB2ZWN0b3IgXCJyZXN1bHRcIiBzZXQgd2l0aCB0aGUgcmVzdWx0IG9mIHRoZSBzdWJ0cmFjdGlvbiBvZiB0aGUgZ2l2ZW4gZmxvYXRzIGZyb20gdGhlIGN1cnJlbnQgVmVjdG9yNCBjb29yZGluYXRlcy5cbiAgICAgKiBAcGFyYW0geCAtIHZhbHVlIHRvIHN1YnRyYWN0XG4gICAgICogQHBhcmFtIHkgLSB2YWx1ZSB0byBzdWJ0cmFjdFxuICAgICAqIEBwYXJhbSB6IC0gdmFsdWUgdG8gc3VidHJhY3RcbiAgICAgKiBAcGFyYW0gdyAtIHZhbHVlIHRvIHN1YnRyYWN0XG4gICAgICogQHBhcmFtIHJlc3VsdCAtIHRoZSB2ZWN0b3IgdG8gc3RvcmUgdGhlIHJlc3VsdCBpblxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IFZlY3RvcjQuXG4gICAgICovXG4gICAgc3VidHJhY3RGcm9tRmxvYXRzVG9SZWYoeCwgeSwgeiwgdywgcmVzdWx0KSB7XG4gICAgICAgIHJlc3VsdC54ID0gdGhpcy54IC0geDtcbiAgICAgICAgcmVzdWx0LnkgPSB0aGlzLnkgLSB5O1xuICAgICAgICByZXN1bHQueiA9IHRoaXMueiAtIHo7XG4gICAgICAgIHJlc3VsdC53ID0gdGhpcy53IC0gdztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yNCBzZXQgd2l0aCB0aGUgY3VycmVudCBWZWN0b3I0IG5lZ2F0ZWQgY29vcmRpbmF0ZXMuXG4gICAgICogQHJldHVybnMgYSBuZXcgdmVjdG9yIHdpdGggdGhlIG5lZ2F0ZWQgdmFsdWVzXG4gICAgICovXG4gICAgbmVnYXRlKCkge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjQoLXRoaXMueCwgLXRoaXMueSwgLXRoaXMueiwgLXRoaXMudyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE11bHRpcGxpZXMgdGhlIGN1cnJlbnQgVmVjdG9yNCBjb29yZGluYXRlcyBieSBzY2FsZSAoZmxvYXQpLlxuICAgICAqIEBwYXJhbSBzY2FsZSAtIHRoZSBudW1iZXIgdG8gc2NhbGUgd2l0aFxuICAgICAqIEByZXR1cm5zIHRoZSB1cGRhdGVkIFZlY3RvcjQuXG4gICAgICovXG4gICAgc2NhbGVJblBsYWNlKHNjYWxlKSB7XG4gICAgICAgIHRoaXMueCAqPSBzY2FsZTtcbiAgICAgICAgdGhpcy55ICo9IHNjYWxlO1xuICAgICAgICB0aGlzLnogKj0gc2NhbGU7XG4gICAgICAgIHRoaXMudyAqPSBzY2FsZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yNCBzZXQgd2l0aCB0aGUgY3VycmVudCBWZWN0b3I0IGNvb3JkaW5hdGVzIG11bHRpcGxpZWQgYnkgc2NhbGUgKGZsb2F0KS5cbiAgICAgKiBAcGFyYW0gc2NhbGUgLSB0aGUgbnVtYmVyIHRvIHNjYWxlIHdpdGhcbiAgICAgKiBAcmV0dXJucyBhIG5ldyB2ZWN0b3Igd2l0aCB0aGUgcmVzdWx0XG4gICAgICovXG4gICAgc2NhbGUoc2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3I0KHRoaXMueCAqIHNjYWxlLCB0aGlzLnkgKiBzY2FsZSwgdGhpcy56ICogc2NhbGUsIHRoaXMudyAqIHNjYWxlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZ2l2ZW4gdmVjdG9yIFwicmVzdWx0XCIgd2l0aCB0aGUgY3VycmVudCBWZWN0b3I0IGNvb3JkaW5hdGVzIG11bHRpcGxpZWQgYnkgc2NhbGUgKGZsb2F0KS5cbiAgICAgKiBAcGFyYW0gc2NhbGUgLSB0aGUgbnVtYmVyIHRvIHNjYWxlIHdpdGhcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gYSB2ZWN0b3IgdG8gc3RvcmUgdGhlIHJlc3VsdCBpblxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IFZlY3RvcjQuXG4gICAgICovXG4gICAgc2NhbGVUb1JlZihzY2FsZSwgcmVzdWx0KSB7XG4gICAgICAgIHJlc3VsdC54ID0gdGhpcy54ICogc2NhbGU7XG4gICAgICAgIHJlc3VsdC55ID0gdGhpcy55ICogc2NhbGU7XG4gICAgICAgIHJlc3VsdC56ID0gdGhpcy56ICogc2NhbGU7XG4gICAgICAgIHJlc3VsdC53ID0gdGhpcy53ICogc2NhbGU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTY2FsZSB0aGUgY3VycmVudCBWZWN0b3I0IHZhbHVlcyBieSBhIGZhY3RvciBhbmQgYWRkIHRoZSByZXN1bHQgdG8gYSBnaXZlbiBWZWN0b3I0XG4gICAgICogQHBhcmFtIHNjYWxlIC0gZGVmaW5lcyB0aGUgc2NhbGUgZmFjdG9yXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIFZlY3RvcjQgb2JqZWN0IHdoZXJlIHRvIHN0b3JlIHRoZSByZXN1bHRcbiAgICAgKiBAcmV0dXJucyB0aGUgdW5tb2RpZmllZCBjdXJyZW50IFZlY3RvcjRcbiAgICAgKi9cbiAgICBzY2FsZUFuZEFkZFRvUmVmKHNjYWxlLCByZXN1bHQpIHtcbiAgICAgICAgcmVzdWx0LnggKz0gdGhpcy54ICogc2NhbGU7XG4gICAgICAgIHJlc3VsdC55ICs9IHRoaXMueSAqIHNjYWxlO1xuICAgICAgICByZXN1bHQueiArPSB0aGlzLnogKiBzY2FsZTtcbiAgICAgICAgcmVzdWx0LncgKz0gdGhpcy53ICogc2NhbGU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBCb29sZWFuIDogVHJ1ZSBpZiB0aGUgY3VycmVudCBWZWN0b3I0IGNvb3JkaW5hdGVzIGFyZSBzdHJpY2x5IGVxdWFsIHRvIHRoZSBnaXZlbiBvbmVzLlxuICAgICAqIEBwYXJhbSBvdGhlclZlY3RvciAtIHRoZSB2ZWN0b3IgdG8gY29tcGFyZSBhZ2FpbnN0XG4gICAgICogQHJldHVybnMgdHJ1ZSBpZiB0aGV5IGFyZSBlcXVhbFxuICAgICAqL1xuICAgIGVxdWFscyhvdGhlclZlY3Rvcikge1xuICAgICAgICByZXR1cm4gKG90aGVyVmVjdG9yICYmXG4gICAgICAgICAgICB0aGlzLnggPT09IG90aGVyVmVjdG9yLnggJiZcbiAgICAgICAgICAgIHRoaXMueSA9PT0gb3RoZXJWZWN0b3IueSAmJlxuICAgICAgICAgICAgdGhpcy56ID09PSBvdGhlclZlY3Rvci56ICYmXG4gICAgICAgICAgICB0aGlzLncgPT09IG90aGVyVmVjdG9yLncpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBCb29sZWFuIDogVHJ1ZSBpZiB0aGUgY3VycmVudCBWZWN0b3I0IGNvb3JkaW5hdGVzIGFyZSBlYWNoIGJlbmVhdGggdGhlIGRpc3RhbmNlIFwiZXBzaWxvblwiIGZyb20gdGhlIGdpdmVuIHZlY3RvciBvbmVzLlxuICAgICAqIEBwYXJhbSBvdGhlclZlY3RvciAtIHZlY3RvciB0byBjb21wYXJlIGFnYWluc3RcbiAgICAgKiBAcGFyYW0gZXBzaWxvbiAtIChEZWZhdWx0OiB2ZXJ5IHNtYWxsIG51bWJlcilcbiAgICAgKiBAcmV0dXJucyB0cnVlIGlmIHRoZXkgYXJlIGVxdWFsXG4gICAgICovXG4gICAgZXF1YWxzV2l0aEVwc2lsb24ob3RoZXJWZWN0b3IsIGVwc2lsb24gPSB0eXBlc18xLkVwc2lsb24pIHtcbiAgICAgICAgcmV0dXJuIChvdGhlclZlY3RvciAmJlxuICAgICAgICAgICAgU2NhbGFyXzEuU2NhbGFyLldpdGhpbkVwc2lsb24odGhpcy54LCBvdGhlclZlY3Rvci54LCBlcHNpbG9uKSAmJlxuICAgICAgICAgICAgU2NhbGFyXzEuU2NhbGFyLldpdGhpbkVwc2lsb24odGhpcy55LCBvdGhlclZlY3Rvci55LCBlcHNpbG9uKSAmJlxuICAgICAgICAgICAgU2NhbGFyXzEuU2NhbGFyLldpdGhpbkVwc2lsb24odGhpcy56LCBvdGhlclZlY3Rvci56LCBlcHNpbG9uKSAmJlxuICAgICAgICAgICAgU2NhbGFyXzEuU2NhbGFyLldpdGhpbkVwc2lsb24odGhpcy53LCBvdGhlclZlY3Rvci53LCBlcHNpbG9uKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEJvb2xlYW4gOiBUcnVlIGlmIHRoZSBnaXZlbiBmbG9hdHMgYXJlIHN0cmljdGx5IGVxdWFsIHRvIHRoZSBjdXJyZW50IFZlY3RvcjQgY29vcmRpbmF0ZXMuXG4gICAgICogQHBhcmFtIHggLSB4IHZhbHVlIHRvIGNvbXBhcmUgYWdhaW5zdFxuICAgICAqIEBwYXJhbSB5IC0geSB2YWx1ZSB0byBjb21wYXJlIGFnYWluc3RcbiAgICAgKiBAcGFyYW0geiAtIHogdmFsdWUgdG8gY29tcGFyZSBhZ2FpbnN0XG4gICAgICogQHBhcmFtIHcgLSB3IHZhbHVlIHRvIGNvbXBhcmUgYWdhaW5zdFxuICAgICAqIEByZXR1cm5zIHRydWUgaWYgZXF1YWxcbiAgICAgKi9cbiAgICBlcXVhbHNUb0Zsb2F0cyh4LCB5LCB6LCB3KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnggPT09IHggJiYgdGhpcy55ID09PSB5ICYmIHRoaXMueiA9PT0geiAmJiB0aGlzLncgPT09IHc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE11bHRpcGxpZXMgaW4gcGxhY2UgdGhlIGN1cnJlbnQgVmVjdG9yNCBieSB0aGUgZ2l2ZW4gb25lLlxuICAgICAqIEBwYXJhbSBvdGhlclZlY3RvciAtIHZlY3RvciB0byBtdWx0aXBsZSB3aXRoXG4gICAgICogQHJldHVybnMgdGhlIHVwZGF0ZWQgVmVjdG9yNC5cbiAgICAgKi9cbiAgICBtdWx0aXBseUluUGxhY2Uob3RoZXJWZWN0b3IpIHtcbiAgICAgICAgdGhpcy54ICo9IG90aGVyVmVjdG9yLng7XG4gICAgICAgIHRoaXMueSAqPSBvdGhlclZlY3Rvci55O1xuICAgICAgICB0aGlzLnogKj0gb3RoZXJWZWN0b3IuejtcbiAgICAgICAgdGhpcy53ICo9IG90aGVyVmVjdG9yLnc7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IFZlY3RvcjQgc2V0IHdpdGggdGhlIG11bHRpcGxpY2F0aW9uIHJlc3VsdCBvZiB0aGUgY3VycmVudCBWZWN0b3I0IGFuZCB0aGUgZ2l2ZW4gb25lLlxuICAgICAqIEBwYXJhbSBvdGhlclZlY3RvciAtIHZlY3RvciB0byBtdWx0aXBsZSB3aXRoXG4gICAgICogQHJldHVybnMgcmVzdWx0aW5nIG5ldyB2ZWN0b3JcbiAgICAgKi9cbiAgICBtdWx0aXBseShvdGhlclZlY3Rvcikge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjQodGhpcy54ICogb3RoZXJWZWN0b3IueCwgdGhpcy55ICogb3RoZXJWZWN0b3IueSwgdGhpcy56ICogb3RoZXJWZWN0b3IueiwgdGhpcy53ICogb3RoZXJWZWN0b3Iudyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGdpdmVuIHZlY3RvciBcInJlc3VsdFwiIHdpdGggdGhlIG11bHRpcGxpY2F0aW9uIHJlc3VsdCBvZiB0aGUgY3VycmVudCBWZWN0b3I0IGFuZCB0aGUgZ2l2ZW4gb25lLlxuICAgICAqIEBwYXJhbSBvdGhlclZlY3RvciAtIHZlY3RvciB0byBtdWx0aXBsZSB3aXRoXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIHZlY3RvciB0byBzdG9yZSB0aGUgcmVzdWx0XG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgVmVjdG9yNC5cbiAgICAgKi9cbiAgICBtdWx0aXBseVRvUmVmKG90aGVyVmVjdG9yLCByZXN1bHQpIHtcbiAgICAgICAgcmVzdWx0LnggPSB0aGlzLnggKiBvdGhlclZlY3Rvci54O1xuICAgICAgICByZXN1bHQueSA9IHRoaXMueSAqIG90aGVyVmVjdG9yLnk7XG4gICAgICAgIHJlc3VsdC56ID0gdGhpcy56ICogb3RoZXJWZWN0b3IuejtcbiAgICAgICAgcmVzdWx0LncgPSB0aGlzLncgKiBvdGhlclZlY3Rvci53O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBWZWN0b3I0IHNldCB3aXRoIHRoZSBtdWx0aXBsaWNhdGlvbiByZXN1bHQgb2YgdGhlIGdpdmVuIGZsb2F0cyBhbmQgdGhlIGN1cnJlbnQgVmVjdG9yNCBjb29yZGluYXRlcy5cbiAgICAgKiBAcGFyYW0geCAtIHggdmFsdWUgbXVsdGlwbHkgd2l0aFxuICAgICAqIEBwYXJhbSB5IC0geSB2YWx1ZSBtdWx0aXBseSB3aXRoXG4gICAgICogQHBhcmFtIHogLSB6IHZhbHVlIG11bHRpcGx5IHdpdGhcbiAgICAgKiBAcGFyYW0gdyAtIHcgdmFsdWUgbXVsdGlwbHkgd2l0aFxuICAgICAqIEByZXR1cm5zIHJlc3VsdGluZyBuZXcgdmVjdG9yXG4gICAgICovXG4gICAgbXVsdGlwbHlCeUZsb2F0cyh4LCB5LCB6LCB3KSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yNCh0aGlzLnggKiB4LCB0aGlzLnkgKiB5LCB0aGlzLnogKiB6LCB0aGlzLncgKiB3KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBWZWN0b3I0IHNldCB3aXRoIHRoZSBkaXZpc2lvbiByZXN1bHQgb2YgdGhlIGN1cnJlbnQgVmVjdG9yNCBieSB0aGUgZ2l2ZW4gb25lLlxuICAgICAqIEBwYXJhbSBvdGhlclZlY3RvciAtIHZlY3RvciB0byBkZXZpZGUgd2l0aFxuICAgICAqIEByZXR1cm5zIHJlc3VsdGluZyBuZXcgdmVjdG9yXG4gICAgICovXG4gICAgZGl2aWRlKG90aGVyVmVjdG9yKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yNCh0aGlzLnggLyBvdGhlclZlY3Rvci54LCB0aGlzLnkgLyBvdGhlclZlY3Rvci55LCB0aGlzLnogLyBvdGhlclZlY3Rvci56LCB0aGlzLncgLyBvdGhlclZlY3Rvci53KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgZ2l2ZW4gdmVjdG9yIFwicmVzdWx0XCIgd2l0aCB0aGUgZGl2aXNpb24gcmVzdWx0IG9mIHRoZSBjdXJyZW50IFZlY3RvcjQgYnkgdGhlIGdpdmVuIG9uZS5cbiAgICAgKiBAcGFyYW0gb3RoZXJWZWN0b3IgLSB2ZWN0b3IgdG8gZGV2aWRlIHdpdGhcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gdmVjdG9yIHRvIHN0b3JlIHRoZSByZXN1bHRcbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCBWZWN0b3I0LlxuICAgICAqL1xuICAgIGRpdmlkZVRvUmVmKG90aGVyVmVjdG9yLCByZXN1bHQpIHtcbiAgICAgICAgcmVzdWx0LnggPSB0aGlzLnggLyBvdGhlclZlY3Rvci54O1xuICAgICAgICByZXN1bHQueSA9IHRoaXMueSAvIG90aGVyVmVjdG9yLnk7XG4gICAgICAgIHJlc3VsdC56ID0gdGhpcy56IC8gb3RoZXJWZWN0b3IuejtcbiAgICAgICAgcmVzdWx0LncgPSB0aGlzLncgLyBvdGhlclZlY3Rvci53O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGl2aWRlcyB0aGUgY3VycmVudCBWZWN0b3IzIGNvb3JkaW5hdGVzIGJ5IHRoZSBnaXZlbiBvbmVzLlxuICAgICAqIEBwYXJhbSBvdGhlclZlY3RvciAtIHZlY3RvciB0byBkZXZpZGUgd2l0aFxuICAgICAqIEByZXR1cm5zIHRoZSB1cGRhdGVkIFZlY3RvcjMuXG4gICAgICovXG4gICAgZGl2aWRlSW5QbGFjZShvdGhlclZlY3Rvcikge1xuICAgICAgICByZXR1cm4gdGhpcy5kaXZpZGVUb1JlZihvdGhlclZlY3RvciwgdGhpcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIFZlY3RvcjQgY29vcmRpbmF0ZXMgd2l0aCB0aGUgbWluaW11bSB2YWx1ZXMgYmV0d2VlbiBpdHMgb3duIGFuZCB0aGUgZ2l2ZW4gdmVjdG9yIG9uZXNcbiAgICAgKiBAcGFyYW0gb3RoZXIgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IHVwZGF0ZWQgVmVjdG9yNFxuICAgICAqL1xuICAgIG1pbmltaXplSW5QbGFjZShvdGhlcikge1xuICAgICAgICBpZiAob3RoZXIueCA8IHRoaXMueCkge1xuICAgICAgICAgICAgdGhpcy54ID0gb3RoZXIueDtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3RoZXIueSA8IHRoaXMueSkge1xuICAgICAgICAgICAgdGhpcy55ID0gb3RoZXIueTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3RoZXIueiA8IHRoaXMueikge1xuICAgICAgICAgICAgdGhpcy56ID0gb3RoZXIuejtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3RoZXIudyA8IHRoaXMudykge1xuICAgICAgICAgICAgdGhpcy53ID0gb3RoZXIudztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgVmVjdG9yNCBjb29yZGluYXRlcyB3aXRoIHRoZSBtYXhpbXVtIHZhbHVlcyBiZXR3ZWVuIGl0cyBvd24gYW5kIHRoZSBnaXZlbiB2ZWN0b3Igb25lc1xuICAgICAqIEBwYXJhbSBvdGhlciAtIGRlZmluZXMgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgdXBkYXRlZCBWZWN0b3I0XG4gICAgICovXG4gICAgbWF4aW1pemVJblBsYWNlKG90aGVyKSB7XG4gICAgICAgIGlmIChvdGhlci54ID4gdGhpcy54KSB7XG4gICAgICAgICAgICB0aGlzLnggPSBvdGhlci54O1xuICAgICAgICB9XG4gICAgICAgIGlmIChvdGhlci55ID4gdGhpcy55KSB7XG4gICAgICAgICAgICB0aGlzLnkgPSBvdGhlci55O1xuICAgICAgICB9XG4gICAgICAgIGlmIChvdGhlci56ID4gdGhpcy56KSB7XG4gICAgICAgICAgICB0aGlzLnogPSBvdGhlci56O1xuICAgICAgICB9XG4gICAgICAgIGlmIChvdGhlci53ID4gdGhpcy53KSB7XG4gICAgICAgICAgICB0aGlzLncgPSBvdGhlci53O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgbmV3IFZlY3RvcjQgZnJvbSBjdXJyZW50IFZlY3RvcjQgZmxvb3JlZCB2YWx1ZXNcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBWZWN0b3I0XG4gICAgICovXG4gICAgZmxvb3IoKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yNChNYXRoLmZsb29yKHRoaXMueCksIE1hdGguZmxvb3IodGhpcy55KSwgTWF0aC5mbG9vcih0aGlzLnopLCBNYXRoLmZsb29yKHRoaXMudykpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgbmV3IFZlY3RvcjQgZnJvbSBjdXJyZW50IFZlY3RvcjMgZmxvb3JlZCB2YWx1ZXNcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBWZWN0b3I0XG4gICAgICovXG4gICAgZnJhY3QoKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yNCh0aGlzLnggLSBNYXRoLmZsb29yKHRoaXMueCksIHRoaXMueSAtIE1hdGguZmxvb3IodGhpcy55KSwgdGhpcy56IC0gTWF0aC5mbG9vcih0aGlzLnopLCB0aGlzLncgLSBNYXRoLmZsb29yKHRoaXMudykpO1xuICAgIH1cbiAgICAvLyBQcm9wZXJ0aWVzXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgVmVjdG9yNCBsZW5ndGggKGZsb2F0KS5cbiAgICAgKiBAcmV0dXJucyB0aGUgbGVuZ3RoXG4gICAgICovXG4gICAgbGVuZ3RoKCkge1xuICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSArIHRoaXMueiAqIHRoaXMueiArIHRoaXMudyAqIHRoaXMudyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIFZlY3RvcjQgc3F1YXJlZCBsZW5ndGggKGZsb2F0KS5cbiAgICAgKiBAcmV0dXJucyB0aGUgbGVuZ3RoIHNxdWFyZWRcbiAgICAgKi9cbiAgICBsZW5ndGhTcXVhcmVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55ICsgdGhpcy56ICogdGhpcy56ICsgdGhpcy53ICogdGhpcy53O1xuICAgIH1cbiAgICAvLyBNZXRob2RzXG4gICAgLyoqXG4gICAgICogTm9ybWFsaXplcyBpbiBwbGFjZSB0aGUgVmVjdG9yNC5cbiAgICAgKiBAcmV0dXJucyB0aGUgdXBkYXRlZCBWZWN0b3I0LlxuICAgICAqL1xuICAgIG5vcm1hbGl6ZSgpIHtcbiAgICAgICAgY29uc3QgbGVuID0gdGhpcy5sZW5ndGgoKTtcbiAgICAgICAgaWYgKGxlbiA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuc2NhbGVJblBsYWNlKDEuMCAvIGxlbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBmcm9tIHRoZSBWZWN0b3I0ICh4LCB5LCB6KSBjb29yZGluYXRlcy5cbiAgICAgKiBAcmV0dXJucyB0aGlzIGNvbnZlcnRlZCB0byBhIG5ldyB2ZWN0b3IzXG4gICAgICovXG4gICAgdG9WZWN0b3IzKCkge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjNfMS5WZWN0b3IzKHRoaXMueCwgdGhpcy55LCB0aGlzLnopO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IFZlY3RvcjQgY29waWVkIGZyb20gdGhlIGN1cnJlbnQgb25lLlxuICAgICAqIEByZXR1cm5zIHRoZSBuZXcgY2xvbmVkIHZlY3RvclxuICAgICAqL1xuICAgIGNsb25lKCkge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjQodGhpcy54LCB0aGlzLnksIHRoaXMueiwgdGhpcy53KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgY3VycmVudCBWZWN0b3I0IHdpdGggdGhlIGdpdmVuIG9uZSBjb29yZGluYXRlcy5cbiAgICAgKiBAcGFyYW0gc291cmNlIC0gdGhlIHNvdXJjZSB2ZWN0b3IgdG8gY29weSBmcm9tXG4gICAgICogQHJldHVybnMgdGhlIHVwZGF0ZWQgVmVjdG9yNC5cbiAgICAgKi9cbiAgICBjb3B5RnJvbShzb3VyY2UpIHtcbiAgICAgICAgdGhpcy54ID0gc291cmNlLng7XG4gICAgICAgIHRoaXMueSA9IHNvdXJjZS55O1xuICAgICAgICB0aGlzLnogPSBzb3VyY2UuejtcbiAgICAgICAgdGhpcy53ID0gc291cmNlLnc7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBjdXJyZW50IFZlY3RvcjQgY29vcmRpbmF0ZXMgd2l0aCB0aGUgZ2l2ZW4gZmxvYXRzLlxuICAgICAqIEBwYXJhbSB4IC0gZmxvYXQgdG8gY29weSBmcm9tXG4gICAgICogQHBhcmFtIHkgLSBmbG9hdCB0byBjb3B5IGZyb21cbiAgICAgKiBAcGFyYW0geiAtIGZsb2F0IHRvIGNvcHkgZnJvbVxuICAgICAqIEBwYXJhbSB3IC0gZmxvYXQgdG8gY29weSBmcm9tXG4gICAgICogQHJldHVybnMgdGhlIHVwZGF0ZWQgVmVjdG9yNC5cbiAgICAgKi9cbiAgICBjb3B5RnJvbUZsb2F0cyh4LCB5LCB6LCB3KSB7XG4gICAgICAgIHRoaXMueCA9IHg7XG4gICAgICAgIHRoaXMueSA9IHk7XG4gICAgICAgIHRoaXMueiA9IHo7XG4gICAgICAgIHRoaXMudyA9IHc7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBjdXJyZW50IFZlY3RvcjQgY29vcmRpbmF0ZXMgd2l0aCB0aGUgZ2l2ZW4gZmxvYXRzLlxuICAgICAqIEBwYXJhbSB4IC0gZmxvYXQgdG8gc2V0IGZyb21cbiAgICAgKiBAcGFyYW0geSAtIGZsb2F0IHRvIHNldCBmcm9tXG4gICAgICogQHBhcmFtIHogLSBmbG9hdCB0byBzZXQgZnJvbVxuICAgICAqIEBwYXJhbSB3IC0gZmxvYXQgdG8gc2V0IGZyb21cbiAgICAgKiBAcmV0dXJucyB0aGUgdXBkYXRlZCBWZWN0b3I0LlxuICAgICAqL1xuICAgIHNldCh4LCB5LCB6LCB3KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvcHlGcm9tRmxvYXRzKHgsIHksIHosIHcpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgdGhlIGdpdmVuIGZsb2F0IHRvIHRoZSBjdXJyZW50IFZlY3RvcjMgY29vcmRpbmF0ZXNcbiAgICAgKiBAcGFyYW0gdiAtIGRlZmluZXMgdGhlIHgsIHksIHogYW5kIHcgY29vcmRpbmF0ZXMgb2YgdGhlIG9wZXJhbmRcbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCB1cGRhdGVkIFZlY3RvcjNcbiAgICAgKi9cbiAgICBzZXRBbGwodikge1xuICAgICAgICB0aGlzLnggPSB0aGlzLnkgPSB0aGlzLnogPSB0aGlzLncgPSB2O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG5leHBvcnRzLlZlY3RvcjQgPSBWZWN0b3I0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VmVjdG9yNC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTWF0cml4ID0gdm9pZCAwO1xuY29uc3QgVmVjdG9yM18xID0gcmVxdWlyZShcIi4vVmVjdG9yM1wiKTtcbmNvbnN0IFF1YXRlcm5pb25fMSA9IHJlcXVpcmUoXCIuL1F1YXRlcm5pb25cIik7XG5jb25zdCBwcmVhbGxvY2F0ZWRWYXJpYWJsZXNfMSA9IHJlcXVpcmUoXCIuL3ByZWFsbG9jYXRlZFZhcmlhYmxlc1wiKTtcbmNvbnN0IFZlY3RvcjRfMSA9IHJlcXVpcmUoXCIuL1ZlY3RvcjRcIik7XG4vKipcbiAqIENsYXNzIHVzZWQgdG8gc3RvcmUgbWF0cml4IGRhdGEgKDR4NClcbiAqIEBwdWJsaWNcbiAqL1xuY2xhc3MgTWF0cml4IHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGVtcHR5IG1hdHJpeCAoZmlsbGVkIHdpdGggemVyb3MpXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuX2lzSWRlbnRpdHkgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5faXNJZGVudGl0eURpcnR5ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5faXNJZGVudGl0eTN4MiA9IHRydWU7XG4gICAgICAgIHRoaXMuX2lzSWRlbnRpdHkzeDJEaXJ0eSA9IHRydWU7XG4gICAgICAgIHRoaXMuX20gPSBbXG4gICAgICAgICAgICAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwXG4gICAgICAgIF07XG4gICAgICAgIHRoaXMuX3VwZGF0ZUlkZW50aXR5U3RhdHVzKGZhbHNlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgaW50ZXJuYWwgZGF0YSBvZiB0aGUgbWF0cml4XG4gICAgICovXG4gICAgZ2V0IG0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIGFuIGlkZW50aXR5IG1hdHJpeCB0aGF0IG11c3Qgbm90IGJlIHVwZGF0ZWRcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IElkZW50aXR5UmVhZE9ubHkoKSB7XG4gICAgICAgIHJldHVybiBNYXRyaXguX2lkZW50aXR5UmVhZE9ubHk7XG4gICAgfVxuICAgIC8vIFN0YXRpY3NcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gYW4gYXJyYXlcbiAgICAgKiBAcGFyYW0gYXJyYXkgLSBkZWZpbmVzIHRoZSBzb3VyY2UgYXJyYXlcbiAgICAgKiBAcGFyYW0gb2Zmc2V0IC0gZGVmaW5lcyBhbiBvZmZzZXQgaW4gdGhlIHNvdXJjZSBhcnJheVxuICAgICAqIEByZXR1cm5zIGEgbmV3IE1hdHJpeCBzZXQgZnJvbSB0aGUgc3RhcnRpbmcgaW5kZXggb2YgdGhlIGdpdmVuIGFycmF5XG4gICAgICovXG4gICAgc3RhdGljIEZyb21BcnJheShhcnJheSwgb2Zmc2V0ID0gMCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgTWF0cml4KCk7XG4gICAgICAgIE1hdHJpeC5Gcm9tQXJyYXlUb1JlZihhcnJheSwgb2Zmc2V0LCByZXN1bHQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb3B5IHRoZSBjb250ZW50IG9mIGFuIGFycmF5IGludG8gYSBnaXZlbiBtYXRyaXhcbiAgICAgKiBAcGFyYW0gYXJyYXkgLSBkZWZpbmVzIHRoZSBzb3VyY2UgYXJyYXlcbiAgICAgKiBAcGFyYW0gb2Zmc2V0IC0gZGVmaW5lcyBhbiBvZmZzZXQgaW4gdGhlIHNvdXJjZSBhcnJheVxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSB0YXJnZXQgbWF0cml4XG4gICAgICovXG4gICAgc3RhdGljIEZyb21BcnJheVRvUmVmKGFycmF5LCBvZmZzZXQsIHJlc3VsdCkge1xuICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgMTY7IGluZGV4KyspIHtcbiAgICAgICAgICAgIHJlc3VsdC5fbVtpbmRleF0gPSBhcnJheVtpbmRleCArIG9mZnNldF07XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0Ll9tYXJrQXNVcGRhdGVkKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0b3JlcyBhbiBhcnJheSBpbnRvIGEgbWF0cml4IGFmdGVyIGhhdmluZyBtdWx0aXBsaWVkIGVhY2ggY29tcG9uZW50IGJ5IGEgZ2l2ZW4gZmFjdG9yXG4gICAgICogQHBhcmFtIGFycmF5IC0gZGVmaW5lcyB0aGUgc291cmNlIGFycmF5XG4gICAgICogQHBhcmFtIG9mZnNldCAtIGRlZmluZXMgdGhlIG9mZnNldCBpbiB0aGUgc291cmNlIGFycmF5XG4gICAgICogQHBhcmFtIHNjYWxlIC0gZGVmaW5lcyB0aGUgc2NhbGluZyBmYWN0b3JcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgdGFyZ2V0IG1hdHJpeFxuICAgICAqL1xuICAgIHN0YXRpYyBGcm9tRmxvYXRBcnJheVRvUmVmU2NhbGVkKGFycmF5LCBvZmZzZXQsIHNjYWxlLCByZXN1bHQpIHtcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IDE2OyBpbmRleCsrKSB7XG4gICAgICAgICAgICByZXN1bHQuX21baW5kZXhdID0gYXJyYXlbaW5kZXggKyBvZmZzZXRdICogc2NhbGU7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0Ll9tYXJrQXNVcGRhdGVkKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0b3JlcyBhIGxpc3Qgb2YgdmFsdWVzICgxNikgaW5zaWRlIGEgZ2l2ZW4gbWF0cml4XG4gICAgICogQHBhcmFtIGluaXRpYWxNMTEgLSBkZWZpbmVzIDFzdCB2YWx1ZSBvZiAxc3Qgcm93XG4gICAgICogQHBhcmFtIGluaXRpYWxNMTIgLSBkZWZpbmVzIDJuZCB2YWx1ZSBvZiAxc3Qgcm93XG4gICAgICogQHBhcmFtIGluaXRpYWxNMTMgLSBkZWZpbmVzIDNyZCB2YWx1ZSBvZiAxc3Qgcm93XG4gICAgICogQHBhcmFtIGluaXRpYWxNMTQgLSBkZWZpbmVzIDR0aCB2YWx1ZSBvZiAxc3Qgcm93XG4gICAgICogQHBhcmFtIGluaXRpYWxNMjEgLSBkZWZpbmVzIDFzdCB2YWx1ZSBvZiAybmQgcm93XG4gICAgICogQHBhcmFtIGluaXRpYWxNMjIgLSBkZWZpbmVzIDJuZCB2YWx1ZSBvZiAybmQgcm93XG4gICAgICogQHBhcmFtIGluaXRpYWxNMjMgLSBkZWZpbmVzIDNyZCB2YWx1ZSBvZiAybmQgcm93XG4gICAgICogQHBhcmFtIGluaXRpYWxNMjQgLSBkZWZpbmVzIDR0aCB2YWx1ZSBvZiAybmQgcm93XG4gICAgICogQHBhcmFtIGluaXRpYWxNMzEgLSBkZWZpbmVzIDFzdCB2YWx1ZSBvZiAzcmQgcm93XG4gICAgICogQHBhcmFtIGluaXRpYWxNMzIgLSBkZWZpbmVzIDJuZCB2YWx1ZSBvZiAzcmQgcm93XG4gICAgICogQHBhcmFtIGluaXRpYWxNMzMgLSBkZWZpbmVzIDNyZCB2YWx1ZSBvZiAzcmQgcm93XG4gICAgICogQHBhcmFtIGluaXRpYWxNMzQgLSBkZWZpbmVzIDR0aCB2YWx1ZSBvZiAzcmQgcm93XG4gICAgICogQHBhcmFtIGluaXRpYWxNNDEgLSBkZWZpbmVzIDFzdCB2YWx1ZSBvZiA0dGggcm93XG4gICAgICogQHBhcmFtIGluaXRpYWxNNDIgLSBkZWZpbmVzIDJuZCB2YWx1ZSBvZiA0dGggcm93XG4gICAgICogQHBhcmFtIGluaXRpYWxNNDMgLSBkZWZpbmVzIDNyZCB2YWx1ZSBvZiA0dGggcm93XG4gICAgICogQHBhcmFtIGluaXRpYWxNNDQgLSBkZWZpbmVzIDR0aCB2YWx1ZSBvZiA0dGggcm93XG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIHRhcmdldCBtYXRyaXhcbiAgICAgKi9cbiAgICBzdGF0aWMgRnJvbVZhbHVlc1RvUmVmKGluaXRpYWxNMTEsIGluaXRpYWxNMTIsIGluaXRpYWxNMTMsIGluaXRpYWxNMTQsIGluaXRpYWxNMjEsIGluaXRpYWxNMjIsIGluaXRpYWxNMjMsIGluaXRpYWxNMjQsIGluaXRpYWxNMzEsIGluaXRpYWxNMzIsIGluaXRpYWxNMzMsIGluaXRpYWxNMzQsIGluaXRpYWxNNDEsIGluaXRpYWxNNDIsIGluaXRpYWxNNDMsIGluaXRpYWxNNDQsIHJlc3VsdCkge1xuICAgICAgICBjb25zdCBtID0gcmVzdWx0Ll9tO1xuICAgICAgICBtWzBdID0gaW5pdGlhbE0xMTtcbiAgICAgICAgbVsxXSA9IGluaXRpYWxNMTI7XG4gICAgICAgIG1bMl0gPSBpbml0aWFsTTEzO1xuICAgICAgICBtWzNdID0gaW5pdGlhbE0xNDtcbiAgICAgICAgbVs0XSA9IGluaXRpYWxNMjE7XG4gICAgICAgIG1bNV0gPSBpbml0aWFsTTIyO1xuICAgICAgICBtWzZdID0gaW5pdGlhbE0yMztcbiAgICAgICAgbVs3XSA9IGluaXRpYWxNMjQ7XG4gICAgICAgIG1bOF0gPSBpbml0aWFsTTMxO1xuICAgICAgICBtWzldID0gaW5pdGlhbE0zMjtcbiAgICAgICAgbVsxMF0gPSBpbml0aWFsTTMzO1xuICAgICAgICBtWzExXSA9IGluaXRpYWxNMzQ7XG4gICAgICAgIG1bMTJdID0gaW5pdGlhbE00MTtcbiAgICAgICAgbVsxM10gPSBpbml0aWFsTTQyO1xuICAgICAgICBtWzE0XSA9IGluaXRpYWxNNDM7XG4gICAgICAgIG1bMTVdID0gaW5pdGlhbE00NDtcbiAgICAgICAgcmVzdWx0Ll9tYXJrQXNVcGRhdGVkKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgbmV3IG1hdHJpeCBmcm9tIGEgbGlzdCBvZiB2YWx1ZXMgKDE2KVxuICAgICAqIEBwYXJhbSBpbml0aWFsTTExIC0gZGVmaW5lcyAxc3QgdmFsdWUgb2YgMXN0IHJvd1xuICAgICAqIEBwYXJhbSBpbml0aWFsTTEyIC0gZGVmaW5lcyAybmQgdmFsdWUgb2YgMXN0IHJvd1xuICAgICAqIEBwYXJhbSBpbml0aWFsTTEzIC0gZGVmaW5lcyAzcmQgdmFsdWUgb2YgMXN0IHJvd1xuICAgICAqIEBwYXJhbSBpbml0aWFsTTE0IC0gZGVmaW5lcyA0dGggdmFsdWUgb2YgMXN0IHJvd1xuICAgICAqIEBwYXJhbSBpbml0aWFsTTIxIC0gZGVmaW5lcyAxc3QgdmFsdWUgb2YgMm5kIHJvd1xuICAgICAqIEBwYXJhbSBpbml0aWFsTTIyIC0gZGVmaW5lcyAybmQgdmFsdWUgb2YgMm5kIHJvd1xuICAgICAqIEBwYXJhbSBpbml0aWFsTTIzIC0gZGVmaW5lcyAzcmQgdmFsdWUgb2YgMm5kIHJvd1xuICAgICAqIEBwYXJhbSBpbml0aWFsTTI0IC0gZGVmaW5lcyA0dGggdmFsdWUgb2YgMm5kIHJvd1xuICAgICAqIEBwYXJhbSBpbml0aWFsTTMxIC0gZGVmaW5lcyAxc3QgdmFsdWUgb2YgM3JkIHJvd1xuICAgICAqIEBwYXJhbSBpbml0aWFsTTMyIC0gZGVmaW5lcyAybmQgdmFsdWUgb2YgM3JkIHJvd1xuICAgICAqIEBwYXJhbSBpbml0aWFsTTMzIC0gZGVmaW5lcyAzcmQgdmFsdWUgb2YgM3JkIHJvd1xuICAgICAqIEBwYXJhbSBpbml0aWFsTTM0IC0gZGVmaW5lcyA0dGggdmFsdWUgb2YgM3JkIHJvd1xuICAgICAqIEBwYXJhbSBpbml0aWFsTTQxIC0gZGVmaW5lcyAxc3QgdmFsdWUgb2YgNHRoIHJvd1xuICAgICAqIEBwYXJhbSBpbml0aWFsTTQyIC0gZGVmaW5lcyAybmQgdmFsdWUgb2YgNHRoIHJvd1xuICAgICAqIEBwYXJhbSBpbml0aWFsTTQzIC0gZGVmaW5lcyAzcmQgdmFsdWUgb2YgNHRoIHJvd1xuICAgICAqIEBwYXJhbSBpbml0aWFsTTQ0IC0gZGVmaW5lcyA0dGggdmFsdWUgb2YgNHRoIHJvd1xuICAgICAqIEByZXR1cm5zIHRoZSBuZXcgbWF0cml4XG4gICAgICovXG4gICAgc3RhdGljIEZyb21WYWx1ZXMoaW5pdGlhbE0xMSwgaW5pdGlhbE0xMiwgaW5pdGlhbE0xMywgaW5pdGlhbE0xNCwgaW5pdGlhbE0yMSwgaW5pdGlhbE0yMiwgaW5pdGlhbE0yMywgaW5pdGlhbE0yNCwgaW5pdGlhbE0zMSwgaW5pdGlhbE0zMiwgaW5pdGlhbE0zMywgaW5pdGlhbE0zNCwgaW5pdGlhbE00MSwgaW5pdGlhbE00MiwgaW5pdGlhbE00MywgaW5pdGlhbE00NCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgTWF0cml4KCk7XG4gICAgICAgIGNvbnN0IG0gPSByZXN1bHQuX207XG4gICAgICAgIG1bMF0gPSBpbml0aWFsTTExO1xuICAgICAgICBtWzFdID0gaW5pdGlhbE0xMjtcbiAgICAgICAgbVsyXSA9IGluaXRpYWxNMTM7XG4gICAgICAgIG1bM10gPSBpbml0aWFsTTE0O1xuICAgICAgICBtWzRdID0gaW5pdGlhbE0yMTtcbiAgICAgICAgbVs1XSA9IGluaXRpYWxNMjI7XG4gICAgICAgIG1bNl0gPSBpbml0aWFsTTIzO1xuICAgICAgICBtWzddID0gaW5pdGlhbE0yNDtcbiAgICAgICAgbVs4XSA9IGluaXRpYWxNMzE7XG4gICAgICAgIG1bOV0gPSBpbml0aWFsTTMyO1xuICAgICAgICBtWzEwXSA9IGluaXRpYWxNMzM7XG4gICAgICAgIG1bMTFdID0gaW5pdGlhbE0zNDtcbiAgICAgICAgbVsxMl0gPSBpbml0aWFsTTQxO1xuICAgICAgICBtWzEzXSA9IGluaXRpYWxNNDI7XG4gICAgICAgIG1bMTRdID0gaW5pdGlhbE00MztcbiAgICAgICAgbVsxNV0gPSBpbml0aWFsTTQ0O1xuICAgICAgICByZXN1bHQuX21hcmtBc1VwZGF0ZWQoKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBtYXRyaXggY29tcG9zZWQgYnkgbWVyZ2luZyBzY2FsZSAodmVjdG9yMyksIHJvdGF0aW9uIChxdWF0ZXJuaW9uKSBhbmQgdHJhbnNsYXRpb24gKHZlY3RvcjMpXG4gICAgICogQHBhcmFtIHNjYWxlIC0gZGVmaW5lcyB0aGUgc2NhbGUgdmVjdG9yM1xuICAgICAqIEBwYXJhbSByb3RhdGlvbiAtIGRlZmluZXMgdGhlIHJvdGF0aW9uIHF1YXRlcm5pb25cbiAgICAgKiBAcGFyYW0gdHJhbnNsYXRpb24gLSBkZWZpbmVzIHRoZSB0cmFuc2xhdGlvbiB2ZWN0b3IzXG4gICAgICogQHJldHVybnMgYSBuZXcgbWF0cml4XG4gICAgICovXG4gICAgc3RhdGljIENvbXBvc2Uoc2NhbGUsIHJvdGF0aW9uLCB0cmFuc2xhdGlvbikge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgTWF0cml4KCk7XG4gICAgICAgIE1hdHJpeC5Db21wb3NlVG9SZWYoc2NhbGUsIHJvdGF0aW9uLCB0cmFuc2xhdGlvbiwgcmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyBhIG1hdHJpeCB0byBhIHZhbHVlIGNvbXBvc2VkIGJ5IG1lcmdpbmcgc2NhbGUgKHZlY3RvcjMpLCByb3RhdGlvbiAocXVhdGVybmlvbikgYW5kIHRyYW5zbGF0aW9uICh2ZWN0b3IzKVxuICAgICAqIEBwYXJhbSBzY2FsZSAtIGRlZmluZXMgdGhlIHNjYWxlIHZlY3RvcjNcbiAgICAgKiBAcGFyYW0gcm90YXRpb24gLSBkZWZpbmVzIHRoZSByb3RhdGlvbiBxdWF0ZXJuaW9uXG4gICAgICogQHBhcmFtIHRyYW5zbGF0aW9uIC0gZGVmaW5lcyB0aGUgdHJhbnNsYXRpb24gdmVjdG9yM1xuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSB0YXJnZXQgbWF0cml4XG4gICAgICovXG4gICAgc3RhdGljIENvbXBvc2VUb1JlZihzY2FsZSwgcm90YXRpb24sIHRyYW5zbGF0aW9uLCByZXN1bHQpIHtcbiAgICAgICAgTWF0cml4LlNjYWxpbmdUb1JlZihzY2FsZS54LCBzY2FsZS55LCBzY2FsZS56LCBwcmVhbGxvY2F0ZWRWYXJpYWJsZXNfMS5NYXRoVG1wLk1hdHJpeFsxXSk7XG4gICAgICAgIHJvdGF0aW9uLnRvUm90YXRpb25NYXRyaXgocHJlYWxsb2NhdGVkVmFyaWFibGVzXzEuTWF0aFRtcC5NYXRyaXhbMF0pO1xuICAgICAgICBwcmVhbGxvY2F0ZWRWYXJpYWJsZXNfMS5NYXRoVG1wLk1hdHJpeFsxXS5tdWx0aXBseVRvUmVmKHByZWFsbG9jYXRlZFZhcmlhYmxlc18xLk1hdGhUbXAuTWF0cml4WzBdLCByZXN1bHQpO1xuICAgICAgICByZXN1bHQuc2V0VHJhbnNsYXRpb24odHJhbnNsYXRpb24pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGlkZW50aXR5IG1hdHJpeFxuICAgICAqIEByZXR1cm5zIGEgbmV3IGlkZW50aXR5IG1hdHJpeFxuICAgICAqL1xuICAgIHN0YXRpYyBJZGVudGl0eSgpIHtcbiAgICAgICAgY29uc3QgaWRlbnRpdHkgPSBNYXRyaXguRnJvbVZhbHVlcygxLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMS4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDEuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAxLjApO1xuICAgICAgICBpZGVudGl0eS5fdXBkYXRlSWRlbnRpdHlTdGF0dXModHJ1ZSk7XG4gICAgICAgIHJldHVybiBpZGVudGl0eTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBpZGVudGl0eSBtYXRyaXggYW5kIHN0b3JlcyB0aGUgcmVzdWx0IGluIGEgZ2l2ZW4gbWF0cml4XG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIHRhcmdldCBtYXRyaXhcbiAgICAgKi9cbiAgICBzdGF0aWMgSWRlbnRpdHlUb1JlZihyZXN1bHQpIHtcbiAgICAgICAgTWF0cml4LkZyb21WYWx1ZXNUb1JlZigxLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMS4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDEuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAxLjAsIHJlc3VsdCk7XG4gICAgICAgIHJlc3VsdC5fdXBkYXRlSWRlbnRpdHlTdGF0dXModHJ1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgemVybyBtYXRyaXhcbiAgICAgKiBAcmV0dXJucyBhIG5ldyB6ZXJvIG1hdHJpeFxuICAgICAqL1xuICAgIHN0YXRpYyBaZXJvKCkge1xuICAgICAgICBjb25zdCB6ZXJvID0gTWF0cml4LkZyb21WYWx1ZXMoMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMC4wKTtcbiAgICAgICAgemVyby5fdXBkYXRlSWRlbnRpdHlTdGF0dXMoZmFsc2UpO1xuICAgICAgICByZXR1cm4gemVybztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyByb3RhdGlvbiBtYXRyaXggZm9yIFwiYW5nbGVcIiByYWRpYW5zIGFyb3VuZCB0aGUgWCBheGlzXG4gICAgICogQHBhcmFtIGFuZ2xlIC0gZGVmaW5lcyB0aGUgYW5nbGUgKGluIHJhZGlhbnMpIHRvIHVzZVxuICAgICAqIEByZXR1cm5zIHRoZSBuZXcgbWF0cml4XG4gICAgICovXG4gICAgc3RhdGljIFJvdGF0aW9uWChhbmdsZSkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgTWF0cml4KCk7XG4gICAgICAgIE1hdHJpeC5Sb3RhdGlvblhUb1JlZihhbmdsZSwgcmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBtYXRyaXggYXMgdGhlIGludmVydCBvZiBhIGdpdmVuIG1hdHJpeFxuICAgICAqIEBwYXJhbSBzb3VyY2UgLSBkZWZpbmVzIHRoZSBzb3VyY2UgbWF0cml4XG4gICAgICogQHJldHVybnMgdGhlIG5ldyBtYXRyaXhcbiAgICAgKi9cbiAgICBzdGF0aWMgSW52ZXJ0KHNvdXJjZSkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgTWF0cml4KCk7XG4gICAgICAgIHNvdXJjZS5pbnZlcnRUb1JlZihyZXN1bHQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IHJvdGF0aW9uIG1hdHJpeCBmb3IgXCJhbmdsZVwiIHJhZGlhbnMgYXJvdW5kIHRoZSBYIGF4aXMgYW5kIHN0b3JlcyBpdCBpbiBhIGdpdmVuIG1hdHJpeFxuICAgICAqIEBwYXJhbSBhbmdsZSAtIGRlZmluZXMgdGhlIGFuZ2xlIChpbiByYWRpYW5zKSB0byB1c2VcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgdGFyZ2V0IG1hdHJpeFxuICAgICAqL1xuICAgIHN0YXRpYyBSb3RhdGlvblhUb1JlZihhbmdsZSwgcmVzdWx0KSB7XG4gICAgICAgIGNvbnN0IHMgPSBNYXRoLnNpbihhbmdsZSk7XG4gICAgICAgIGNvbnN0IGMgPSBNYXRoLmNvcyhhbmdsZSk7XG4gICAgICAgIE1hdHJpeC5Gcm9tVmFsdWVzVG9SZWYoMS4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIGMsIHMsIDAuMCwgMC4wLCAtcywgYywgMC4wLCAwLjAsIDAuMCwgMC4wLCAxLjAsIHJlc3VsdCk7XG4gICAgICAgIHJlc3VsdC5fdXBkYXRlSWRlbnRpdHlTdGF0dXMoYyA9PT0gMSAmJiBzID09PSAwKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyByb3RhdGlvbiBtYXRyaXggZm9yIFwiYW5nbGVcIiByYWRpYW5zIGFyb3VuZCB0aGUgWSBheGlzXG4gICAgICogQHBhcmFtIGFuZ2xlIC0gZGVmaW5lcyB0aGUgYW5nbGUgKGluIHJhZGlhbnMpIHRvIHVzZVxuICAgICAqIEByZXR1cm5zIHRoZSBuZXcgbWF0cml4XG4gICAgICovXG4gICAgc3RhdGljIFJvdGF0aW9uWShhbmdsZSkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgTWF0cml4KCk7XG4gICAgICAgIE1hdHJpeC5Sb3RhdGlvbllUb1JlZihhbmdsZSwgcmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyByb3RhdGlvbiBtYXRyaXggZm9yIFwiYW5nbGVcIiByYWRpYW5zIGFyb3VuZCB0aGUgWSBheGlzIGFuZCBzdG9yZXMgaXQgaW4gYSBnaXZlbiBtYXRyaXhcbiAgICAgKiBAcGFyYW0gYW5nbGUgLSBkZWZpbmVzIHRoZSBhbmdsZSAoaW4gcmFkaWFucykgdG8gdXNlXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIHRhcmdldCBtYXRyaXhcbiAgICAgKi9cbiAgICBzdGF0aWMgUm90YXRpb25ZVG9SZWYoYW5nbGUsIHJlc3VsdCkge1xuICAgICAgICBjb25zdCBzID0gTWF0aC5zaW4oYW5nbGUpO1xuICAgICAgICBjb25zdCBjID0gTWF0aC5jb3MoYW5nbGUpO1xuICAgICAgICBNYXRyaXguRnJvbVZhbHVlc1RvUmVmKGMsIDAuMCwgLXMsIDAuMCwgMC4wLCAxLjAsIDAuMCwgMC4wLCBzLCAwLjAsIGMsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMS4wLCByZXN1bHQpO1xuICAgICAgICByZXN1bHQuX3VwZGF0ZUlkZW50aXR5U3RhdHVzKGMgPT09IDEgJiYgcyA9PT0gMCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgcm90YXRpb24gbWF0cml4IGZvciBcImFuZ2xlXCIgcmFkaWFucyBhcm91bmQgdGhlIFogYXhpc1xuICAgICAqIEBwYXJhbSBhbmdsZSAtIGRlZmluZXMgdGhlIGFuZ2xlIChpbiByYWRpYW5zKSB0byB1c2VcbiAgICAgKiBAcmV0dXJucyB0aGUgbmV3IG1hdHJpeFxuICAgICAqL1xuICAgIHN0YXRpYyBSb3RhdGlvblooYW5nbGUpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IE1hdHJpeCgpO1xuICAgICAgICBNYXRyaXguUm90YXRpb25aVG9SZWYoYW5nbGUsIHJlc3VsdCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgcm90YXRpb24gbWF0cml4IGZvciBcImFuZ2xlXCIgcmFkaWFucyBhcm91bmQgdGhlIFogYXhpcyBhbmQgc3RvcmVzIGl0IGluIGEgZ2l2ZW4gbWF0cml4XG4gICAgICogQHBhcmFtIGFuZ2xlIC0gZGVmaW5lcyB0aGUgYW5nbGUgKGluIHJhZGlhbnMpIHRvIHVzZVxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSB0YXJnZXQgbWF0cml4XG4gICAgICovXG4gICAgc3RhdGljIFJvdGF0aW9uWlRvUmVmKGFuZ2xlLCByZXN1bHQpIHtcbiAgICAgICAgY29uc3QgcyA9IE1hdGguc2luKGFuZ2xlKTtcbiAgICAgICAgY29uc3QgYyA9IE1hdGguY29zKGFuZ2xlKTtcbiAgICAgICAgTWF0cml4LkZyb21WYWx1ZXNUb1JlZihjLCBzLCAwLjAsIDAuMCwgLXMsIGMsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMS4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDEuMCwgcmVzdWx0KTtcbiAgICAgICAgcmVzdWx0Ll91cGRhdGVJZGVudGl0eVN0YXR1cyhjID09PSAxICYmIHMgPT09IDApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IHJvdGF0aW9uIG1hdHJpeCBmb3IgXCJhbmdsZVwiIHJhZGlhbnMgYXJvdW5kIHRoZSBnaXZlbiBheGlzXG4gICAgICogQHBhcmFtIGF4aXMgLSBkZWZpbmVzIHRoZSBheGlzIHRvIHVzZVxuICAgICAqIEBwYXJhbSBhbmdsZSAtIGRlZmluZXMgdGhlIGFuZ2xlIChpbiByYWRpYW5zKSB0byB1c2VcbiAgICAgKiBAcmV0dXJucyB0aGUgbmV3IG1hdHJpeFxuICAgICAqL1xuICAgIHN0YXRpYyBSb3RhdGlvbkF4aXMoYXhpcywgYW5nbGUpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IE1hdHJpeCgpO1xuICAgICAgICBNYXRyaXguUm90YXRpb25BeGlzVG9SZWYoYXhpcywgYW5nbGUsIHJlc3VsdCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgcm90YXRpb24gbWF0cml4IGZvciBcImFuZ2xlXCIgcmFkaWFucyBhcm91bmQgdGhlIGdpdmVuIGF4aXMgYW5kIHN0b3JlcyBpdCBpbiBhIGdpdmVuIG1hdHJpeFxuICAgICAqIEBwYXJhbSBheGlzIC0gZGVmaW5lcyB0aGUgYXhpcyB0byB1c2VcbiAgICAgKiBAcGFyYW0gYW5nbGUgLSBkZWZpbmVzIHRoZSBhbmdsZSAoaW4gcmFkaWFucykgdG8gdXNlXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIHRhcmdldCBtYXRyaXhcbiAgICAgKi9cbiAgICBzdGF0aWMgUm90YXRpb25BeGlzVG9SZWYoYXhpcywgYW5nbGUsIHJlc3VsdCkge1xuICAgICAgICBjb25zdCBzID0gTWF0aC5zaW4oLWFuZ2xlKTtcbiAgICAgICAgY29uc3QgYyA9IE1hdGguY29zKC1hbmdsZSk7XG4gICAgICAgIGNvbnN0IGMxID0gMSAtIGM7XG4gICAgICAgIGF4aXMubm9ybWFsaXplKCk7XG4gICAgICAgIGNvbnN0IG0gPSByZXN1bHQuX207XG4gICAgICAgIG1bMF0gPSBheGlzLnggKiBheGlzLnggKiBjMSArIGM7XG4gICAgICAgIG1bMV0gPSBheGlzLnggKiBheGlzLnkgKiBjMSAtIGF4aXMueiAqIHM7XG4gICAgICAgIG1bMl0gPSBheGlzLnggKiBheGlzLnogKiBjMSArIGF4aXMueSAqIHM7XG4gICAgICAgIG1bM10gPSAwLjA7XG4gICAgICAgIG1bNF0gPSBheGlzLnkgKiBheGlzLnggKiBjMSArIGF4aXMueiAqIHM7XG4gICAgICAgIG1bNV0gPSBheGlzLnkgKiBheGlzLnkgKiBjMSArIGM7XG4gICAgICAgIG1bNl0gPSBheGlzLnkgKiBheGlzLnogKiBjMSAtIGF4aXMueCAqIHM7XG4gICAgICAgIG1bN10gPSAwLjA7XG4gICAgICAgIG1bOF0gPSBheGlzLnogKiBheGlzLnggKiBjMSAtIGF4aXMueSAqIHM7XG4gICAgICAgIG1bOV0gPSBheGlzLnogKiBheGlzLnkgKiBjMSArIGF4aXMueCAqIHM7XG4gICAgICAgIG1bMTBdID0gYXhpcy56ICogYXhpcy56ICogYzEgKyBjO1xuICAgICAgICBtWzExXSA9IDAuMDtcbiAgICAgICAgbVsxMl0gPSAwLjA7XG4gICAgICAgIG1bMTNdID0gMC4wO1xuICAgICAgICBtWzE0XSA9IDAuMDtcbiAgICAgICAgbVsxNV0gPSAxLjA7XG4gICAgICAgIHJlc3VsdC5fbWFya0FzVXBkYXRlZCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgcm90YXRpb24gbWF0cml4XG4gICAgICogQHBhcmFtIHlhdyAtIGRlZmluZXMgdGhlIHlhdyBhbmdsZSBpbiByYWRpYW5zIChZIGF4aXMpXG4gICAgICogQHBhcmFtIHBpdGNoIC0gZGVmaW5lcyB0aGUgcGl0Y2ggYW5nbGUgaW4gcmFkaWFucyAoWCBheGlzKVxuICAgICAqIEBwYXJhbSByb2xsIC0gZGVmaW5lcyB0aGUgcm9sbCBhbmdsZSBpbiByYWRpYW5zIChYIGF4aXMpXG4gICAgICogQHJldHVybnMgdGhlIG5ldyByb3RhdGlvbiBtYXRyaXhcbiAgICAgKi9cbiAgICBzdGF0aWMgUm90YXRpb25ZYXdQaXRjaFJvbGwoeWF3LCBwaXRjaCwgcm9sbCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgTWF0cml4KCk7XG4gICAgICAgIE1hdHJpeC5Sb3RhdGlvbllhd1BpdGNoUm9sbFRvUmVmKHlhdywgcGl0Y2gsIHJvbGwsIHJlc3VsdCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSByb3RhdGlvbiBtYXRyaXggYW5kIHN0b3JlcyBpdCBpbiBhIGdpdmVuIG1hdHJpeFxuICAgICAqIEBwYXJhbSB5YXcgLSBkZWZpbmVzIHRoZSB5YXcgYW5nbGUgaW4gcmFkaWFucyAoWSBheGlzKVxuICAgICAqIEBwYXJhbSBwaXRjaCAtIGRlZmluZXMgdGhlIHBpdGNoIGFuZ2xlIGluIHJhZGlhbnMgKFggYXhpcylcbiAgICAgKiBAcGFyYW0gcm9sbCAtIGRlZmluZXMgdGhlIHJvbGwgYW5nbGUgaW4gcmFkaWFucyAoWCBheGlzKVxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSB0YXJnZXQgbWF0cml4XG4gICAgICovXG4gICAgc3RhdGljIFJvdGF0aW9uWWF3UGl0Y2hSb2xsVG9SZWYoeWF3LCBwaXRjaCwgcm9sbCwgcmVzdWx0KSB7XG4gICAgICAgIFF1YXRlcm5pb25fMS5RdWF0ZXJuaW9uLlJvdGF0aW9uWWF3UGl0Y2hSb2xsVG9SZWYoeWF3LCBwaXRjaCwgcm9sbCwgcHJlYWxsb2NhdGVkVmFyaWFibGVzXzEuTWF0aFRtcC5RdWF0ZXJuaW9uWzBdKTtcbiAgICAgICAgcHJlYWxsb2NhdGVkVmFyaWFibGVzXzEuTWF0aFRtcC5RdWF0ZXJuaW9uWzBdLnRvUm90YXRpb25NYXRyaXgocmVzdWx0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNjYWxpbmcgbWF0cml4XG4gICAgICogQHBhcmFtIHggLSBkZWZpbmVzIHRoZSBzY2FsZSBmYWN0b3Igb24gWCBheGlzXG4gICAgICogQHBhcmFtIHkgLSBkZWZpbmVzIHRoZSBzY2FsZSBmYWN0b3Igb24gWSBheGlzXG4gICAgICogQHBhcmFtIHogLSBkZWZpbmVzIHRoZSBzY2FsZSBmYWN0b3Igb24gWiBheGlzXG4gICAgICogQHJldHVybnMgdGhlIG5ldyBtYXRyaXhcbiAgICAgKi9cbiAgICBzdGF0aWMgU2NhbGluZyh4LCB5LCB6KSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBNYXRyaXgoKTtcbiAgICAgICAgTWF0cml4LlNjYWxpbmdUb1JlZih4LCB5LCB6LCByZXN1bHQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2NhbGluZyBtYXRyaXggYW5kIHN0b3JlcyBpdCBpbiBhIGdpdmVuIG1hdHJpeFxuICAgICAqIEBwYXJhbSB4IC0gZGVmaW5lcyB0aGUgc2NhbGUgZmFjdG9yIG9uIFggYXhpc1xuICAgICAqIEBwYXJhbSB5IC0gZGVmaW5lcyB0aGUgc2NhbGUgZmFjdG9yIG9uIFkgYXhpc1xuICAgICAqIEBwYXJhbSB6IC0gZGVmaW5lcyB0aGUgc2NhbGUgZmFjdG9yIG9uIFogYXhpc1xuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSB0YXJnZXQgbWF0cml4XG4gICAgICovXG4gICAgc3RhdGljIFNjYWxpbmdUb1JlZih4LCB5LCB6LCByZXN1bHQpIHtcbiAgICAgICAgTWF0cml4LkZyb21WYWx1ZXNUb1JlZih4LCAwLjAsIDAuMCwgMC4wLCAwLjAsIHksIDAuMCwgMC4wLCAwLjAsIDAuMCwgeiwgMC4wLCAwLjAsIDAuMCwgMC4wLCAxLjAsIHJlc3VsdCk7XG4gICAgICAgIHJlc3VsdC5fdXBkYXRlSWRlbnRpdHlTdGF0dXMoeCA9PT0gMSAmJiB5ID09PSAxICYmIHogPT09IDEpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgdHJhbnNsYXRpb24gbWF0cml4XG4gICAgICogQHBhcmFtIHggLSBkZWZpbmVzIHRoZSB0cmFuc2xhdGlvbiBvbiBYIGF4aXNcbiAgICAgKiBAcGFyYW0geSAtIGRlZmluZXMgdGhlIHRyYW5zbGF0aW9uIG9uIFkgYXhpc1xuICAgICAqIEBwYXJhbSB6IC0gZGVmaW5lcyB0aGUgdHJhbnNsYXRpb25vbiBaIGF4aXNcbiAgICAgKiBAcmV0dXJucyB0aGUgbmV3IG1hdHJpeFxuICAgICAqL1xuICAgIHN0YXRpYyBUcmFuc2xhdGlvbih4LCB5LCB6KSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBNYXRyaXgoKTtcbiAgICAgICAgTWF0cml4LlRyYW5zbGF0aW9uVG9SZWYoeCwgeSwgeiwgcmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHRyYW5zbGF0aW9uIG1hdHJpeCBhbmQgc3RvcmVzIGl0IGluIGEgZ2l2ZW4gbWF0cml4XG4gICAgICogQHBhcmFtIHggLSBkZWZpbmVzIHRoZSB0cmFuc2xhdGlvbiBvbiBYIGF4aXNcbiAgICAgKiBAcGFyYW0geSAtIGRlZmluZXMgdGhlIHRyYW5zbGF0aW9uIG9uIFkgYXhpc1xuICAgICAqIEBwYXJhbSB6IC0gZGVmaW5lcyB0aGUgdHJhbnNsYXRpb25vbiBaIGF4aXNcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgdGFyZ2V0IG1hdHJpeFxuICAgICAqL1xuICAgIHN0YXRpYyBUcmFuc2xhdGlvblRvUmVmKHgsIHksIHosIHJlc3VsdCkge1xuICAgICAgICBNYXRyaXguRnJvbVZhbHVlc1RvUmVmKDEuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAxLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMS4wLCAwLjAsIHgsIHksIHosIDEuMCwgcmVzdWx0KTtcbiAgICAgICAgcmVzdWx0Ll91cGRhdGVJZGVudGl0eVN0YXR1cyh4ID09PSAwICYmIHkgPT09IDAgJiYgeiA9PT0gMCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgTWF0cml4IHdob3NlIHZhbHVlcyBhcmUgdGhlIGludGVycG9sYXRlZCB2YWx1ZXMgZm9yIFwiZ3JhZGllbnRcIiAoZmxvYXQpIGJldHdlZW4gdGhlIG9uZXMgb2YgdGhlIG1hdHJpY2VzIFwic3RhcnRWYWx1ZVwiIGFuZCBcImVuZFZhbHVlXCIuXG4gICAgICogQHBhcmFtIHN0YXJ0VmFsdWUgLSBkZWZpbmVzIHRoZSBzdGFydCB2YWx1ZVxuICAgICAqIEBwYXJhbSBlbmRWYWx1ZSAtIGRlZmluZXMgdGhlIGVuZCB2YWx1ZVxuICAgICAqIEBwYXJhbSBncmFkaWVudCAtIGRlZmluZXMgdGhlIGdyYWRpZW50IGZhY3RvclxuICAgICAqIEByZXR1cm5zIHRoZSBuZXcgbWF0cml4XG4gICAgICovXG4gICAgc3RhdGljIExlcnAoc3RhcnRWYWx1ZSwgZW5kVmFsdWUsIGdyYWRpZW50KSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBNYXRyaXgoKTtcbiAgICAgICAgTWF0cml4LkxlcnBUb1JlZihzdGFydFZhbHVlLCBlbmRWYWx1ZSwgZ3JhZGllbnQsIHJlc3VsdCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgZ2l2ZW4gbWF0cml4IFwicmVzdWx0XCIgYXMgdGhlIGludGVycG9sYXRlZCB2YWx1ZXMgZm9yIFwiZ3JhZGllbnRcIiAoZmxvYXQpIGJldHdlZW4gdGhlIG9uZXMgb2YgdGhlIG1hdHJpY2VzIFwic3RhcnRWYWx1ZVwiIGFuZCBcImVuZFZhbHVlXCIuXG4gICAgICogQHBhcmFtIHN0YXJ0VmFsdWUgLSBkZWZpbmVzIHRoZSBzdGFydCB2YWx1ZVxuICAgICAqIEBwYXJhbSBlbmRWYWx1ZSAtIGRlZmluZXMgdGhlIGVuZCB2YWx1ZVxuICAgICAqIEBwYXJhbSBncmFkaWVudCAtIGRlZmluZXMgdGhlIGdyYWRpZW50IGZhY3RvclxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSBNYXRyaXggb2JqZWN0IHdoZXJlIHRvIHN0b3JlIGRhdGFcbiAgICAgKi9cbiAgICBzdGF0aWMgTGVycFRvUmVmKHN0YXJ0VmFsdWUsIGVuZFZhbHVlLCBncmFkaWVudCwgcmVzdWx0KSB7XG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCAxNjsgaW5kZXgrKykge1xuICAgICAgICAgICAgcmVzdWx0Ll9tW2luZGV4XSA9XG4gICAgICAgICAgICAgICAgc3RhcnRWYWx1ZS5fbVtpbmRleF0gKiAoMS4wIC0gZ3JhZGllbnQpICsgZW5kVmFsdWUuX21baW5kZXhdICogZ3JhZGllbnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0Ll9tYXJrQXNVcGRhdGVkKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEJ1aWxkcyBhIG5ldyBtYXRyaXggd2hvc2UgdmFsdWVzIGFyZSBjb21wdXRlZCBieTpcbiAgICAgKiAqIGRlY29tcG9zaW5nIHRoZSB0aGUgXCJzdGFydFZhbHVlXCIgYW5kIFwiZW5kVmFsdWVcIiBtYXRyaWNlcyBpbnRvIHRoZWlyIHJlc3BlY3RpdmUgc2NhbGUsIHJvdGF0aW9uIGFuZCB0cmFuc2xhdGlvbiBtYXRyaWNlc1xuICAgICAqICogaW50ZXJwb2xhdGluZyBmb3IgXCJncmFkaWVudFwiIChmbG9hdCkgdGhlIHZhbHVlcyBiZXR3ZWVuIGVhY2ggb2YgdGhlc2UgZGVjb21wb3NlZCBtYXRyaWNlcyBiZXR3ZWVuIHRoZSBzdGFydCBhbmQgdGhlIGVuZFxuICAgICAqICogcmVjb21wb3NpbmcgYSBuZXcgbWF0cml4IGZyb20gdGhlc2UgMyBpbnRlcnBvbGF0ZWQgc2NhbGUsIHJvdGF0aW9uIGFuZCB0cmFuc2xhdGlvbiBtYXRyaWNlc1xuICAgICAqIEBwYXJhbSBzdGFydFZhbHVlIC0gZGVmaW5lcyB0aGUgZmlyc3QgbWF0cml4XG4gICAgICogQHBhcmFtIGVuZFZhbHVlIC0gZGVmaW5lcyB0aGUgc2Vjb25kIG1hdHJpeFxuICAgICAqIEBwYXJhbSBncmFkaWVudCAtIGRlZmluZXMgdGhlIGdyYWRpZW50IGJldHdlZW4gdGhlIHR3byBtYXRyaWNlc1xuICAgICAqIEByZXR1cm5zIHRoZSBuZXcgbWF0cml4XG4gICAgICovXG4gICAgc3RhdGljIERlY29tcG9zZUxlcnAoc3RhcnRWYWx1ZSwgZW5kVmFsdWUsIGdyYWRpZW50KSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBNYXRyaXgoKTtcbiAgICAgICAgTWF0cml4LkRlY29tcG9zZUxlcnBUb1JlZihzdGFydFZhbHVlLCBlbmRWYWx1ZSwgZ3JhZGllbnQsIHJlc3VsdCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSBhIG1hdHJpeCB0byB2YWx1ZXMgd2hpY2ggYXJlIGNvbXB1dGVkIGJ5OlxuICAgICAqICogZGVjb21wb3NpbmcgdGhlIHRoZSBcInN0YXJ0VmFsdWVcIiBhbmQgXCJlbmRWYWx1ZVwiIG1hdHJpY2VzIGludG8gdGhlaXIgcmVzcGVjdGl2ZSBzY2FsZSwgcm90YXRpb24gYW5kIHRyYW5zbGF0aW9uIG1hdHJpY2VzXG4gICAgICogKiBpbnRlcnBvbGF0aW5nIGZvciBcImdyYWRpZW50XCIgKGZsb2F0KSB0aGUgdmFsdWVzIGJldHdlZW4gZWFjaCBvZiB0aGVzZSBkZWNvbXBvc2VkIG1hdHJpY2VzIGJldHdlZW4gdGhlIHN0YXJ0IGFuZCB0aGUgZW5kXG4gICAgICogKiByZWNvbXBvc2luZyBhIG5ldyBtYXRyaXggZnJvbSB0aGVzZSAzIGludGVycG9sYXRlZCBzY2FsZSwgcm90YXRpb24gYW5kIHRyYW5zbGF0aW9uIG1hdHJpY2VzXG4gICAgICogQHBhcmFtIHN0YXJ0VmFsdWUgLSBkZWZpbmVzIHRoZSBmaXJzdCBtYXRyaXhcbiAgICAgKiBAcGFyYW0gZW5kVmFsdWUgLSBkZWZpbmVzIHRoZSBzZWNvbmQgbWF0cml4XG4gICAgICogQHBhcmFtIGdyYWRpZW50IC0gZGVmaW5lcyB0aGUgZ3JhZGllbnQgYmV0d2VlbiB0aGUgdHdvIG1hdHJpY2VzXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIHRhcmdldCBtYXRyaXhcbiAgICAgKi9cbiAgICBzdGF0aWMgRGVjb21wb3NlTGVycFRvUmVmKHN0YXJ0VmFsdWUsIGVuZFZhbHVlLCBncmFkaWVudCwgcmVzdWx0KSB7XG4gICAgICAgIGNvbnN0IHN0YXJ0U2NhbGUgPSBwcmVhbGxvY2F0ZWRWYXJpYWJsZXNfMS5NYXRoVG1wLlZlY3RvcjNbMF07XG4gICAgICAgIGNvbnN0IHN0YXJ0Um90YXRpb24gPSBwcmVhbGxvY2F0ZWRWYXJpYWJsZXNfMS5NYXRoVG1wLlF1YXRlcm5pb25bMF07XG4gICAgICAgIGNvbnN0IHN0YXJ0VHJhbnNsYXRpb24gPSBwcmVhbGxvY2F0ZWRWYXJpYWJsZXNfMS5NYXRoVG1wLlZlY3RvcjNbMV07XG4gICAgICAgIHN0YXJ0VmFsdWUuZGVjb21wb3NlKHN0YXJ0U2NhbGUsIHN0YXJ0Um90YXRpb24sIHN0YXJ0VHJhbnNsYXRpb24pO1xuICAgICAgICBjb25zdCBlbmRTY2FsZSA9IHByZWFsbG9jYXRlZFZhcmlhYmxlc18xLk1hdGhUbXAuVmVjdG9yM1syXTtcbiAgICAgICAgY29uc3QgZW5kUm90YXRpb24gPSBwcmVhbGxvY2F0ZWRWYXJpYWJsZXNfMS5NYXRoVG1wLlF1YXRlcm5pb25bMV07XG4gICAgICAgIGNvbnN0IGVuZFRyYW5zbGF0aW9uID0gcHJlYWxsb2NhdGVkVmFyaWFibGVzXzEuTWF0aFRtcC5WZWN0b3IzWzNdO1xuICAgICAgICBlbmRWYWx1ZS5kZWNvbXBvc2UoZW5kU2NhbGUsIGVuZFJvdGF0aW9uLCBlbmRUcmFuc2xhdGlvbik7XG4gICAgICAgIGNvbnN0IHJlc3VsdFNjYWxlID0gcHJlYWxsb2NhdGVkVmFyaWFibGVzXzEuTWF0aFRtcC5WZWN0b3IzWzRdO1xuICAgICAgICBWZWN0b3IzXzEuVmVjdG9yMy5MZXJwVG9SZWYoc3RhcnRTY2FsZSwgZW5kU2NhbGUsIGdyYWRpZW50LCByZXN1bHRTY2FsZSk7XG4gICAgICAgIGNvbnN0IHJlc3VsdFJvdGF0aW9uID0gcHJlYWxsb2NhdGVkVmFyaWFibGVzXzEuTWF0aFRtcC5RdWF0ZXJuaW9uWzJdO1xuICAgICAgICBRdWF0ZXJuaW9uXzEuUXVhdGVybmlvbi5TbGVycFRvUmVmKHN0YXJ0Um90YXRpb24sIGVuZFJvdGF0aW9uLCBncmFkaWVudCwgcmVzdWx0Um90YXRpb24pO1xuICAgICAgICBjb25zdCByZXN1bHRUcmFuc2xhdGlvbiA9IHByZWFsbG9jYXRlZFZhcmlhYmxlc18xLk1hdGhUbXAuVmVjdG9yM1s1XTtcbiAgICAgICAgVmVjdG9yM18xLlZlY3RvcjMuTGVycFRvUmVmKHN0YXJ0VHJhbnNsYXRpb24sIGVuZFRyYW5zbGF0aW9uLCBncmFkaWVudCwgcmVzdWx0VHJhbnNsYXRpb24pO1xuICAgICAgICBNYXRyaXguQ29tcG9zZVRvUmVmKHJlc3VsdFNjYWxlLCByZXN1bHRSb3RhdGlvbiwgcmVzdWx0VHJhbnNsYXRpb24sIHJlc3VsdCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgYSBuZXcgcm90YXRpb24gbWF0cml4IHVzZWQgdG8gcm90YXRlIGFuIGVudGl0eSBzbyBhcyBpdCBsb29rcyBhdCB0aGUgdGFyZ2V0IHZlY3RvcjMsIGZyb20gdGhlIGV5ZSB2ZWN0b3IzIHBvc2l0aW9uLCB0aGUgdXAgdmVjdG9yMyBiZWluZyBvcmllbnRlZCBsaWtlIFwidXBcIlxuICAgICAqIFRoaXMgZnVuY3Rpb24gd29ya3MgaW4gbGVmdCBoYW5kZWQgbW9kZVxuICAgICAqIEBwYXJhbSBleWUgLSBkZWZpbmVzIHRoZSBmaW5hbCBwb3NpdGlvbiBvZiB0aGUgZW50aXR5XG4gICAgICogQHBhcmFtIHRhcmdldCAtIGRlZmluZXMgd2hlcmUgdGhlIGVudGl0eSBzaG91bGQgbG9vayBhdFxuICAgICAqIEBwYXJhbSB1cCAtIGRlZmluZXMgdGhlIHVwIHZlY3RvciBmb3IgdGhlIGVudGl0eVxuICAgICAqIEByZXR1cm5zIHRoZSBuZXcgbWF0cml4XG4gICAgICovXG4gICAgc3RhdGljIExvb2tBdExIKGV5ZSwgdGFyZ2V0LCB1cCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgTWF0cml4KCk7XG4gICAgICAgIE1hdHJpeC5Mb29rQXRMSFRvUmVmKGV5ZSwgdGFyZ2V0LCB1cCwgcmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZ2l2ZW4gXCJyZXN1bHRcIiBNYXRyaXggdG8gYSByb3RhdGlvbiBtYXRyaXggdXNlZCB0byByb3RhdGUgYW4gZW50aXR5IHNvIHRoYXQgaXQgbG9va3MgYXQgdGhlIHRhcmdldCB2ZWN0b3IzLCBmcm9tIHRoZSBleWUgdmVjdG9yMyBwb3NpdGlvbiwgdGhlIHVwIHZlY3RvcjMgYmVpbmcgb3JpZW50ZWQgbGlrZSBcInVwXCIuXG4gICAgICogVGhpcyBmdW5jdGlvbiB3b3JrcyBpbiBsZWZ0IGhhbmRlZCBtb2RlXG4gICAgICogQHBhcmFtIGV5ZSAtIGRlZmluZXMgdGhlIGZpbmFsIHBvc2l0aW9uIG9mIHRoZSBlbnRpdHlcbiAgICAgKiBAcGFyYW0gdGFyZ2V0IC0gZGVmaW5lcyB3aGVyZSB0aGUgZW50aXR5IHNob3VsZCBsb29rIGF0XG4gICAgICogQHBhcmFtIHVwIC0gZGVmaW5lcyB0aGUgdXAgdmVjdG9yIGZvciB0aGUgZW50aXR5XG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIHRhcmdldCBtYXRyaXhcbiAgICAgKi9cbiAgICBzdGF0aWMgTG9va0F0TEhUb1JlZihleWUsIHRhcmdldCwgdXAsIHJlc3VsdCkge1xuICAgICAgICBjb25zdCB4QXhpcyA9IHByZWFsbG9jYXRlZFZhcmlhYmxlc18xLk1hdGhUbXAuVmVjdG9yM1swXTtcbiAgICAgICAgY29uc3QgeUF4aXMgPSBwcmVhbGxvY2F0ZWRWYXJpYWJsZXNfMS5NYXRoVG1wLlZlY3RvcjNbMV07XG4gICAgICAgIGNvbnN0IHpBeGlzID0gcHJlYWxsb2NhdGVkVmFyaWFibGVzXzEuTWF0aFRtcC5WZWN0b3IzWzJdO1xuICAgICAgICAvLyBaIGF4aXNcbiAgICAgICAgdGFyZ2V0LnN1YnRyYWN0VG9SZWYoZXllLCB6QXhpcyk7XG4gICAgICAgIHpBeGlzLm5vcm1hbGl6ZSgpO1xuICAgICAgICAvLyBYIGF4aXNcbiAgICAgICAgVmVjdG9yM18xLlZlY3RvcjMuQ3Jvc3NUb1JlZih1cCwgekF4aXMsIHhBeGlzKTtcbiAgICAgICAgY29uc3QgeFNxdWFyZUxlbmd0aCA9IHhBeGlzLmxlbmd0aFNxdWFyZWQoKTtcbiAgICAgICAgaWYgKHhTcXVhcmVMZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHhBeGlzLnggPSAxLjA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB4QXhpcy5ub3JtYWxpemVGcm9tTGVuZ3RoKE1hdGguc3FydCh4U3F1YXJlTGVuZ3RoKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gWSBheGlzXG4gICAgICAgIFZlY3RvcjNfMS5WZWN0b3IzLkNyb3NzVG9SZWYoekF4aXMsIHhBeGlzLCB5QXhpcyk7XG4gICAgICAgIHlBeGlzLm5vcm1hbGl6ZSgpO1xuICAgICAgICAvLyBFeWUgYW5nbGVzXG4gICAgICAgIGNvbnN0IGV4ID0gLVZlY3RvcjNfMS5WZWN0b3IzLkRvdCh4QXhpcywgZXllKTtcbiAgICAgICAgY29uc3QgZXkgPSAtVmVjdG9yM18xLlZlY3RvcjMuRG90KHlBeGlzLCBleWUpO1xuICAgICAgICBjb25zdCBleiA9IC1WZWN0b3IzXzEuVmVjdG9yMy5Eb3QoekF4aXMsIGV5ZSk7XG4gICAgICAgIE1hdHJpeC5Gcm9tVmFsdWVzVG9SZWYoeEF4aXMueCwgeUF4aXMueCwgekF4aXMueCwgMC4wLCB4QXhpcy55LCB5QXhpcy55LCB6QXhpcy55LCAwLjAsIHhBeGlzLnosIHlBeGlzLnosIHpBeGlzLnosIDAuMCwgZXgsIGV5LCBleiwgMS4wLCByZXN1bHQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgbmV3IHJvdGF0aW9uIG1hdHJpeCB1c2VkIHRvIHJvdGF0ZSBhbiBlbnRpdHkgc28gYXMgaXQgbG9va3MgYXQgdGhlIHRhcmdldCB2ZWN0b3IzLCBmcm9tIHRoZSBleWUgdmVjdG9yMyBwb3NpdGlvbiwgdGhlIHVwIHZlY3RvcjMgYmVpbmcgb3JpZW50ZWQgbGlrZSBcInVwXCJcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIHdvcmtzIGluIHJpZ2h0IGhhbmRlZCBtb2RlXG4gICAgICogQHBhcmFtIGV5ZSAtIGRlZmluZXMgdGhlIGZpbmFsIHBvc2l0aW9uIG9mIHRoZSBlbnRpdHlcbiAgICAgKiBAcGFyYW0gdGFyZ2V0IC0gZGVmaW5lcyB3aGVyZSB0aGUgZW50aXR5IHNob3VsZCBsb29rIGF0XG4gICAgICogQHBhcmFtIHVwIC0gZGVmaW5lcyB0aGUgdXAgdmVjdG9yIGZvciB0aGUgZW50aXR5XG4gICAgICogQHJldHVybnMgdGhlIG5ldyBtYXRyaXhcbiAgICAgKi9cbiAgICBzdGF0aWMgTG9va0F0UkgoZXllLCB0YXJnZXQsIHVwKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBNYXRyaXgoKTtcbiAgICAgICAgTWF0cml4Lkxvb2tBdFJIVG9SZWYoZXllLCB0YXJnZXQsIHVwLCByZXN1bHQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBnaXZlbiBcInJlc3VsdFwiIE1hdHJpeCB0byBhIHJvdGF0aW9uIG1hdHJpeCB1c2VkIHRvIHJvdGF0ZSBhbiBlbnRpdHkgc28gdGhhdCBpdCBsb29rcyBhdCB0aGUgdGFyZ2V0IHZlY3RvcjMsIGZyb20gdGhlIGV5ZSB2ZWN0b3IzIHBvc2l0aW9uLCB0aGUgdXAgdmVjdG9yMyBiZWluZyBvcmllbnRlZCBsaWtlIFwidXBcIi5cbiAgICAgKiBUaGlzIGZ1bmN0aW9uIHdvcmtzIGluIHJpZ2h0IGhhbmRlZCBtb2RlXG4gICAgICogQHBhcmFtIGV5ZSAtIGRlZmluZXMgdGhlIGZpbmFsIHBvc2l0aW9uIG9mIHRoZSBlbnRpdHlcbiAgICAgKiBAcGFyYW0gdGFyZ2V0IC0gZGVmaW5lcyB3aGVyZSB0aGUgZW50aXR5IHNob3VsZCBsb29rIGF0XG4gICAgICogQHBhcmFtIHVwIC0gZGVmaW5lcyB0aGUgdXAgdmVjdG9yIGZvciB0aGUgZW50aXR5XG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIHRhcmdldCBtYXRyaXhcbiAgICAgKi9cbiAgICBzdGF0aWMgTG9va0F0UkhUb1JlZihleWUsIHRhcmdldCwgdXAsIHJlc3VsdCkge1xuICAgICAgICBjb25zdCB4QXhpcyA9IHByZWFsbG9jYXRlZFZhcmlhYmxlc18xLk1hdGhUbXAuVmVjdG9yM1swXTtcbiAgICAgICAgY29uc3QgeUF4aXMgPSBwcmVhbGxvY2F0ZWRWYXJpYWJsZXNfMS5NYXRoVG1wLlZlY3RvcjNbMV07XG4gICAgICAgIGNvbnN0IHpBeGlzID0gcHJlYWxsb2NhdGVkVmFyaWFibGVzXzEuTWF0aFRtcC5WZWN0b3IzWzJdO1xuICAgICAgICAvLyBaIGF4aXNcbiAgICAgICAgZXllLnN1YnRyYWN0VG9SZWYodGFyZ2V0LCB6QXhpcyk7XG4gICAgICAgIHpBeGlzLm5vcm1hbGl6ZSgpO1xuICAgICAgICAvLyBYIGF4aXNcbiAgICAgICAgVmVjdG9yM18xLlZlY3RvcjMuQ3Jvc3NUb1JlZih1cCwgekF4aXMsIHhBeGlzKTtcbiAgICAgICAgY29uc3QgeFNxdWFyZUxlbmd0aCA9IHhBeGlzLmxlbmd0aFNxdWFyZWQoKTtcbiAgICAgICAgaWYgKHhTcXVhcmVMZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHhBeGlzLnggPSAxLjA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB4QXhpcy5ub3JtYWxpemVGcm9tTGVuZ3RoKE1hdGguc3FydCh4U3F1YXJlTGVuZ3RoKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gWSBheGlzXG4gICAgICAgIFZlY3RvcjNfMS5WZWN0b3IzLkNyb3NzVG9SZWYoekF4aXMsIHhBeGlzLCB5QXhpcyk7XG4gICAgICAgIHlBeGlzLm5vcm1hbGl6ZSgpO1xuICAgICAgICAvLyBFeWUgYW5nbGVzXG4gICAgICAgIGNvbnN0IGV4ID0gLVZlY3RvcjNfMS5WZWN0b3IzLkRvdCh4QXhpcywgZXllKTtcbiAgICAgICAgY29uc3QgZXkgPSAtVmVjdG9yM18xLlZlY3RvcjMuRG90KHlBeGlzLCBleWUpO1xuICAgICAgICBjb25zdCBleiA9IC1WZWN0b3IzXzEuVmVjdG9yMy5Eb3QoekF4aXMsIGV5ZSk7XG4gICAgICAgIE1hdHJpeC5Gcm9tVmFsdWVzVG9SZWYoeEF4aXMueCwgeUF4aXMueCwgekF4aXMueCwgMC4wLCB4QXhpcy55LCB5QXhpcy55LCB6QXhpcy55LCAwLjAsIHhBeGlzLnosIHlBeGlzLnosIHpBeGlzLnosIDAuMCwgZXgsIGV5LCBleiwgMS4wLCByZXN1bHQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBsZWZ0LWhhbmRlZCBvcnRob2dyYXBoaWMgcHJvamVjdGlvbiBtYXRyaXhcbiAgICAgKiBAcGFyYW0gd2lkdGggLSBkZWZpbmVzIHRoZSB2aWV3cG9ydCB3aWR0aFxuICAgICAqIEBwYXJhbSBoZWlnaHQgLSBkZWZpbmVzIHRoZSB2aWV3cG9ydCBoZWlnaHRcbiAgICAgKiBAcGFyYW0gem5lYXIgLSBkZWZpbmVzIHRoZSBuZWFyIGNsaXAgcGxhbmVcbiAgICAgKiBAcGFyYW0gemZhciAtIGRlZmluZXMgdGhlIGZhciBjbGlwIHBsYW5lXG4gICAgICogQHJldHVybnMgYSBuZXcgbWF0cml4IGFzIGEgbGVmdC1oYW5kZWQgb3J0aG9ncmFwaGljIHByb2plY3Rpb24gbWF0cml4XG4gICAgICovXG4gICAgc3RhdGljIE9ydGhvTEgod2lkdGgsIGhlaWdodCwgem5lYXIsIHpmYXIpIHtcbiAgICAgICAgY29uc3QgbWF0cml4ID0gbmV3IE1hdHJpeCgpO1xuICAgICAgICBNYXRyaXguT3J0aG9MSFRvUmVmKHdpZHRoLCBoZWlnaHQsIHpuZWFyLCB6ZmFyLCBtYXRyaXgpO1xuICAgICAgICByZXR1cm4gbWF0cml4O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdG9yZSBhIGxlZnQtaGFuZGVkIG9ydGhvZ3JhcGhpYyBwcm9qZWN0aW9uIHRvIGEgZ2l2ZW4gbWF0cml4XG4gICAgICogQHBhcmFtIHdpZHRoIC0gZGVmaW5lcyB0aGUgdmlld3BvcnQgd2lkdGhcbiAgICAgKiBAcGFyYW0gaGVpZ2h0IC0gZGVmaW5lcyB0aGUgdmlld3BvcnQgaGVpZ2h0XG4gICAgICogQHBhcmFtIHpuZWFyIC0gZGVmaW5lcyB0aGUgbmVhciBjbGlwIHBsYW5lXG4gICAgICogQHBhcmFtIHpmYXIgLSBkZWZpbmVzIHRoZSBmYXIgY2xpcCBwbGFuZVxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSB0YXJnZXQgbWF0cml4XG4gICAgICovXG4gICAgc3RhdGljIE9ydGhvTEhUb1JlZih3aWR0aCwgaGVpZ2h0LCB6bmVhciwgemZhciwgcmVzdWx0KSB7XG4gICAgICAgIGNvbnN0IG4gPSB6bmVhcjtcbiAgICAgICAgY29uc3QgZiA9IHpmYXI7XG4gICAgICAgIGNvbnN0IGEgPSAyLjAgLyB3aWR0aDtcbiAgICAgICAgY29uc3QgYiA9IDIuMCAvIGhlaWdodDtcbiAgICAgICAgY29uc3QgYyA9IDIuMCAvIChmIC0gbik7XG4gICAgICAgIGNvbnN0IGQgPSAtKGYgKyBuKSAvIChmIC0gbik7XG4gICAgICAgIE1hdHJpeC5Gcm9tVmFsdWVzVG9SZWYoYSwgMC4wLCAwLjAsIDAuMCwgMC4wLCBiLCAwLjAsIDAuMCwgMC4wLCAwLjAsIGMsIDAuMCwgMC4wLCAwLjAsIGQsIDEuMCwgcmVzdWx0KTtcbiAgICAgICAgcmVzdWx0Ll91cGRhdGVJZGVudGl0eVN0YXR1cyhhID09PSAxICYmIGIgPT09IDEgJiYgYyA9PT0gMSAmJiBkID09PSAwKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbGVmdC1oYW5kZWQgb3J0aG9ncmFwaGljIHByb2plY3Rpb24gbWF0cml4XG4gICAgICogQHBhcmFtIGxlZnQgLSBkZWZpbmVzIHRoZSB2aWV3cG9ydCBsZWZ0IGNvb3JkaW5hdGVcbiAgICAgKiBAcGFyYW0gcmlnaHQgLSBkZWZpbmVzIHRoZSB2aWV3cG9ydCByaWdodCBjb29yZGluYXRlXG4gICAgICogQHBhcmFtIGJvdHRvbSAtIGRlZmluZXMgdGhlIHZpZXdwb3J0IGJvdHRvbSBjb29yZGluYXRlXG4gICAgICogQHBhcmFtIHRvcCAtIGRlZmluZXMgdGhlIHZpZXdwb3J0IHRvcCBjb29yZGluYXRlXG4gICAgICogQHBhcmFtIHpuZWFyIC0gZGVmaW5lcyB0aGUgbmVhciBjbGlwIHBsYW5lXG4gICAgICogQHBhcmFtIHpmYXIgLSBkZWZpbmVzIHRoZSBmYXIgY2xpcCBwbGFuZVxuICAgICAqIEByZXR1cm5zIGEgbmV3IG1hdHJpeCBhcyBhIGxlZnQtaGFuZGVkIG9ydGhvZ3JhcGhpYyBwcm9qZWN0aW9uIG1hdHJpeFxuICAgICAqL1xuICAgIHN0YXRpYyBPcnRob09mZkNlbnRlckxIKGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgem5lYXIsIHpmYXIpIHtcbiAgICAgICAgY29uc3QgbWF0cml4ID0gbmV3IE1hdHJpeCgpO1xuICAgICAgICBNYXRyaXguT3J0aG9PZmZDZW50ZXJMSFRvUmVmKGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgem5lYXIsIHpmYXIsIG1hdHJpeCk7XG4gICAgICAgIHJldHVybiBtYXRyaXg7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0b3JlcyBhIGxlZnQtaGFuZGVkIG9ydGhvZ3JhcGhpYyBwcm9qZWN0aW9uIGludG8gYSBnaXZlbiBtYXRyaXhcbiAgICAgKiBAcGFyYW0gbGVmdCAtIGRlZmluZXMgdGhlIHZpZXdwb3J0IGxlZnQgY29vcmRpbmF0ZVxuICAgICAqIEBwYXJhbSByaWdodCAtIGRlZmluZXMgdGhlIHZpZXdwb3J0IHJpZ2h0IGNvb3JkaW5hdGVcbiAgICAgKiBAcGFyYW0gYm90dG9tIC0gZGVmaW5lcyB0aGUgdmlld3BvcnQgYm90dG9tIGNvb3JkaW5hdGVcbiAgICAgKiBAcGFyYW0gdG9wIC0gZGVmaW5lcyB0aGUgdmlld3BvcnQgdG9wIGNvb3JkaW5hdGVcbiAgICAgKiBAcGFyYW0gem5lYXIgLSBkZWZpbmVzIHRoZSBuZWFyIGNsaXAgcGxhbmVcbiAgICAgKiBAcGFyYW0gemZhciAtIGRlZmluZXMgdGhlIGZhciBjbGlwIHBsYW5lXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIHRhcmdldCBtYXRyaXhcbiAgICAgKi9cbiAgICBzdGF0aWMgT3J0aG9PZmZDZW50ZXJMSFRvUmVmKGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgem5lYXIsIHpmYXIsIHJlc3VsdCkge1xuICAgICAgICBjb25zdCBuID0gem5lYXI7XG4gICAgICAgIGNvbnN0IGYgPSB6ZmFyO1xuICAgICAgICBjb25zdCBhID0gMi4wIC8gKHJpZ2h0IC0gbGVmdCk7XG4gICAgICAgIGNvbnN0IGIgPSAyLjAgLyAodG9wIC0gYm90dG9tKTtcbiAgICAgICAgY29uc3QgYyA9IDIuMCAvIChmIC0gbik7XG4gICAgICAgIGNvbnN0IGQgPSAtKGYgKyBuKSAvIChmIC0gbik7XG4gICAgICAgIGNvbnN0IGkwID0gKGxlZnQgKyByaWdodCkgLyAobGVmdCAtIHJpZ2h0KTtcbiAgICAgICAgY29uc3QgaTEgPSAodG9wICsgYm90dG9tKSAvIChib3R0b20gLSB0b3ApO1xuICAgICAgICBNYXRyaXguRnJvbVZhbHVlc1RvUmVmKGEsIDAuMCwgMC4wLCAwLjAsIDAuMCwgYiwgMC4wLCAwLjAsIDAuMCwgMC4wLCBjLCAwLjAsIGkwLCBpMSwgZCwgMS4wLCByZXN1bHQpO1xuICAgICAgICByZXN1bHQuX21hcmtBc1VwZGF0ZWQoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHJpZ2h0LWhhbmRlZCBvcnRob2dyYXBoaWMgcHJvamVjdGlvbiBtYXRyaXhcbiAgICAgKiBAcGFyYW0gbGVmdCAtIGRlZmluZXMgdGhlIHZpZXdwb3J0IGxlZnQgY29vcmRpbmF0ZVxuICAgICAqIEBwYXJhbSByaWdodCAtIGRlZmluZXMgdGhlIHZpZXdwb3J0IHJpZ2h0IGNvb3JkaW5hdGVcbiAgICAgKiBAcGFyYW0gYm90dG9tIC0gZGVmaW5lcyB0aGUgdmlld3BvcnQgYm90dG9tIGNvb3JkaW5hdGVcbiAgICAgKiBAcGFyYW0gdG9wIC0gZGVmaW5lcyB0aGUgdmlld3BvcnQgdG9wIGNvb3JkaW5hdGVcbiAgICAgKiBAcGFyYW0gem5lYXIgLSBkZWZpbmVzIHRoZSBuZWFyIGNsaXAgcGxhbmVcbiAgICAgKiBAcGFyYW0gemZhciAtIGRlZmluZXMgdGhlIGZhciBjbGlwIHBsYW5lXG4gICAgICogQHJldHVybnMgYSBuZXcgbWF0cml4IGFzIGEgcmlnaHQtaGFuZGVkIG9ydGhvZ3JhcGhpYyBwcm9qZWN0aW9uIG1hdHJpeFxuICAgICAqL1xuICAgIHN0YXRpYyBPcnRob09mZkNlbnRlclJIKGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgem5lYXIsIHpmYXIpIHtcbiAgICAgICAgY29uc3QgbWF0cml4ID0gbmV3IE1hdHJpeCgpO1xuICAgICAgICBNYXRyaXguT3J0aG9PZmZDZW50ZXJSSFRvUmVmKGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgem5lYXIsIHpmYXIsIG1hdHJpeCk7XG4gICAgICAgIHJldHVybiBtYXRyaXg7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0b3JlcyBhIHJpZ2h0LWhhbmRlZCBvcnRob2dyYXBoaWMgcHJvamVjdGlvbiBpbnRvIGEgZ2l2ZW4gbWF0cml4XG4gICAgICogQHBhcmFtIGxlZnQgLSBkZWZpbmVzIHRoZSB2aWV3cG9ydCBsZWZ0IGNvb3JkaW5hdGVcbiAgICAgKiBAcGFyYW0gcmlnaHQgLSBkZWZpbmVzIHRoZSB2aWV3cG9ydCByaWdodCBjb29yZGluYXRlXG4gICAgICogQHBhcmFtIGJvdHRvbSAtIGRlZmluZXMgdGhlIHZpZXdwb3J0IGJvdHRvbSBjb29yZGluYXRlXG4gICAgICogQHBhcmFtIHRvcCAtIGRlZmluZXMgdGhlIHZpZXdwb3J0IHRvcCBjb29yZGluYXRlXG4gICAgICogQHBhcmFtIHpuZWFyIC0gZGVmaW5lcyB0aGUgbmVhciBjbGlwIHBsYW5lXG4gICAgICogQHBhcmFtIHpmYXIgLSBkZWZpbmVzIHRoZSBmYXIgY2xpcCBwbGFuZVxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSB0YXJnZXQgbWF0cml4XG4gICAgICovXG4gICAgc3RhdGljIE9ydGhvT2ZmQ2VudGVyUkhUb1JlZihsZWZ0LCByaWdodCwgYm90dG9tLCB0b3AsIHpuZWFyLCB6ZmFyLCByZXN1bHQpIHtcbiAgICAgICAgTWF0cml4Lk9ydGhvT2ZmQ2VudGVyTEhUb1JlZihsZWZ0LCByaWdodCwgYm90dG9tLCB0b3AsIHpuZWFyLCB6ZmFyLCByZXN1bHQpO1xuICAgICAgICByZXN1bHQuX21bMTBdICo9IC0xOyAvLyBObyBuZWVkIHRvIGNhbGwgX21hcmtBc1VwZGF0ZWQgYXMgcHJldmlvdXMgZnVuY3Rpb24gYWxyZWFkeSBjYWxsZWQgaXQgYW5kIGxldCBfaXNJZGVudGl0eURpcnR5IHRvIHRydWVcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGxlZnQtaGFuZGVkIHBlcnNwZWN0aXZlIHByb2plY3Rpb24gbWF0cml4XG4gICAgICogQHBhcmFtIHdpZHRoIC0gZGVmaW5lcyB0aGUgdmlld3BvcnQgd2lkdGhcbiAgICAgKiBAcGFyYW0gaGVpZ2h0IC0gZGVmaW5lcyB0aGUgdmlld3BvcnQgaGVpZ2h0XG4gICAgICogQHBhcmFtIHpuZWFyIC0gZGVmaW5lcyB0aGUgbmVhciBjbGlwIHBsYW5lXG4gICAgICogQHBhcmFtIHpmYXIgLSBkZWZpbmVzIHRoZSBmYXIgY2xpcCBwbGFuZVxuICAgICAqIEByZXR1cm5zIGEgbmV3IG1hdHJpeCBhcyBhIGxlZnQtaGFuZGVkIHBlcnNwZWN0aXZlIHByb2plY3Rpb24gbWF0cml4XG4gICAgICovXG4gICAgc3RhdGljIFBlcnNwZWN0aXZlTEgod2lkdGgsIGhlaWdodCwgem5lYXIsIHpmYXIpIHtcbiAgICAgICAgY29uc3QgbWF0cml4ID0gbmV3IE1hdHJpeCgpO1xuICAgICAgICBjb25zdCBuID0gem5lYXI7XG4gICAgICAgIGNvbnN0IGYgPSB6ZmFyO1xuICAgICAgICBjb25zdCBhID0gKDIuMCAqIG4pIC8gd2lkdGg7XG4gICAgICAgIGNvbnN0IGIgPSAoMi4wICogbikgLyBoZWlnaHQ7XG4gICAgICAgIGNvbnN0IGMgPSAoZiArIG4pIC8gKGYgLSBuKTtcbiAgICAgICAgY29uc3QgZCA9ICgtMi4wICogZiAqIG4pIC8gKGYgLSBuKTtcbiAgICAgICAgTWF0cml4LkZyb21WYWx1ZXNUb1JlZihhLCAwLjAsIDAuMCwgMC4wLCAwLjAsIGIsIDAuMCwgMC4wLCAwLjAsIDAuMCwgYywgMS4wLCAwLjAsIDAuMCwgZCwgMC4wLCBtYXRyaXgpO1xuICAgICAgICBtYXRyaXguX3VwZGF0ZUlkZW50aXR5U3RhdHVzKGZhbHNlKTtcbiAgICAgICAgcmV0dXJuIG1hdHJpeDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGxlZnQtaGFuZGVkIHBlcnNwZWN0aXZlIHByb2plY3Rpb24gbWF0cml4XG4gICAgICogQHBhcmFtIGZvdiAtIGRlZmluZXMgdGhlIGhvcml6b250YWwgZmllbGQgb2Ygdmlld1xuICAgICAqIEBwYXJhbSBhc3BlY3QgLSBkZWZpbmVzIHRoZSBhc3BlY3QgcmF0aW9cbiAgICAgKiBAcGFyYW0gem5lYXIgLSBkZWZpbmVzIHRoZSBuZWFyIGNsaXAgcGxhbmVcbiAgICAgKiBAcGFyYW0gemZhciAtIGRlZmluZXMgdGhlIGZhciBjbGlwIHBsYW5lXG4gICAgICogQHJldHVybnMgYSBuZXcgbWF0cml4IGFzIGEgbGVmdC1oYW5kZWQgcGVyc3BlY3RpdmUgcHJvamVjdGlvbiBtYXRyaXhcbiAgICAgKi9cbiAgICBzdGF0aWMgUGVyc3BlY3RpdmVGb3ZMSChmb3YsIGFzcGVjdCwgem5lYXIsIHpmYXIpIHtcbiAgICAgICAgY29uc3QgbWF0cml4ID0gbmV3IE1hdHJpeCgpO1xuICAgICAgICBNYXRyaXguUGVyc3BlY3RpdmVGb3ZMSFRvUmVmKGZvdiwgYXNwZWN0LCB6bmVhciwgemZhciwgbWF0cml4KTtcbiAgICAgICAgcmV0dXJuIG1hdHJpeDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RvcmVzIGEgbGVmdC1oYW5kZWQgcGVyc3BlY3RpdmUgcHJvamVjdGlvbiBpbnRvIGEgZ2l2ZW4gbWF0cml4XG4gICAgICogQHBhcmFtIGZvdiAtIGRlZmluZXMgdGhlIGhvcml6b250YWwgZmllbGQgb2Ygdmlld1xuICAgICAqIEBwYXJhbSBhc3BlY3QgLSBkZWZpbmVzIHRoZSBhc3BlY3QgcmF0aW9cbiAgICAgKiBAcGFyYW0gem5lYXIgLSBkZWZpbmVzIHRoZSBuZWFyIGNsaXAgcGxhbmVcbiAgICAgKiBAcGFyYW0gemZhciAtIGRlZmluZXMgdGhlIGZhciBjbGlwIHBsYW5lXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIHRhcmdldCBtYXRyaXhcbiAgICAgKiBAcGFyYW0gaXNWZXJ0aWNhbEZvdkZpeGVkIC0gZGVmaW5lcyBpdCB0aGUgZm92IGlzIHZlcnRpY2FsbHkgZml4ZWQgKGRlZmF1bHQpIG9yIGhvcml6b250YWxseVxuICAgICAqL1xuICAgIHN0YXRpYyBQZXJzcGVjdGl2ZUZvdkxIVG9SZWYoZm92LCBhc3BlY3QsIHpuZWFyLCB6ZmFyLCByZXN1bHQsIGlzVmVydGljYWxGb3ZGaXhlZCA9IHRydWUpIHtcbiAgICAgICAgY29uc3QgbiA9IHpuZWFyO1xuICAgICAgICBjb25zdCBmID0gemZhcjtcbiAgICAgICAgY29uc3QgdCA9IDEuMCAvIE1hdGgudGFuKGZvdiAqIDAuNSk7XG4gICAgICAgIGNvbnN0IGEgPSBpc1ZlcnRpY2FsRm92Rml4ZWQgPyB0IC8gYXNwZWN0IDogdDtcbiAgICAgICAgY29uc3QgYiA9IGlzVmVydGljYWxGb3ZGaXhlZCA/IHQgOiB0ICogYXNwZWN0O1xuICAgICAgICBjb25zdCBjID0gKGYgKyBuKSAvIChmIC0gbik7XG4gICAgICAgIGNvbnN0IGQgPSAoLTIuMCAqIGYgKiBuKSAvIChmIC0gbik7XG4gICAgICAgIE1hdHJpeC5Gcm9tVmFsdWVzVG9SZWYoYSwgMC4wLCAwLjAsIDAuMCwgMC4wLCBiLCAwLjAsIDAuMCwgMC4wLCAwLjAsIGMsIDEuMCwgMC4wLCAwLjAsIGQsIDAuMCwgcmVzdWx0KTtcbiAgICAgICAgcmVzdWx0Ll91cGRhdGVJZGVudGl0eVN0YXR1cyhmYWxzZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSByaWdodC1oYW5kZWQgcGVyc3BlY3RpdmUgcHJvamVjdGlvbiBtYXRyaXhcbiAgICAgKiBAcGFyYW0gZm92IC0gZGVmaW5lcyB0aGUgaG9yaXpvbnRhbCBmaWVsZCBvZiB2aWV3XG4gICAgICogQHBhcmFtIGFzcGVjdCAtIGRlZmluZXMgdGhlIGFzcGVjdCByYXRpb1xuICAgICAqIEBwYXJhbSB6bmVhciAtIGRlZmluZXMgdGhlIG5lYXIgY2xpcCBwbGFuZVxuICAgICAqIEBwYXJhbSB6ZmFyIC0gZGVmaW5lcyB0aGUgZmFyIGNsaXAgcGxhbmVcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBtYXRyaXggYXMgYSByaWdodC1oYW5kZWQgcGVyc3BlY3RpdmUgcHJvamVjdGlvbiBtYXRyaXhcbiAgICAgKi9cbiAgICBzdGF0aWMgUGVyc3BlY3RpdmVGb3ZSSChmb3YsIGFzcGVjdCwgem5lYXIsIHpmYXIpIHtcbiAgICAgICAgY29uc3QgbWF0cml4ID0gbmV3IE1hdHJpeCgpO1xuICAgICAgICBNYXRyaXguUGVyc3BlY3RpdmVGb3ZSSFRvUmVmKGZvdiwgYXNwZWN0LCB6bmVhciwgemZhciwgbWF0cml4KTtcbiAgICAgICAgcmV0dXJuIG1hdHJpeDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RvcmVzIGEgcmlnaHQtaGFuZGVkIHBlcnNwZWN0aXZlIHByb2plY3Rpb24gaW50byBhIGdpdmVuIG1hdHJpeFxuICAgICAqIEBwYXJhbSBmb3YgLSBkZWZpbmVzIHRoZSBob3Jpem9udGFsIGZpZWxkIG9mIHZpZXdcbiAgICAgKiBAcGFyYW0gYXNwZWN0IC0gZGVmaW5lcyB0aGUgYXNwZWN0IHJhdGlvXG4gICAgICogQHBhcmFtIHpuZWFyIC0gZGVmaW5lcyB0aGUgbmVhciBjbGlwIHBsYW5lXG4gICAgICogQHBhcmFtIHpmYXIgLSBkZWZpbmVzIHRoZSBmYXIgY2xpcCBwbGFuZVxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSB0YXJnZXQgbWF0cml4XG4gICAgICogQHBhcmFtIGlzVmVydGljYWxGb3ZGaXhlZCAtIGRlZmluZXMgaXQgdGhlIGZvdiBpcyB2ZXJ0aWNhbGx5IGZpeGVkIChkZWZhdWx0KSBvciBob3Jpem9udGFsbHlcbiAgICAgKi9cbiAgICBzdGF0aWMgUGVyc3BlY3RpdmVGb3ZSSFRvUmVmKGZvdiwgYXNwZWN0LCB6bmVhciwgemZhciwgcmVzdWx0LCBpc1ZlcnRpY2FsRm92Rml4ZWQgPSB0cnVlKSB7XG4gICAgICAgIC8qIGFsdGVybmF0aXZlbHkgdGhpcyBjb3VsZCBiZSBleHByZXNzZWQgYXM6XG4gICAgICAgIC8vICAgIG0gPSBQZXJzcGVjdGl2ZUZvdkxIVG9SZWZcbiAgICAgICAgLy8gICAgbVsxMF0gKj0gLTEuMDtcbiAgICAgICAgLy8gICAgbVsxMV0gKj0gLTEuMDtcbiAgICAgICAgKi9cbiAgICAgICAgY29uc3QgbiA9IHpuZWFyO1xuICAgICAgICBjb25zdCBmID0gemZhcjtcbiAgICAgICAgY29uc3QgdCA9IDEuMCAvIE1hdGgudGFuKGZvdiAqIDAuNSk7XG4gICAgICAgIGNvbnN0IGEgPSBpc1ZlcnRpY2FsRm92Rml4ZWQgPyB0IC8gYXNwZWN0IDogdDtcbiAgICAgICAgY29uc3QgYiA9IGlzVmVydGljYWxGb3ZGaXhlZCA/IHQgOiB0ICogYXNwZWN0O1xuICAgICAgICBjb25zdCBjID0gLShmICsgbikgLyAoZiAtIG4pO1xuICAgICAgICBjb25zdCBkID0gKC0yICogZiAqIG4pIC8gKGYgLSBuKTtcbiAgICAgICAgTWF0cml4LkZyb21WYWx1ZXNUb1JlZihhLCAwLjAsIDAuMCwgMC4wLCAwLjAsIGIsIDAuMCwgMC4wLCAwLjAsIDAuMCwgYywgLTEuMCwgMC4wLCAwLjAsIGQsIDAuMCwgcmVzdWx0KTtcbiAgICAgICAgcmVzdWx0Ll91cGRhdGVJZGVudGl0eVN0YXR1cyhmYWxzZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0b3JlcyBhIHBlcnNwZWN0aXZlIHByb2plY3Rpb24gZm9yIFdlYlZSIGluZm8gYSBnaXZlbiBtYXRyaXhcbiAgICAgKiBAcGFyYW0gZm92IC0gZGVmaW5lcyB0aGUgZmllbGQgb2Ygdmlld1xuICAgICAqIEBwYXJhbSB6bmVhciAtIGRlZmluZXMgdGhlIG5lYXIgY2xpcCBwbGFuZVxuICAgICAqIEBwYXJhbSB6ZmFyIC0gZGVmaW5lcyB0aGUgZmFyIGNsaXAgcGxhbmVcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgdGFyZ2V0IG1hdHJpeFxuICAgICAqIEBwYXJhbSByaWdodEhhbmRlZCAtIGRlZmluZXMgaWYgdGhlIG1hdHJpeCBtdXN0IGJlIGluIHJpZ2h0LWhhbmRlZCBtb2RlIChmYWxzZSBieSBkZWZhdWx0KVxuICAgICAqL1xuICAgIHN0YXRpYyBQZXJzcGVjdGl2ZUZvdldlYlZSVG9SZWYoZm92LCB6bmVhciwgemZhciwgcmVzdWx0LCByaWdodEhhbmRlZCA9IGZhbHNlKSB7XG4gICAgICAgIGNvbnN0IHJpZ2h0SGFuZGVkRmFjdG9yID0gcmlnaHRIYW5kZWQgPyAtMSA6IDE7XG4gICAgICAgIGNvbnN0IHVwVGFuID0gTWF0aC50YW4oKGZvdi51cERlZ3JlZXMgKiBNYXRoLlBJKSAvIDE4MC4wKTtcbiAgICAgICAgY29uc3QgZG93blRhbiA9IE1hdGgudGFuKChmb3YuZG93bkRlZ3JlZXMgKiBNYXRoLlBJKSAvIDE4MC4wKTtcbiAgICAgICAgY29uc3QgbGVmdFRhbiA9IE1hdGgudGFuKChmb3YubGVmdERlZ3JlZXMgKiBNYXRoLlBJKSAvIDE4MC4wKTtcbiAgICAgICAgY29uc3QgcmlnaHRUYW4gPSBNYXRoLnRhbigoZm92LnJpZ2h0RGVncmVlcyAqIE1hdGguUEkpIC8gMTgwLjApO1xuICAgICAgICBjb25zdCB4U2NhbGUgPSAyLjAgLyAobGVmdFRhbiArIHJpZ2h0VGFuKTtcbiAgICAgICAgY29uc3QgeVNjYWxlID0gMi4wIC8gKHVwVGFuICsgZG93blRhbik7XG4gICAgICAgIGNvbnN0IG0gPSByZXN1bHQuX207XG4gICAgICAgIG1bMF0gPSB4U2NhbGU7XG4gICAgICAgIG1bMV0gPSBtWzJdID0gbVszXSA9IG1bNF0gPSAwLjA7XG4gICAgICAgIG1bNV0gPSB5U2NhbGU7XG4gICAgICAgIG1bNl0gPSBtWzddID0gMC4wO1xuICAgICAgICBtWzhdID0gKGxlZnRUYW4gLSByaWdodFRhbikgKiB4U2NhbGUgKiAwLjU7XG4gICAgICAgIG1bOV0gPSAtKCh1cFRhbiAtIGRvd25UYW4pICogeVNjYWxlICogMC41KTtcbiAgICAgICAgbVsxMF0gPSAtemZhciAvICh6bmVhciAtIHpmYXIpO1xuICAgICAgICBtWzExXSA9IDEuMCAqIHJpZ2h0SGFuZGVkRmFjdG9yO1xuICAgICAgICBtWzEyXSA9IG1bMTNdID0gbVsxNV0gPSAwLjA7XG4gICAgICAgIG1bMTRdID0gLSgyLjAgKiB6ZmFyICogem5lYXIpIC8gKHpmYXIgLSB6bmVhcik7XG4gICAgICAgIHJlc3VsdC5fbWFya0FzVXBkYXRlZCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFeHRyYWN0cyBhIDJ4MiBtYXRyaXggZnJvbSBhIGdpdmVuIG1hdHJpeCBhbmQgc3RvcmUgdGhlIHJlc3VsdCBpbiBhIEZsb2F0QXJyYXlcbiAgICAgKiBAcGFyYW0gbWF0cml4IC0gZGVmaW5lcyB0aGUgbWF0cml4IHRvIHVzZVxuICAgICAqIEByZXR1cm5zIGEgbmV3IEZsb2F0QXJyYXkgYXJyYXkgd2l0aCA0IGVsZW1lbnRzIDogdGhlIDJ4MiBtYXRyaXggZXh0cmFjdGVkIGZyb20gdGhlIGdpdmVuIG1hdHJpeFxuICAgICAqL1xuICAgIHN0YXRpYyBHZXRBc01hdHJpeDJ4MihtYXRyaXgpIHtcbiAgICAgICAgcmV0dXJuIFttYXRyaXguX21bMF0sIG1hdHJpeC5fbVsxXSwgbWF0cml4Ll9tWzRdLCBtYXRyaXguX21bNV1dO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFeHRyYWN0cyBhIDN4MyBtYXRyaXggZnJvbSBhIGdpdmVuIG1hdHJpeCBhbmQgc3RvcmUgdGhlIHJlc3VsdCBpbiBhIEZsb2F0QXJyYXlcbiAgICAgKiBAcGFyYW0gbWF0cml4IC0gZGVmaW5lcyB0aGUgbWF0cml4IHRvIHVzZVxuICAgICAqIEByZXR1cm5zIGEgbmV3IEZsb2F0QXJyYXkgYXJyYXkgd2l0aCA5IGVsZW1lbnRzIDogdGhlIDN4MyBtYXRyaXggZXh0cmFjdGVkIGZyb20gdGhlIGdpdmVuIG1hdHJpeFxuICAgICAqL1xuICAgIHN0YXRpYyBHZXRBc01hdHJpeDN4MyhtYXRyaXgpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIG1hdHJpeC5fbVswXSxcbiAgICAgICAgICAgIG1hdHJpeC5fbVsxXSxcbiAgICAgICAgICAgIG1hdHJpeC5fbVsyXSxcbiAgICAgICAgICAgIG1hdHJpeC5fbVs0XSxcbiAgICAgICAgICAgIG1hdHJpeC5fbVs1XSxcbiAgICAgICAgICAgIG1hdHJpeC5fbVs2XSxcbiAgICAgICAgICAgIG1hdHJpeC5fbVs4XSxcbiAgICAgICAgICAgIG1hdHJpeC5fbVs5XSxcbiAgICAgICAgICAgIG1hdHJpeC5fbVsxMF1cbiAgICAgICAgXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29tcHV0ZSB0aGUgdHJhbnNwb3NlIG9mIGEgZ2l2ZW4gbWF0cml4XG4gICAgICogQHBhcmFtIG1hdHJpeCAtIGRlZmluZXMgdGhlIG1hdHJpeCB0byB0cmFuc3Bvc2VcbiAgICAgKiBAcmV0dXJucyB0aGUgbmV3IG1hdHJpeFxuICAgICAqL1xuICAgIHN0YXRpYyBUcmFuc3Bvc2UobWF0cml4KSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBNYXRyaXgoKTtcbiAgICAgICAgTWF0cml4LlRyYW5zcG9zZVRvUmVmKG1hdHJpeCwgcmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29tcHV0ZSB0aGUgdHJhbnNwb3NlIG9mIGEgbWF0cml4IGFuZCBzdG9yZSBpdCBpbiBhIHRhcmdldCBtYXRyaXhcbiAgICAgKiBAcGFyYW0gbWF0cml4IC0gZGVmaW5lcyB0aGUgbWF0cml4IHRvIHRyYW5zcG9zZVxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSB0YXJnZXQgbWF0cml4XG4gICAgICovXG4gICAgc3RhdGljIFRyYW5zcG9zZVRvUmVmKG1hdHJpeCwgcmVzdWx0KSB7XG4gICAgICAgIGNvbnN0IHJtID0gcmVzdWx0Ll9tO1xuICAgICAgICBjb25zdCBtbSA9IG1hdHJpeC5fbTtcbiAgICAgICAgcm1bMF0gPSBtbVswXTtcbiAgICAgICAgcm1bMV0gPSBtbVs0XTtcbiAgICAgICAgcm1bMl0gPSBtbVs4XTtcbiAgICAgICAgcm1bM10gPSBtbVsxMl07XG4gICAgICAgIHJtWzRdID0gbW1bMV07XG4gICAgICAgIHJtWzVdID0gbW1bNV07XG4gICAgICAgIHJtWzZdID0gbW1bOV07XG4gICAgICAgIHJtWzddID0gbW1bMTNdO1xuICAgICAgICBybVs4XSA9IG1tWzJdO1xuICAgICAgICBybVs5XSA9IG1tWzZdO1xuICAgICAgICBybVsxMF0gPSBtbVsxMF07XG4gICAgICAgIHJtWzExXSA9IG1tWzE0XTtcbiAgICAgICAgcm1bMTJdID0gbW1bM107XG4gICAgICAgIHJtWzEzXSA9IG1tWzddO1xuICAgICAgICBybVsxNF0gPSBtbVsxMV07XG4gICAgICAgIHJtWzE1XSA9IG1tWzE1XTtcbiAgICAgICAgLy8gaWRlbnRpdHktbmVzcyBkb2VzIG5vdCBjaGFuZ2Ugd2hlbiB0cmFuc3Bvc2luZ1xuICAgICAgICByZXN1bHQuX3VwZGF0ZUlkZW50aXR5U3RhdHVzKG1hdHJpeC5faXNJZGVudGl0eSwgbWF0cml4Ll9pc0lkZW50aXR5RGlydHkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBhIHJlZmxlY3Rpb24gbWF0cml4IGZyb20gYSBwbGFuZVxuICAgICAqIEBwYXJhbSBwbGFuZSAtIGRlZmluZXMgdGhlIHJlZmxlY3Rpb24gcGxhbmVcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBtYXRyaXhcbiAgICAgKi9cbiAgICBzdGF0aWMgUmVmbGVjdGlvbihwbGFuZSkge1xuICAgICAgICBjb25zdCBtYXRyaXggPSBuZXcgTWF0cml4KCk7XG4gICAgICAgIE1hdHJpeC5SZWZsZWN0aW9uVG9SZWYocGxhbmUsIG1hdHJpeCk7XG4gICAgICAgIHJldHVybiBtYXRyaXg7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIGEgcmVmbGVjdGlvbiBtYXRyaXggZnJvbSBhIHBsYW5lXG4gICAgICogQHBhcmFtIHBsYW5lIC0gZGVmaW5lcyB0aGUgcmVmbGVjdGlvbiBwbGFuZVxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSB0YXJnZXQgbWF0cml4XG4gICAgICovXG4gICAgc3RhdGljIFJlZmxlY3Rpb25Ub1JlZihwbGFuZSwgcmVzdWx0KSB7XG4gICAgICAgIHBsYW5lLm5vcm1hbGl6ZSgpO1xuICAgICAgICBjb25zdCB4ID0gcGxhbmUubm9ybWFsLng7XG4gICAgICAgIGNvbnN0IHkgPSBwbGFuZS5ub3JtYWwueTtcbiAgICAgICAgY29uc3QgeiA9IHBsYW5lLm5vcm1hbC56O1xuICAgICAgICBjb25zdCB0ZW1wID0gLTIgKiB4O1xuICAgICAgICBjb25zdCB0ZW1wMiA9IC0yICogeTtcbiAgICAgICAgY29uc3QgdGVtcDMgPSAtMiAqIHo7XG4gICAgICAgIE1hdHJpeC5Gcm9tVmFsdWVzVG9SZWYodGVtcCAqIHggKyAxLCB0ZW1wMiAqIHgsIHRlbXAzICogeCwgMC4wLCB0ZW1wICogeSwgdGVtcDIgKiB5ICsgMSwgdGVtcDMgKiB5LCAwLjAsIHRlbXAgKiB6LCB0ZW1wMiAqIHosIHRlbXAzICogeiArIDEsIDAuMCwgdGVtcCAqIHBsYW5lLmQsIHRlbXAyICogcGxhbmUuZCwgdGVtcDMgKiBwbGFuZS5kLCAxLjAsIHJlc3VsdCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGdpdmVuIG1hdHJpeCBhcyBhIHJvdGF0aW9uIG1hdHJpeCBjb21wb3NlZCBmcm9tIHRoZSAzIGxlZnQgaGFuZGVkIGF4ZXNcbiAgICAgKiBAcGFyYW0geGF4aXMgLSBkZWZpbmVzIHRoZSB2YWx1ZSBvZiB0aGUgMXN0IGF4aXNcbiAgICAgKiBAcGFyYW0geWF4aXMgLSBkZWZpbmVzIHRoZSB2YWx1ZSBvZiB0aGUgMm5kIGF4aXNcbiAgICAgKiBAcGFyYW0gemF4aXMgLSBkZWZpbmVzIHRoZSB2YWx1ZSBvZiB0aGUgM3JkIGF4aXNcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgdGFyZ2V0IG1hdHJpeFxuICAgICAqL1xuICAgIHN0YXRpYyBGcm9tWFlaQXhlc1RvUmVmKHhheGlzLCB5YXhpcywgemF4aXMsIHJlc3VsdCkge1xuICAgICAgICBNYXRyaXguRnJvbVZhbHVlc1RvUmVmKHhheGlzLngsIHhheGlzLnksIHhheGlzLnosIDAuMCwgeWF4aXMueCwgeWF4aXMueSwgeWF4aXMueiwgMC4wLCB6YXhpcy54LCB6YXhpcy55LCB6YXhpcy56LCAwLjAsIDAuMCwgMC4wLCAwLjAsIDEuMCwgcmVzdWx0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHJvdGF0aW9uIG1hdHJpeCBmcm9tIGEgcXVhdGVybmlvbiBhbmQgc3RvcmVzIGl0IGluIGEgdGFyZ2V0IG1hdHJpeFxuICAgICAqIEBwYXJhbSBxdWF0IC0gZGVmaW5lcyB0aGUgcXVhdGVybmlvbiB0byB1c2VcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgdGFyZ2V0IG1hdHJpeFxuICAgICAqL1xuICAgIHN0YXRpYyBGcm9tUXVhdGVybmlvblRvUmVmKHF1YXQsIHJlc3VsdCkge1xuICAgICAgICBjb25zdCB4eCA9IHF1YXQueCAqIHF1YXQueDtcbiAgICAgICAgY29uc3QgeXkgPSBxdWF0LnkgKiBxdWF0Lnk7XG4gICAgICAgIGNvbnN0IHp6ID0gcXVhdC56ICogcXVhdC56O1xuICAgICAgICBjb25zdCB4eSA9IHF1YXQueCAqIHF1YXQueTtcbiAgICAgICAgY29uc3QgencgPSBxdWF0LnogKiBxdWF0Lnc7XG4gICAgICAgIGNvbnN0IHp4ID0gcXVhdC56ICogcXVhdC54O1xuICAgICAgICBjb25zdCB5dyA9IHF1YXQueSAqIHF1YXQudztcbiAgICAgICAgY29uc3QgeXogPSBxdWF0LnkgKiBxdWF0Lno7XG4gICAgICAgIGNvbnN0IHh3ID0gcXVhdC54ICogcXVhdC53O1xuICAgICAgICByZXN1bHQuX21bMF0gPSAxLjAgLSAyLjAgKiAoeXkgKyB6eik7XG4gICAgICAgIHJlc3VsdC5fbVsxXSA9IDIuMCAqICh4eSArIHp3KTtcbiAgICAgICAgcmVzdWx0Ll9tWzJdID0gMi4wICogKHp4IC0geXcpO1xuICAgICAgICByZXN1bHQuX21bM10gPSAwLjA7XG4gICAgICAgIHJlc3VsdC5fbVs0XSA9IDIuMCAqICh4eSAtIHp3KTtcbiAgICAgICAgcmVzdWx0Ll9tWzVdID0gMS4wIC0gMi4wICogKHp6ICsgeHgpO1xuICAgICAgICByZXN1bHQuX21bNl0gPSAyLjAgKiAoeXogKyB4dyk7XG4gICAgICAgIHJlc3VsdC5fbVs3XSA9IDAuMDtcbiAgICAgICAgcmVzdWx0Ll9tWzhdID0gMi4wICogKHp4ICsgeXcpO1xuICAgICAgICByZXN1bHQuX21bOV0gPSAyLjAgKiAoeXogLSB4dyk7XG4gICAgICAgIHJlc3VsdC5fbVsxMF0gPSAxLjAgLSAyLjAgKiAoeXkgKyB4eCk7XG4gICAgICAgIHJlc3VsdC5fbVsxMV0gPSAwLjA7XG4gICAgICAgIHJlc3VsdC5fbVsxMl0gPSAwLjA7XG4gICAgICAgIHJlc3VsdC5fbVsxM10gPSAwLjA7XG4gICAgICAgIHJlc3VsdC5fbVsxNF0gPSAwLjA7XG4gICAgICAgIHJlc3VsdC5fbVsxNV0gPSAxLjA7XG4gICAgICAgIHJlc3VsdC5fbWFya0FzVXBkYXRlZCgpO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgX21hcmtBc1VwZGF0ZWQoKSB7XG4gICAgICAgIHRoaXMudXBkYXRlRmxhZyA9IE1hdHJpeC5fdXBkYXRlRmxhZ1NlZWQrKztcbiAgICAgICAgdGhpcy5faXNJZGVudGl0eSA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9pc0lkZW50aXR5M3gyID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2lzSWRlbnRpdHlEaXJ0eSA9IHRydWU7XG4gICAgICAgIHRoaXMuX2lzSWRlbnRpdHkzeDJEaXJ0eSA9IHRydWU7XG4gICAgfVxuICAgIC8vIFByb3BlcnRpZXNcbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiB0aGUgY3VycmVudCBtYXRyaXggaXMgaWRlbnRpdHlcbiAgICAgKiBAcmV0dXJucyB0cnVlIGlzIHRoZSBtYXRyaXggaXMgdGhlIGlkZW50aXR5IG1hdHJpeFxuICAgICAqL1xuICAgIGlzSWRlbnRpdHkoKSB7XG4gICAgICAgIGlmICh0aGlzLl9pc0lkZW50aXR5RGlydHkpIHtcbiAgICAgICAgICAgIHRoaXMuX2lzSWRlbnRpdHlEaXJ0eSA9IGZhbHNlO1xuICAgICAgICAgICAgY29uc3QgbSA9IHRoaXMuX207XG4gICAgICAgICAgICB0aGlzLl9pc0lkZW50aXR5ID1cbiAgICAgICAgICAgICAgICBtWzBdID09PSAxLjAgJiZcbiAgICAgICAgICAgICAgICAgICAgbVsxXSA9PT0gMC4wICYmXG4gICAgICAgICAgICAgICAgICAgIG1bMl0gPT09IDAuMCAmJlxuICAgICAgICAgICAgICAgICAgICBtWzNdID09PSAwLjAgJiZcbiAgICAgICAgICAgICAgICAgICAgbVs0XSA9PT0gMC4wICYmXG4gICAgICAgICAgICAgICAgICAgIG1bNV0gPT09IDEuMCAmJlxuICAgICAgICAgICAgICAgICAgICBtWzZdID09PSAwLjAgJiZcbiAgICAgICAgICAgICAgICAgICAgbVs3XSA9PT0gMC4wICYmXG4gICAgICAgICAgICAgICAgICAgIG1bOF0gPT09IDAuMCAmJlxuICAgICAgICAgICAgICAgICAgICBtWzldID09PSAwLjAgJiZcbiAgICAgICAgICAgICAgICAgICAgbVsxMF0gPT09IDEuMCAmJlxuICAgICAgICAgICAgICAgICAgICBtWzExXSA9PT0gMC4wICYmXG4gICAgICAgICAgICAgICAgICAgIG1bMTJdID09PSAwLjAgJiZcbiAgICAgICAgICAgICAgICAgICAgbVsxM10gPT09IDAuMCAmJlxuICAgICAgICAgICAgICAgICAgICBtWzE0XSA9PT0gMC4wICYmXG4gICAgICAgICAgICAgICAgICAgIG1bMTVdID09PSAxLjA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzSWRlbnRpdHk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIHRoZSBjdXJyZW50IG1hdHJpeCBpcyBpZGVudGl0eSBhcyBhIHRleHR1cmUgbWF0cml4ICgzeDIgc3RvcmUgaW4gNHg0KVxuICAgICAqIEByZXR1cm5zIHRydWUgaXMgdGhlIG1hdHJpeCBpcyB0aGUgaWRlbnRpdHkgbWF0cml4XG4gICAgICovXG4gICAgaXNJZGVudGl0eUFzM3gyKCkge1xuICAgICAgICBpZiAodGhpcy5faXNJZGVudGl0eTN4MkRpcnR5KSB7XG4gICAgICAgICAgICB0aGlzLl9pc0lkZW50aXR5M3gyRGlydHkgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9tWzBdICE9PSAxLjAgfHwgdGhpcy5fbVs1XSAhPT0gMS4wIHx8IHRoaXMuX21bMTVdICE9PSAxLjApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9pc0lkZW50aXR5M3gyID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9tWzFdICE9PSAwLjAgfHxcbiAgICAgICAgICAgICAgICB0aGlzLl9tWzJdICE9PSAwLjAgfHxcbiAgICAgICAgICAgICAgICB0aGlzLl9tWzNdICE9PSAwLjAgfHxcbiAgICAgICAgICAgICAgICB0aGlzLl9tWzRdICE9PSAwLjAgfHxcbiAgICAgICAgICAgICAgICB0aGlzLl9tWzZdICE9PSAwLjAgfHxcbiAgICAgICAgICAgICAgICB0aGlzLl9tWzddICE9PSAwLjAgfHxcbiAgICAgICAgICAgICAgICB0aGlzLl9tWzhdICE9PSAwLjAgfHxcbiAgICAgICAgICAgICAgICB0aGlzLl9tWzldICE9PSAwLjAgfHxcbiAgICAgICAgICAgICAgICB0aGlzLl9tWzEwXSAhPT0gMC4wIHx8XG4gICAgICAgICAgICAgICAgdGhpcy5fbVsxMV0gIT09IDAuMCB8fFxuICAgICAgICAgICAgICAgIHRoaXMuX21bMTJdICE9PSAwLjAgfHxcbiAgICAgICAgICAgICAgICB0aGlzLl9tWzEzXSAhPT0gMC4wIHx8XG4gICAgICAgICAgICAgICAgdGhpcy5fbVsxNF0gIT09IDAuMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2lzSWRlbnRpdHkzeDIgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX2lzSWRlbnRpdHkzeDIgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9pc0lkZW50aXR5M3gyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBkZXRlcm1pbmFudCBvZiB0aGUgbWF0cml4XG4gICAgICogQHJldHVybnMgdGhlIG1hdHJpeCBkZXRlcm1pbmFudFxuICAgICAqL1xuICAgIGRldGVybWluYW50KCkge1xuICAgICAgICBpZiAodGhpcy5faXNJZGVudGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbSA9IHRoaXMuX207XG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpvbmUtdmFyaWFibGUtcGVyLWRlY2xhcmF0aW9uXG4gICAgICAgIGNvbnN0IG0wMCA9IG1bMF0sIG0wMSA9IG1bMV0sIG0wMiA9IG1bMl0sIG0wMyA9IG1bM107XG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpvbmUtdmFyaWFibGUtcGVyLWRlY2xhcmF0aW9uXG4gICAgICAgIGNvbnN0IG0xMCA9IG1bNF0sIG0xMSA9IG1bNV0sIG0xMiA9IG1bNl0sIG0xMyA9IG1bN107XG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpvbmUtdmFyaWFibGUtcGVyLWRlY2xhcmF0aW9uXG4gICAgICAgIGNvbnN0IG0yMCA9IG1bOF0sIG0yMSA9IG1bOV0sIG0yMiA9IG1bMTBdLCBtMjMgPSBtWzExXTtcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm9uZS12YXJpYWJsZS1wZXItZGVjbGFyYXRpb25cbiAgICAgICAgY29uc3QgbTMwID0gbVsxMl0sIG0zMSA9IG1bMTNdLCBtMzIgPSBtWzE0XSwgbTMzID0gbVsxNV07XG4gICAgICAgIC8qXG4gICAgICAgIC8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xhcGxhY2VfZXhwYW5zaW9uXG4gICAgICAgIC8vIHRvIGNvbXB1dGUgdGhlIGRldGVycm1pbmFudCBvZiBhIDR4NCBNYXRyaXggd2UgY29tcHV0ZSB0aGUgY29mYWN0b3JzIG9mIGFueSByb3cgb3IgY29sdW1uLFxuICAgICAgICAvLyB0aGVuIHdlIG11bHRpcGx5IGVhY2ggQ29mYWN0b3IgYnkgaXRzIGNvcnJlc3BvbmRpbmcgbWF0cml4IHZhbHVlIGFuZCBzdW0gdGhlbSBhbGwgdG8gZ2V0IHRoZSBkZXRlcm1pbmFudFxuICAgICAgICAvLyBDb2ZhY3RvcihpLCBqKSA9IHNpZ24oaSxqKSAqIGRldChNaW5vcihpLCBqKSlcbiAgICAgICAgLy8gd2hlcmVcbiAgICAgICAgLy8gIC0gc2lnbihpLGopID0gKGkraikgJSAyID09PSAwID8gMSA6IC0xXG4gICAgICAgIC8vICAtIE1pbm9yKGksIGopIGlzIHRoZSAzeDMgbWF0cml4IHdlIGdldCBieSByZW1vdmluZyByb3cgaSBhbmQgY29sdW1uIGogZnJvbSBjdXJyZW50IE1hdHJpeFxuICAgICAgICAvL1xuICAgICAgICAvLyBIZXJlIHdlIGRvIHRoYXQgZm9yIHRoZSAxc3Qgcm93LlxuICAgICAgICAqL1xuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZTp2YXJpYWJsZS1uYW1lXG4gICAgICAgIGNvbnN0IGRldF8yMl8zMyA9IG0yMiAqIG0zMyAtIG0zMiAqIG0yMztcbiAgICAgICAgY29uc3QgZGV0XzIxXzMzID0gbTIxICogbTMzIC0gbTMxICogbTIzO1xuICAgICAgICBjb25zdCBkZXRfMjFfMzIgPSBtMjEgKiBtMzIgLSBtMzEgKiBtMjI7XG4gICAgICAgIGNvbnN0IGRldF8yMF8zMyA9IG0yMCAqIG0zMyAtIG0zMCAqIG0yMztcbiAgICAgICAgY29uc3QgZGV0XzIwXzMyID0gbTIwICogbTMyIC0gbTIyICogbTMwO1xuICAgICAgICBjb25zdCBkZXRfMjBfMzEgPSBtMjAgKiBtMzEgLSBtMzAgKiBtMjE7XG4gICAgICAgIGNvbnN0IGNvZmFjdF8wMCA9ICsobTExICogZGV0XzIyXzMzIC0gbTEyICogZGV0XzIxXzMzICsgbTEzICogZGV0XzIxXzMyKTtcbiAgICAgICAgY29uc3QgY29mYWN0XzAxID0gLShtMTAgKiBkZXRfMjJfMzMgLSBtMTIgKiBkZXRfMjBfMzMgKyBtMTMgKiBkZXRfMjBfMzIpO1xuICAgICAgICBjb25zdCBjb2ZhY3RfMDIgPSArKG0xMCAqIGRldF8yMV8zMyAtIG0xMSAqIGRldF8yMF8zMyArIG0xMyAqIGRldF8yMF8zMSk7XG4gICAgICAgIGNvbnN0IGNvZmFjdF8wMyA9IC0obTEwICogZGV0XzIxXzMyIC0gbTExICogZGV0XzIwXzMyICsgbTEyICogZGV0XzIwXzMxKTtcbiAgICAgICAgLy8gdHNsaW50OmVuYWJsZTp2YXJpYWJsZS1uYW1lXG4gICAgICAgIHJldHVybiBtMDAgKiBjb2ZhY3RfMDAgKyBtMDEgKiBjb2ZhY3RfMDEgKyBtMDIgKiBjb2ZhY3RfMDIgKyBtMDMgKiBjb2ZhY3RfMDM7XG4gICAgfVxuICAgIC8vIE1ldGhvZHNcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBtYXRyaXggYXMgYSBGbG9hdEFycmF5XG4gICAgICogQHJldHVybnMgdGhlIG1hdHJpeCB1bmRlcmx5aW5nIGFycmF5XG4gICAgICovXG4gICAgdG9BcnJheSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX207XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG1hdHJpeCBhcyBhIEZsb2F0QXJyYXlcbiAgICAgKiBAcmV0dXJucyB0aGUgbWF0cml4IHVuZGVybHlpbmcgYXJyYXkuXG4gICAgICovXG4gICAgYXNBcnJheSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX207XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEludmVydHMgdGhlIGN1cnJlbnQgbWF0cml4IGluIHBsYWNlXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgaW52ZXJ0ZWQgbWF0cml4XG4gICAgICovXG4gICAgaW52ZXJ0KCkge1xuICAgICAgICB0aGlzLmludmVydFRvUmVmKHRoaXMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyBhbGwgdGhlIG1hdHJpeCBlbGVtZW50cyB0byB6ZXJvXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgbWF0cml4XG4gICAgICovXG4gICAgcmVzZXQoKSB7XG4gICAgICAgIE1hdHJpeC5Gcm9tVmFsdWVzVG9SZWYoMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCB0aGlzKTtcbiAgICAgICAgdGhpcy5fdXBkYXRlSWRlbnRpdHlTdGF0dXMoZmFsc2UpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkcyB0aGUgY3VycmVudCBtYXRyaXggd2l0aCBhIHNlY29uZCBvbmVcbiAgICAgKiBAcGFyYW0gb3RoZXIgLSBkZWZpbmVzIHRoZSBtYXRyaXggdG8gYWRkXG4gICAgICogQHJldHVybnMgYSBuZXcgbWF0cml4IGFzIHRoZSBhZGRpdGlvbiBvZiB0aGUgY3VycmVudCBtYXRyaXggYW5kIHRoZSBnaXZlbiBvbmVcbiAgICAgKi9cbiAgICBhZGQob3RoZXIpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IE1hdHJpeCgpO1xuICAgICAgICB0aGlzLmFkZFRvUmVmKG90aGVyLCByZXN1bHQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBnaXZlbiBtYXRyaXggXCJyZXN1bHRcIiB0byB0aGUgYWRkaXRpb24gb2YgdGhlIGN1cnJlbnQgbWF0cml4IGFuZCB0aGUgZ2l2ZW4gb25lXG4gICAgICogQHBhcmFtIG90aGVyIC0gZGVmaW5lcyB0aGUgbWF0cml4IHRvIGFkZFxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSB0YXJnZXQgbWF0cml4XG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgbWF0cml4XG4gICAgICovXG4gICAgYWRkVG9SZWYob3RoZXIsIHJlc3VsdCkge1xuICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgMTY7IGluZGV4KyspIHtcbiAgICAgICAgICAgIHJlc3VsdC5fbVtpbmRleF0gPSB0aGlzLl9tW2luZGV4XSArIG90aGVyLl9tW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQuX21hcmtBc1VwZGF0ZWQoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZHMgaW4gcGxhY2UgdGhlIGdpdmVuIG1hdHJpeCB0byB0aGUgY3VycmVudCBtYXRyaXhcbiAgICAgKiBAcGFyYW0gb3RoZXIgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IHVwZGF0ZWQgbWF0cml4XG4gICAgICovXG4gICAgYWRkVG9TZWxmKG90aGVyKSB7XG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCAxNjsgaW5kZXgrKykge1xuICAgICAgICAgICAgdGhpcy5fbVtpbmRleF0gKz0gb3RoZXIuX21baW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX21hcmtBc1VwZGF0ZWQoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGdpdmVuIG1hdHJpeCB0byB0aGUgY3VycmVudCBpbnZlcnRlZCBNYXRyaXhcbiAgICAgKiBAcGFyYW0gb3RoZXIgLSBkZWZpbmVzIHRoZSB0YXJnZXQgbWF0cml4XG4gICAgICogQHJldHVybnMgdGhlIHVubW9kaWZpZWQgY3VycmVudCBtYXRyaXhcbiAgICAgKi9cbiAgICBpbnZlcnRUb1JlZihvdGhlcikge1xuICAgICAgICBpZiAodGhpcy5faXNJZGVudGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgTWF0cml4LklkZW50aXR5VG9SZWYob3RoZXIpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgLy8gdGhlIGludmVyc2Ugb2YgYSBNYXRyaXggaXMgdGhlIHRyYW5zcG9zZSBvZiBjb2ZhY3RvciBtYXRyaXggZGl2aWRlZCBieSB0aGUgZGV0ZXJtaW5hbnRcbiAgICAgICAgY29uc3QgbSA9IHRoaXMuX207XG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlOm9uZS12YXJpYWJsZS1wZXItZGVjbGFyYXRpb25cbiAgICAgICAgY29uc3QgbTAwID0gbVswXSwgbTAxID0gbVsxXSwgbTAyID0gbVsyXSwgbTAzID0gbVszXTtcbiAgICAgICAgY29uc3QgbTEwID0gbVs0XSwgbTExID0gbVs1XSwgbTEyID0gbVs2XSwgbTEzID0gbVs3XTtcbiAgICAgICAgY29uc3QgbTIwID0gbVs4XSwgbTIxID0gbVs5XSwgbTIyID0gbVsxMF0sIG0yMyA9IG1bMTFdO1xuICAgICAgICBjb25zdCBtMzAgPSBtWzEyXSwgbTMxID0gbVsxM10sIG0zMiA9IG1bMTRdLCBtMzMgPSBtWzE1XTtcbiAgICAgICAgLy8gdHNsaW50OmVuYWJsZTpvbmUtdmFyaWFibGUtcGVyLWRlY2xhcmF0aW9uXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlOnZhcmlhYmxlLW5hbWVcbiAgICAgICAgY29uc3QgZGV0XzIyXzMzID0gbTIyICogbTMzIC0gbTMyICogbTIzO1xuICAgICAgICBjb25zdCBkZXRfMjFfMzMgPSBtMjEgKiBtMzMgLSBtMzEgKiBtMjM7XG4gICAgICAgIGNvbnN0IGRldF8yMV8zMiA9IG0yMSAqIG0zMiAtIG0zMSAqIG0yMjtcbiAgICAgICAgY29uc3QgZGV0XzIwXzMzID0gbTIwICogbTMzIC0gbTMwICogbTIzO1xuICAgICAgICBjb25zdCBkZXRfMjBfMzIgPSBtMjAgKiBtMzIgLSBtMjIgKiBtMzA7XG4gICAgICAgIGNvbnN0IGRldF8yMF8zMSA9IG0yMCAqIG0zMSAtIG0zMCAqIG0yMTtcbiAgICAgICAgY29uc3QgY29mYWN0XzAwID0gKyhtMTEgKiBkZXRfMjJfMzMgLSBtMTIgKiBkZXRfMjFfMzMgKyBtMTMgKiBkZXRfMjFfMzIpO1xuICAgICAgICBjb25zdCBjb2ZhY3RfMDEgPSAtKG0xMCAqIGRldF8yMl8zMyAtIG0xMiAqIGRldF8yMF8zMyArIG0xMyAqIGRldF8yMF8zMik7XG4gICAgICAgIGNvbnN0IGNvZmFjdF8wMiA9ICsobTEwICogZGV0XzIxXzMzIC0gbTExICogZGV0XzIwXzMzICsgbTEzICogZGV0XzIwXzMxKTtcbiAgICAgICAgY29uc3QgY29mYWN0XzAzID0gLShtMTAgKiBkZXRfMjFfMzIgLSBtMTEgKiBkZXRfMjBfMzIgKyBtMTIgKiBkZXRfMjBfMzEpO1xuICAgICAgICBjb25zdCBkZXQgPSBtMDAgKiBjb2ZhY3RfMDAgKyBtMDEgKiBjb2ZhY3RfMDEgKyBtMDIgKiBjb2ZhY3RfMDIgKyBtMDMgKiBjb2ZhY3RfMDM7XG4gICAgICAgIGlmIChkZXQgPT09IDApIHtcbiAgICAgICAgICAgIC8vIG5vdCBpbnZlcnRpYmxlXG4gICAgICAgICAgICBvdGhlci5jb3B5RnJvbSh0aGlzKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRldEludiA9IDEgLyBkZXQ7XG4gICAgICAgIGNvbnN0IGRldF8xMl8zMyA9IG0xMiAqIG0zMyAtIG0zMiAqIG0xMztcbiAgICAgICAgY29uc3QgZGV0XzExXzMzID0gbTExICogbTMzIC0gbTMxICogbTEzO1xuICAgICAgICBjb25zdCBkZXRfMTFfMzIgPSBtMTEgKiBtMzIgLSBtMzEgKiBtMTI7XG4gICAgICAgIGNvbnN0IGRldF8xMF8zMyA9IG0xMCAqIG0zMyAtIG0zMCAqIG0xMztcbiAgICAgICAgY29uc3QgZGV0XzEwXzMyID0gbTEwICogbTMyIC0gbTMwICogbTEyO1xuICAgICAgICBjb25zdCBkZXRfMTBfMzEgPSBtMTAgKiBtMzEgLSBtMzAgKiBtMTE7XG4gICAgICAgIGNvbnN0IGRldF8xMl8yMyA9IG0xMiAqIG0yMyAtIG0yMiAqIG0xMztcbiAgICAgICAgY29uc3QgZGV0XzExXzIzID0gbTExICogbTIzIC0gbTIxICogbTEzO1xuICAgICAgICBjb25zdCBkZXRfMTFfMjIgPSBtMTEgKiBtMjIgLSBtMjEgKiBtMTI7XG4gICAgICAgIGNvbnN0IGRldF8xMF8yMyA9IG0xMCAqIG0yMyAtIG0yMCAqIG0xMztcbiAgICAgICAgY29uc3QgZGV0XzEwXzIyID0gbTEwICogbTIyIC0gbTIwICogbTEyO1xuICAgICAgICBjb25zdCBkZXRfMTBfMjEgPSBtMTAgKiBtMjEgLSBtMjAgKiBtMTE7XG4gICAgICAgIGNvbnN0IGNvZmFjdF8xMCA9IC0obTAxICogZGV0XzIyXzMzIC0gbTAyICogZGV0XzIxXzMzICsgbTAzICogZGV0XzIxXzMyKTtcbiAgICAgICAgY29uc3QgY29mYWN0XzExID0gKyhtMDAgKiBkZXRfMjJfMzMgLSBtMDIgKiBkZXRfMjBfMzMgKyBtMDMgKiBkZXRfMjBfMzIpO1xuICAgICAgICBjb25zdCBjb2ZhY3RfMTIgPSAtKG0wMCAqIGRldF8yMV8zMyAtIG0wMSAqIGRldF8yMF8zMyArIG0wMyAqIGRldF8yMF8zMSk7XG4gICAgICAgIGNvbnN0IGNvZmFjdF8xMyA9ICsobTAwICogZGV0XzIxXzMyIC0gbTAxICogZGV0XzIwXzMyICsgbTAyICogZGV0XzIwXzMxKTtcbiAgICAgICAgY29uc3QgY29mYWN0XzIwID0gKyhtMDEgKiBkZXRfMTJfMzMgLSBtMDIgKiBkZXRfMTFfMzMgKyBtMDMgKiBkZXRfMTFfMzIpO1xuICAgICAgICBjb25zdCBjb2ZhY3RfMjEgPSAtKG0wMCAqIGRldF8xMl8zMyAtIG0wMiAqIGRldF8xMF8zMyArIG0wMyAqIGRldF8xMF8zMik7XG4gICAgICAgIGNvbnN0IGNvZmFjdF8yMiA9ICsobTAwICogZGV0XzExXzMzIC0gbTAxICogZGV0XzEwXzMzICsgbTAzICogZGV0XzEwXzMxKTtcbiAgICAgICAgY29uc3QgY29mYWN0XzIzID0gLShtMDAgKiBkZXRfMTFfMzIgLSBtMDEgKiBkZXRfMTBfMzIgKyBtMDIgKiBkZXRfMTBfMzEpO1xuICAgICAgICBjb25zdCBjb2ZhY3RfMzAgPSAtKG0wMSAqIGRldF8xMl8yMyAtIG0wMiAqIGRldF8xMV8yMyArIG0wMyAqIGRldF8xMV8yMik7XG4gICAgICAgIGNvbnN0IGNvZmFjdF8zMSA9ICsobTAwICogZGV0XzEyXzIzIC0gbTAyICogZGV0XzEwXzIzICsgbTAzICogZGV0XzEwXzIyKTtcbiAgICAgICAgY29uc3QgY29mYWN0XzMyID0gLShtMDAgKiBkZXRfMTFfMjMgLSBtMDEgKiBkZXRfMTBfMjMgKyBtMDMgKiBkZXRfMTBfMjEpO1xuICAgICAgICBjb25zdCBjb2ZhY3RfMzMgPSArKG0wMCAqIGRldF8xMV8yMiAtIG0wMSAqIGRldF8xMF8yMiArIG0wMiAqIGRldF8xMF8yMSk7XG4gICAgICAgIE1hdHJpeC5Gcm9tVmFsdWVzVG9SZWYoY29mYWN0XzAwICogZGV0SW52LCBjb2ZhY3RfMTAgKiBkZXRJbnYsIGNvZmFjdF8yMCAqIGRldEludiwgY29mYWN0XzMwICogZGV0SW52LCBjb2ZhY3RfMDEgKiBkZXRJbnYsIGNvZmFjdF8xMSAqIGRldEludiwgY29mYWN0XzIxICogZGV0SW52LCBjb2ZhY3RfMzEgKiBkZXRJbnYsIGNvZmFjdF8wMiAqIGRldEludiwgY29mYWN0XzEyICogZGV0SW52LCBjb2ZhY3RfMjIgKiBkZXRJbnYsIGNvZmFjdF8zMiAqIGRldEludiwgY29mYWN0XzAzICogZGV0SW52LCBjb2ZhY3RfMTMgKiBkZXRJbnYsIGNvZmFjdF8yMyAqIGRldEludiwgY29mYWN0XzMzICogZGV0SW52LCBvdGhlcik7XG4gICAgICAgIC8vIHRzbGludDplbmFibGU6dmFyaWFibGUtbmFtZVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogYWRkIGEgdmFsdWUgYXQgdGhlIHNwZWNpZmllZCBwb3NpdGlvbiBpbiB0aGUgY3VycmVudCBNYXRyaXhcbiAgICAgKiBAcGFyYW0gaW5kZXggLSB0aGUgaW5kZXggb2YgdGhlIHZhbHVlIHdpdGhpbiB0aGUgbWF0cml4LiBiZXR3ZWVuIDAgYW5kIDE1LlxuICAgICAqIEBwYXJhbSB2YWx1ZSAtIHRoZSB2YWx1ZSB0byBiZSBhZGRlZFxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IHVwZGF0ZWQgbWF0cml4XG4gICAgICovXG4gICAgYWRkQXRJbmRleChpbmRleCwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy5fbVtpbmRleF0gKz0gdmFsdWU7XG4gICAgICAgIHRoaXMuX21hcmtBc1VwZGF0ZWQoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIG11dGlwbHkgdGhlIHNwZWNpZmllZCBwb3NpdGlvbiBpbiB0aGUgY3VycmVudCBNYXRyaXggYnkgYSB2YWx1ZVxuICAgICAqIEBwYXJhbSBpbmRleCAtIHRoZSBpbmRleCBvZiB0aGUgdmFsdWUgd2l0aGluIHRoZSBtYXRyaXguIGJldHdlZW4gMCBhbmQgMTUuXG4gICAgICogQHBhcmFtIHZhbHVlIC0gdGhlIHZhbHVlIHRvIGJlIGFkZGVkXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgdXBkYXRlZCBtYXRyaXhcbiAgICAgKi9cbiAgICBtdWx0aXBseUF0SW5kZXgoaW5kZXgsIHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX21baW5kZXhdICo9IHZhbHVlO1xuICAgICAgICB0aGlzLl9tYXJrQXNVcGRhdGVkKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnNlcnRzIHRoZSB0cmFuc2xhdGlvbiB2ZWN0b3IgKHVzaW5nIDMgZmxvYXRzKSBpbiB0aGUgY3VycmVudCBtYXRyaXhcbiAgICAgKiBAcGFyYW0geCAtIGRlZmluZXMgdGhlIDFzdCBjb21wb25lbnQgb2YgdGhlIHRyYW5zbGF0aW9uXG4gICAgICogQHBhcmFtIHkgLSBkZWZpbmVzIHRoZSAybmQgY29tcG9uZW50IG9mIHRoZSB0cmFuc2xhdGlvblxuICAgICAqIEBwYXJhbSB6IC0gZGVmaW5lcyB0aGUgM3JkIGNvbXBvbmVudCBvZiB0aGUgdHJhbnNsYXRpb25cbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCB1cGRhdGVkIG1hdHJpeFxuICAgICAqL1xuICAgIHNldFRyYW5zbGF0aW9uRnJvbUZsb2F0cyh4LCB5LCB6KSB7XG4gICAgICAgIHRoaXMuX21bMTJdID0geDtcbiAgICAgICAgdGhpcy5fbVsxM10gPSB5O1xuICAgICAgICB0aGlzLl9tWzE0XSA9IHo7XG4gICAgICAgIHRoaXMuX21hcmtBc1VwZGF0ZWQoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEluc2VydHMgdGhlIHRyYW5zbGF0aW9uIHZlY3RvciBpbiB0aGUgY3VycmVudCBtYXRyaXhcbiAgICAgKiBAcGFyYW0gdmVjdG9yMyAtIGRlZmluZXMgdGhlIHRyYW5zbGF0aW9uIHRvIGluc2VydFxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IHVwZGF0ZWQgbWF0cml4XG4gICAgICovXG4gICAgc2V0VHJhbnNsYXRpb24odmVjdG9yMykge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXRUcmFuc2xhdGlvbkZyb21GbG9hdHModmVjdG9yMy54LCB2ZWN0b3IzLnksIHZlY3RvcjMueik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHRyYW5zbGF0aW9uIHZhbHVlIG9mIHRoZSBjdXJyZW50IG1hdHJpeFxuICAgICAqIEByZXR1cm5zIGEgbmV3IFZlY3RvcjMgYXMgdGhlIGV4dHJhY3RlZCB0cmFuc2xhdGlvbiBmcm9tIHRoZSBtYXRyaXhcbiAgICAgKi9cbiAgICBnZXRUcmFuc2xhdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IzXzEuVmVjdG9yMyh0aGlzLl9tWzEyXSwgdGhpcy5fbVsxM10sIHRoaXMuX21bMTRdKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmlsbCBhIFZlY3RvcjMgd2l0aCB0aGUgZXh0cmFjdGVkIHRyYW5zbGF0aW9uIGZyb20gdGhlIG1hdHJpeFxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSBWZWN0b3IzIHdoZXJlIHRvIHN0b3JlIHRoZSB0cmFuc2xhdGlvblxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IG1hdHJpeFxuICAgICAqL1xuICAgIGdldFRyYW5zbGF0aW9uVG9SZWYocmVzdWx0KSB7XG4gICAgICAgIHJlc3VsdC54ID0gdGhpcy5fbVsxMl07XG4gICAgICAgIHJlc3VsdC55ID0gdGhpcy5fbVsxM107XG4gICAgICAgIHJlc3VsdC56ID0gdGhpcy5fbVsxNF07XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgcm90YXRpb24gYW5kIHNjYWxpbmcgcGFydCBmcm9tIHRoZSBtYXRyaXhcbiAgICAgKiBAcmV0dXJucyB0aGUgdXBkYXRlZCBtYXRyaXhcbiAgICAgKi9cbiAgICByZW1vdmVSb3RhdGlvbkFuZFNjYWxpbmcoKSB7XG4gICAgICAgIGNvbnN0IG0gPSB0aGlzLm07XG4gICAgICAgIE1hdHJpeC5Gcm9tVmFsdWVzVG9SZWYoMS4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDEuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAxLjAsIDAuMCwgbVsxMl0sIG1bMTNdLCBtWzE0XSwgbVsxNV0sIHRoaXMpO1xuICAgICAgICB0aGlzLl91cGRhdGVJZGVudGl0eVN0YXR1cyhtWzEyXSA9PT0gMCAmJiBtWzEzXSA9PT0gMCAmJiBtWzE0XSA9PT0gMCAmJiBtWzE1XSA9PT0gMSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNdWx0aXBseSB0d28gbWF0cmljZXNcbiAgICAgKiBAcGFyYW0gb3RoZXIgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEByZXR1cm5zIGEgbmV3IG1hdHJpeCBzZXQgd2l0aCB0aGUgbXVsdGlwbGljYXRpb24gcmVzdWx0IG9mIHRoZSBjdXJyZW50IE1hdHJpeCBhbmQgdGhlIGdpdmVuIG9uZVxuICAgICAqL1xuICAgIG11bHRpcGx5KG90aGVyKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBNYXRyaXgoKTtcbiAgICAgICAgdGhpcy5tdWx0aXBseVRvUmVmKG90aGVyLCByZXN1bHQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb3B5IHRoZSBjdXJyZW50IG1hdHJpeCBmcm9tIHRoZSBnaXZlbiBvbmVcbiAgICAgKiBAcGFyYW0gb3RoZXIgLSBkZWZpbmVzIHRoZSBzb3VyY2UgbWF0cml4XG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgdXBkYXRlZCBtYXRyaXhcbiAgICAgKi9cbiAgICBjb3B5RnJvbShvdGhlcikge1xuICAgICAgICBvdGhlci5jb3B5VG9BcnJheSh0aGlzLl9tKTtcbiAgICAgICAgY29uc3QgbyA9IG90aGVyO1xuICAgICAgICB0aGlzLl91cGRhdGVJZGVudGl0eVN0YXR1cyhvLl9pc0lkZW50aXR5LCBvLl9pc0lkZW50aXR5RGlydHksIG8uX2lzSWRlbnRpdHkzeDIsIG8uX2lzSWRlbnRpdHkzeDJEaXJ0eSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQb3B1bGF0ZXMgdGhlIGdpdmVuIGFycmF5IGZyb20gdGhlIHN0YXJ0aW5nIGluZGV4IHdpdGggdGhlIGN1cnJlbnQgbWF0cml4IHZhbHVlc1xuICAgICAqIEBwYXJhbSBhcnJheSAtIGRlZmluZXMgdGhlIHRhcmdldCBhcnJheVxuICAgICAqIEBwYXJhbSBvZmZzZXQgLSBkZWZpbmVzIHRoZSBvZmZzZXQgaW4gdGhlIHRhcmdldCBhcnJheSB3aGVyZSB0byBzdGFydCBzdG9yaW5nIHZhbHVlc1xuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IG1hdHJpeFxuICAgICAqL1xuICAgIGNvcHlUb0FycmF5KGFycmF5LCBvZmZzZXQgPSAwKSB7XG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCAxNjsgaW5kZXgrKykge1xuICAgICAgICAgICAgYXJyYXlbb2Zmc2V0ICsgaW5kZXhdID0gdGhpcy5fbVtpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGdpdmVuIG1hdHJpeCBcInJlc3VsdFwiIHdpdGggdGhlIG11bHRpcGxpY2F0aW9uIHJlc3VsdCBvZiB0aGUgY3VycmVudCBNYXRyaXggYW5kIHRoZSBnaXZlbiBvbmVcbiAgICAgKiBAcGFyYW0gb3RoZXIgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSBtYXRyaXggd2hlcmUgdG8gc3RvcmUgdGhlIG11bHRpcGxpY2F0aW9uXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgbWF0cml4XG4gICAgICovXG4gICAgbXVsdGlwbHlUb1JlZihvdGhlciwgcmVzdWx0KSB7XG4gICAgICAgIGlmICh0aGlzLl9pc0lkZW50aXR5KSB7XG4gICAgICAgICAgICByZXN1bHQuY29weUZyb20ob3RoZXIpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG90aGVyLl9pc0lkZW50aXR5KSB7XG4gICAgICAgICAgICByZXN1bHQuY29weUZyb20odGhpcyk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm11bHRpcGx5VG9BcnJheShvdGhlciwgcmVzdWx0Ll9tLCAwKTtcbiAgICAgICAgcmVzdWx0Ll9tYXJrQXNVcGRhdGVkKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBGbG9hdEFycmF5IFwicmVzdWx0XCIgZnJvbSB0aGUgZ2l2ZW4gaW5kZXggXCJvZmZzZXRcIiB3aXRoIHRoZSBtdWx0aXBsaWNhdGlvbiBvZiB0aGUgY3VycmVudCBtYXRyaXggYW5kIHRoZSBnaXZlbiBvbmVcbiAgICAgKiBAcGFyYW0gb3RoZXIgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSBhcnJheSB3aGVyZSB0byBzdG9yZSB0aGUgbXVsdGlwbGljYXRpb25cbiAgICAgKiBAcGFyYW0gb2Zmc2V0IC0gZGVmaW5lcyB0aGUgb2Zmc2V0IGluIHRoZSB0YXJnZXQgYXJyYXkgd2hlcmUgdG8gc3RhcnQgc3RvcmluZyB2YWx1ZXNcbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCBtYXRyaXhcbiAgICAgKi9cbiAgICBtdWx0aXBseVRvQXJyYXkob3RoZXIsIHJlc3VsdCwgb2Zmc2V0KSB7XG4gICAgICAgIGNvbnN0IG0gPSB0aGlzLl9tO1xuICAgICAgICBjb25zdCBvdGhlck0gPSBvdGhlci5tO1xuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZTpvbmUtdmFyaWFibGUtcGVyLWRlY2xhcmF0aW9uXG4gICAgICAgIGNvbnN0IHRtMCA9IG1bMF0sIHRtMSA9IG1bMV0sIHRtMiA9IG1bMl0sIHRtMyA9IG1bM107XG4gICAgICAgIGNvbnN0IHRtNCA9IG1bNF0sIHRtNSA9IG1bNV0sIHRtNiA9IG1bNl0sIHRtNyA9IG1bN107XG4gICAgICAgIGNvbnN0IHRtOCA9IG1bOF0sIHRtOSA9IG1bOV0sIHRtMTAgPSBtWzEwXSwgdG0xMSA9IG1bMTFdO1xuICAgICAgICBjb25zdCB0bTEyID0gbVsxMl0sIHRtMTMgPSBtWzEzXSwgdG0xNCA9IG1bMTRdLCB0bTE1ID0gbVsxNV07XG4gICAgICAgIGNvbnN0IG9tMCA9IG90aGVyTVswXSwgb20xID0gb3RoZXJNWzFdLCBvbTIgPSBvdGhlck1bMl0sIG9tMyA9IG90aGVyTVszXTtcbiAgICAgICAgY29uc3Qgb200ID0gb3RoZXJNWzRdLCBvbTUgPSBvdGhlck1bNV0sIG9tNiA9IG90aGVyTVs2XSwgb203ID0gb3RoZXJNWzddO1xuICAgICAgICBjb25zdCBvbTggPSBvdGhlck1bOF0sIG9tOSA9IG90aGVyTVs5XSwgb20xMCA9IG90aGVyTVsxMF0sIG9tMTEgPSBvdGhlck1bMTFdO1xuICAgICAgICBjb25zdCBvbTEyID0gb3RoZXJNWzEyXSwgb20xMyA9IG90aGVyTVsxM10sIG9tMTQgPSBvdGhlck1bMTRdLCBvbTE1ID0gb3RoZXJNWzE1XTtcbiAgICAgICAgLy8gdHNsaW50OmVuYWJsZTpvbmUtdmFyaWFibGUtcGVyLWRlY2xhcmF0aW9uXG4gICAgICAgIHJlc3VsdFtvZmZzZXRdID0gdG0wICogb20wICsgdG0xICogb200ICsgdG0yICogb204ICsgdG0zICogb20xMjtcbiAgICAgICAgcmVzdWx0W29mZnNldCArIDFdID0gdG0wICogb20xICsgdG0xICogb201ICsgdG0yICogb205ICsgdG0zICogb20xMztcbiAgICAgICAgcmVzdWx0W29mZnNldCArIDJdID0gdG0wICogb20yICsgdG0xICogb202ICsgdG0yICogb20xMCArIHRtMyAqIG9tMTQ7XG4gICAgICAgIHJlc3VsdFtvZmZzZXQgKyAzXSA9IHRtMCAqIG9tMyArIHRtMSAqIG9tNyArIHRtMiAqIG9tMTEgKyB0bTMgKiBvbTE1O1xuICAgICAgICByZXN1bHRbb2Zmc2V0ICsgNF0gPSB0bTQgKiBvbTAgKyB0bTUgKiBvbTQgKyB0bTYgKiBvbTggKyB0bTcgKiBvbTEyO1xuICAgICAgICByZXN1bHRbb2Zmc2V0ICsgNV0gPSB0bTQgKiBvbTEgKyB0bTUgKiBvbTUgKyB0bTYgKiBvbTkgKyB0bTcgKiBvbTEzO1xuICAgICAgICByZXN1bHRbb2Zmc2V0ICsgNl0gPSB0bTQgKiBvbTIgKyB0bTUgKiBvbTYgKyB0bTYgKiBvbTEwICsgdG03ICogb20xNDtcbiAgICAgICAgcmVzdWx0W29mZnNldCArIDddID0gdG00ICogb20zICsgdG01ICogb203ICsgdG02ICogb20xMSArIHRtNyAqIG9tMTU7XG4gICAgICAgIHJlc3VsdFtvZmZzZXQgKyA4XSA9IHRtOCAqIG9tMCArIHRtOSAqIG9tNCArIHRtMTAgKiBvbTggKyB0bTExICogb20xMjtcbiAgICAgICAgcmVzdWx0W29mZnNldCArIDldID0gdG04ICogb20xICsgdG05ICogb201ICsgdG0xMCAqIG9tOSArIHRtMTEgKiBvbTEzO1xuICAgICAgICByZXN1bHRbb2Zmc2V0ICsgMTBdID0gdG04ICogb20yICsgdG05ICogb202ICsgdG0xMCAqIG9tMTAgKyB0bTExICogb20xNDtcbiAgICAgICAgcmVzdWx0W29mZnNldCArIDExXSA9IHRtOCAqIG9tMyArIHRtOSAqIG9tNyArIHRtMTAgKiBvbTExICsgdG0xMSAqIG9tMTU7XG4gICAgICAgIHJlc3VsdFtvZmZzZXQgKyAxMl0gPSB0bTEyICogb20wICsgdG0xMyAqIG9tNCArIHRtMTQgKiBvbTggKyB0bTE1ICogb20xMjtcbiAgICAgICAgcmVzdWx0W29mZnNldCArIDEzXSA9IHRtMTIgKiBvbTEgKyB0bTEzICogb201ICsgdG0xNCAqIG9tOSArIHRtMTUgKiBvbTEzO1xuICAgICAgICByZXN1bHRbb2Zmc2V0ICsgMTRdID0gdG0xMiAqIG9tMiArIHRtMTMgKiBvbTYgKyB0bTE0ICogb20xMCArIHRtMTUgKiBvbTE0O1xuICAgICAgICByZXN1bHRbb2Zmc2V0ICsgMTVdID0gdG0xMiAqIG9tMyArIHRtMTMgKiBvbTcgKyB0bTE0ICogb20xMSArIHRtMTUgKiBvbTE1O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hlY2sgZXF1YWxpdHkgYmV0d2VlbiB0aGlzIG1hdHJpeCBhbmQgYSBzZWNvbmQgb25lXG4gICAgICogQHBhcmFtIHZhbHVlIC0gZGVmaW5lcyB0aGUgc2Vjb25kIG1hdHJpeCB0byBjb21wYXJlXG4gICAgICogQHJldHVybnMgdHJ1ZSBpcyB0aGUgY3VycmVudCBtYXRyaXggYW5kIHRoZSBnaXZlbiBvbmUgdmFsdWVzIGFyZSBzdHJpY3RseSBlcXVhbFxuICAgICAqL1xuICAgIGVxdWFscyh2YWx1ZSkge1xuICAgICAgICBjb25zdCBvdGhlciA9IHZhbHVlO1xuICAgICAgICBpZiAoIW90aGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2lzSWRlbnRpdHkgfHwgb3RoZXIuX2lzSWRlbnRpdHkpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5faXNJZGVudGl0eURpcnR5ICYmICFvdGhlci5faXNJZGVudGl0eURpcnR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lzSWRlbnRpdHkgJiYgb3RoZXIuX2lzSWRlbnRpdHk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbSA9IHRoaXMubTtcbiAgICAgICAgY29uc3Qgb20gPSBvdGhlci5tO1xuICAgICAgICByZXR1cm4gKG1bMF0gPT09IG9tWzBdICYmXG4gICAgICAgICAgICBtWzFdID09PSBvbVsxXSAmJlxuICAgICAgICAgICAgbVsyXSA9PT0gb21bMl0gJiZcbiAgICAgICAgICAgIG1bM10gPT09IG9tWzNdICYmXG4gICAgICAgICAgICBtWzRdID09PSBvbVs0XSAmJlxuICAgICAgICAgICAgbVs1XSA9PT0gb21bNV0gJiZcbiAgICAgICAgICAgIG1bNl0gPT09IG9tWzZdICYmXG4gICAgICAgICAgICBtWzddID09PSBvbVs3XSAmJlxuICAgICAgICAgICAgbVs4XSA9PT0gb21bOF0gJiZcbiAgICAgICAgICAgIG1bOV0gPT09IG9tWzldICYmXG4gICAgICAgICAgICBtWzEwXSA9PT0gb21bMTBdICYmXG4gICAgICAgICAgICBtWzExXSA9PT0gb21bMTFdICYmXG4gICAgICAgICAgICBtWzEyXSA9PT0gb21bMTJdICYmXG4gICAgICAgICAgICBtWzEzXSA9PT0gb21bMTNdICYmXG4gICAgICAgICAgICBtWzE0XSA9PT0gb21bMTRdICYmXG4gICAgICAgICAgICBtWzE1XSA9PT0gb21bMTVdKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xvbmUgdGhlIGN1cnJlbnQgbWF0cml4XG4gICAgICogQHJldHVybnMgYSBuZXcgbWF0cml4IGZyb20gdGhlIGN1cnJlbnQgbWF0cml4XG4gICAgICovXG4gICAgY2xvbmUoKSB7XG4gICAgICAgIGNvbnN0IG1hdHJpeCA9IG5ldyBNYXRyaXgoKTtcbiAgICAgICAgbWF0cml4LmNvcHlGcm9tKHRoaXMpO1xuICAgICAgICByZXR1cm4gbWF0cml4O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBuYW1lIG9mIHRoZSBjdXJyZW50IG1hdHJpeCBjbGFzc1xuICAgICAqIEByZXR1cm5zIHRoZSBzdHJpbmcgXCJNYXRyaXhcIlxuICAgICAqL1xuICAgIGdldENsYXNzTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdNYXRyaXgnO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBoYXNoIGNvZGUgb2YgdGhlIGN1cnJlbnQgbWF0cml4XG4gICAgICogQHJldHVybnMgdGhlIGhhc2ggY29kZVxuICAgICAqL1xuICAgIGdldEhhc2hDb2RlKCkge1xuICAgICAgICBsZXQgaGFzaCA9IHRoaXMuX21bMF0gfHwgMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCAxNjsgaSsrKSB7XG4gICAgICAgICAgICBoYXNoID0gKGhhc2ggKiAzOTcpIF4gKHRoaXMuX21baV0gfHwgMCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhhc2g7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlY29tcG9zZXMgdGhlIGN1cnJlbnQgTWF0cml4IGludG8gYSB0cmFuc2xhdGlvbiwgcm90YXRpb24gYW5kIHNjYWxpbmcgY29tcG9uZW50c1xuICAgICAqIEBwYXJhbSBzY2FsZSAtIGRlZmluZXMgdGhlIHNjYWxlIHZlY3RvcjMgZ2l2ZW4gYXMgYSByZWZlcmVuY2UgdG8gdXBkYXRlXG4gICAgICogQHBhcmFtIHJvdGF0aW9uIC0gZGVmaW5lcyB0aGUgcm90YXRpb24gcXVhdGVybmlvbiBnaXZlbiBhcyBhIHJlZmVyZW5jZSB0byB1cGRhdGVcbiAgICAgKiBAcGFyYW0gdHJhbnNsYXRpb24gLSBkZWZpbmVzIHRoZSB0cmFuc2xhdGlvbiB2ZWN0b3IzIGdpdmVuIGFzIGEgcmVmZXJlbmNlIHRvIHVwZGF0ZVxuICAgICAqIEByZXR1cm5zIHRydWUgaWYgb3BlcmF0aW9uIHdhcyBzdWNjZXNzZnVsXG4gICAgICovXG4gICAgZGVjb21wb3NlKHNjYWxlLCByb3RhdGlvbiwgdHJhbnNsYXRpb24pIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzSWRlbnRpdHkpIHtcbiAgICAgICAgICAgIGlmICh0cmFuc2xhdGlvbikge1xuICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uLnNldEFsbCgwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzY2FsZSkge1xuICAgICAgICAgICAgICAgIHNjYWxlLnNldEFsbCgxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyb3RhdGlvbikge1xuICAgICAgICAgICAgICAgIHJvdGF0aW9uLmNvcHlGcm9tRmxvYXRzKDAsIDAsIDAsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbSA9IHRoaXMuX207XG4gICAgICAgIGlmICh0cmFuc2xhdGlvbikge1xuICAgICAgICAgICAgdHJhbnNsYXRpb24uY29weUZyb21GbG9hdHMobVsxMl0sIG1bMTNdLCBtWzE0XSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdXNlZFNjYWxlID0gc2NhbGUgfHwgcHJlYWxsb2NhdGVkVmFyaWFibGVzXzEuTWF0aFRtcC5WZWN0b3IzWzBdO1xuICAgICAgICB1c2VkU2NhbGUueCA9IE1hdGguc3FydChtWzBdICogbVswXSArIG1bMV0gKiBtWzFdICsgbVsyXSAqIG1bMl0pO1xuICAgICAgICB1c2VkU2NhbGUueSA9IE1hdGguc3FydChtWzRdICogbVs0XSArIG1bNV0gKiBtWzVdICsgbVs2XSAqIG1bNl0pO1xuICAgICAgICB1c2VkU2NhbGUueiA9IE1hdGguc3FydChtWzhdICogbVs4XSArIG1bOV0gKiBtWzldICsgbVsxMF0gKiBtWzEwXSk7XG4gICAgICAgIGlmICh0aGlzLmRldGVybWluYW50KCkgPD0gMCkge1xuICAgICAgICAgICAgdXNlZFNjYWxlLnkgKj0gLTE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHVzZWRTY2FsZS54ID09PSAwIHx8IHVzZWRTY2FsZS55ID09PSAwIHx8IHVzZWRTY2FsZS56ID09PSAwKSB7XG4gICAgICAgICAgICBpZiAocm90YXRpb24pIHtcbiAgICAgICAgICAgICAgICByb3RhdGlvbi5jb3B5RnJvbUZsb2F0cygwLjAsIDAuMCwgMC4wLCAxLjApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyb3RhdGlvbikge1xuICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm9uZS12YXJpYWJsZS1wZXItZGVjbGFyYXRpb25cbiAgICAgICAgICAgIGNvbnN0IHN4ID0gMSAvIHVzZWRTY2FsZS54LCBzeSA9IDEgLyB1c2VkU2NhbGUueSwgc3ogPSAxIC8gdXNlZFNjYWxlLno7XG4gICAgICAgICAgICBNYXRyaXguRnJvbVZhbHVlc1RvUmVmKG1bMF0gKiBzeCwgbVsxXSAqIHN4LCBtWzJdICogc3gsIDAuMCwgbVs0XSAqIHN5LCBtWzVdICogc3ksIG1bNl0gKiBzeSwgMC4wLCBtWzhdICogc3osIG1bOV0gKiBzeiwgbVsxMF0gKiBzeiwgMC4wLCAwLjAsIDAuMCwgMC4wLCAxLjAsIHByZWFsbG9jYXRlZFZhcmlhYmxlc18xLk1hdGhUbXAuTWF0cml4WzBdKTtcbiAgICAgICAgICAgIFF1YXRlcm5pb25fMS5RdWF0ZXJuaW9uLkZyb21Sb3RhdGlvbk1hdHJpeFRvUmVmKHByZWFsbG9jYXRlZFZhcmlhYmxlc18xLk1hdGhUbXAuTWF0cml4WzBdLCByb3RhdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgc3BlY2lmaWMgcm93IG9mIHRoZSBtYXRyaXhcbiAgICAgKiBAcGFyYW0gaW5kZXggLSBkZWZpbmVzIHRoZSBudW1iZXIgb2YgdGhlIHJvdyB0byBnZXRcbiAgICAgKiBAcmV0dXJucyB0aGUgaW5kZXgtdGggcm93IG9mIHRoZSBjdXJyZW50IG1hdHJpeCBhcyBhIG5ldyBWZWN0b3I0XG4gICAgICovXG4gICAgZ2V0Um93KGluZGV4KSB7XG4gICAgICAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPiAzKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpID0gaW5kZXggKiA0O1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjRfMS5WZWN0b3I0KHRoaXMuX21baSArIDBdLCB0aGlzLl9tW2kgKyAxXSwgdGhpcy5fbVtpICsgMl0sIHRoaXMuX21baSArIDNdKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgaW5kZXgtdGggcm93IG9mIHRoZSBjdXJyZW50IG1hdHJpeCB0byB0aGUgdmVjdG9yNCB2YWx1ZXNcbiAgICAgKiBAcGFyYW0gaW5kZXggLSBkZWZpbmVzIHRoZSBudW1iZXIgb2YgdGhlIHJvdyB0byBzZXRcbiAgICAgKiBAcGFyYW0gcm93IC0gZGVmaW5lcyB0aGUgdGFyZ2V0IHZlY3RvcjRcbiAgICAgKiBAcmV0dXJucyB0aGUgdXBkYXRlZCBjdXJyZW50IG1hdHJpeFxuICAgICAqL1xuICAgIHNldFJvdyhpbmRleCwgcm93KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldFJvd0Zyb21GbG9hdHMoaW5kZXgsIHJvdy54LCByb3cueSwgcm93LnosIHJvdy53KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29tcHV0ZSB0aGUgdHJhbnNwb3NlIG9mIHRoZSBtYXRyaXhcbiAgICAgKiBAcmV0dXJucyB0aGUgbmV3IHRyYW5zcG9zZWQgbWF0cml4XG4gICAgICovXG4gICAgdHJhbnNwb3NlKCkge1xuICAgICAgICByZXR1cm4gTWF0cml4LlRyYW5zcG9zZSh0aGlzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29tcHV0ZSB0aGUgdHJhbnNwb3NlIG9mIHRoZSBtYXRyaXggYW5kIHN0b3JlIGl0IGluIGEgZ2l2ZW4gbWF0cml4XG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIHRhcmdldCBtYXRyaXhcbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCBtYXRyaXhcbiAgICAgKi9cbiAgICB0cmFuc3Bvc2VUb1JlZihyZXN1bHQpIHtcbiAgICAgICAgTWF0cml4LlRyYW5zcG9zZVRvUmVmKHRoaXMsIHJlc3VsdCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBpbmRleC10aCByb3cgb2YgdGhlIGN1cnJlbnQgbWF0cml4IHdpdGggdGhlIGdpdmVuIDQgeCBmbG9hdCB2YWx1ZXNcbiAgICAgKiBAcGFyYW0gaW5kZXggLSBkZWZpbmVzIHRoZSByb3cgaW5kZXhcbiAgICAgKiBAcGFyYW0geCAtIGRlZmluZXMgdGhlIHggY29tcG9uZW50IHRvIHNldFxuICAgICAqIEBwYXJhbSB5IC0gZGVmaW5lcyB0aGUgeSBjb21wb25lbnQgdG8gc2V0XG4gICAgICogQHBhcmFtIHogLSBkZWZpbmVzIHRoZSB6IGNvbXBvbmVudCB0byBzZXRcbiAgICAgKiBAcGFyYW0gdyAtIGRlZmluZXMgdGhlIHcgY29tcG9uZW50IHRvIHNldFxuICAgICAqIEByZXR1cm5zIHRoZSB1cGRhdGVkIGN1cnJlbnQgbWF0cml4XG4gICAgICovXG4gICAgc2V0Um93RnJvbUZsb2F0cyhpbmRleCwgeCwgeSwgeiwgdykge1xuICAgICAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID4gMykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaSA9IGluZGV4ICogNDtcbiAgICAgICAgdGhpcy5fbVtpICsgMF0gPSB4O1xuICAgICAgICB0aGlzLl9tW2kgKyAxXSA9IHk7XG4gICAgICAgIHRoaXMuX21baSArIDJdID0gejtcbiAgICAgICAgdGhpcy5fbVtpICsgM10gPSB3O1xuICAgICAgICB0aGlzLl9tYXJrQXNVcGRhdGVkKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb21wdXRlIGEgbmV3IG1hdHJpeCBzZXQgd2l0aCB0aGUgY3VycmVudCBtYXRyaXggdmFsdWVzIG11bHRpcGxpZWQgYnkgc2NhbGUgKGZsb2F0KVxuICAgICAqIEBwYXJhbSBzY2FsZSAtIGRlZmluZXMgdGhlIHNjYWxlIGZhY3RvclxuICAgICAqIEByZXR1cm5zIGEgbmV3IG1hdHJpeFxuICAgICAqL1xuICAgIHNjYWxlKHNjYWxlKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBNYXRyaXgoKTtcbiAgICAgICAgdGhpcy5zY2FsZVRvUmVmKHNjYWxlLCByZXN1bHQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTY2FsZSB0aGUgY3VycmVudCBtYXRyaXggdmFsdWVzIGJ5IGEgZmFjdG9yIHRvIGEgZ2l2ZW4gcmVzdWx0IG1hdHJpeFxuICAgICAqIEBwYXJhbSBzY2FsZSAtIGRlZmluZXMgdGhlIHNjYWxlIGZhY3RvclxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSBtYXRyaXggdG8gc3RvcmUgdGhlIHJlc3VsdFxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IG1hdHJpeFxuICAgICAqL1xuICAgIHNjYWxlVG9SZWYoc2NhbGUsIHJlc3VsdCkge1xuICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgMTY7IGluZGV4KyspIHtcbiAgICAgICAgICAgIHJlc3VsdC5fbVtpbmRleF0gPSB0aGlzLl9tW2luZGV4XSAqIHNjYWxlO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdC5fbWFya0FzVXBkYXRlZCgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2NhbGUgdGhlIGN1cnJlbnQgbWF0cml4IHZhbHVlcyBieSBhIGZhY3RvciBhbmQgYWRkIHRoZSByZXN1bHQgdG8gYSBnaXZlbiBtYXRyaXhcbiAgICAgKiBAcGFyYW0gc2NhbGUgLSBkZWZpbmVzIHRoZSBzY2FsZSBmYWN0b3JcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgTWF0cml4IHRvIHN0b3JlIHRoZSByZXN1bHRcbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCBtYXRyaXhcbiAgICAgKi9cbiAgICBzY2FsZUFuZEFkZFRvUmVmKHNjYWxlLCByZXN1bHQpIHtcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IDE2OyBpbmRleCsrKSB7XG4gICAgICAgICAgICByZXN1bHQuX21baW5kZXhdICs9IHRoaXMuX21baW5kZXhdICogc2NhbGU7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0Ll9tYXJrQXNVcGRhdGVkKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXcml0ZXMgdG8gdGhlIGdpdmVuIG1hdHJpeCBhIG5vcm1hbCBtYXRyaXgsIGNvbXB1dGVkIGZyb20gdGhpcyBvbmUgKHVzaW5nIHZhbHVlcyBmcm9tIGlkZW50aXR5IG1hdHJpeCBmb3IgZm91cnRoIHJvdyBhbmQgY29sdW1uKS5cbiAgICAgKiBAcGFyYW0gcmVmIC0gbWF0cml4IHRvIHN0b3JlIHRoZSByZXN1bHRcbiAgICAgKi9cbiAgICB0b05vcm1hbE1hdHJpeChyZWYpIHtcbiAgICAgICAgY29uc3QgdG1wID0gcHJlYWxsb2NhdGVkVmFyaWFibGVzXzEuTWF0aFRtcC5NYXRyaXhbMF07XG4gICAgICAgIHRoaXMuaW52ZXJ0VG9SZWYodG1wKTtcbiAgICAgICAgdG1wLnRyYW5zcG9zZVRvUmVmKHJlZik7XG4gICAgICAgIGNvbnN0IG0gPSByZWYuX207XG4gICAgICAgIE1hdHJpeC5Gcm9tVmFsdWVzVG9SZWYobVswXSwgbVsxXSwgbVsyXSwgMC4wLCBtWzRdLCBtWzVdLCBtWzZdLCAwLjAsIG1bOF0sIG1bOV0sIG1bMTBdLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDEuMCwgcmVmKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyBvbmx5IHJvdGF0aW9uIHBhcnQgb2YgdGhlIGN1cnJlbnQgbWF0cml4XG4gICAgICogQHJldHVybnMgYSBuZXcgbWF0cml4IHNldHMgdG8gdGhlIGV4dHJhY3RlZCByb3RhdGlvbiBtYXRyaXggZnJvbSB0aGUgY3VycmVudCBvbmVcbiAgICAgKi9cbiAgICBnZXRSb3RhdGlvbk1hdHJpeCgpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IE1hdHJpeCgpO1xuICAgICAgICB0aGlzLmdldFJvdGF0aW9uTWF0cml4VG9SZWYocmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRXh0cmFjdHMgdGhlIHJvdGF0aW9uIG1hdHJpeCBmcm9tIHRoZSBjdXJyZW50IG9uZSBhbmQgc2V0cyBpdCBhcyB0aGUgZ2l2ZW4gXCJyZXN1bHRcIlxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSB0YXJnZXQgbWF0cml4IHRvIHN0b3JlIGRhdGEgdG9cbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCBtYXRyaXhcbiAgICAgKi9cbiAgICBnZXRSb3RhdGlvbk1hdHJpeFRvUmVmKHJlc3VsdCkge1xuICAgICAgICBjb25zdCBzY2FsZSA9IHByZWFsbG9jYXRlZFZhcmlhYmxlc18xLk1hdGhUbXAuVmVjdG9yM1swXTtcbiAgICAgICAgaWYgKCF0aGlzLmRlY29tcG9zZShzY2FsZSkpIHtcbiAgICAgICAgICAgIE1hdHJpeC5JZGVudGl0eVRvUmVmKHJlc3VsdCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtID0gdGhpcy5fbTtcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm9uZS12YXJpYWJsZS1wZXItZGVjbGFyYXRpb25cbiAgICAgICAgY29uc3Qgc3ggPSAxIC8gc2NhbGUueCwgc3kgPSAxIC8gc2NhbGUueSwgc3ogPSAxIC8gc2NhbGUuejtcbiAgICAgICAgTWF0cml4LkZyb21WYWx1ZXNUb1JlZihtWzBdICogc3gsIG1bMV0gKiBzeCwgbVsyXSAqIHN4LCAwLjAsIG1bNF0gKiBzeSwgbVs1XSAqIHN5LCBtWzZdICogc3ksIDAuMCwgbVs4XSAqIHN6LCBtWzldICogc3osIG1bMTBdICogc3osIDAuMCwgMC4wLCAwLjAsIDAuMCwgMS4wLCByZXN1bHQpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogVG9nZ2xlcyBtb2RlbCBtYXRyaXggZnJvbSBiZWluZyByaWdodCBoYW5kZWQgdG8gbGVmdCBoYW5kZWQgaW4gcGxhY2UgYW5kIHZpY2UgdmVyc2FcbiAgICAgKi9cbiAgICB0b2dnbGVNb2RlbE1hdHJpeEhhbmRJblBsYWNlKCkge1xuICAgICAgICBjb25zdCBtID0gdGhpcy5fbTtcbiAgICAgICAgbVsyXSAqPSAtMTtcbiAgICAgICAgbVs2XSAqPSAtMTtcbiAgICAgICAgbVs4XSAqPSAtMTtcbiAgICAgICAgbVs5XSAqPSAtMTtcbiAgICAgICAgbVsxNF0gKj0gLTE7XG4gICAgICAgIHRoaXMuX21hcmtBc1VwZGF0ZWQoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVG9nZ2xlcyBwcm9qZWN0aW9uIG1hdHJpeCBmcm9tIGJlaW5nIHJpZ2h0IGhhbmRlZCB0byBsZWZ0IGhhbmRlZCBpbiBwbGFjZSBhbmQgdmljZSB2ZXJzYVxuICAgICAqL1xuICAgIHRvZ2dsZVByb2plY3Rpb25NYXRyaXhIYW5kSW5QbGFjZSgpIHtcbiAgICAgICAgY29uc3QgbSA9IHRoaXMuX207XG4gICAgICAgIG1bOF0gKj0gLTE7XG4gICAgICAgIG1bOV0gKj0gLTE7XG4gICAgICAgIG1bMTBdICo9IC0xO1xuICAgICAgICBtWzExXSAqPSAtMTtcbiAgICAgICAgdGhpcy5fbWFya0FzVXBkYXRlZCgpO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgX3VwZGF0ZUlkZW50aXR5U3RhdHVzKGlzSWRlbnRpdHksIGlzSWRlbnRpdHlEaXJ0eSA9IGZhbHNlLCBpc0lkZW50aXR5M3gyID0gZmFsc2UsIGlzSWRlbnRpdHkzeDJEaXJ0eSA9IHRydWUpIHtcbiAgICAgICAgdGhpcy51cGRhdGVGbGFnID0gTWF0cml4Ll91cGRhdGVGbGFnU2VlZCsrO1xuICAgICAgICB0aGlzLl9pc0lkZW50aXR5ID0gaXNJZGVudGl0eTtcbiAgICAgICAgdGhpcy5faXNJZGVudGl0eTN4MiA9IGlzSWRlbnRpdHkgfHwgaXNJZGVudGl0eTN4MjtcbiAgICAgICAgdGhpcy5faXNJZGVudGl0eURpcnR5ID0gdGhpcy5faXNJZGVudGl0eSA/IGZhbHNlIDogaXNJZGVudGl0eURpcnR5O1xuICAgICAgICB0aGlzLl9pc0lkZW50aXR5M3gyRGlydHkgPSB0aGlzLl9pc0lkZW50aXR5M3gyID8gZmFsc2UgOiBpc0lkZW50aXR5M3gyRGlydHk7XG4gICAgfVxufVxuZXhwb3J0cy5NYXRyaXggPSBNYXRyaXg7XG5NYXRyaXguX3VwZGF0ZUZsYWdTZWVkID0gMDtcbk1hdHJpeC5faWRlbnRpdHlSZWFkT25seSA9IE1hdHJpeC5JZGVudGl0eSgpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TWF0cml4LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5RdWF0ZXJuaW9uID0gdm9pZCAwO1xuY29uc3QgTWF0cml4XzEgPSByZXF1aXJlKFwiLi9NYXRyaXhcIik7XG5jb25zdCBWZWN0b3IzXzEgPSByZXF1aXJlKFwiLi9WZWN0b3IzXCIpO1xuY29uc3QgcHJlYWxsb2NhdGVkVmFyaWFibGVzXzEgPSByZXF1aXJlKFwiLi9wcmVhbGxvY2F0ZWRWYXJpYWJsZXNcIik7XG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4vdHlwZXNcIik7XG5jb25zdCBTY2FsYXJfMSA9IHJlcXVpcmUoXCIuL1NjYWxhclwiKTtcbi8qKlxuICogQ2xhc3MgdXNlZCB0byBzdG9yZSBxdWF0ZXJuaW9uIGRhdGFcbiAqIHtAbGluayBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9RdWF0ZXJuaW9uIH1cbiAqIHtAbGluayBodHRwOi8vZG9jLmJhYnlsb25qcy5jb20vZmVhdHVyZXMvcG9zaXRpb24sX3JvdGF0aW9uLF9zY2FsaW5nIH1cbiAqIEBwdWJsaWNcbiAqL1xuY2xhc3MgUXVhdGVybmlvbiB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBRdWF0ZXJuaW9uIGZyb20gdGhlIGdpdmVuIGZsb2F0c1xuICAgICAqIEBwYXJhbSB4IC0gZGVmaW5lcyB0aGUgZmlyc3QgY29tcG9uZW50ICgwIGJ5IGRlZmF1bHQpXG4gICAgICogQHBhcmFtIHkgLSBkZWZpbmVzIHRoZSBzZWNvbmQgY29tcG9uZW50ICgwIGJ5IGRlZmF1bHQpXG4gICAgICogQHBhcmFtIHogLSBkZWZpbmVzIHRoZSB0aGlyZCBjb21wb25lbnQgKDAgYnkgZGVmYXVsdClcbiAgICAgKiBAcGFyYW0gdyAtIGRlZmluZXMgdGhlIGZvdXJ0aCBjb21wb25lbnQgKDEuMCBieSBkZWZhdWx0KVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKiBkZWZpbmVzIHRoZSBmaXJzdCBjb21wb25lbnQgKDAgYnkgZGVmYXVsdCkgKi9cbiAgICB4ID0gMC4wLCBcbiAgICAvKiogZGVmaW5lcyB0aGUgc2Vjb25kIGNvbXBvbmVudCAoMCBieSBkZWZhdWx0KSAqL1xuICAgIHkgPSAwLjAsIFxuICAgIC8qKiBkZWZpbmVzIHRoZSB0aGlyZCBjb21wb25lbnQgKDAgYnkgZGVmYXVsdCkgKi9cbiAgICB6ID0gMC4wLCBcbiAgICAvKiogZGVmaW5lcyB0aGUgZm91cnRoIGNvbXBvbmVudCAoMS4wIGJ5IGRlZmF1bHQpICovXG4gICAgdyA9IDEuMCkge1xuICAgICAgICB0aGlzLnggPSB4O1xuICAgICAgICB0aGlzLnkgPSB5O1xuICAgICAgICB0aGlzLnogPSB6O1xuICAgICAgICB0aGlzLncgPSB3O1xuICAgIH1cbiAgICAvLyBTdGF0aWNzXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBxdWF0ZXJuaW9uIGZyb20gYSByb3RhdGlvbiBtYXRyaXhcbiAgICAgKiBAcGFyYW0gbWF0cml4IC0gZGVmaW5lcyB0aGUgc291cmNlIG1hdHJpeFxuICAgICAqIEByZXR1cm5zIGEgbmV3IHF1YXRlcm5pb24gY3JlYXRlZCBmcm9tIHRoZSBnaXZlbiByb3RhdGlvbiBtYXRyaXggdmFsdWVzXG4gICAgICovXG4gICAgc3RhdGljIEZyb21Sb3RhdGlvbk1hdHJpeChtYXRyaXgpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IFF1YXRlcm5pb24oKTtcbiAgICAgICAgUXVhdGVybmlvbi5Gcm9tUm90YXRpb25NYXRyaXhUb1JlZihtYXRyaXgsIHJlc3VsdCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGdpdmVuIHF1YXRlcm5pb24gd2l0aCB0aGUgZ2l2ZW4gcm90YXRpb24gbWF0cml4IHZhbHVlc1xuICAgICAqIEBwYXJhbSBtYXRyaXggLSBkZWZpbmVzIHRoZSBzb3VyY2UgbWF0cml4XG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIHRhcmdldCBxdWF0ZXJuaW9uXG4gICAgICovXG4gICAgc3RhdGljIEZyb21Sb3RhdGlvbk1hdHJpeFRvUmVmKG1hdHJpeCwgcmVzdWx0KSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBtYXRyaXgubTtcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGU6b25lLXZhcmlhYmxlLXBlci1kZWNsYXJhdGlvblxuICAgICAgICBjb25zdCBtMTEgPSBkYXRhWzBdLCBtMTIgPSBkYXRhWzRdLCBtMTMgPSBkYXRhWzhdO1xuICAgICAgICBjb25zdCBtMjEgPSBkYXRhWzFdLCBtMjIgPSBkYXRhWzVdLCBtMjMgPSBkYXRhWzldO1xuICAgICAgICBjb25zdCBtMzEgPSBkYXRhWzJdLCBtMzIgPSBkYXRhWzZdLCBtMzMgPSBkYXRhWzEwXTtcbiAgICAgICAgLy8gdHNsaW50OmVuYWJsZTpvbmUtdmFyaWFibGUtcGVyLWRlY2xhcmF0aW9uXG4gICAgICAgIGNvbnN0IHRyYWNlID0gbTExICsgbTIyICsgbTMzO1xuICAgICAgICBsZXQgcztcbiAgICAgICAgaWYgKHRyYWNlID4gMCkge1xuICAgICAgICAgICAgcyA9IDAuNSAvIE1hdGguc3FydCh0cmFjZSArIDEuMCk7XG4gICAgICAgICAgICByZXN1bHQudyA9IDAuMjUgLyBzO1xuICAgICAgICAgICAgcmVzdWx0LnggPSAobTMyIC0gbTIzKSAqIHM7XG4gICAgICAgICAgICByZXN1bHQueSA9IChtMTMgLSBtMzEpICogcztcbiAgICAgICAgICAgIHJlc3VsdC56ID0gKG0yMSAtIG0xMikgKiBzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG0xMSA+IG0yMiAmJiBtMTEgPiBtMzMpIHtcbiAgICAgICAgICAgIHMgPSAyLjAgKiBNYXRoLnNxcnQoMS4wICsgbTExIC0gbTIyIC0gbTMzKTtcbiAgICAgICAgICAgIHJlc3VsdC53ID0gKG0zMiAtIG0yMykgLyBzO1xuICAgICAgICAgICAgcmVzdWx0LnggPSAwLjI1ICogcztcbiAgICAgICAgICAgIHJlc3VsdC55ID0gKG0xMiArIG0yMSkgLyBzO1xuICAgICAgICAgICAgcmVzdWx0LnogPSAobTEzICsgbTMxKSAvIHM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobTIyID4gbTMzKSB7XG4gICAgICAgICAgICBzID0gMi4wICogTWF0aC5zcXJ0KDEuMCArIG0yMiAtIG0xMSAtIG0zMyk7XG4gICAgICAgICAgICByZXN1bHQudyA9IChtMTMgLSBtMzEpIC8gcztcbiAgICAgICAgICAgIHJlc3VsdC54ID0gKG0xMiArIG0yMSkgLyBzO1xuICAgICAgICAgICAgcmVzdWx0LnkgPSAwLjI1ICogcztcbiAgICAgICAgICAgIHJlc3VsdC56ID0gKG0yMyArIG0zMikgLyBzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcyA9IDIuMCAqIE1hdGguc3FydCgxLjAgKyBtMzMgLSBtMTEgLSBtMjIpO1xuICAgICAgICAgICAgcmVzdWx0LncgPSAobTIxIC0gbTEyKSAvIHM7XG4gICAgICAgICAgICByZXN1bHQueCA9IChtMTMgKyBtMzEpIC8gcztcbiAgICAgICAgICAgIHJlc3VsdC55ID0gKG0yMyArIG0zMikgLyBzO1xuICAgICAgICAgICAgcmVzdWx0LnogPSAwLjI1ICogcztcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBkb3QgcHJvZHVjdCAoZmxvYXQpIGJldHdlZW4gdGhlIHF1YXRlcm5pb25zIFwibGVmdFwiIGFuZCBcInJpZ2h0XCJcbiAgICAgKiBAcGFyYW0gbGVmdCAtIGRlZmluZXMgdGhlIGxlZnQgb3BlcmFuZFxuICAgICAqIEBwYXJhbSByaWdodCAtIGRlZmluZXMgdGhlIHJpZ2h0IG9wZXJhbmRcbiAgICAgKiBAcmV0dXJucyB0aGUgZG90IHByb2R1Y3RcbiAgICAgKi9cbiAgICBzdGF0aWMgRG90KGxlZnQsIHJpZ2h0KSB7XG4gICAgICAgIHJldHVybiAobGVmdC54ICogcmlnaHQueCArIGxlZnQueSAqIHJpZ2h0LnkgKyBsZWZ0LnogKiByaWdodC56ICsgbGVmdC53ICogcmlnaHQudyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGUgdHdvIHF1YXRlcm5pb25zIGFyZSBjbG9zZSB0byBlYWNoIG90aGVyXG4gICAgICogQHBhcmFtIHF1YXQwIC0gZGVmaW5lcyB0aGUgZmlyc3QgcXVhdGVybmlvbiB0byBjaGVja1xuICAgICAqIEBwYXJhbSBxdWF0MSAtIGRlZmluZXMgdGhlIHNlY29uZCBxdWF0ZXJuaW9uIHRvIGNoZWNrXG4gICAgICogQHJldHVybnMgdHJ1ZSBpZiB0aGUgdHdvIHF1YXRlcm5pb25zIGFyZSBjbG9zZSB0byBlYWNoIG90aGVyXG4gICAgICovXG4gICAgc3RhdGljIEFyZUNsb3NlKHF1YXQwLCBxdWF0MSkge1xuICAgICAgICBjb25zdCBkb3QgPSBRdWF0ZXJuaW9uLkRvdChxdWF0MCwgcXVhdDEpO1xuICAgICAgICByZXR1cm4gZG90ID49IDA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gZW1wdHkgcXVhdGVybmlvblxuICAgICAqIEByZXR1cm5zIGEgbmV3IHF1YXRlcm5pb24gc2V0IHRvICgwLjAsIDAuMCwgMC4wKVxuICAgICAqL1xuICAgIHN0YXRpYyBaZXJvKCkge1xuICAgICAgICByZXR1cm4gbmV3IFF1YXRlcm5pb24oMC4wLCAwLjAsIDAuMCwgMC4wKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW52ZXJzZSBhIGdpdmVuIHF1YXRlcm5pb25cbiAgICAgKiBAcGFyYW0gcSAtIGRlZmluZXMgdGhlIHNvdXJjZSBxdWF0ZXJuaW9uXG4gICAgICogQHJldHVybnMgYSBuZXcgcXVhdGVybmlvbiBhcyB0aGUgaW52ZXJ0ZWQgY3VycmVudCBxdWF0ZXJuaW9uXG4gICAgICovXG4gICAgc3RhdGljIEludmVyc2UocSkge1xuICAgICAgICByZXR1cm4gbmV3IFF1YXRlcm5pb24oLXEueCwgLXEueSwgLXEueiwgcS53KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyBhIGJvb2xlYW4gaW5kaWNhdGluZyBpZiB0aGUgZ2l2ZW4gcXVhdGVybmlvbiBpcyBpZGVudGl0eVxuICAgICAqIEBwYXJhbSBxdWF0ZXJuaW9uIC0gZGVmaW5lcyB0aGUgcXVhdGVybmlvbiB0byBjaGVja1xuICAgICAqIEByZXR1cm5zIHRydWUgaWYgdGhlIHF1YXRlcm5pb24gaXMgaWRlbnRpdHlcbiAgICAgKi9cbiAgICBzdGF0aWMgSXNJZGVudGl0eShxdWF0ZXJuaW9uKSB7XG4gICAgICAgIHJldHVybiAocXVhdGVybmlvbiAmJlxuICAgICAgICAgICAgcXVhdGVybmlvbi54ID09PSAwICYmXG4gICAgICAgICAgICBxdWF0ZXJuaW9uLnkgPT09IDAgJiZcbiAgICAgICAgICAgIHF1YXRlcm5pb24ueiA9PT0gMCAmJlxuICAgICAgICAgICAgcXVhdGVybmlvbi53ID09PSAxKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHF1YXRlcm5pb24gZnJvbSBhIHJvdGF0aW9uIGFyb3VuZCBhbiBheGlzXG4gICAgICogQHBhcmFtIGF4aXMgLSBkZWZpbmVzIHRoZSBheGlzIHRvIHVzZVxuICAgICAqIEBwYXJhbSBhbmdsZSAtIGRlZmluZXMgdGhlIGFuZ2xlIHRvIHVzZSAoaW4gRXVsZXIgZGVncmVlcylcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBxdWF0ZXJuaW9uIGNyZWF0ZWQgZnJvbSB0aGUgZ2l2ZW4gYXhpcyAoVmVjdG9yMykgYW5kIGFuZ2xlIGluIHJhZGlhbnMgKGZsb2F0KVxuICAgICAqL1xuICAgIHN0YXRpYyBSb3RhdGlvbkF4aXMoYXhpcywgYW5nbGUpIHtcbiAgICAgICAgY29uc3QgYW5nbGVSYWQgPSBhbmdsZSAqIHR5cGVzXzEuREVHMlJBRDtcbiAgICAgICAgcmV0dXJuIFF1YXRlcm5pb24uUm90YXRpb25BeGlzVG9SZWYoYXhpcywgYW5nbGVSYWQsIG5ldyBRdWF0ZXJuaW9uKCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgcm90YXRpb24gYXJvdW5kIGFuIGF4aXMgYW5kIHN0b3JlcyBpdCBpbnRvIHRoZSBnaXZlbiBxdWF0ZXJuaW9uXG4gICAgICogQHBhcmFtIGF4aXMgLSBkZWZpbmVzIHRoZSBheGlzIHRvIHVzZVxuICAgICAqIEBwYXJhbSBhbmdsZSAtIGRlZmluZXMgdGhlIGFuZ2xlIHRvIHVzZSAoaW4gRXVsZXIgZGVncmVlcylcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgdGFyZ2V0IHF1YXRlcm5pb25cbiAgICAgKiBAcmV0dXJucyB0aGUgdGFyZ2V0IHF1YXRlcm5pb25cbiAgICAgKi9cbiAgICBzdGF0aWMgUm90YXRpb25BeGlzVG9SZWYoYXhpcywgYW5nbGUsIHJlc3VsdCkge1xuICAgICAgICBjb25zdCBhbmdsZVJhZCA9IGFuZ2xlICogdHlwZXNfMS5ERUcyUkFEO1xuICAgICAgICBjb25zdCBzaW4gPSBNYXRoLnNpbihhbmdsZVJhZCAvIDIpO1xuICAgICAgICBheGlzLm5vcm1hbGl6ZSgpO1xuICAgICAgICByZXN1bHQudyA9IE1hdGguY29zKGFuZ2xlUmFkIC8gMik7XG4gICAgICAgIHJlc3VsdC54ID0gYXhpcy54ICogc2luO1xuICAgICAgICByZXN1bHQueSA9IGF4aXMueSAqIHNpbjtcbiAgICAgICAgcmVzdWx0LnogPSBheGlzLnogKiBzaW47XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgcXVhdGVybmlvbiBmcm9tIGRhdGEgc3RvcmVkIGludG8gYW4gYXJyYXlcbiAgICAgKiBAcGFyYW0gYXJyYXkgLSBkZWZpbmVzIHRoZSBkYXRhIHNvdXJjZVxuICAgICAqIEBwYXJhbSBvZmZzZXQgLSBkZWZpbmVzIHRoZSBvZmZzZXQgaW4gdGhlIHNvdXJjZSBhcnJheSB3aGVyZSB0aGUgZGF0YSBzdGFydHNcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBxdWF0ZXJuaW9uXG4gICAgICovXG4gICAgc3RhdGljIEZyb21BcnJheShhcnJheSwgb2Zmc2V0ID0gMCkge1xuICAgICAgICByZXR1cm4gbmV3IFF1YXRlcm5pb24oYXJyYXlbb2Zmc2V0XSwgYXJyYXlbb2Zmc2V0ICsgMV0sIGFycmF5W29mZnNldCArIDJdLCBhcnJheVtvZmZzZXQgKyAzXSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgcXVhdGVybmlvbiBmcm9tIGEgc2V0IG9mIGV1bGVyIGFuZ2xlcyBhbmQgc3RvcmVzIGl0IGluIHRoZSB0YXJnZXQgcXVhdGVybmlvblxuICAgICAqL1xuICAgIHN0YXRpYyBGcm9tRXVsZXJBbmdsZXNSZWYoeCwgeSwgeiwgcmVzdWx0KSB7XG4gICAgICAgIHJldHVybiBRdWF0ZXJuaW9uLlJvdGF0aW9uWWF3UGl0Y2hSb2xsVG9SZWYoeSAqIHR5cGVzXzEuREVHMlJBRCwgeCAqIHR5cGVzXzEuREVHMlJBRCwgeiAqIHR5cGVzXzEuREVHMlJBRCwgcmVzdWx0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBxdWF0ZXJuaW9uIGZyb20gdGhlIGdpdmVuIEV1bGVyIGZsb2F0IGFuZ2xlcyAoeSwgeCwgeilcbiAgICAgKiBAcGFyYW0geWF3IC0gZGVmaW5lcyB0aGUgcm90YXRpb24gYXJvdW5kIFkgYXhpc1xuICAgICAqIEBwYXJhbSBwaXRjaCAtIGRlZmluZXMgdGhlIHJvdGF0aW9uIGFyb3VuZCBYIGF4aXNcbiAgICAgKiBAcGFyYW0gcm9sbCAtIGRlZmluZXMgdGhlIHJvdGF0aW9uIGFyb3VuZCBaIGF4aXNcbiAgICAgKiBAcmV0dXJucyB0aGUgbmV3IHF1YXRlcm5pb25cbiAgICAgKi9cbiAgICBzdGF0aWMgUm90YXRpb25ZYXdQaXRjaFJvbGwoeWF3LCBwaXRjaCwgcm9sbCkge1xuICAgICAgICBjb25zdCBxID0gbmV3IFF1YXRlcm5pb24oKTtcbiAgICAgICAgUXVhdGVybmlvbi5Sb3RhdGlvbllhd1BpdGNoUm9sbFRvUmVmKHlhdywgcGl0Y2gsIHJvbGwsIHEpO1xuICAgICAgICByZXR1cm4gcTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyByb3RhdGlvbiBmcm9tIHRoZSBnaXZlbiBFdWxlciBmbG9hdCBhbmdsZXMgKHksIHgsIHopIGFuZCBzdG9yZXMgaXQgaW4gdGhlIHRhcmdldCBxdWF0ZXJuaW9uXG4gICAgICogQHBhcmFtIHlhdyAtIGRlZmluZXMgdGhlIHJvdGF0aW9uIGFyb3VuZCBZIGF4aXNcbiAgICAgKiBAcGFyYW0gcGl0Y2ggLSBkZWZpbmVzIHRoZSByb3RhdGlvbiBhcm91bmQgWCBheGlzXG4gICAgICogQHBhcmFtIHJvbGwgLSBkZWZpbmVzIHRoZSByb3RhdGlvbiBhcm91bmQgWiBheGlzXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIHRhcmdldCBxdWF0ZXJuaW9uXG4gICAgICovXG4gICAgc3RhdGljIFJvdGF0aW9uWWF3UGl0Y2hSb2xsVG9SZWYoeWF3LCBwaXRjaCwgcm9sbCwgcmVzdWx0KSB7XG4gICAgICAgIC8vIEltcGxlbWVudGVkIHVuaXR5LWJhc2VkIGNhbGN1bGF0aW9ucyBmcm9tOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNTYwNTU4MTNcbiAgICAgICAgY29uc3QgaGFsZlBpdGNoID0gcGl0Y2ggKiAwLjU7XG4gICAgICAgIGNvbnN0IGhhbGZZYXcgPSB5YXcgKiAwLjU7XG4gICAgICAgIGNvbnN0IGhhbGZSb2xsID0gcm9sbCAqIDAuNTtcbiAgICAgICAgY29uc3QgYzEgPSBNYXRoLmNvcyhoYWxmUGl0Y2gpO1xuICAgICAgICBjb25zdCBjMiA9IE1hdGguY29zKGhhbGZZYXcpO1xuICAgICAgICBjb25zdCBjMyA9IE1hdGguY29zKGhhbGZSb2xsKTtcbiAgICAgICAgY29uc3QgczEgPSBNYXRoLnNpbihoYWxmUGl0Y2gpO1xuICAgICAgICBjb25zdCBzMiA9IE1hdGguc2luKGhhbGZZYXcpO1xuICAgICAgICBjb25zdCBzMyA9IE1hdGguc2luKGhhbGZSb2xsKTtcbiAgICAgICAgcmVzdWx0LnggPSBjMiAqIHMxICogYzMgKyBzMiAqIGMxICogczM7XG4gICAgICAgIHJlc3VsdC55ID0gczIgKiBjMSAqIGMzIC0gYzIgKiBzMSAqIHMzO1xuICAgICAgICByZXN1bHQueiA9IGMyICogYzEgKiBzMyAtIHMyICogczEgKiBjMztcbiAgICAgICAgcmVzdWx0LncgPSBjMiAqIGMxICogYzMgKyBzMiAqIHMxICogczM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgcXVhdGVybmlvbiBmcm9tIHRoZSBnaXZlbiBFdWxlciBmbG9hdCBhbmdsZXMgZXhwcmVzc2VkIGluIHoteC16IG9yaWVudGF0aW9uXG4gICAgICogQHBhcmFtIGFscGhhIC0gZGVmaW5lcyB0aGUgcm90YXRpb24gYXJvdW5kIGZpcnN0IGF4aXNcbiAgICAgKiBAcGFyYW0gYmV0YSAtIGRlZmluZXMgdGhlIHJvdGF0aW9uIGFyb3VuZCBzZWNvbmQgYXhpc1xuICAgICAqIEBwYXJhbSBnYW1tYSAtIGRlZmluZXMgdGhlIHJvdGF0aW9uIGFyb3VuZCB0aGlyZCBheGlzXG4gICAgICogQHJldHVybnMgdGhlIG5ldyBxdWF0ZXJuaW9uXG4gICAgICovXG4gICAgc3RhdGljIFJvdGF0aW9uQWxwaGFCZXRhR2FtbWEoYWxwaGEsIGJldGEsIGdhbW1hKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBRdWF0ZXJuaW9uKCk7XG4gICAgICAgIFF1YXRlcm5pb24uUm90YXRpb25BbHBoYUJldGFHYW1tYVRvUmVmKGFscGhhLCBiZXRhLCBnYW1tYSwgcmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBxdWF0ZXJuaW9uIGZyb20gdGhlIGdpdmVuIEV1bGVyIGZsb2F0IGFuZ2xlcyBleHByZXNzZWQgaW4gei14LXogb3JpZW50YXRpb24gYW5kIHN0b3JlcyBpdCBpbiB0aGUgdGFyZ2V0IHF1YXRlcm5pb25cbiAgICAgKiBAcGFyYW0gYWxwaGEgLSBkZWZpbmVzIHRoZSByb3RhdGlvbiBhcm91bmQgZmlyc3QgYXhpc1xuICAgICAqIEBwYXJhbSBiZXRhIC0gZGVmaW5lcyB0aGUgcm90YXRpb24gYXJvdW5kIHNlY29uZCBheGlzXG4gICAgICogQHBhcmFtIGdhbW1hIC0gZGVmaW5lcyB0aGUgcm90YXRpb24gYXJvdW5kIHRoaXJkIGF4aXNcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgdGFyZ2V0IHF1YXRlcm5pb25cbiAgICAgKi9cbiAgICBzdGF0aWMgUm90YXRpb25BbHBoYUJldGFHYW1tYVRvUmVmKGFscGhhLCBiZXRhLCBnYW1tYSwgcmVzdWx0KSB7XG4gICAgICAgIC8vIFByb2R1Y2VzIGEgcXVhdGVybmlvbiBmcm9tIEV1bGVyIGFuZ2xlcyBpbiB0aGUgei14LXogb3JpZW50YXRpb25cbiAgICAgICAgY29uc3QgaGFsZkdhbW1hUGx1c0FscGhhID0gKGdhbW1hICsgYWxwaGEpICogMC41O1xuICAgICAgICBjb25zdCBoYWxmR2FtbWFNaW51c0FscGhhID0gKGdhbW1hIC0gYWxwaGEpICogMC41O1xuICAgICAgICBjb25zdCBoYWxmQmV0YSA9IGJldGEgKiAwLjU7XG4gICAgICAgIHJlc3VsdC54ID0gTWF0aC5jb3MoaGFsZkdhbW1hTWludXNBbHBoYSkgKiBNYXRoLnNpbihoYWxmQmV0YSk7XG4gICAgICAgIHJlc3VsdC55ID0gTWF0aC5zaW4oaGFsZkdhbW1hTWludXNBbHBoYSkgKiBNYXRoLnNpbihoYWxmQmV0YSk7XG4gICAgICAgIHJlc3VsdC56ID0gTWF0aC5zaW4oaGFsZkdhbW1hUGx1c0FscGhhKSAqIE1hdGguY29zKGhhbGZCZXRhKTtcbiAgICAgICAgcmVzdWx0LncgPSBNYXRoLmNvcyhoYWxmR2FtbWFQbHVzQWxwaGEpICogTWF0aC5jb3MoaGFsZkJldGEpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IHF1YXRlcm5pb24gY29udGFpbmluZyB0aGUgcm90YXRpb24gdmFsdWUgdG8gcmVhY2ggdGhlIHRhcmdldCAoYXhpczEsIGF4aXMyLCBheGlzMykgb3JpZW50YXRpb24gYXMgYSByb3RhdGVkIFhZWiBzeXN0ZW0gKGF4aXMxLCBheGlzMiBhbmQgYXhpczMgYXJlIG5vcm1hbGl6ZWQgZHVyaW5nIHRoaXMgb3BlcmF0aW9uKVxuICAgICAqIEBwYXJhbSBheGlzMSAtIGRlZmluZXMgdGhlIGZpcnN0IGF4aXNcbiAgICAgKiBAcGFyYW0gYXhpczIgLSBkZWZpbmVzIHRoZSBzZWNvbmQgYXhpc1xuICAgICAqIEBwYXJhbSBheGlzMyAtIGRlZmluZXMgdGhlIHRoaXJkIGF4aXNcbiAgICAgKiBAcmV0dXJucyB0aGUgbmV3IHF1YXRlcm5pb25cbiAgICAgKi9cbiAgICBzdGF0aWMgUm90YXRpb25RdWF0ZXJuaW9uRnJvbUF4aXMoYXhpczEsIGF4aXMyLCBheGlzMykge1xuICAgICAgICBjb25zdCBxdWF0ID0gbmV3IFF1YXRlcm5pb24oMC4wLCAwLjAsIDAuMCwgMC4wKTtcbiAgICAgICAgUXVhdGVybmlvbi5Sb3RhdGlvblF1YXRlcm5pb25Gcm9tQXhpc1RvUmVmKGF4aXMxLCBheGlzMiwgYXhpczMsIHF1YXQpO1xuICAgICAgICByZXR1cm4gcXVhdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHJvdGF0aW9uIHZhbHVlIHRvIHJlYWNoIHRoZSB0YXJnZXQgKGF4aXMxLCBheGlzMiwgYXhpczMpIG9yaWVudGF0aW9uIGFzIGEgcm90YXRlZCBYWVogc3lzdGVtIChheGlzMSwgYXhpczIgYW5kIGF4aXMzIGFyZSBub3JtYWxpemVkIGR1cmluZyB0aGlzIG9wZXJhdGlvbikgYW5kIHN0b3JlcyBpdCBpbiB0aGUgdGFyZ2V0IHF1YXRlcm5pb25cbiAgICAgKiBAcGFyYW0gYXhpczEgLSBkZWZpbmVzIHRoZSBmaXJzdCBheGlzXG4gICAgICogQHBhcmFtIGF4aXMyIC0gZGVmaW5lcyB0aGUgc2Vjb25kIGF4aXNcbiAgICAgKiBAcGFyYW0gYXhpczMgLSBkZWZpbmVzIHRoZSB0aGlyZCBheGlzXG4gICAgICogQHBhcmFtIHJlZiAtIGRlZmluZXMgdGhlIHRhcmdldCBxdWF0ZXJuaW9uXG4gICAgICovXG4gICAgc3RhdGljIFJvdGF0aW9uUXVhdGVybmlvbkZyb21BeGlzVG9SZWYoYXhpczEsIGF4aXMyLCBheGlzMywgcmVmKSB7XG4gICAgICAgIGNvbnN0IHJvdE1hdCA9IHByZWFsbG9jYXRlZFZhcmlhYmxlc18xLk1hdGhUbXAuTWF0cml4WzBdO1xuICAgICAgICBNYXRyaXhfMS5NYXRyaXguRnJvbVhZWkF4ZXNUb1JlZihheGlzMS5ub3JtYWxpemUoKSwgYXhpczIubm9ybWFsaXplKCksIGF4aXMzLm5vcm1hbGl6ZSgpLCByb3RNYXQpO1xuICAgICAgICBRdWF0ZXJuaW9uLkZyb21Sb3RhdGlvbk1hdHJpeFRvUmVmKHJvdE1hdCwgcmVmKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW50ZXJwb2xhdGVzIGJldHdlZW4gdHdvIHF1YXRlcm5pb25zXG4gICAgICogQHBhcmFtIGxlZnQgLSBkZWZpbmVzIGZpcnN0IHF1YXRlcm5pb25cbiAgICAgKiBAcGFyYW0gcmlnaHQgLSBkZWZpbmVzIHNlY29uZCBxdWF0ZXJuaW9uXG4gICAgICogQHBhcmFtIGFtb3VudCAtIGRlZmluZXMgdGhlIGdyYWRpZW50IHRvIHVzZVxuICAgICAqIEByZXR1cm5zIHRoZSBuZXcgaW50ZXJwb2xhdGVkIHF1YXRlcm5pb25cbiAgICAgKi9cbiAgICBzdGF0aWMgU2xlcnAobGVmdCwgcmlnaHQsIGFtb3VudCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBRdWF0ZXJuaW9uLklkZW50aXR5O1xuICAgICAgICBRdWF0ZXJuaW9uLlNsZXJwVG9SZWYobGVmdCwgcmlnaHQsIGFtb3VudCwgcmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW50ZXJwb2xhdGVzIGJldHdlZW4gdHdvIHF1YXRlcm5pb25zIGFuZCBzdG9yZXMgaXQgaW50byBhIHRhcmdldCBxdWF0ZXJuaW9uXG4gICAgICogQHBhcmFtIGxlZnQgLSBkZWZpbmVzIGZpcnN0IHF1YXRlcm5pb25cbiAgICAgKiBAcGFyYW0gcmlnaHQgLSBkZWZpbmVzIHNlY29uZCBxdWF0ZXJuaW9uXG4gICAgICogQHBhcmFtIGFtb3VudCAtIGRlZmluZXMgdGhlIGdyYWRpZW50IHRvIHVzZVxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSB0YXJnZXQgcXVhdGVybmlvblxuICAgICAqL1xuICAgIHN0YXRpYyBTbGVycFRvUmVmKGxlZnQsIHJpZ2h0LCBhbW91bnQsIHJlc3VsdCkge1xuICAgICAgICBsZXQgbnVtMjtcbiAgICAgICAgbGV0IG51bTM7XG4gICAgICAgIGxldCBudW00ID0gbGVmdC54ICogcmlnaHQueCArIGxlZnQueSAqIHJpZ2h0LnkgKyBsZWZ0LnogKiByaWdodC56ICsgbGVmdC53ICogcmlnaHQudztcbiAgICAgICAgbGV0IGZsYWcgPSBmYWxzZTtcbiAgICAgICAgaWYgKG51bTQgPCAwKSB7XG4gICAgICAgICAgICBmbGFnID0gdHJ1ZTtcbiAgICAgICAgICAgIG51bTQgPSAtbnVtNDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobnVtNCA+IDAuOTk5OTk5KSB7XG4gICAgICAgICAgICBudW0zID0gMSAtIGFtb3VudDtcbiAgICAgICAgICAgIG51bTIgPSBmbGFnID8gLWFtb3VudCA6IGFtb3VudDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IG51bTUgPSBNYXRoLmFjb3MobnVtNCk7XG4gICAgICAgICAgICBjb25zdCBudW02ID0gMS4wIC8gTWF0aC5zaW4obnVtNSk7XG4gICAgICAgICAgICBudW0zID0gTWF0aC5zaW4oKDEuMCAtIGFtb3VudCkgKiBudW01KSAqIG51bTY7XG4gICAgICAgICAgICBudW0yID0gZmxhZ1xuICAgICAgICAgICAgICAgID8gLU1hdGguc2luKGFtb3VudCAqIG51bTUpICogbnVtNlxuICAgICAgICAgICAgICAgIDogTWF0aC5zaW4oYW1vdW50ICogbnVtNSkgKiBudW02O1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdC54ID0gbnVtMyAqIGxlZnQueCArIG51bTIgKiByaWdodC54O1xuICAgICAgICByZXN1bHQueSA9IG51bTMgKiBsZWZ0LnkgKyBudW0yICogcmlnaHQueTtcbiAgICAgICAgcmVzdWx0LnogPSBudW0zICogbGVmdC56ICsgbnVtMiAqIHJpZ2h0Lno7XG4gICAgICAgIHJlc3VsdC53ID0gbnVtMyAqIGxlZnQudyArIG51bTIgKiByaWdodC53O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnRlcnBvbGF0ZSBiZXR3ZWVuIHR3byBxdWF0ZXJuaW9ucyB1c2luZyBIZXJtaXRlIGludGVycG9sYXRpb25cbiAgICAgKiBAcGFyYW0gdmFsdWUxIC0gZGVmaW5lcyBmaXJzdCBxdWF0ZXJuaW9uXG4gICAgICogQHBhcmFtIHRhbmdlbnQxIC0gZGVmaW5lcyB0aGUgaW5jb21pbmcgdGFuZ2VudFxuICAgICAqIEBwYXJhbSB2YWx1ZTIgLSBkZWZpbmVzIHNlY29uZCBxdWF0ZXJuaW9uXG4gICAgICogQHBhcmFtIHRhbmdlbnQyIC0gZGVmaW5lcyB0aGUgb3V0Z29pbmcgdGFuZ2VudFxuICAgICAqIEBwYXJhbSBhbW91bnQgLSBkZWZpbmVzIHRoZSB0YXJnZXQgcXVhdGVybmlvblxuICAgICAqIEByZXR1cm5zIHRoZSBuZXcgaW50ZXJwb2xhdGVkIHF1YXRlcm5pb25cbiAgICAgKi9cbiAgICBzdGF0aWMgSGVybWl0ZSh2YWx1ZTEsIHRhbmdlbnQxLCB2YWx1ZTIsIHRhbmdlbnQyLCBhbW91bnQpIHtcbiAgICAgICAgY29uc3Qgc3F1YXJlZCA9IGFtb3VudCAqIGFtb3VudDtcbiAgICAgICAgY29uc3QgY3ViZWQgPSBhbW91bnQgKiBzcXVhcmVkO1xuICAgICAgICBjb25zdCBwYXJ0MSA9IDIuMCAqIGN1YmVkIC0gMy4wICogc3F1YXJlZCArIDEuMDtcbiAgICAgICAgY29uc3QgcGFydDIgPSAtMi4wICogY3ViZWQgKyAzLjAgKiBzcXVhcmVkO1xuICAgICAgICBjb25zdCBwYXJ0MyA9IGN1YmVkIC0gMi4wICogc3F1YXJlZCArIGFtb3VudDtcbiAgICAgICAgY29uc3QgcGFydDQgPSBjdWJlZCAtIHNxdWFyZWQ7XG4gICAgICAgIGNvbnN0IHggPSB2YWx1ZTEueCAqIHBhcnQxICtcbiAgICAgICAgICAgIHZhbHVlMi54ICogcGFydDIgK1xuICAgICAgICAgICAgdGFuZ2VudDEueCAqIHBhcnQzICtcbiAgICAgICAgICAgIHRhbmdlbnQyLnggKiBwYXJ0NDtcbiAgICAgICAgY29uc3QgeSA9IHZhbHVlMS55ICogcGFydDEgK1xuICAgICAgICAgICAgdmFsdWUyLnkgKiBwYXJ0MiArXG4gICAgICAgICAgICB0YW5nZW50MS55ICogcGFydDMgK1xuICAgICAgICAgICAgdGFuZ2VudDIueSAqIHBhcnQ0O1xuICAgICAgICBjb25zdCB6ID0gdmFsdWUxLnogKiBwYXJ0MSArXG4gICAgICAgICAgICB2YWx1ZTIueiAqIHBhcnQyICtcbiAgICAgICAgICAgIHRhbmdlbnQxLnogKiBwYXJ0MyArXG4gICAgICAgICAgICB0YW5nZW50Mi56ICogcGFydDQ7XG4gICAgICAgIGNvbnN0IHcgPSB2YWx1ZTEudyAqIHBhcnQxICtcbiAgICAgICAgICAgIHZhbHVlMi53ICogcGFydDIgK1xuICAgICAgICAgICAgdGFuZ2VudDEudyAqIHBhcnQzICtcbiAgICAgICAgICAgIHRhbmdlbnQyLncgKiBwYXJ0NDtcbiAgICAgICAgcmV0dXJuIG5ldyBRdWF0ZXJuaW9uKHgsIHksIHosIHcpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGlkZW50aXR5IHF1YXRlcm5pb25cbiAgICAgKiBAcmV0dXJucyAtIHRoZSBpZGVudGl0eSBxdWF0ZXJuaW9uXG4gICAgICovXG4gICAgc3RhdGljIGdldCBJZGVudGl0eSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBRdWF0ZXJuaW9uKDAuMCwgMC4wLCAwLjAsIDEuMCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGFuZ2xlIGluIGRlZ3JlZXMgYmV0d2VlbiB0d28gcm90YXRpb25zIGEgYW5kIGIuXG4gICAgICogQHBhcmFtIHF1YXQxIC0gZGVmaW5lcyB0aGUgZmlyc3QgcXVhdGVybmlvblxuICAgICAqIEBwYXJhbSBxdWF0MiAtIGRlZmluZXMgdGhlIHNlY29uZCBxdWF0ZXJuaW9uXG4gICAgICovXG4gICAgc3RhdGljIEFuZ2xlKHF1YXQxLCBxdWF0Mikge1xuICAgICAgICBjb25zdCBkb3QgPSBRdWF0ZXJuaW9uLkRvdChxdWF0MSwgcXVhdDIpO1xuICAgICAgICByZXR1cm4gTWF0aC5hY29zKE1hdGgubWluKE1hdGguYWJzKGRvdCksIDEpKSAqIDIgKiB0eXBlc18xLlJBRDJERUc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSByb3RhdGlvbiB0aGF0IHJvdGF0ZXMgeiBkZWdyZWVzIGFyb3VuZCB0aGUgeiBheGlzLCB4IGRlZ3JlZXMgYXJvdW5kIHRoZSB4IGF4aXMsIGFuZCB5IGRlZ3JlZXMgYXJvdW5kIHRoZSB5IGF4aXMuXG4gICAgICogQHBhcmFtIHggLSB0aGUgcm90YXRpb24gb24gdGhlIHggYXhpcyBpbiBldWxlciBkZWdyZWVzXG4gICAgICogQHBhcmFtIHkgLSB0aGUgcm90YXRpb24gb24gdGhlIHkgYXhpcyBpbiBldWxlciBkZWdyZWVzXG4gICAgICogQHBhcmFtIHogLSB0aGUgcm90YXRpb24gb24gdGhlIHogYXhpcyBpbiBldWxlciBkZWdyZWVzXG4gICAgICovXG4gICAgc3RhdGljIEV1bGVyKHgsIHksIHopIHtcbiAgICAgICAgcmV0dXJuIFF1YXRlcm5pb24uUm90YXRpb25ZYXdQaXRjaFJvbGwoeSAqIHR5cGVzXzEuREVHMlJBRCwgeCAqIHR5cGVzXzEuREVHMlJBRCwgeiAqIHR5cGVzXzEuREVHMlJBRCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSByb3RhdGlvbiB3aXRoIHRoZSBzcGVjaWZpZWQgZm9yd2FyZCBhbmQgdXB3YXJkcyBkaXJlY3Rpb25zLlxuICAgICAqIEBwYXJhbSBmb3J3YXJkIC0gdGhlIGRpcmVjdGlvbiB0byBsb29rIGluXG4gICAgICogQHBhcmFtIHVwIC0gdGhlIHZlY3RvciB0aGF0IGRlZmluZXMgaW4gd2hpY2ggZGlyZWN0aW9uIHVwIGlzXG4gICAgICovXG4gICAgc3RhdGljIExvb2tSb3RhdGlvbihmb3J3YXJkLCB1cCA9IHByZWFsbG9jYXRlZFZhcmlhYmxlc18xLk1hdGhUbXAuc3RhdGljVXApIHtcbiAgICAgICAgY29uc3QgZm9yd2FyZE5ldyA9IFZlY3RvcjNfMS5WZWN0b3IzLk5vcm1hbGl6ZShmb3J3YXJkKTtcbiAgICAgICAgY29uc3QgcmlnaHQgPSBWZWN0b3IzXzEuVmVjdG9yMy5Ob3JtYWxpemUoVmVjdG9yM18xLlZlY3RvcjMuQ3Jvc3ModXAsIGZvcndhcmROZXcpKTtcbiAgICAgICAgY29uc3QgdXBOZXcgPSBWZWN0b3IzXzEuVmVjdG9yMy5Dcm9zcyhmb3J3YXJkTmV3LCByaWdodCk7XG4gICAgICAgIGNvbnN0IG0wMCA9IHJpZ2h0Lng7XG4gICAgICAgIGNvbnN0IG0wMSA9IHJpZ2h0Lnk7XG4gICAgICAgIGNvbnN0IG0wMiA9IHJpZ2h0Lno7XG4gICAgICAgIGNvbnN0IG0xMCA9IHVwTmV3Lng7XG4gICAgICAgIGNvbnN0IG0xMSA9IHVwTmV3Lnk7XG4gICAgICAgIGNvbnN0IG0xMiA9IHVwTmV3Lno7XG4gICAgICAgIGNvbnN0IG0yMCA9IGZvcndhcmROZXcueDtcbiAgICAgICAgY29uc3QgbTIxID0gZm9yd2FyZE5ldy55O1xuICAgICAgICBjb25zdCBtMjIgPSBmb3J3YXJkTmV3Lno7XG4gICAgICAgIGNvbnN0IG51bTggPSBtMDAgKyBtMTEgKyBtMjI7XG4gICAgICAgIGNvbnN0IHF1YXRlcm5pb24gPSBuZXcgUXVhdGVybmlvbigpO1xuICAgICAgICBpZiAobnVtOCA+IDApIHtcbiAgICAgICAgICAgIGxldCBudW0gPSBNYXRoLnNxcnQobnVtOCArIDEpO1xuICAgICAgICAgICAgcXVhdGVybmlvbi53ID0gbnVtICogMC41O1xuICAgICAgICAgICAgbnVtID0gMC41IC8gbnVtO1xuICAgICAgICAgICAgcXVhdGVybmlvbi54ID0gKG0xMiAtIG0yMSkgKiBudW07XG4gICAgICAgICAgICBxdWF0ZXJuaW9uLnkgPSAobTIwIC0gbTAyKSAqIG51bTtcbiAgICAgICAgICAgIHF1YXRlcm5pb24ueiA9IChtMDEgLSBtMTApICogbnVtO1xuICAgICAgICAgICAgcmV0dXJuIHF1YXRlcm5pb247XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG0wMCA+PSBtMTEgJiYgbTAwID49IG0yMikge1xuICAgICAgICAgICAgY29uc3QgbnVtNyA9IE1hdGguc3FydCgxICsgbTAwIC0gbTExIC0gbTIyKTtcbiAgICAgICAgICAgIGNvbnN0IG51bTQgPSAwLjUgLyBudW03O1xuICAgICAgICAgICAgcXVhdGVybmlvbi54ID0gMC41ICogbnVtNztcbiAgICAgICAgICAgIHF1YXRlcm5pb24ueSA9IChtMDEgKyBtMTApICogbnVtNDtcbiAgICAgICAgICAgIHF1YXRlcm5pb24ueiA9IChtMDIgKyBtMjApICogbnVtNDtcbiAgICAgICAgICAgIHF1YXRlcm5pb24udyA9IChtMTIgLSBtMjEpICogbnVtNDtcbiAgICAgICAgICAgIHJldHVybiBxdWF0ZXJuaW9uO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtMTEgPiBtMjIpIHtcbiAgICAgICAgICAgIGNvbnN0IG51bTYgPSBNYXRoLnNxcnQoMSArIG0xMSAtIG0wMCAtIG0yMik7XG4gICAgICAgICAgICBjb25zdCBudW0zID0gMC41IC8gbnVtNjtcbiAgICAgICAgICAgIHF1YXRlcm5pb24ueCA9IChtMTAgKyBtMDEpICogbnVtMztcbiAgICAgICAgICAgIHF1YXRlcm5pb24ueSA9IDAuNSAqIG51bTY7XG4gICAgICAgICAgICBxdWF0ZXJuaW9uLnogPSAobTIxICsgbTEyKSAqIG51bTM7XG4gICAgICAgICAgICBxdWF0ZXJuaW9uLncgPSAobTIwIC0gbTAyKSAqIG51bTM7XG4gICAgICAgICAgICByZXR1cm4gcXVhdGVybmlvbjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBudW01ID0gTWF0aC5zcXJ0KDEgKyBtMjIgLSBtMDAgLSBtMTEpO1xuICAgICAgICBjb25zdCBudW0yID0gMC41IC8gbnVtNTtcbiAgICAgICAgcXVhdGVybmlvbi54ID0gKG0yMCArIG0wMikgKiBudW0yO1xuICAgICAgICBxdWF0ZXJuaW9uLnkgPSAobTIxICsgbTEyKSAqIG51bTI7XG4gICAgICAgIHF1YXRlcm5pb24ueiA9IDAuNSAqIG51bTU7XG4gICAgICAgIHF1YXRlcm5pb24udyA9IChtMDEgLSBtMTApICogbnVtMjtcbiAgICAgICAgcmV0dXJuIHF1YXRlcm5pb247XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBmcm9tIHF1YXRlcm5pb24gaXMgcm90YXRlZCB0b3dhcmRzIHRvIGJ5IGFuIGFuZ3VsYXIgc3RlcCBvZiBtYXhEZWdyZWVzRGVsdGEuXG4gICAgICogQHBhcmFtIGZyb20gLSBkZWZpbmVzIHRoZSBmaXJzdCBxdWF0ZXJuaW9uXG4gICAgICogQHBhcmFtIHRvIC0gZGVmaW5lcyB0aGUgc2Vjb25kIHF1YXRlcm5pb25cbiAgICAgKiBAcGFyYW0gbWF4RGVncmVlc0RlbHRhIC0gdGhlIGludGVydmFsIHN0ZXBcbiAgICAgKi9cbiAgICBzdGF0aWMgUm90YXRlVG93YXJkcyhmcm9tLCB0bywgbWF4RGVncmVlc0RlbHRhKSB7XG4gICAgICAgIGNvbnN0IG51bSA9IFF1YXRlcm5pb24uQW5nbGUoZnJvbSwgdG8pO1xuICAgICAgICBpZiAobnVtID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdG87XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdCA9IE1hdGgubWluKDEsIG1heERlZ3JlZXNEZWx0YSAvIG51bSk7XG4gICAgICAgIHJldHVybiBRdWF0ZXJuaW9uLlNsZXJwKGZyb20sIHRvLCB0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHJvdGF0aW9uIHdoaWNoIHJvdGF0ZXMgZnJvbSBmcm9tRGlyZWN0aW9uIHRvIHRvRGlyZWN0aW9uLlxuICAgICAqIEBwYXJhbSBmcm9tIC0gZGVmaW5lcyB0aGUgZmlyc3QgZGlyZWN0aW9uIFZlY3RvclxuICAgICAqIEBwYXJhbSB0byAtIGRlZmluZXMgdGhlIHRhcmdldCBkaXJlY3Rpb24gVmVjdG9yXG4gICAgICovXG4gICAgc3RhdGljIEZyb21Ub1JvdGF0aW9uKGZyb20sIHRvLCB1cCA9IHByZWFsbG9jYXRlZFZhcmlhYmxlc18xLk1hdGhUbXAuc3RhdGljVXApIHtcbiAgICAgICAgLy8gVW5pdHktYmFzZWQgY2FsY3VsYXRpb25zIGltcGxlbWVudGVkIGZyb20gaHR0cHM6Ly9mb3J1bS51bml0eS5jb20vdGhyZWFkcy9xdWF0ZXJuaW9uLWxvb2tyb3RhdGlvbi1hcm91bmQtYW4tYXhpcy42MDg0NzAvI3Bvc3QtNDA2OTg4OFxuICAgICAgICBjb25zdCB2MCA9IGZyb20ubm9ybWFsaXplKCk7XG4gICAgICAgIGNvbnN0IHYxID0gdG8ubm9ybWFsaXplKCk7XG4gICAgICAgIGNvbnN0IGEgPSBWZWN0b3IzXzEuVmVjdG9yMy5Dcm9zcyh2MCwgdjEpO1xuICAgICAgICBjb25zdCB3ID0gTWF0aC5zcXJ0KHYwLmxlbmd0aFNxdWFyZWQoKSAqIHYxLmxlbmd0aFNxdWFyZWQoKSkgKyBWZWN0b3IzXzEuVmVjdG9yMy5Eb3QodjAsIHYxKTtcbiAgICAgICAgaWYgKGEubGVuZ3RoU3F1YXJlZCgpIDwgMC4wMDAxKSB7XG4gICAgICAgICAgICAvLyB0aGUgdmVjdG9ycyBhcmUgcGFyYWxsZWwsIGNoZWNrIHcgdG8gZmluZCBkaXJlY3Rpb25cbiAgICAgICAgICAgIC8vIGlmIHcgaXMgMCB0aGVuIHZhbHVlcyBhcmUgb3Bwb3NpdGUsIGFuZCB3ZSBzb3VsZCByb3RhdGUgMTgwIGRlZ3JlZXMgYXJvdW5kIHRoZSBzdXBwbGllZCBheGlzXG4gICAgICAgICAgICAvLyBvdGhlcndpc2UgdGhlIHZlY3RvcnMgaW4gdGhlIHNhbWUgZGlyZWN0aW9uIGFuZCBubyByb3RhdGlvbiBzaG91bGQgb2NjdXJcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmFicyh3KSA8IDAuMDAwMVxuICAgICAgICAgICAgICAgID8gbmV3IFF1YXRlcm5pb24odXAueCwgdXAueSwgdXAueiwgMCkubm9ybWFsaXplZFxuICAgICAgICAgICAgICAgIDogUXVhdGVybmlvbi5JZGVudGl0eTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUXVhdGVybmlvbihhLngsIGEueSwgYS56LCB3KS5ub3JtYWxpemVkO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoaXMgcXVhdGVybmlvbiB0byBvbmUgd2l0aCB0aGUgc2FtZSBvcmllbnRhdGlvbiBidXQgd2l0aCBhIG1hZ25pdHVkZSBvZiAxLlxuICAgICAqL1xuICAgIGdldCBub3JtYWxpemVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ub3JtYWxpemUoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHJvdGF0aW9uIHdoaWNoIHJvdGF0ZXMgZnJvbSBmcm9tRGlyZWN0aW9uIHRvIHRvRGlyZWN0aW9uLlxuICAgICAqIEBwYXJhbSBmcm9tIC0gZGVmaW5lcyB0aGUgZmlyc3QgVmVjdG9yXG4gICAgICogQHBhcmFtIHRvIC0gZGVmaW5lcyB0aGUgc2Vjb25kIFZlY3RvclxuICAgICAqIEBwYXJhbSB1cCAtIGRlZmluZXMgdGhlIGRpcmVjdGlvblxuICAgICAqL1xuICAgIHNldEZyb21Ub1JvdGF0aW9uKGZyb20sIHRvLCB1cCA9IHByZWFsbG9jYXRlZFZhcmlhYmxlc18xLk1hdGhUbXAuc3RhdGljVXApIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gUXVhdGVybmlvbi5Gcm9tVG9Sb3RhdGlvbihmcm9tLCB0bywgdXApO1xuICAgICAgICB0aGlzLnggPSByZXN1bHQueDtcbiAgICAgICAgdGhpcy55ID0gcmVzdWx0Lnk7XG4gICAgICAgIHRoaXMueiA9IHJlc3VsdC56O1xuICAgICAgICB0aGlzLncgPSByZXN1bHQudztcbiAgICB9XG4gICAgc2V0IGV1bGVyQW5nbGVzKGV1bGVyKSB7XG4gICAgICAgIHRoaXMuc2V0RXVsZXIoZXVsZXIueCwgZXVsZXIueSwgZXVsZXIueik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgZXVsZXIgYW5nbGUgcmVwcmVzZW50YXRpb24gb2YgdGhlIHJvdGF0aW9uLlxuICAgICAqIEltcGxlbWVudGVkIHVuaXR5LWJhc2VkIGNhbGN1bGF0aW9ucyBmcm9tOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNTYwNTU4MTNcbiAgICAgKi9cbiAgICBnZXQgZXVsZXJBbmdsZXMoKSB7XG4gICAgICAgIGNvbnN0IG91dCA9IG5ldyBWZWN0b3IzXzEuVmVjdG9yMygpO1xuICAgICAgICAvLyBpZiB0aGUgaW5wdXQgcXVhdGVybmlvbiBpcyBub3JtYWxpemVkLCB0aGlzIGlzIGV4YWN0bHkgb25lLiBPdGhlcndpc2UsIHRoaXMgYWN0cyBhcyBhIGNvcnJlY3Rpb24gZmFjdG9yIGZvciB0aGUgcXVhdGVybmlvbidzIG5vdC1ub3JtYWxpemVkbmVzc1xuICAgICAgICBjb25zdCB1bml0ID0gdGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55ICsgdGhpcy56ICogdGhpcy56ICsgdGhpcy53ICogdGhpcy53O1xuICAgICAgICAvLyB0aGlzIHdpbGwgaGF2ZSBhIG1hZ25pdHVkZSBvZiAwLjUgb3IgZ3JlYXRlciBpZiBhbmQgb25seSBpZiB0aGlzIGlzIGEgc2luZ3VsYXJpdHkgY2FzZVxuICAgICAgICBjb25zdCB0ZXN0ID0gdGhpcy54ICogdGhpcy53IC0gdGhpcy55ICogdGhpcy56O1xuICAgICAgICBpZiAodGVzdCA+IDAuNDk5NSAqIHVuaXQpIHtcbiAgICAgICAgICAgIC8vIHNpbmd1bGFyaXR5IGF0IG5vcnRoIHBvbGVcbiAgICAgICAgICAgIG91dC54ID0gTWF0aC5QSSAvIDI7XG4gICAgICAgICAgICBvdXQueSA9IDIgKiBNYXRoLmF0YW4yKHRoaXMueSwgdGhpcy54KTtcbiAgICAgICAgICAgIG91dC56ID0gMDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0ZXN0IDwgLTAuNDk5NSAqIHVuaXQpIHtcbiAgICAgICAgICAgIC8vIHNpbmd1bGFyaXR5IGF0IHNvdXRoIHBvbGVcbiAgICAgICAgICAgIG91dC54ID0gLU1hdGguUEkgLyAyO1xuICAgICAgICAgICAgb3V0LnkgPSAtMiAqIE1hdGguYXRhbjIodGhpcy55LCB0aGlzLngpO1xuICAgICAgICAgICAgb3V0LnogPSAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gbm8gc2luZ3VsYXJpdHkgLSB0aGlzIGlzIHRoZSBtYWpvcml0eSBvZiBjYXNlc1xuICAgICAgICAgICAgb3V0LnggPSBNYXRoLmFzaW4oMiAqICh0aGlzLncgKiB0aGlzLnggLSB0aGlzLnkgKiB0aGlzLnopKTtcbiAgICAgICAgICAgIG91dC55ID0gTWF0aC5hdGFuMigyICogdGhpcy53ICogdGhpcy55ICsgMiAqIHRoaXMueiAqIHRoaXMueCwgMSAtIDIgKiAodGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55KSk7XG4gICAgICAgICAgICBvdXQueiA9IE1hdGguYXRhbjIoMiAqIHRoaXMudyAqIHRoaXMueiArIDIgKiB0aGlzLnggKiB0aGlzLnksIDEgLSAyICogKHRoaXMueiAqIHRoaXMueiArIHRoaXMueCAqIHRoaXMueCkpO1xuICAgICAgICB9XG4gICAgICAgIG91dC54ICo9IHR5cGVzXzEuUkFEMkRFRztcbiAgICAgICAgb3V0LnkgKj0gdHlwZXNfMS5SQUQyREVHO1xuICAgICAgICBvdXQueiAqPSB0eXBlc18xLlJBRDJERUc7XG4gICAgICAgIC8vIGVuc3VyZSB0aGUgZGVncmVlIHZhbHVlcyBhcmUgYmV0d2VlbiAwIGFuZCAzNjBcbiAgICAgICAgb3V0LnggPSBTY2FsYXJfMS5TY2FsYXIuUmVwZWF0KG91dC54LCAzNjApO1xuICAgICAgICBvdXQueSA9IFNjYWxhcl8xLlNjYWxhci5SZXBlYXQob3V0LnksIDM2MCk7XG4gICAgICAgIG91dC56ID0gU2NhbGFyXzEuU2NhbGFyLlJlcGVhdChvdXQueiwgMzYwKTtcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBmb3IgdGhlIGN1cnJlbnQgcXVhdGVybmlvblxuICAgICAqIEByZXR1cm5zIGEgc3RyaW5nIHdpdGggdGhlIFF1YXRlcm5pb24gY29vcmRpbmF0ZXNcbiAgICAgKi9cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIGAoJHt0aGlzLnh9LCAke3RoaXMueX0sICR7dGhpcy56fSwgJHt0aGlzLnd9KWA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgbGVuZ3RoIG9mIGN1cnJlbnQgcXVhdGVybmlvblxuICAgICAqIEByZXR1cm5zIHRoZSBxdWF0ZXJuaW9uIGxlbmd0aCAoZmxvYXQpXG4gICAgICovXG4gICAgZ2V0IGxlbmd0aCgpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguc3FydCh0aGlzLmxlbmd0aFNxdWFyZWQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIGxlbmd0aCBvZiBjdXJyZW50IHF1YXRlcm5pb25cbiAgICAgKiBAcmV0dXJucyB0aGUgcXVhdGVybmlvbiBsZW5ndGggKGZsb2F0KVxuICAgICAqL1xuICAgIGdldCBsZW5ndGhTcXVhcmVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55ICsgdGhpcy56ICogdGhpcy56ICsgdGhpcy53ICogdGhpcy53O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBjbGFzcyBuYW1lIG9mIHRoZSBxdWF0ZXJuaW9uXG4gICAgICogQHJldHVybnMgdGhlIHN0cmluZyBcIlF1YXRlcm5pb25cIlxuICAgICAqL1xuICAgIGdldENsYXNzTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdRdWF0ZXJuaW9uJztcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyBhIGhhc2ggY29kZSBmb3IgdGhpcyBxdWF0ZXJuaW9uXG4gICAgICogQHJldHVybnMgdGhlIHF1YXRlcm5pb24gaGFzaCBjb2RlXG4gICAgICovXG4gICAgZ2V0SGFzaENvZGUoKSB7XG4gICAgICAgIGxldCBoYXNoID0gdGhpcy54IHx8IDA7XG4gICAgICAgIGhhc2ggPSAoaGFzaCAqIDM5NykgXiAodGhpcy55IHx8IDApO1xuICAgICAgICBoYXNoID0gKGhhc2ggKiAzOTcpIF4gKHRoaXMueiB8fCAwKTtcbiAgICAgICAgaGFzaCA9IChoYXNoICogMzk3KSBeICh0aGlzLncgfHwgMCk7XG4gICAgICAgIHJldHVybiBoYXNoO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb3B5IHRoZSBxdWF0ZXJuaW9uIHRvIGFuIGFycmF5XG4gICAgICogQHJldHVybnMgYSBuZXcgYXJyYXkgcG9wdWxhdGVkIHdpdGggNCBlbGVtZW50cyBmcm9tIHRoZSBxdWF0ZXJuaW9uIGNvb3JkaW5hdGVzXG4gICAgICovXG4gICAgYXNBcnJheSgpIHtcbiAgICAgICAgcmV0dXJuIFt0aGlzLngsIHRoaXMueSwgdGhpcy56LCB0aGlzLnddO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiB0d28gcXVhdGVybmlvbnMgYXJlIGVxdWFsc1xuICAgICAqIEBwYXJhbSBvdGhlclF1YXRlcm5pb24gLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEByZXR1cm5zIHRydWUgaWYgdGhlIGN1cnJlbnQgcXVhdGVybmlvbiBhbmQgdGhlIGdpdmVuIG9uZSBjb29yZGluYXRlcyBhcmUgc3RyaWN0bHkgZXF1YWxzXG4gICAgICovXG4gICAgZXF1YWxzKG90aGVyUXVhdGVybmlvbikge1xuICAgICAgICByZXR1cm4gKG90aGVyUXVhdGVybmlvbiAmJlxuICAgICAgICAgICAgdGhpcy54ID09PSBvdGhlclF1YXRlcm5pb24ueCAmJlxuICAgICAgICAgICAgdGhpcy55ID09PSBvdGhlclF1YXRlcm5pb24ueSAmJlxuICAgICAgICAgICAgdGhpcy56ID09PSBvdGhlclF1YXRlcm5pb24ueiAmJlxuICAgICAgICAgICAgdGhpcy53ID09PSBvdGhlclF1YXRlcm5pb24udyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENsb25lIHRoZSBjdXJyZW50IHF1YXRlcm5pb25cbiAgICAgKiBAcmV0dXJucyBhIG5ldyBxdWF0ZXJuaW9uIGNvcGllZCBmcm9tIHRoZSBjdXJyZW50IG9uZVxuICAgICAqL1xuICAgIGNsb25lKCkge1xuICAgICAgICByZXR1cm4gbmV3IFF1YXRlcm5pb24odGhpcy54LCB0aGlzLnksIHRoaXMueiwgdGhpcy53KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29weSBhIHF1YXRlcm5pb24gdG8gdGhlIGN1cnJlbnQgb25lXG4gICAgICogQHBhcmFtIG90aGVyIC0gZGVmaW5lcyB0aGUgb3RoZXIgcXVhdGVybmlvblxuICAgICAqIEByZXR1cm5zIHRoZSB1cGRhdGVkIGN1cnJlbnQgcXVhdGVybmlvblxuICAgICAqL1xuICAgIGNvcHlGcm9tKG90aGVyKSB7XG4gICAgICAgIHRoaXMueCA9IG90aGVyLng7XG4gICAgICAgIHRoaXMueSA9IG90aGVyLnk7XG4gICAgICAgIHRoaXMueiA9IG90aGVyLno7XG4gICAgICAgIHRoaXMudyA9IG90aGVyLnc7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBjdXJyZW50IHF1YXRlcm5pb24gd2l0aCB0aGUgZ2l2ZW4gZmxvYXQgY29vcmRpbmF0ZXNcbiAgICAgKiBAcGFyYW0geCAtIGRlZmluZXMgdGhlIHggY29vcmRpbmF0ZVxuICAgICAqIEBwYXJhbSB5IC0gZGVmaW5lcyB0aGUgeSBjb29yZGluYXRlXG4gICAgICogQHBhcmFtIHogLSBkZWZpbmVzIHRoZSB6IGNvb3JkaW5hdGVcbiAgICAgKiBAcGFyYW0gdyAtIGRlZmluZXMgdGhlIHcgY29vcmRpbmF0ZVxuICAgICAqIEByZXR1cm5zIHRoZSB1cGRhdGVkIGN1cnJlbnQgcXVhdGVybmlvblxuICAgICAqL1xuICAgIGNvcHlGcm9tRmxvYXRzKHgsIHksIHosIHcpIHtcbiAgICAgICAgdGhpcy54ID0geDtcbiAgICAgICAgdGhpcy55ID0geTtcbiAgICAgICAgdGhpcy56ID0gejtcbiAgICAgICAgdGhpcy53ID0gdztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGN1cnJlbnQgcXVhdGVybmlvbiBmcm9tIHRoZSBnaXZlbiBmbG9hdCBjb29yZGluYXRlc1xuICAgICAqIEBwYXJhbSB4IC0gZGVmaW5lcyB0aGUgeCBjb29yZGluYXRlXG4gICAgICogQHBhcmFtIHkgLSBkZWZpbmVzIHRoZSB5IGNvb3JkaW5hdGVcbiAgICAgKiBAcGFyYW0geiAtIGRlZmluZXMgdGhlIHogY29vcmRpbmF0ZVxuICAgICAqIEBwYXJhbSB3IC0gZGVmaW5lcyB0aGUgdyBjb29yZGluYXRlXG4gICAgICogQHJldHVybnMgdGhlIHVwZGF0ZWQgY3VycmVudCBxdWF0ZXJuaW9uXG4gICAgICovXG4gICAgc2V0KHgsIHksIHosIHcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29weUZyb21GbG9hdHMoeCwgeSwgeiwgdyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGN1cnJlbnQgcXVhdGVybmlvbiBmcm9tIHRoZSBnaXZlbiBldWxlciBhbmdsZXNcbiAgICAgKiBAcmV0dXJucyB0aGUgdXBkYXRlZCBjdXJyZW50IHF1YXRlcm5pb25cbiAgICAgKi9cbiAgICBzZXRFdWxlcih4LCB5LCB6KSB7XG4gICAgICAgIFF1YXRlcm5pb24uUm90YXRpb25ZYXdQaXRjaFJvbGxUb1JlZih5ICogdHlwZXNfMS5ERUcyUkFELCB4ICogdHlwZXNfMS5ERUcyUkFELCB6ICogdHlwZXNfMS5ERUcyUkFELCB0aGlzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqIEFkZHMgdHdvIHF1YXRlcm5pb25zXG4gICAgICogQHBhcmFtIG90aGVyIC0gZGVmaW5lcyB0aGUgc2Vjb25kIG9wZXJhbmRcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBxdWF0ZXJuaW9uIGFzIHRoZSBhZGRpdGlvbiByZXN1bHQgb2YgdGhlIGdpdmVuIG9uZSBhbmQgdGhlIGN1cnJlbnQgcXVhdGVybmlvblxuICAgICAqL1xuICAgIGFkZChvdGhlcikge1xuICAgICAgICByZXR1cm4gbmV3IFF1YXRlcm5pb24odGhpcy54ICsgb3RoZXIueCwgdGhpcy55ICsgb3RoZXIueSwgdGhpcy56ICsgb3RoZXIueiwgdGhpcy53ICsgb3RoZXIudyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqIEFkZCBhIHF1YXRlcm5pb24gdG8gdGhlIGN1cnJlbnQgb25lXG4gICAgICogQHBhcmFtIG90aGVyIC0gZGVmaW5lcyB0aGUgcXVhdGVybmlvbiB0byBhZGRcbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCBxdWF0ZXJuaW9uXG4gICAgICovXG4gICAgYWRkSW5QbGFjZShvdGhlcikge1xuICAgICAgICB0aGlzLnggKz0gb3RoZXIueDtcbiAgICAgICAgdGhpcy55ICs9IG90aGVyLnk7XG4gICAgICAgIHRoaXMueiArPSBvdGhlci56O1xuICAgICAgICB0aGlzLncgKz0gb3RoZXIudztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN1YnRyYWN0IHR3byBxdWF0ZXJuaW9uc1xuICAgICAqIEBwYXJhbSBvdGhlciAtIGRlZmluZXMgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAgICogQHJldHVybnMgYSBuZXcgcXVhdGVybmlvbiBhcyB0aGUgc3VidHJhY3Rpb24gcmVzdWx0IG9mIHRoZSBnaXZlbiBvbmUgZnJvbSB0aGUgY3VycmVudCBvbmVcbiAgICAgKi9cbiAgICBzdWJ0cmFjdChvdGhlcikge1xuICAgICAgICByZXR1cm4gbmV3IFF1YXRlcm5pb24odGhpcy54IC0gb3RoZXIueCwgdGhpcy55IC0gb3RoZXIueSwgdGhpcy56IC0gb3RoZXIueiwgdGhpcy53IC0gb3RoZXIudyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE11bHRpcGxpZXMgdGhlIGN1cnJlbnQgcXVhdGVybmlvbiBieSBhIHNjYWxlIGZhY3RvclxuICAgICAqIEBwYXJhbSB2YWx1ZSAtIGRlZmluZXMgdGhlIHNjYWxlIGZhY3RvclxuICAgICAqIEByZXR1cm5zIGEgbmV3IHF1YXRlcm5pb24gc2V0IGJ5IG11bHRpcGx5aW5nIHRoZSBjdXJyZW50IHF1YXRlcm5pb24gY29vcmRpbmF0ZXMgYnkgdGhlIGZsb2F0IFwic2NhbGVcIlxuICAgICAqL1xuICAgIHNjYWxlKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBuZXcgUXVhdGVybmlvbih0aGlzLnggKiB2YWx1ZSwgdGhpcy55ICogdmFsdWUsIHRoaXMueiAqIHZhbHVlLCB0aGlzLncgKiB2YWx1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNjYWxlIHRoZSBjdXJyZW50IHF1YXRlcm5pb24gdmFsdWVzIGJ5IGEgZmFjdG9yIGFuZCBzdG9yZXMgdGhlIHJlc3VsdCB0byBhIGdpdmVuIHF1YXRlcm5pb25cbiAgICAgKiBAcGFyYW0gc2NhbGUgLSBkZWZpbmVzIHRoZSBzY2FsZSBmYWN0b3JcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgUXVhdGVybmlvbiBvYmplY3Qgd2hlcmUgdG8gc3RvcmUgdGhlIHJlc3VsdFxuICAgICAqIEByZXR1cm5zIHRoZSB1bm1vZGlmaWVkIGN1cnJlbnQgcXVhdGVybmlvblxuICAgICAqL1xuICAgIHNjYWxlVG9SZWYoc2NhbGUsIHJlc3VsdCkge1xuICAgICAgICByZXN1bHQueCA9IHRoaXMueCAqIHNjYWxlO1xuICAgICAgICByZXN1bHQueSA9IHRoaXMueSAqIHNjYWxlO1xuICAgICAgICByZXN1bHQueiA9IHRoaXMueiAqIHNjYWxlO1xuICAgICAgICByZXN1bHQudyA9IHRoaXMudyAqIHNjYWxlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogTXVsdGlwbGllcyBpbiBwbGFjZSB0aGUgY3VycmVudCBxdWF0ZXJuaW9uIGJ5IGEgc2NhbGUgZmFjdG9yXG4gICAgICogQHBhcmFtIHZhbHVlIC0gZGVmaW5lcyB0aGUgc2NhbGUgZmFjdG9yXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgbW9kaWZpZWQgcXVhdGVybmlvblxuICAgICAqL1xuICAgIHNjYWxlSW5QbGFjZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLnggKj0gdmFsdWU7XG4gICAgICAgIHRoaXMueSAqPSB2YWx1ZTtcbiAgICAgICAgdGhpcy56ICo9IHZhbHVlO1xuICAgICAgICB0aGlzLncgKj0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTY2FsZSB0aGUgY3VycmVudCBxdWF0ZXJuaW9uIHZhbHVlcyBieSBhIGZhY3RvciBhbmQgYWRkIHRoZSByZXN1bHQgdG8gYSBnaXZlbiBxdWF0ZXJuaW9uXG4gICAgICogQHBhcmFtIHNjYWxlIC0gZGVmaW5lcyB0aGUgc2NhbGUgZmFjdG9yXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIFF1YXRlcm5pb24gb2JqZWN0IHdoZXJlIHRvIHN0b3JlIHRoZSByZXN1bHRcbiAgICAgKiBAcmV0dXJucyB0aGUgdW5tb2RpZmllZCBjdXJyZW50IHF1YXRlcm5pb25cbiAgICAgKi9cbiAgICBzY2FsZUFuZEFkZFRvUmVmKHNjYWxlLCByZXN1bHQpIHtcbiAgICAgICAgcmVzdWx0LnggKz0gdGhpcy54ICogc2NhbGU7XG4gICAgICAgIHJlc3VsdC55ICs9IHRoaXMueSAqIHNjYWxlO1xuICAgICAgICByZXN1bHQueiArPSB0aGlzLnogKiBzY2FsZTtcbiAgICAgICAgcmVzdWx0LncgKz0gdGhpcy53ICogc2NhbGU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNdWx0aXBsaWVzIHR3byBxdWF0ZXJuaW9uc1xuICAgICAqIEBwYXJhbSBxMSAtIGRlZmluZXMgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAgICogQHJldHVybnMgYSBuZXcgcXVhdGVybmlvbiBzZXQgYXMgdGhlIG11bHRpcGxpY2F0aW9uIHJlc3VsdCBvZiB0aGUgY3VycmVudCBvbmUgd2l0aCB0aGUgZ2l2ZW4gb25lIFwicTFcIlxuICAgICAqL1xuICAgIG11bHRpcGx5KHExKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBRdWF0ZXJuaW9uKDAsIDAsIDAsIDEuMCk7XG4gICAgICAgIHRoaXMubXVsdGlwbHlUb1JlZihxMSwgcmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZ2l2ZW4gXCJyZXN1bHRcIiBhcyB0aGUgdGhlIG11bHRpcGxpY2F0aW9uIHJlc3VsdCBvZiB0aGUgY3VycmVudCBvbmUgd2l0aCB0aGUgZ2l2ZW4gb25lIFwicTFcIlxuICAgICAqIEBwYXJhbSBxMSAtIGRlZmluZXMgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIHRhcmdldCBxdWF0ZXJuaW9uXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgcXVhdGVybmlvblxuICAgICAqL1xuICAgIG11bHRpcGx5VG9SZWYocTEsIHJlc3VsdCkge1xuICAgICAgICBjb25zdCB4ID0gdGhpcy54ICogcTEudyArIHRoaXMueSAqIHExLnogLSB0aGlzLnogKiBxMS55ICsgdGhpcy53ICogcTEueDtcbiAgICAgICAgY29uc3QgeSA9IC10aGlzLnggKiBxMS56ICsgdGhpcy55ICogcTEudyArIHRoaXMueiAqIHExLnggKyB0aGlzLncgKiBxMS55O1xuICAgICAgICBjb25zdCB6ID0gdGhpcy54ICogcTEueSAtIHRoaXMueSAqIHExLnggKyB0aGlzLnogKiBxMS53ICsgdGhpcy53ICogcTEuejtcbiAgICAgICAgY29uc3QgdyA9IC10aGlzLnggKiBxMS54IC0gdGhpcy55ICogcTEueSAtIHRoaXMueiAqIHExLnogKyB0aGlzLncgKiBxMS53O1xuICAgICAgICByZXN1bHQuY29weUZyb21GbG9hdHMoeCwgeSwgeiwgdyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBjdXJyZW50IHF1YXRlcm5pb24gd2l0aCB0aGUgbXVsdGlwbGljYXRpb24gb2YgaXRzZWxmIHdpdGggdGhlIGdpdmVuIG9uZSBcInExXCJcbiAgICAgKiBAcGFyYW0gcTEgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50dXBkYXRlZCBxdWF0ZXJuaW9uXG4gICAgICovXG4gICAgbXVsdGlwbHlJblBsYWNlKHExKSB7XG4gICAgICAgIHRoaXMubXVsdGlwbHlUb1JlZihxMSwgdGhpcyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb25qdWdhdGVzICgxLXEpIHRoZSBjdXJyZW50IHF1YXRlcm5pb24gYW5kIHN0b3JlcyB0aGUgcmVzdWx0IGluIHRoZSBnaXZlbiBxdWF0ZXJuaW9uXG4gICAgICogQHBhcmFtIHJlZiAtIGRlZmluZXMgdGhlIHRhcmdldCBxdWF0ZXJuaW9uXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgcXVhdGVybmlvblxuICAgICAqL1xuICAgIGNvbmp1Z2F0ZVRvUmVmKHJlZikge1xuICAgICAgICByZWYuY29weUZyb21GbG9hdHMoLXRoaXMueCwgLXRoaXMueSwgLXRoaXMueiwgdGhpcy53KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbmp1Z2F0ZXMgaW4gcGxhY2UgKDEtcSkgdGhlIGN1cnJlbnQgcXVhdGVybmlvblxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IHVwZGF0ZWQgcXVhdGVybmlvblxuICAgICAqL1xuICAgIGNvbmp1Z2F0ZUluUGxhY2UoKSB7XG4gICAgICAgIHRoaXMueCAqPSAtMTtcbiAgICAgICAgdGhpcy55ICo9IC0xO1xuICAgICAgICB0aGlzLnogKj0gLTE7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb25qdWdhdGVzIGluIHBsYWNlICgxLXEpIHRoZSBjdXJyZW50IHF1YXRlcm5pb25cbiAgICAgKiBAcmV0dXJucyBhIG5ldyBxdWF0ZXJuaW9uXG4gICAgICovXG4gICAgY29uanVnYXRlKCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgUXVhdGVybmlvbigtdGhpcy54LCAtdGhpcy55LCAtdGhpcy56LCB0aGlzLncpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBOb3JtYWxpemUgaW4gcGxhY2UgdGhlIGN1cnJlbnQgcXVhdGVybmlvblxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IHVwZGF0ZWQgcXVhdGVybmlvblxuICAgICAqL1xuICAgIG5vcm1hbGl6ZSgpIHtcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gMS4wIC8gdGhpcy5sZW5ndGg7XG4gICAgICAgIHRoaXMueCAqPSBsZW5ndGg7XG4gICAgICAgIHRoaXMueSAqPSBsZW5ndGg7XG4gICAgICAgIHRoaXMueiAqPSBsZW5ndGg7XG4gICAgICAgIHRoaXMudyAqPSBsZW5ndGg7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBhbmdsZUF4aXMoZGVncmVzcywgYXhpcykge1xuICAgICAgICBpZiAoYXhpcy5sZW5ndGhTcXVhcmVkKCkgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBRdWF0ZXJuaW9uLklkZW50aXR5O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFF1YXRlcm5pb24uSWRlbnRpdHk7XG4gICAgICAgIGxldCByYWRpYW5zID0gZGVncmVzcyAqIHR5cGVzXzEuREVHMlJBRDtcbiAgICAgICAgcmFkaWFucyAqPSAwLjU7XG4gICAgICAgIGxldCBhMiA9IGF4aXMubm9ybWFsaXplKCk7XG4gICAgICAgIGEyID0gYXhpcy5zY2FsZUluUGxhY2UoTWF0aC5zaW4ocmFkaWFucykpO1xuICAgICAgICByZXN1bHQueCA9IGEyLng7XG4gICAgICAgIHJlc3VsdC55ID0gYTIueTtcbiAgICAgICAgcmVzdWx0LnogPSBhMi56O1xuICAgICAgICByZXN1bHQudyA9IE1hdGguY29zKHJhZGlhbnMpO1xuICAgICAgICByZXR1cm4gcmVzdWx0Lm5vcm1hbGl6ZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBnaXZlbiByb3RhdGlvbiBtYXRyaXggd2l0aCB0aGUgY3VycmVudCBxdWF0ZXJuaW9uIHZhbHVlc1xuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSB0YXJnZXQgbWF0cml4XG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgdW5jaGFuZ2VkIHF1YXRlcm5pb25cbiAgICAgKi9cbiAgICB0b1JvdGF0aW9uTWF0cml4KHJlc3VsdCkge1xuICAgICAgICBNYXRyaXhfMS5NYXRyaXguRnJvbVF1YXRlcm5pb25Ub1JlZih0aGlzLCByZXN1bHQpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgY3VycmVudCBxdWF0ZXJuaW9uIGZyb20gdGhlIGdpdmVuIHJvdGF0aW9uIG1hdHJpeCB2YWx1ZXNcbiAgICAgKiBAcGFyYW0gbWF0cml4IC0gZGVmaW5lcyB0aGUgc291cmNlIG1hdHJpeFxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IHVwZGF0ZWQgcXVhdGVybmlvblxuICAgICAqL1xuICAgIGZyb21Sb3RhdGlvbk1hdHJpeChtYXRyaXgpIHtcbiAgICAgICAgUXVhdGVybmlvbi5Gcm9tUm90YXRpb25NYXRyaXhUb1JlZihtYXRyaXgsIHRoaXMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG5leHBvcnRzLlF1YXRlcm5pb24gPSBRdWF0ZXJuaW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UXVhdGVybmlvbi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVmVjdG9yMyA9IHZvaWQgMDtcbmNvbnN0IHByZWFsbG9jYXRlZFZhcmlhYmxlc18xID0gcmVxdWlyZShcIi4vcHJlYWxsb2NhdGVkVmFyaWFibGVzXCIpO1xuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCIuL3R5cGVzXCIpO1xuY29uc3QgUXVhdGVybmlvbl8xID0gcmVxdWlyZShcIi4vUXVhdGVybmlvblwiKTtcbmNvbnN0IFNjYWxhcl8xID0gcmVxdWlyZShcIi4vU2NhbGFyXCIpO1xuLyoqXG4gKiBDbGFzc2VkIHVzZWQgdG8gc3RvcmUgKHgseSx6KSB2ZWN0b3IgcmVwcmVzZW50YXRpb25cbiAqIEEgVmVjdG9yMyBpcyB0aGUgbWFpbiBvYmplY3QgdXNlZCBpbiAzRCBnZW9tZXRyeVxuICogSXQgY2FuIHJlcHJlc2VudCBldGloZXIgdGhlIGNvb3JkaW5hdGVzIG9mIGEgcG9pbnQgdGhlIHNwYWNlLCBlaXRoZXIgYSBkaXJlY3Rpb25cbiAqIFJlbWluZGVyOiBCYWJ5bG9uLmpzIHVzZXMgYSBsZWZ0IGhhbmRlZCBmb3J3YXJkIGZhY2luZyBzeXN0ZW1cbiAqIEBwdWJsaWNcbiAqL1xuY2xhc3MgVmVjdG9yMyB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBWZWN0b3IzIG9iamVjdCBmcm9tIHRoZSBnaXZlbiB4LCB5LCB6IChmbG9hdHMpIGNvb3JkaW5hdGVzLlxuICAgICAqIEBwYXJhbSB4IC0gZGVmaW5lcyB0aGUgZmlyc3QgY29vcmRpbmF0ZXMgKG9uIFggYXhpcylcbiAgICAgKiBAcGFyYW0geSAtIGRlZmluZXMgdGhlIHNlY29uZCBjb29yZGluYXRlcyAob24gWSBheGlzKVxuICAgICAqIEBwYXJhbSB6IC0gZGVmaW5lcyB0aGUgdGhpcmQgY29vcmRpbmF0ZXMgKG9uIFogYXhpcylcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBmaXJzdCBjb29yZGluYXRlcyAob24gWCBheGlzKVxuICAgICAqL1xuICAgIHggPSAwLCBcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBzZWNvbmQgY29vcmRpbmF0ZXMgKG9uIFkgYXhpcylcbiAgICAgKi9cbiAgICB5ID0gMCwgXG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgdGhpcmQgY29vcmRpbmF0ZXMgKG9uIFogYXhpcylcbiAgICAgKi9cbiAgICB6ID0gMCkge1xuICAgICAgICB0aGlzLnggPSB4O1xuICAgICAgICB0aGlzLnkgPSB5O1xuICAgICAgICB0aGlzLnogPSB6O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgYm9vbGVhbiBpbmRpY2F0aW5nIHRoYXQgdGhlIHZlY3RvciBpcyBub24gdW5pZm9ybSBtZWFuaW5nIHgsIHkgb3IgeiBhcmUgbm90IGFsbCB0aGUgc2FtZVxuICAgICAqL1xuICAgIGdldCBpc05vblVuaWZvcm0oKSB7XG4gICAgICAgIGNvbnN0IGFic1ggPSBNYXRoLmFicyh0aGlzLngpO1xuICAgICAgICBjb25zdCBhYnNZID0gTWF0aC5hYnModGhpcy55KTtcbiAgICAgICAgaWYgKGFic1ggIT09IGFic1kpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFic1ogPSBNYXRoLmFicyh0aGlzLnopO1xuICAgICAgICBpZiAoYWJzWCAhPT0gYWJzWikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFic1kgIT09IGFic1opIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gU3RhdGljc1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBhcyB0aGUgcmVzdWx0IG9mIHRoZSBhZGRpdGlvbiBvZiB0aGUgdHdvIGdpdmVuIHZlY3RvcnMuXG4gICAgICogQHBhcmFtIHZlY3RvcjEgLSB0aGUgZmlyc3QgdmVjdG9yXG4gICAgICogQHBhcmFtIHZlY3RvcjIgLSB0aGUgc2Vjb25kIHZlY3RvclxuICAgICAqIEByZXR1cm5zIHRoZSByZXN1bHRpbmcgdmVjdG9yXG4gICAgICovXG4gICAgc3RhdGljIEFkZCh2ZWN0b3IxLCB2ZWN0b3IyKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMyh2ZWN0b3IxLngsIHZlY3RvcjEueSwgdmVjdG9yMS56KS5hZGRJblBsYWNlKHZlY3RvcjIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGNsaXAgZmFjdG9yIGJldHdlZW4gdHdvIHZlY3RvcnNcbiAgICAgKiBAcGFyYW0gdmVjdG9yMCAtIGRlZmluZXMgdGhlIGZpcnN0IG9wZXJhbmRcbiAgICAgKiBAcGFyYW0gdmVjdG9yMSAtIGRlZmluZXMgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAgICogQHBhcmFtIGF4aXMgLSBkZWZpbmVzIHRoZSBheGlzIHRvIHVzZVxuICAgICAqIEBwYXJhbSBzaXplIC0gZGVmaW5lcyB0aGUgc2l6ZSBhbG9uZyB0aGUgYXhpc1xuICAgICAqIEByZXR1cm5zIHRoZSBjbGlwIGZhY3RvclxuICAgICAqL1xuICAgIHN0YXRpYyBHZXRDbGlwRmFjdG9yKHZlY3RvcjAsIHZlY3RvcjEsIGF4aXMsIHNpemUpIHtcbiAgICAgICAgY29uc3QgZDAgPSBWZWN0b3IzLkRvdCh2ZWN0b3IwLCBheGlzKSAtIHNpemU7XG4gICAgICAgIGNvbnN0IGQxID0gVmVjdG9yMy5Eb3QodmVjdG9yMSwgYXhpcykgLSBzaXplO1xuICAgICAgICBjb25zdCBzID0gZDAgLyAoZDAgLSBkMSk7XG4gICAgICAgIHJldHVybiBzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgYW5nbGUgYmV0d2VlbiB0d28gdmVjdG9yc1xuICAgICAqIEBwYXJhbSB2ZWN0b3IwIC0gYW5nbGUgYmV0d2VlbiB2ZWN0b3IwIGFuZCB2ZWN0b3IxXG4gICAgICogQHBhcmFtIHZlY3RvcjEgLSBhbmdsZSBiZXR3ZWVuIHZlY3RvcjAgYW5kIHZlY3RvcjFcbiAgICAgKiBAcGFyYW0gbm9ybWFsIC0gZGlyZWN0aW9uIG9mIHRoZSBub3JtYWxcbiAgICAgKiBAcmV0dXJucyB0aGUgYW5nbGUgYmV0d2VlbiB2ZWN0b3IwIGFuZCB2ZWN0b3IxXG4gICAgICovXG4gICAgc3RhdGljIEdldEFuZ2xlQmV0d2VlblZlY3RvcnModmVjdG9yMCwgdmVjdG9yMSwgbm9ybWFsKSB7XG4gICAgICAgIGNvbnN0IHYwID0gdmVjdG9yMC5ub3JtYWxpemVUb1JlZihwcmVhbGxvY2F0ZWRWYXJpYWJsZXNfMS5NYXRoVG1wLlZlY3RvcjNbMV0pO1xuICAgICAgICBjb25zdCB2MSA9IHZlY3RvcjEubm9ybWFsaXplVG9SZWYocHJlYWxsb2NhdGVkVmFyaWFibGVzXzEuTWF0aFRtcC5WZWN0b3IzWzJdKTtcbiAgICAgICAgY29uc3QgZG90ID0gVmVjdG9yMy5Eb3QodjAsIHYxKTtcbiAgICAgICAgY29uc3QgbiA9IHByZWFsbG9jYXRlZFZhcmlhYmxlc18xLk1hdGhUbXAuVmVjdG9yM1szXTtcbiAgICAgICAgVmVjdG9yMy5Dcm9zc1RvUmVmKHYwLCB2MSwgbik7XG4gICAgICAgIGlmIChWZWN0b3IzLkRvdChuLCBub3JtYWwpID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGguYWNvcyhkb3QpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAtTWF0aC5hY29zKGRvdCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBzZXQgZnJvbSB0aGUgaW5kZXggXCJvZmZzZXRcIiBvZiB0aGUgZ2l2ZW4gYXJyYXlcbiAgICAgKiBAcGFyYW0gYXJyYXkgLSBkZWZpbmVzIHRoZSBzb3VyY2UgYXJyYXlcbiAgICAgKiBAcGFyYW0gb2Zmc2V0IC0gZGVmaW5lcyB0aGUgb2Zmc2V0IGluIHRoZSBzb3VyY2UgYXJyYXlcbiAgICAgKiBAcmV0dXJucyB0aGUgbmV3IFZlY3RvcjNcbiAgICAgKi9cbiAgICBzdGF0aWMgRnJvbUFycmF5KGFycmF5LCBvZmZzZXQgPSAwKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMyhhcnJheVtvZmZzZXRdLCBhcnJheVtvZmZzZXQgKyAxXSwgYXJyYXlbb2Zmc2V0ICsgMl0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IFZlY3RvcjMgc2V0IGZyb20gdGhlIGluZGV4IFwib2Zmc2V0XCIgb2YgdGhlIGdpdmVuIEZsb2F0QXJyYXlcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGRlcHJlY2F0ZWQuICBVc2UgRnJvbUFycmF5IGluc3RlYWRcbiAgICAgKiBAcGFyYW0gYXJyYXkgLSBkZWZpbmVzIHRoZSBzb3VyY2UgYXJyYXlcbiAgICAgKiBAcGFyYW0gb2Zmc2V0IC0gZGVmaW5lcyB0aGUgb2Zmc2V0IGluIHRoZSBzb3VyY2UgYXJyYXlcbiAgICAgKiBAcmV0dXJucyB0aGUgbmV3IFZlY3RvcjNcbiAgICAgKi9cbiAgICBzdGF0aWMgRnJvbUZsb2F0QXJyYXkoYXJyYXksIG9mZnNldCkge1xuICAgICAgICByZXR1cm4gVmVjdG9yMy5Gcm9tQXJyYXkoYXJyYXksIG9mZnNldCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGdpdmVuIHZlY3RvciBcInJlc3VsdFwiIHdpdGggdGhlIGVsZW1lbnQgdmFsdWVzIGZyb20gdGhlIGluZGV4IFwib2Zmc2V0XCIgb2YgdGhlIGdpdmVuIGFycmF5XG4gICAgICogQHBhcmFtIGFycmF5IC0gZGVmaW5lcyB0aGUgc291cmNlIGFycmF5XG4gICAgICogQHBhcmFtIG9mZnNldCAtIGRlZmluZXMgdGhlIG9mZnNldCBpbiB0aGUgc291cmNlIGFycmF5XG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIFZlY3RvcjMgd2hlcmUgdG8gc3RvcmUgdGhlIHJlc3VsdFxuICAgICAqL1xuICAgIHN0YXRpYyBGcm9tQXJyYXlUb1JlZihhcnJheSwgb2Zmc2V0LCByZXN1bHQpIHtcbiAgICAgICAgcmVzdWx0LnggPSBhcnJheVtvZmZzZXRdO1xuICAgICAgICByZXN1bHQueSA9IGFycmF5W29mZnNldCArIDFdO1xuICAgICAgICByZXN1bHQueiA9IGFycmF5W29mZnNldCArIDJdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBnaXZlbiB2ZWN0b3IgXCJyZXN1bHRcIiB3aXRoIHRoZSBlbGVtZW50IHZhbHVlcyBmcm9tIHRoZSBpbmRleCBcIm9mZnNldFwiIG9mIHRoZSBnaXZlbiBGbG9hdEFycmF5XG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBkZXByZWNhdGVkLiAgVXNlIEZyb21BcnJheVRvUmVmIGluc3RlYWQuXG4gICAgICogQHBhcmFtIGFycmF5IC0gZGVmaW5lcyB0aGUgc291cmNlIGFycmF5XG4gICAgICogQHBhcmFtIG9mZnNldCAtIGRlZmluZXMgdGhlIG9mZnNldCBpbiB0aGUgc291cmNlIGFycmF5XG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIFZlY3RvcjMgd2hlcmUgdG8gc3RvcmUgdGhlIHJlc3VsdFxuICAgICAqL1xuICAgIHN0YXRpYyBGcm9tRmxvYXRBcnJheVRvUmVmKGFycmF5LCBvZmZzZXQsIHJlc3VsdCkge1xuICAgICAgICByZXR1cm4gVmVjdG9yMy5Gcm9tQXJyYXlUb1JlZihhcnJheSwgb2Zmc2V0LCByZXN1bHQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBnaXZlbiB2ZWN0b3IgXCJyZXN1bHRcIiB3aXRoIHRoZSBnaXZlbiBmbG9hdHMuXG4gICAgICogQHBhcmFtIHggLSBkZWZpbmVzIHRoZSB4IGNvb3JkaW5hdGUgb2YgdGhlIHNvdXJjZVxuICAgICAqIEBwYXJhbSB5IC0gZGVmaW5lcyB0aGUgeSBjb29yZGluYXRlIG9mIHRoZSBzb3VyY2VcbiAgICAgKiBAcGFyYW0geiAtIGRlZmluZXMgdGhlIHogY29vcmRpbmF0ZSBvZiB0aGUgc291cmNlXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIFZlY3RvcjMgd2hlcmUgdG8gc3RvcmUgdGhlIHJlc3VsdFxuICAgICAqL1xuICAgIHN0YXRpYyBGcm9tRmxvYXRzVG9SZWYoeCwgeSwgeiwgcmVzdWx0KSB7XG4gICAgICAgIHJlc3VsdC5jb3B5RnJvbUZsb2F0cyh4LCB5LCB6KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBWZWN0b3IzIHNldCB0byAoMC4wLCAwLjAsIDAuMClcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBlbXB0eSBWZWN0b3IzXG4gICAgICovXG4gICAgc3RhdGljIFplcm8oKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMygwLjAsIDAuMCwgMC4wKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBWZWN0b3IzIHNldCB0byAoMS4wLCAxLjAsIDEuMClcbiAgICAgKiBAcmV0dXJucyBhIG5ldyB1bml0IFZlY3RvcjNcbiAgICAgKi9cbiAgICBzdGF0aWMgT25lKCkge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjMoMS4wLCAxLjAsIDEuMCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBzZXQgdG8gKDAuMCwgMS4wLCAwLjApXG4gICAgICogQHJldHVybnMgYSBuZXcgdXAgVmVjdG9yM1xuICAgICAqL1xuICAgIHN0YXRpYyBVcCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IzKDAuMCwgMS4wLCAwLjApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IFZlY3RvcjMgc2V0IHRvICgwLjAsIC0xLjAsIDAuMClcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBkb3duIFZlY3RvcjNcbiAgICAgKi9cbiAgICBzdGF0aWMgRG93bigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IzKDAuMCwgLTEuMCwgMC4wKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBWZWN0b3IzIHNldCB0byAoMC4wLCAwLjAsIDEuMClcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBmb3J3YXJkIFZlY3RvcjNcbiAgICAgKi9cbiAgICBzdGF0aWMgRm9yd2FyZCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IzKDAuMCwgMC4wLCAxLjApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IFZlY3RvcjMgc2V0IHRvICgwLjAsIDAuMCwgLTEuMClcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBmb3J3YXJkIFZlY3RvcjNcbiAgICAgKi9cbiAgICBzdGF0aWMgQmFja3dhcmQoKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMygwLjAsIDAuMCwgLTEuMCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBzZXQgdG8gKDEuMCwgMC4wLCAwLjApXG4gICAgICogQHJldHVybnMgYSBuZXcgcmlnaHQgVmVjdG9yM1xuICAgICAqL1xuICAgIHN0YXRpYyBSaWdodCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IzKDEuMCwgMC4wLCAwLjApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IFZlY3RvcjMgc2V0IHRvICgtMS4wLCAwLjAsIDAuMClcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBsZWZ0IFZlY3RvcjNcbiAgICAgKi9cbiAgICBzdGF0aWMgTGVmdCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IzKC0xLjAsIDAuMCwgMC4wKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBWZWN0b3IzIHNldCB3aXRoIHRoZSByZXN1bHQgb2YgdGhlIHRyYW5zZm9ybWF0aW9uIGJ5IHRoZSBnaXZlbiBtYXRyaXggb2YgdGhlIGdpdmVuIHZlY3Rvci5cbiAgICAgKiBUaGlzIG1ldGhvZCBjb21wdXRlcyB0cmFuZm9ybWVkIGNvb3JkaW5hdGVzIG9ubHksIG5vdCB0cmFuc2Zvcm1lZCBkaXJlY3Rpb24gdmVjdG9ycyAoaWUuIGl0IHRha2VzIHRyYW5zbGF0aW9uIGluIGFjY291bnQpXG4gICAgICogQHBhcmFtIHZlY3RvciAtIGRlZmluZXMgdGhlIFZlY3RvcjMgdG8gdHJhbnNmb3JtXG4gICAgICogQHBhcmFtIHRyYW5zZm9ybWF0aW9uIC0gZGVmaW5lcyB0aGUgdHJhbnNmb3JtYXRpb24gbWF0cml4XG4gICAgICogQHJldHVybnMgdGhlIHRyYW5zZm9ybWVkIFZlY3RvcjNcbiAgICAgKi9cbiAgICBzdGF0aWMgVHJhbnNmb3JtQ29vcmRpbmF0ZXModmVjdG9yLCB0cmFuc2Zvcm1hdGlvbikge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBWZWN0b3IzLlplcm8oKTtcbiAgICAgICAgVmVjdG9yMy5UcmFuc2Zvcm1Db29yZGluYXRlc1RvUmVmKHZlY3RvciwgdHJhbnNmb3JtYXRpb24sIHJlc3VsdCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGdpdmVuIHZlY3RvciBcInJlc3VsdFwiIGNvb3JkaW5hdGVzIHdpdGggdGhlIHJlc3VsdCBvZiB0aGUgdHJhbnNmb3JtYXRpb24gYnkgdGhlIGdpdmVuIG1hdHJpeCBvZiB0aGUgZ2l2ZW4gdmVjdG9yXG4gICAgICogVGhpcyBtZXRob2QgY29tcHV0ZXMgdHJhbmZvcm1lZCBjb29yZGluYXRlcyBvbmx5LCBub3QgdHJhbnNmb3JtZWQgZGlyZWN0aW9uIHZlY3RvcnMgKGllLiBpdCB0YWtlcyB0cmFuc2xhdGlvbiBpbiBhY2NvdW50KVxuICAgICAqIEBwYXJhbSB2ZWN0b3IgLSBkZWZpbmVzIHRoZSBWZWN0b3IzIHRvIHRyYW5zZm9ybVxuICAgICAqIEBwYXJhbSB0cmFuc2Zvcm1hdGlvbiAtIGRlZmluZXMgdGhlIHRyYW5zZm9ybWF0aW9uIG1hdHJpeFxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSBWZWN0b3IzIHdoZXJlIHRvIHN0b3JlIHRoZSByZXN1bHRcbiAgICAgKi9cbiAgICBzdGF0aWMgVHJhbnNmb3JtQ29vcmRpbmF0ZXNUb1JlZih2ZWN0b3IsIHRyYW5zZm9ybWF0aW9uLCByZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIFZlY3RvcjMuVHJhbnNmb3JtQ29vcmRpbmF0ZXNGcm9tRmxvYXRzVG9SZWYodmVjdG9yLngsIHZlY3Rvci55LCB2ZWN0b3IueiwgdHJhbnNmb3JtYXRpb24sIHJlc3VsdCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGdpdmVuIHZlY3RvciBcInJlc3VsdFwiIGNvb3JkaW5hdGVzIHdpdGggdGhlIHJlc3VsdCBvZiB0aGUgdHJhbnNmb3JtYXRpb24gYnkgdGhlIGdpdmVuIG1hdHJpeCBvZiB0aGUgZ2l2ZW4gZmxvYXRzICh4LCB5LCB6KVxuICAgICAqIFRoaXMgbWV0aG9kIGNvbXB1dGVzIHRyYW5mb3JtZWQgY29vcmRpbmF0ZXMgb25seSwgbm90IHRyYW5zZm9ybWVkIGRpcmVjdGlvbiB2ZWN0b3JzXG4gICAgICogQHBhcmFtIHggLSBkZWZpbmUgdGhlIHggY29vcmRpbmF0ZSBvZiB0aGUgc291cmNlIHZlY3RvclxuICAgICAqIEBwYXJhbSB5IC0gZGVmaW5lIHRoZSB5IGNvb3JkaW5hdGUgb2YgdGhlIHNvdXJjZSB2ZWN0b3JcbiAgICAgKiBAcGFyYW0geiAtIGRlZmluZSB0aGUgeiBjb29yZGluYXRlIG9mIHRoZSBzb3VyY2UgdmVjdG9yXG4gICAgICogQHBhcmFtIHRyYW5zZm9ybWF0aW9uIC0gZGVmaW5lcyB0aGUgdHJhbnNmb3JtYXRpb24gbWF0cml4XG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIFZlY3RvcjMgd2hlcmUgdG8gc3RvcmUgdGhlIHJlc3VsdFxuICAgICAqL1xuICAgIHN0YXRpYyBUcmFuc2Zvcm1Db29yZGluYXRlc0Zyb21GbG9hdHNUb1JlZih4LCB5LCB6LCB0cmFuc2Zvcm1hdGlvbiwgcmVzdWx0KSB7XG4gICAgICAgIGNvbnN0IG0gPSB0cmFuc2Zvcm1hdGlvbi5tO1xuICAgICAgICBjb25zdCByeCA9IHggKiBtWzBdICsgeSAqIG1bNF0gKyB6ICogbVs4XSArIG1bMTJdO1xuICAgICAgICBjb25zdCByeSA9IHggKiBtWzFdICsgeSAqIG1bNV0gKyB6ICogbVs5XSArIG1bMTNdO1xuICAgICAgICBjb25zdCByeiA9IHggKiBtWzJdICsgeSAqIG1bNl0gKyB6ICogbVsxMF0gKyBtWzE0XTtcbiAgICAgICAgY29uc3QgcncgPSAxIC8gKHggKiBtWzNdICsgeSAqIG1bN10gKyB6ICogbVsxMV0gKyBtWzE1XSk7XG4gICAgICAgIHJlc3VsdC54ID0gcnggKiBydztcbiAgICAgICAgcmVzdWx0LnkgPSByeSAqIHJ3O1xuICAgICAgICByZXN1bHQueiA9IHJ6ICogcnc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBzZXQgd2l0aCB0aGUgcmVzdWx0IG9mIHRoZSBub3JtYWwgdHJhbnNmb3JtYXRpb24gYnkgdGhlIGdpdmVuIG1hdHJpeCBvZiB0aGUgZ2l2ZW4gdmVjdG9yXG4gICAgICogVGhpcyBtZXRob2RzIGNvbXB1dGVzIHRyYW5zZm9ybWVkIG5vcm1hbGl6ZWQgZGlyZWN0aW9uIHZlY3RvcnMgb25seSAoaWUuIGl0IGRvZXMgbm90IGFwcGx5IHRyYW5zbGF0aW9uKVxuICAgICAqIEBwYXJhbSB2ZWN0b3IgLSBkZWZpbmVzIHRoZSBWZWN0b3IzIHRvIHRyYW5zZm9ybVxuICAgICAqIEBwYXJhbSB0cmFuc2Zvcm1hdGlvbiAtIGRlZmluZXMgdGhlIHRyYW5zZm9ybWF0aW9uIG1hdHJpeFxuICAgICAqIEByZXR1cm5zIHRoZSBuZXcgVmVjdG9yM1xuICAgICAqL1xuICAgIHN0YXRpYyBUcmFuc2Zvcm1Ob3JtYWwodmVjdG9yLCB0cmFuc2Zvcm1hdGlvbikge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBWZWN0b3IzLlplcm8oKTtcbiAgICAgICAgVmVjdG9yMy5UcmFuc2Zvcm1Ob3JtYWxUb1JlZih2ZWN0b3IsIHRyYW5zZm9ybWF0aW9uLCByZXN1bHQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBnaXZlbiB2ZWN0b3IgXCJyZXN1bHRcIiB3aXRoIHRoZSByZXN1bHQgb2YgdGhlIG5vcm1hbCB0cmFuc2Zvcm1hdGlvbiBieSB0aGUgZ2l2ZW4gbWF0cml4IG9mIHRoZSBnaXZlbiB2ZWN0b3JcbiAgICAgKiBUaGlzIG1ldGhvZHMgY29tcHV0ZXMgdHJhbnNmb3JtZWQgbm9ybWFsaXplZCBkaXJlY3Rpb24gdmVjdG9ycyBvbmx5IChpZS4gaXQgZG9lcyBub3QgYXBwbHkgdHJhbnNsYXRpb24pXG4gICAgICogQHBhcmFtIHZlY3RvciAtIGRlZmluZXMgdGhlIFZlY3RvcjMgdG8gdHJhbnNmb3JtXG4gICAgICogQHBhcmFtIHRyYW5zZm9ybWF0aW9uIC0gZGVmaW5lcyB0aGUgdHJhbnNmb3JtYXRpb24gbWF0cml4XG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIFZlY3RvcjMgd2hlcmUgdG8gc3RvcmUgdGhlIHJlc3VsdFxuICAgICAqL1xuICAgIHN0YXRpYyBUcmFuc2Zvcm1Ob3JtYWxUb1JlZih2ZWN0b3IsIHRyYW5zZm9ybWF0aW9uLCByZXN1bHQpIHtcbiAgICAgICAgdGhpcy5UcmFuc2Zvcm1Ob3JtYWxGcm9tRmxvYXRzVG9SZWYodmVjdG9yLngsIHZlY3Rvci55LCB2ZWN0b3IueiwgdHJhbnNmb3JtYXRpb24sIHJlc3VsdCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGdpdmVuIHZlY3RvciBcInJlc3VsdFwiIHdpdGggdGhlIHJlc3VsdCBvZiB0aGUgbm9ybWFsIHRyYW5zZm9ybWF0aW9uIGJ5IHRoZSBnaXZlbiBtYXRyaXggb2YgdGhlIGdpdmVuIGZsb2F0cyAoeCwgeSwgeilcbiAgICAgKiBUaGlzIG1ldGhvZHMgY29tcHV0ZXMgdHJhbnNmb3JtZWQgbm9ybWFsaXplZCBkaXJlY3Rpb24gdmVjdG9ycyBvbmx5IChpZS4gaXQgZG9lcyBub3QgYXBwbHkgdHJhbnNsYXRpb24pXG4gICAgICogQHBhcmFtIHggLSBkZWZpbmUgdGhlIHggY29vcmRpbmF0ZSBvZiB0aGUgc291cmNlIHZlY3RvclxuICAgICAqIEBwYXJhbSB5IC0gZGVmaW5lIHRoZSB5IGNvb3JkaW5hdGUgb2YgdGhlIHNvdXJjZSB2ZWN0b3JcbiAgICAgKiBAcGFyYW0geiAtIGRlZmluZSB0aGUgeiBjb29yZGluYXRlIG9mIHRoZSBzb3VyY2UgdmVjdG9yXG4gICAgICogQHBhcmFtIHRyYW5zZm9ybWF0aW9uIC0gZGVmaW5lcyB0aGUgdHJhbnNmb3JtYXRpb24gbWF0cml4XG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIFZlY3RvcjMgd2hlcmUgdG8gc3RvcmUgdGhlIHJlc3VsdFxuICAgICAqL1xuICAgIHN0YXRpYyBUcmFuc2Zvcm1Ob3JtYWxGcm9tRmxvYXRzVG9SZWYoeCwgeSwgeiwgdHJhbnNmb3JtYXRpb24sIHJlc3VsdCkge1xuICAgICAgICBjb25zdCBtID0gdHJhbnNmb3JtYXRpb24ubTtcbiAgICAgICAgcmVzdWx0LnggPSB4ICogbVswXSArIHkgKiBtWzRdICsgeiAqIG1bOF07XG4gICAgICAgIHJlc3VsdC55ID0geCAqIG1bMV0gKyB5ICogbVs1XSArIHogKiBtWzldO1xuICAgICAgICByZXN1bHQueiA9IHggKiBtWzJdICsgeSAqIG1bNl0gKyB6ICogbVsxMF07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBsb2NhdGVkIGZvciBcImFtb3VudFwiIG9uIHRoZSBDYXRtdWxsUm9tIGludGVycG9sYXRpb24gc3BsaW5lIGRlZmluZWQgYnkgdGhlIHZlY3RvcnMgXCJ2YWx1ZTFcIiwgXCJ2YWx1ZTJcIiwgXCJ2YWx1ZTNcIiwgXCJ2YWx1ZTRcIlxuICAgICAqIEBwYXJhbSB2YWx1ZTEgLSBkZWZpbmVzIHRoZSBmaXJzdCBjb250cm9sIHBvaW50XG4gICAgICogQHBhcmFtIHZhbHVlMiAtIGRlZmluZXMgdGhlIHNlY29uZCBjb250cm9sIHBvaW50XG4gICAgICogQHBhcmFtIHZhbHVlMyAtIGRlZmluZXMgdGhlIHRoaXJkIGNvbnRyb2wgcG9pbnRcbiAgICAgKiBAcGFyYW0gdmFsdWU0IC0gZGVmaW5lcyB0aGUgZm91cnRoIGNvbnRyb2wgcG9pbnRcbiAgICAgKiBAcGFyYW0gYW1vdW50IC0gZGVmaW5lcyB0aGUgYW1vdW50IG9uIHRoZSBzcGxpbmUgdG8gdXNlXG4gICAgICogQHJldHVybnMgdGhlIG5ldyBWZWN0b3IzXG4gICAgICovXG4gICAgc3RhdGljIENhdG11bGxSb20odmFsdWUxLCB2YWx1ZTIsIHZhbHVlMywgdmFsdWU0LCBhbW91bnQpIHtcbiAgICAgICAgY29uc3Qgc3F1YXJlZCA9IGFtb3VudCAqIGFtb3VudDtcbiAgICAgICAgY29uc3QgY3ViZWQgPSBhbW91bnQgKiBzcXVhcmVkO1xuICAgICAgICBjb25zdCB4ID0gMC41ICpcbiAgICAgICAgICAgICgyLjAgKiB2YWx1ZTIueCArXG4gICAgICAgICAgICAgICAgKC12YWx1ZTEueCArIHZhbHVlMy54KSAqIGFtb3VudCArXG4gICAgICAgICAgICAgICAgKDIuMCAqIHZhbHVlMS54IC0gNS4wICogdmFsdWUyLnggKyA0LjAgKiB2YWx1ZTMueCAtIHZhbHVlNC54KSAqXG4gICAgICAgICAgICAgICAgICAgIHNxdWFyZWQgK1xuICAgICAgICAgICAgICAgICgtdmFsdWUxLnggKyAzLjAgKiB2YWx1ZTIueCAtIDMuMCAqIHZhbHVlMy54ICsgdmFsdWU0LngpICogY3ViZWQpO1xuICAgICAgICBjb25zdCB5ID0gMC41ICpcbiAgICAgICAgICAgICgyLjAgKiB2YWx1ZTIueSArXG4gICAgICAgICAgICAgICAgKC12YWx1ZTEueSArIHZhbHVlMy55KSAqIGFtb3VudCArXG4gICAgICAgICAgICAgICAgKDIuMCAqIHZhbHVlMS55IC0gNS4wICogdmFsdWUyLnkgKyA0LjAgKiB2YWx1ZTMueSAtIHZhbHVlNC55KSAqXG4gICAgICAgICAgICAgICAgICAgIHNxdWFyZWQgK1xuICAgICAgICAgICAgICAgICgtdmFsdWUxLnkgKyAzLjAgKiB2YWx1ZTIueSAtIDMuMCAqIHZhbHVlMy55ICsgdmFsdWU0LnkpICogY3ViZWQpO1xuICAgICAgICBjb25zdCB6ID0gMC41ICpcbiAgICAgICAgICAgICgyLjAgKiB2YWx1ZTIueiArXG4gICAgICAgICAgICAgICAgKC12YWx1ZTEueiArIHZhbHVlMy56KSAqIGFtb3VudCArXG4gICAgICAgICAgICAgICAgKDIuMCAqIHZhbHVlMS56IC0gNS4wICogdmFsdWUyLnogKyA0LjAgKiB2YWx1ZTMueiAtIHZhbHVlNC56KSAqXG4gICAgICAgICAgICAgICAgICAgIHNxdWFyZWQgK1xuICAgICAgICAgICAgICAgICgtdmFsdWUxLnogKyAzLjAgKiB2YWx1ZTIueiAtIDMuMCAqIHZhbHVlMy56ICsgdmFsdWU0LnopICogY3ViZWQpO1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjMoeCwgeSwgeik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBzZXQgd2l0aCB0aGUgY29vcmRpbmF0ZXMgb2YgXCJ2YWx1ZVwiLCBpZiB0aGUgdmVjdG9yIFwidmFsdWVcIiBpcyBpbiB0aGUgY3ViZSBkZWZpbmVkIGJ5IHRoZSB2ZWN0b3JzIFwibWluXCIgYW5kIFwibWF4XCJcbiAgICAgKiBJZiBhIGNvb3JkaW5hdGUgdmFsdWUgb2YgXCJ2YWx1ZVwiIGlzIGxvd2VyIHRoYW4gb25lIG9mIHRoZSBcIm1pblwiIGNvb3JkaW5hdGUsIHRoZW4gdGhpcyBcInZhbHVlXCIgY29vcmRpbmF0ZSBpcyBzZXQgd2l0aCB0aGUgXCJtaW5cIiBvbmVcbiAgICAgKiBJZiBhIGNvb3JkaW5hdGUgdmFsdWUgb2YgXCJ2YWx1ZVwiIGlzIGdyZWF0ZXIgdGhhbiBvbmUgb2YgdGhlIFwibWF4XCIgY29vcmRpbmF0ZSwgdGhlbiB0aGlzIFwidmFsdWVcIiBjb29yZGluYXRlIGlzIHNldCB3aXRoIHRoZSBcIm1heFwiIG9uZVxuICAgICAqIEBwYXJhbSB2YWx1ZSAtIGRlZmluZXMgdGhlIGN1cnJlbnQgdmFsdWVcbiAgICAgKiBAcGFyYW0gbWluIC0gZGVmaW5lcyB0aGUgbG93ZXIgcmFuZ2UgdmFsdWVcbiAgICAgKiBAcGFyYW0gbWF4IC0gZGVmaW5lcyB0aGUgdXBwZXIgcmFuZ2UgdmFsdWVcbiAgICAgKiBAcmV0dXJucyB0aGUgbmV3IFZlY3RvcjNcbiAgICAgKi9cbiAgICBzdGF0aWMgQ2xhbXAodmFsdWUsIG1pbiwgbWF4KSB7XG4gICAgICAgIGNvbnN0IHYgPSBuZXcgVmVjdG9yMygpO1xuICAgICAgICBWZWN0b3IzLkNsYW1wVG9SZWYodmFsdWUsIG1pbiwgbWF4LCB2KTtcbiAgICAgICAgcmV0dXJuIHY7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGdpdmVuIHZlY3RvciBcInJlc3VsdFwiIHdpdGggdGhlIGNvb3JkaW5hdGVzIG9mIFwidmFsdWVcIiwgaWYgdGhlIHZlY3RvciBcInZhbHVlXCIgaXMgaW4gdGhlIGN1YmUgZGVmaW5lZCBieSB0aGUgdmVjdG9ycyBcIm1pblwiIGFuZCBcIm1heFwiXG4gICAgICogSWYgYSBjb29yZGluYXRlIHZhbHVlIG9mIFwidmFsdWVcIiBpcyBsb3dlciB0aGFuIG9uZSBvZiB0aGUgXCJtaW5cIiBjb29yZGluYXRlLCB0aGVuIHRoaXMgXCJ2YWx1ZVwiIGNvb3JkaW5hdGUgaXMgc2V0IHdpdGggdGhlIFwibWluXCIgb25lXG4gICAgICogSWYgYSBjb29yZGluYXRlIHZhbHVlIG9mIFwidmFsdWVcIiBpcyBncmVhdGVyIHRoYW4gb25lIG9mIHRoZSBcIm1heFwiIGNvb3JkaW5hdGUsIHRoZW4gdGhpcyBcInZhbHVlXCIgY29vcmRpbmF0ZSBpcyBzZXQgd2l0aCB0aGUgXCJtYXhcIiBvbmVcbiAgICAgKiBAcGFyYW0gdmFsdWUgLSBkZWZpbmVzIHRoZSBjdXJyZW50IHZhbHVlXG4gICAgICogQHBhcmFtIG1pbiAtIGRlZmluZXMgdGhlIGxvd2VyIHJhbmdlIHZhbHVlXG4gICAgICogQHBhcmFtIG1heCAtIGRlZmluZXMgdGhlIHVwcGVyIHJhbmdlIHZhbHVlXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIFZlY3RvcjMgd2hlcmUgdG8gc3RvcmUgdGhlIHJlc3VsdFxuICAgICAqL1xuICAgIHN0YXRpYyBDbGFtcFRvUmVmKHZhbHVlLCBtaW4sIG1heCwgcmVzdWx0KSB7XG4gICAgICAgIGxldCB4ID0gdmFsdWUueDtcbiAgICAgICAgeCA9IHggPiBtYXgueCA/IG1heC54IDogeDtcbiAgICAgICAgeCA9IHggPCBtaW4ueCA/IG1pbi54IDogeDtcbiAgICAgICAgbGV0IHkgPSB2YWx1ZS55O1xuICAgICAgICB5ID0geSA+IG1heC55ID8gbWF4LnkgOiB5O1xuICAgICAgICB5ID0geSA8IG1pbi55ID8gbWluLnkgOiB5O1xuICAgICAgICBsZXQgeiA9IHZhbHVlLno7XG4gICAgICAgIHogPSB6ID4gbWF4LnogPyBtYXgueiA6IHo7XG4gICAgICAgIHogPSB6IDwgbWluLnogPyBtaW4ueiA6IHo7XG4gICAgICAgIHJlc3VsdC5jb3B5RnJvbUZsb2F0cyh4LCB5LCB6KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBWZWN0b3IzIGxvY2F0ZWQgZm9yIFwiYW1vdW50XCIgKGZsb2F0KSBvbiB0aGUgSGVybWl0ZSBpbnRlcnBvbGF0aW9uIHNwbGluZSBkZWZpbmVkIGJ5IHRoZSB2ZWN0b3JzIFwidmFsdWUxXCIsIFwidGFuZ2VudDFcIiwgXCJ2YWx1ZTJcIiwgXCJ0YW5nZW50MlwiXG4gICAgICogQHBhcmFtIHZhbHVlMSAtIGRlZmluZXMgdGhlIGZpcnN0IGNvbnRyb2wgcG9pbnRcbiAgICAgKiBAcGFyYW0gdGFuZ2VudDEgLSBkZWZpbmVzIHRoZSBmaXJzdCB0YW5nZW50IHZlY3RvclxuICAgICAqIEBwYXJhbSB2YWx1ZTIgLSBkZWZpbmVzIHRoZSBzZWNvbmQgY29udHJvbCBwb2ludFxuICAgICAqIEBwYXJhbSB0YW5nZW50MiAtIGRlZmluZXMgdGhlIHNlY29uZCB0YW5nZW50IHZlY3RvclxuICAgICAqIEBwYXJhbSBhbW91bnQgLSBkZWZpbmVzIHRoZSBhbW91bnQgb24gdGhlIGludGVycG9sYXRpb24gc3BsaW5lIChiZXR3ZWVuIDAgYW5kIDEpXG4gICAgICogQHJldHVybnMgdGhlIG5ldyBWZWN0b3IzXG4gICAgICovXG4gICAgc3RhdGljIEhlcm1pdGUodmFsdWUxLCB0YW5nZW50MSwgdmFsdWUyLCB0YW5nZW50MiwgYW1vdW50KSB7XG4gICAgICAgIGNvbnN0IHNxdWFyZWQgPSBhbW91bnQgKiBhbW91bnQ7XG4gICAgICAgIGNvbnN0IGN1YmVkID0gYW1vdW50ICogc3F1YXJlZDtcbiAgICAgICAgY29uc3QgcGFydDEgPSAyLjAgKiBjdWJlZCAtIDMuMCAqIHNxdWFyZWQgKyAxLjA7XG4gICAgICAgIGNvbnN0IHBhcnQyID0gLTIuMCAqIGN1YmVkICsgMy4wICogc3F1YXJlZDtcbiAgICAgICAgY29uc3QgcGFydDMgPSBjdWJlZCAtIDIuMCAqIHNxdWFyZWQgKyBhbW91bnQ7XG4gICAgICAgIGNvbnN0IHBhcnQ0ID0gY3ViZWQgLSBzcXVhcmVkO1xuICAgICAgICBjb25zdCB4ID0gdmFsdWUxLnggKiBwYXJ0MSArXG4gICAgICAgICAgICB2YWx1ZTIueCAqIHBhcnQyICtcbiAgICAgICAgICAgIHRhbmdlbnQxLnggKiBwYXJ0MyArXG4gICAgICAgICAgICB0YW5nZW50Mi54ICogcGFydDQ7XG4gICAgICAgIGNvbnN0IHkgPSB2YWx1ZTEueSAqIHBhcnQxICtcbiAgICAgICAgICAgIHZhbHVlMi55ICogcGFydDIgK1xuICAgICAgICAgICAgdGFuZ2VudDEueSAqIHBhcnQzICtcbiAgICAgICAgICAgIHRhbmdlbnQyLnkgKiBwYXJ0NDtcbiAgICAgICAgY29uc3QgeiA9IHZhbHVlMS56ICogcGFydDEgK1xuICAgICAgICAgICAgdmFsdWUyLnogKiBwYXJ0MiArXG4gICAgICAgICAgICB0YW5nZW50MS56ICogcGFydDMgK1xuICAgICAgICAgICAgdGFuZ2VudDIueiAqIHBhcnQ0O1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjMoeCwgeSwgeik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBsb2NhdGVkIGZvciBcImFtb3VudFwiIChmbG9hdCkgb24gdGhlIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdGhlIHZlY3RvcnMgXCJzdGFydFwiIGFuZCBcImVuZFwiXG4gICAgICogQHBhcmFtIHN0YXJ0IC0gZGVmaW5lcyB0aGUgc3RhcnQgdmFsdWVcbiAgICAgKiBAcGFyYW0gZW5kIC0gZGVmaW5lcyB0aGUgZW5kIHZhbHVlXG4gICAgICogQHBhcmFtIGFtb3VudCAtIG1heCBkZWZpbmVzIGFtb3VudCBiZXR3ZWVuIGJvdGggKGJldHdlZW4gMCBhbmQgMSlcbiAgICAgKiBAcmV0dXJucyB0aGUgbmV3IFZlY3RvcjNcbiAgICAgKi9cbiAgICBzdGF0aWMgTGVycChzdGFydCwgZW5kLCBhbW91bnQpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IFZlY3RvcjMoMCwgMCwgMCk7XG4gICAgICAgIFZlY3RvcjMuTGVycFRvUmVmKHN0YXJ0LCBlbmQsIGFtb3VudCwgcmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZ2l2ZW4gdmVjdG9yIFwicmVzdWx0XCIgd2l0aCB0aGUgcmVzdWx0IG9mIHRoZSBsaW5lYXIgaW50ZXJwb2xhdGlvbiBmcm9tIHRoZSB2ZWN0b3IgXCJzdGFydFwiIGZvciBcImFtb3VudFwiIHRvIHRoZSB2ZWN0b3IgXCJlbmRcIlxuICAgICAqIEBwYXJhbSBzdGFydCAtIGRlZmluZXMgdGhlIHN0YXJ0IHZhbHVlXG4gICAgICogQHBhcmFtIGVuZCAtIGRlZmluZXMgdGhlIGVuZCB2YWx1ZVxuICAgICAqIEBwYXJhbSBhbW91bnQgLSBtYXggZGVmaW5lcyBhbW91bnQgYmV0d2VlbiBib3RoIChiZXR3ZWVuIDAgYW5kIDEpXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIFZlY3RvcjMgd2hlcmUgdG8gc3RvcmUgdGhlIHJlc3VsdFxuICAgICAqL1xuICAgIHN0YXRpYyBMZXJwVG9SZWYoc3RhcnQsIGVuZCwgYW1vdW50LCByZXN1bHQpIHtcbiAgICAgICAgcmVzdWx0LnggPSBzdGFydC54ICsgKGVuZC54IC0gc3RhcnQueCkgKiBhbW91bnQ7XG4gICAgICAgIHJlc3VsdC55ID0gc3RhcnQueSArIChlbmQueSAtIHN0YXJ0LnkpICogYW1vdW50O1xuICAgICAgICByZXN1bHQueiA9IHN0YXJ0LnogKyAoZW5kLnogLSBzdGFydC56KSAqIGFtb3VudDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgZG90IHByb2R1Y3QgKGZsb2F0KSBiZXR3ZWVuIHRoZSB2ZWN0b3JzIFwibGVmdFwiIGFuZCBcInJpZ2h0XCJcbiAgICAgKiBAcGFyYW0gbGVmdCAtIGRlZmluZXMgdGhlIGxlZnQgb3BlcmFuZFxuICAgICAqIEBwYXJhbSByaWdodCAtIGRlZmluZXMgdGhlIHJpZ2h0IG9wZXJhbmRcbiAgICAgKiBAcmV0dXJucyB0aGUgZG90IHByb2R1Y3RcbiAgICAgKi9cbiAgICBzdGF0aWMgRG90KGxlZnQsIHJpZ2h0KSB7XG4gICAgICAgIHJldHVybiBsZWZ0LnggKiByaWdodC54ICsgbGVmdC55ICogcmlnaHQueSArIGxlZnQueiAqIHJpZ2h0Lno7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBhcyB0aGUgY3Jvc3MgcHJvZHVjdCBvZiB0aGUgdmVjdG9ycyBcImxlZnRcIiBhbmQgXCJyaWdodFwiXG4gICAgICogVGhlIGNyb3NzIHByb2R1Y3QgaXMgdGhlbiBvcnRob2dvbmFsIHRvIGJvdGggXCJsZWZ0XCIgYW5kIFwicmlnaHRcIlxuICAgICAqIEBwYXJhbSBsZWZ0IC0gZGVmaW5lcyB0aGUgbGVmdCBvcGVyYW5kXG4gICAgICogQHBhcmFtIHJpZ2h0IC0gZGVmaW5lcyB0aGUgcmlnaHQgb3BlcmFuZFxuICAgICAqIEByZXR1cm5zIHRoZSBjcm9zcyBwcm9kdWN0XG4gICAgICovXG4gICAgc3RhdGljIENyb3NzKGxlZnQsIHJpZ2h0KSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFZlY3RvcjMuWmVybygpO1xuICAgICAgICBWZWN0b3IzLkNyb3NzVG9SZWYobGVmdCwgcmlnaHQsIHJlc3VsdCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGdpdmVuIHZlY3RvciBcInJlc3VsdFwiIHdpdGggdGhlIGNyb3NzIHByb2R1Y3Qgb2YgXCJsZWZ0XCIgYW5kIFwicmlnaHRcIlxuICAgICAqIFRoZSBjcm9zcyBwcm9kdWN0IGlzIHRoZW4gb3J0aG9nb25hbCB0byBib3RoIFwibGVmdFwiIGFuZCBcInJpZ2h0XCJcbiAgICAgKiBAcGFyYW0gbGVmdCAtIGRlZmluZXMgdGhlIGxlZnQgb3BlcmFuZFxuICAgICAqIEBwYXJhbSByaWdodCAtIGRlZmluZXMgdGhlIHJpZ2h0IG9wZXJhbmRcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgVmVjdG9yMyB3aGVyZSB0byBzdG9yZSB0aGUgcmVzdWx0XG4gICAgICovXG4gICAgc3RhdGljIENyb3NzVG9SZWYobGVmdCwgcmlnaHQsIHJlc3VsdCkge1xuICAgICAgICBjb25zdCB4ID0gbGVmdC55ICogcmlnaHQueiAtIGxlZnQueiAqIHJpZ2h0Lnk7XG4gICAgICAgIGNvbnN0IHkgPSBsZWZ0LnogKiByaWdodC54IC0gbGVmdC54ICogcmlnaHQuejtcbiAgICAgICAgY29uc3QgeiA9IGxlZnQueCAqIHJpZ2h0LnkgLSBsZWZ0LnkgKiByaWdodC54O1xuICAgICAgICByZXN1bHQuY29weUZyb21GbG9hdHMoeCwgeSwgeik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBhcyB0aGUgbm9ybWFsaXphdGlvbiBvZiB0aGUgZ2l2ZW4gdmVjdG9yXG4gICAgICogQHBhcmFtIHZlY3RvciAtIGRlZmluZXMgdGhlIFZlY3RvcjMgdG8gbm9ybWFsaXplXG4gICAgICogQHJldHVybnMgdGhlIG5ldyBWZWN0b3IzXG4gICAgICovXG4gICAgc3RhdGljIE5vcm1hbGl6ZSh2ZWN0b3IpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gVmVjdG9yMy5aZXJvKCk7XG4gICAgICAgIFZlY3RvcjMuTm9ybWFsaXplVG9SZWYodmVjdG9yLCByZXN1bHQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBnaXZlbiB2ZWN0b3IgXCJyZXN1bHRcIiB3aXRoIHRoZSBub3JtYWxpemF0aW9uIG9mIHRoZSBnaXZlbiBmaXJzdCB2ZWN0b3JcbiAgICAgKiBAcGFyYW0gdmVjdG9yIC0gZGVmaW5lcyB0aGUgVmVjdG9yMyB0byBub3JtYWxpemVcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgVmVjdG9yMyB3aGVyZSB0byBzdG9yZSB0aGUgcmVzdWx0XG4gICAgICovXG4gICAgc3RhdGljIE5vcm1hbGl6ZVRvUmVmKHZlY3RvciwgcmVzdWx0KSB7XG4gICAgICAgIHZlY3Rvci5ub3JtYWxpemVUb1JlZihyZXN1bHQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBtaW5pbWFsIGNvb3JkaW5hdGUgdmFsdWVzIGJldHdlZW4gdHdvIFZlY3RvcjNcbiAgICAgKiBAcGFyYW0gbGVmdCAtIGRlZmluZXMgdGhlIGZpcnN0IG9wZXJhbmRcbiAgICAgKiBAcGFyYW0gcmlnaHQgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEByZXR1cm5zIHRoZSBuZXcgVmVjdG9yM1xuICAgICAqL1xuICAgIHN0YXRpYyBNaW5pbWl6ZShsZWZ0LCByaWdodCkge1xuICAgICAgICBjb25zdCBtaW4gPSBuZXcgVmVjdG9yMyhsZWZ0LngsIGxlZnQueSwgbGVmdC56KTtcbiAgICAgICAgbWluLm1pbmltaXplSW5QbGFjZShyaWdodCk7XG4gICAgICAgIHJldHVybiBtaW47XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG1heGltYWwgY29vcmRpbmF0ZSB2YWx1ZXMgYmV0d2VlbiB0d28gVmVjdG9yM1xuICAgICAqIEBwYXJhbSBsZWZ0IC0gZGVmaW5lcyB0aGUgZmlyc3Qgb3BlcmFuZFxuICAgICAqIEBwYXJhbSByaWdodCAtIGRlZmluZXMgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAgICogQHJldHVybnMgdGhlIG5ldyBWZWN0b3IzXG4gICAgICovXG4gICAgc3RhdGljIE1heGltaXplKGxlZnQsIHJpZ2h0KSB7XG4gICAgICAgIGNvbnN0IG1heCA9IG5ldyBWZWN0b3IzKGxlZnQueCwgbGVmdC55LCBsZWZ0LnopO1xuICAgICAgICBtYXgubWF4aW1pemVJblBsYWNlKHJpZ2h0KTtcbiAgICAgICAgcmV0dXJuIG1heDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgZGlzdGFuY2UgYmV0d2VlbiB0aGUgdmVjdG9ycyBcInZhbHVlMVwiIGFuZCBcInZhbHVlMlwiXG4gICAgICogQHBhcmFtIHZhbHVlMSAtIGRlZmluZXMgdGhlIGZpcnN0IG9wZXJhbmRcbiAgICAgKiBAcGFyYW0gdmFsdWUyIC0gZGVmaW5lcyB0aGUgc2Vjb25kIG9wZXJhbmRcbiAgICAgKiBAcmV0dXJucyB0aGUgZGlzdGFuY2VcbiAgICAgKi9cbiAgICBzdGF0aWMgRGlzdGFuY2UodmFsdWUxLCB2YWx1ZTIpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguc3FydChWZWN0b3IzLkRpc3RhbmNlU3F1YXJlZCh2YWx1ZTEsIHZhbHVlMikpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBzcXVhcmVkIGRpc3RhbmNlIGJldHdlZW4gdGhlIHZlY3RvcnMgXCJ2YWx1ZTFcIiBhbmQgXCJ2YWx1ZTJcIlxuICAgICAqIEBwYXJhbSB2YWx1ZTEgLSBkZWZpbmVzIHRoZSBmaXJzdCBvcGVyYW5kXG4gICAgICogQHBhcmFtIHZhbHVlMiAtIGRlZmluZXMgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAgICogQHJldHVybnMgdGhlIHNxdWFyZWQgZGlzdGFuY2VcbiAgICAgKi9cbiAgICBzdGF0aWMgRGlzdGFuY2VTcXVhcmVkKHZhbHVlMSwgdmFsdWUyKSB7XG4gICAgICAgIGNvbnN0IHggPSB2YWx1ZTEueCAtIHZhbHVlMi54O1xuICAgICAgICBjb25zdCB5ID0gdmFsdWUxLnkgLSB2YWx1ZTIueTtcbiAgICAgICAgY29uc3QgeiA9IHZhbHVlMS56IC0gdmFsdWUyLno7XG4gICAgICAgIHJldHVybiB4ICogeCArIHkgKiB5ICsgeiAqIHo7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBsb2NhdGVkIGF0IHRoZSBjZW50ZXIgYmV0d2VlbiBcInZhbHVlMVwiIGFuZCBcInZhbHVlMlwiXG4gICAgICogQHBhcmFtIHZhbHVlMSAtIGRlZmluZXMgdGhlIGZpcnN0IG9wZXJhbmRcbiAgICAgKiBAcGFyYW0gdmFsdWUyIC0gZGVmaW5lcyB0aGUgc2Vjb25kIG9wZXJhbmRcbiAgICAgKiBAcmV0dXJucyB0aGUgbmV3IFZlY3RvcjNcbiAgICAgKi9cbiAgICBzdGF0aWMgQ2VudGVyKHZhbHVlMSwgdmFsdWUyKSB7XG4gICAgICAgIGNvbnN0IGNlbnRlciA9IFZlY3RvcjMuQWRkKHZhbHVlMSwgdmFsdWUyKTtcbiAgICAgICAgY2VudGVyLnNjYWxlSW5QbGFjZSgwLjUpO1xuICAgICAgICByZXR1cm4gY2VudGVyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHaXZlbiB0aHJlZSBvcnRob2dvbmFsIG5vcm1hbGl6ZWQgbGVmdC1oYW5kZWQgb3JpZW50ZWQgVmVjdG9yMyBheGlzIGluIHNwYWNlICh0YXJnZXQgc3lzdGVtKSxcbiAgICAgKiBSb3RhdGlvbkZyb21BeGlzKCkgcmV0dXJucyB0aGUgcm90YXRpb24gRXVsZXIgYW5nbGVzIChleCA6IHJvdGF0aW9uLngsIHJvdGF0aW9uLnksIHJvdGF0aW9uLnopIHRvIGFwcGx5XG4gICAgICogdG8gc29tZXRoaW5nIGluIG9yZGVyIHRvIHJvdGF0ZSBpdCBmcm9tIGl0cyBsb2NhbCBzeXN0ZW0gdG8gdGhlIGdpdmVuIHRhcmdldCBzeXN0ZW1cbiAgICAgKiBOb3RlOiBheGlzMSwgYXhpczIgYW5kIGF4aXMzIGFyZSBub3JtYWxpemVkIGR1cmluZyB0aGlzIG9wZXJhdGlvblxuICAgICAqIEBwYXJhbSBheGlzMSAtIGRlZmluZXMgdGhlIGZpcnN0IGF4aXNcbiAgICAgKiBAcGFyYW0gYXhpczIgLSBkZWZpbmVzIHRoZSBzZWNvbmQgYXhpc1xuICAgICAqIEBwYXJhbSBheGlzMyAtIGRlZmluZXMgdGhlIHRoaXJkIGF4aXNcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBWZWN0b3IzXG4gICAgICovXG4gICAgc3RhdGljIFJvdGF0aW9uRnJvbUF4aXMoYXhpczEsIGF4aXMyLCBheGlzMykge1xuICAgICAgICBjb25zdCByb3RhdGlvbiA9IFZlY3RvcjMuWmVybygpO1xuICAgICAgICBWZWN0b3IzLlJvdGF0aW9uRnJvbUF4aXNUb1JlZihheGlzMSwgYXhpczIsIGF4aXMzLCByb3RhdGlvbik7XG4gICAgICAgIHJldHVybiByb3RhdGlvbjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIHNhbWUgdGhhbiBSb3RhdGlvbkZyb21BeGlzIGJ1dCB1cGRhdGVzIHRoZSBnaXZlbiByZWYgVmVjdG9yMyBwYXJhbWV0ZXIgaW5zdGVhZCBvZiByZXR1cm5pbmcgYSBuZXcgVmVjdG9yM1xuICAgICAqIEBwYXJhbSBheGlzMSAtIGRlZmluZXMgdGhlIGZpcnN0IGF4aXNcbiAgICAgKiBAcGFyYW0gYXhpczIgLSBkZWZpbmVzIHRoZSBzZWNvbmQgYXhpc1xuICAgICAqIEBwYXJhbSBheGlzMyAtIGRlZmluZXMgdGhlIHRoaXJkIGF4aXNcbiAgICAgKiBAcGFyYW0gcmVmIC0gZGVmaW5lcyB0aGUgVmVjdG9yMyB3aGVyZSB0byBzdG9yZSB0aGUgcmVzdWx0XG4gICAgICovXG4gICAgc3RhdGljIFJvdGF0aW9uRnJvbUF4aXNUb1JlZihheGlzMSwgYXhpczIsIGF4aXMzLCByZWYpIHtcbiAgICAgICAgY29uc3QgcXVhdCA9IHByZWFsbG9jYXRlZFZhcmlhYmxlc18xLk1hdGhUbXAuUXVhdGVybmlvblswXTtcbiAgICAgICAgUXVhdGVybmlvbl8xLlF1YXRlcm5pb24uUm90YXRpb25RdWF0ZXJuaW9uRnJvbUF4aXNUb1JlZihheGlzMSwgYXhpczIsIGF4aXMzLCBxdWF0KTtcbiAgICAgICAgcmVmLmNvcHlGcm9tKHF1YXQuZXVsZXJBbmdsZXMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBWZWN0b3IzXG4gICAgICogQHJldHVybnMgYSBzdHJpbmcgd2l0aCB0aGUgVmVjdG9yMyBjb29yZGluYXRlcy5cbiAgICAgKi9cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIGAoJHt0aGlzLnh9LCAke3RoaXMueX0sICR7dGhpcy56fSlgO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBjbGFzcyBuYW1lXG4gICAgICogQHJldHVybnMgdGhlIHN0cmluZyBcIlZlY3RvcjNcIlxuICAgICAqL1xuICAgIGdldENsYXNzTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdWZWN0b3IzJztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyB0aGUgVmVjdG9yMyBoYXNoIGNvZGVcbiAgICAgKiBAcmV0dXJucyBhIG51bWJlciB3aGljaCB0ZW5kcyB0byBiZSB1bmlxdWUgYmV0d2VlbiBWZWN0b3IzIGluc3RhbmNlc1xuICAgICAqL1xuICAgIGdldEhhc2hDb2RlKCkge1xuICAgICAgICBsZXQgaGFzaCA9IHRoaXMueCB8fCAwO1xuICAgICAgICBoYXNoID0gKGhhc2ggKiAzOTcpIF4gKHRoaXMueSB8fCAwKTtcbiAgICAgICAgaGFzaCA9IChoYXNoICogMzk3KSBeICh0aGlzLnogfHwgMCk7XG4gICAgICAgIHJldHVybiBoYXNoO1xuICAgIH1cbiAgICAvLyBPcGVyYXRvcnNcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IGNvbnRhaW5pbmcgdGhyZWUgZWxlbWVudHMgOiB0aGUgY29vcmRpbmF0ZXMgb2YgdGhlIFZlY3RvcjNcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBhcnJheSBvZiBudW1iZXJzXG4gICAgICovXG4gICAgYXNBcnJheSgpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgICAgIHRoaXMudG9BcnJheShyZXN1bHQsIDApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQb3B1bGF0ZXMgdGhlIGdpdmVuIGFycmF5IG9yIEZsb2F0QXJyYXkgZnJvbSB0aGUgZ2l2ZW4gaW5kZXggd2l0aCB0aGUgc3VjY2Vzc2l2ZSBjb29yZGluYXRlcyBvZiB0aGUgVmVjdG9yM1xuICAgICAqIEBwYXJhbSBhcnJheSAtIGRlZmluZXMgdGhlIGRlc3RpbmF0aW9uIGFycmF5XG4gICAgICogQHBhcmFtIGluZGV4IC0gZGVmaW5lcyB0aGUgb2Zmc2V0IGluIHRoZSBkZXN0aW5hdGlvbiBhcnJheVxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IFZlY3RvcjNcbiAgICAgKi9cbiAgICB0b0FycmF5KGFycmF5LCBpbmRleCA9IDApIHtcbiAgICAgICAgYXJyYXlbaW5kZXhdID0gdGhpcy54O1xuICAgICAgICBhcnJheVtpbmRleCArIDFdID0gdGhpcy55O1xuICAgICAgICBhcnJheVtpbmRleCArIDJdID0gdGhpcy56O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGN1cnJlbnQgVmVjdG9yMyBpbnRvIGEgcXVhdGVybmlvbiAoY29uc2lkZXJpbmcgdGhhdCB0aGUgVmVjdG9yMyBjb250YWlucyBFdWxlciBhbmdsZXMgcmVwcmVzZW50YXRpb24gb2YgYSByb3RhdGlvbilcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBRdWF0ZXJuaW9uIG9iamVjdCwgY29tcHV0ZWQgZnJvbSB0aGUgVmVjdG9yMyBjb29yZGluYXRlc1xuICAgICAqL1xuICAgIHRvUXVhdGVybmlvbigpIHtcbiAgICAgICAgcmV0dXJuIFF1YXRlcm5pb25fMS5RdWF0ZXJuaW9uLklkZW50aXR5LnNldEV1bGVyKHRoaXMueSwgdGhpcy54LCB0aGlzLnopO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIHRoZSBnaXZlbiB2ZWN0b3IgdG8gdGhlIGN1cnJlbnQgVmVjdG9yM1xuICAgICAqIEBwYXJhbSBvdGhlclZlY3RvciAtIGRlZmluZXMgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgdXBkYXRlZCBWZWN0b3IzXG4gICAgICovXG4gICAgYWRkSW5QbGFjZShvdGhlclZlY3Rvcikge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGRJblBsYWNlRnJvbUZsb2F0cyhvdGhlclZlY3Rvci54LCBvdGhlclZlY3Rvci55LCBvdGhlclZlY3Rvci56KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkcyB0aGUgZ2l2ZW4gY29vcmRpbmF0ZXMgdG8gdGhlIGN1cnJlbnQgVmVjdG9yM1xuICAgICAqIEBwYXJhbSB4IC0gZGVmaW5lcyB0aGUgeCBjb29yZGluYXRlIG9mIHRoZSBvcGVyYW5kXG4gICAgICogQHBhcmFtIHkgLSBkZWZpbmVzIHRoZSB5IGNvb3JkaW5hdGUgb2YgdGhlIG9wZXJhbmRcbiAgICAgKiBAcGFyYW0geiAtIGRlZmluZXMgdGhlIHogY29vcmRpbmF0ZSBvZiB0aGUgb3BlcmFuZFxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IHVwZGF0ZWQgVmVjdG9yM1xuICAgICAqL1xuICAgIGFkZEluUGxhY2VGcm9tRmxvYXRzKHgsIHksIHopIHtcbiAgICAgICAgdGhpcy54ICs9IHg7XG4gICAgICAgIHRoaXMueSArPSB5O1xuICAgICAgICB0aGlzLnogKz0gejtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgYSBuZXcgVmVjdG9yMywgcmVzdWx0IG9mIHRoZSBhZGRpdGlvbiB0aGUgY3VycmVudCBWZWN0b3IzIGFuZCB0aGUgZ2l2ZW4gdmVjdG9yXG4gICAgICogQHBhcmFtIG90aGVyVmVjdG9yIC0gZGVmaW5lcyB0aGUgc2Vjb25kIG9wZXJhbmRcbiAgICAgKiBAcmV0dXJucyB0aGUgcmVzdWx0aW5nIFZlY3RvcjNcbiAgICAgKi9cbiAgICBhZGQob3RoZXJWZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IzKHRoaXMueCArIG90aGVyVmVjdG9yLngsIHRoaXMueSArIG90aGVyVmVjdG9yLnksIHRoaXMueiArIG90aGVyVmVjdG9yLnopO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIHRoZSBjdXJyZW50IFZlY3RvcjMgdG8gdGhlIGdpdmVuIG9uZSBhbmQgc3RvcmVzIHRoZSByZXN1bHQgaW4gdGhlIHZlY3RvciBcInJlc3VsdFwiXG4gICAgICogQHBhcmFtIG90aGVyVmVjdG9yIC0gZGVmaW5lcyB0aGUgc2Vjb25kIG9wZXJhbmRcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgVmVjdG9yMyBvYmplY3Qgd2hlcmUgdG8gc3RvcmUgdGhlIHJlc3VsdFxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IFZlY3RvcjNcbiAgICAgKi9cbiAgICBhZGRUb1JlZihvdGhlclZlY3RvciwgcmVzdWx0KSB7XG4gICAgICAgIHJldHVybiByZXN1bHQuY29weUZyb21GbG9hdHModGhpcy54ICsgb3RoZXJWZWN0b3IueCwgdGhpcy55ICsgb3RoZXJWZWN0b3IueSwgdGhpcy56ICsgb3RoZXJWZWN0b3Iueik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN1YnRyYWN0IHRoZSBnaXZlbiB2ZWN0b3IgZnJvbSB0aGUgY3VycmVudCBWZWN0b3IzXG4gICAgICogQHBhcmFtIG90aGVyVmVjdG9yIC0gZGVmaW5lcyB0aGUgc2Vjb25kIG9wZXJhbmRcbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCB1cGRhdGVkIFZlY3RvcjNcbiAgICAgKi9cbiAgICBzdWJ0cmFjdEluUGxhY2Uob3RoZXJWZWN0b3IpIHtcbiAgICAgICAgdGhpcy54IC09IG90aGVyVmVjdG9yLng7XG4gICAgICAgIHRoaXMueSAtPSBvdGhlclZlY3Rvci55O1xuICAgICAgICB0aGlzLnogLT0gb3RoZXJWZWN0b3IuejtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMywgcmVzdWx0IG9mIHRoZSBzdWJ0cmFjdGlvbiBvZiB0aGUgZ2l2ZW4gdmVjdG9yIGZyb20gdGhlIGN1cnJlbnQgVmVjdG9yM1xuICAgICAqIEBwYXJhbSBvdGhlclZlY3RvciAtIGRlZmluZXMgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAgICogQHJldHVybnMgdGhlIHJlc3VsdGluZyBWZWN0b3IzXG4gICAgICovXG4gICAgc3VidHJhY3Qob3RoZXJWZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IzKHRoaXMueCAtIG90aGVyVmVjdG9yLngsIHRoaXMueSAtIG90aGVyVmVjdG9yLnksIHRoaXMueiAtIG90aGVyVmVjdG9yLnopO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdWJ0cmFjdHMgdGhlIGdpdmVuIHZlY3RvciBmcm9tIHRoZSBjdXJyZW50IFZlY3RvcjMgYW5kIHN0b3JlcyB0aGUgcmVzdWx0IGluIHRoZSB2ZWN0b3IgXCJyZXN1bHRcIi5cbiAgICAgKiBAcGFyYW0gb3RoZXJWZWN0b3IgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSBWZWN0b3IzIG9iamVjdCB3aGVyZSB0byBzdG9yZSB0aGUgcmVzdWx0XG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgVmVjdG9yM1xuICAgICAqL1xuICAgIHN1YnRyYWN0VG9SZWYob3RoZXJWZWN0b3IsIHJlc3VsdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdWJ0cmFjdEZyb21GbG9hdHNUb1JlZihvdGhlclZlY3Rvci54LCBvdGhlclZlY3Rvci55LCBvdGhlclZlY3Rvci56LCByZXN1bHQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IFZlY3RvcjMgc2V0IHdpdGggdGhlIHN1YnRyYWN0aW9uIG9mIHRoZSBnaXZlbiBmbG9hdHMgZnJvbSB0aGUgY3VycmVudCBWZWN0b3IzIGNvb3JkaW5hdGVzXG4gICAgICogQHBhcmFtIHggLSBkZWZpbmVzIHRoZSB4IGNvb3JkaW5hdGUgb2YgdGhlIG9wZXJhbmRcbiAgICAgKiBAcGFyYW0geSAtIGRlZmluZXMgdGhlIHkgY29vcmRpbmF0ZSBvZiB0aGUgb3BlcmFuZFxuICAgICAqIEBwYXJhbSB6IC0gZGVmaW5lcyB0aGUgeiBjb29yZGluYXRlIG9mIHRoZSBvcGVyYW5kXG4gICAgICogQHJldHVybnMgdGhlIHJlc3VsdGluZyBWZWN0b3IzXG4gICAgICovXG4gICAgc3VidHJhY3RGcm9tRmxvYXRzKHgsIHksIHopIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IzKHRoaXMueCAtIHgsIHRoaXMueSAtIHksIHRoaXMueiAtIHopO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdWJ0cmFjdHMgdGhlIGdpdmVuIGZsb2F0cyBmcm9tIHRoZSBjdXJyZW50IFZlY3RvcjMgY29vcmRpbmF0ZXMgYW5kIHNldCB0aGUgZ2l2ZW4gdmVjdG9yIFwicmVzdWx0XCIgd2l0aCB0aGlzIHJlc3VsdFxuICAgICAqIEBwYXJhbSB4IC0gZGVmaW5lcyB0aGUgeCBjb29yZGluYXRlIG9mIHRoZSBvcGVyYW5kXG4gICAgICogQHBhcmFtIHkgLSBkZWZpbmVzIHRoZSB5IGNvb3JkaW5hdGUgb2YgdGhlIG9wZXJhbmRcbiAgICAgKiBAcGFyYW0geiAtIGRlZmluZXMgdGhlIHogY29vcmRpbmF0ZSBvZiB0aGUgb3BlcmFuZFxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSBWZWN0b3IzIG9iamVjdCB3aGVyZSB0byBzdG9yZSB0aGUgcmVzdWx0XG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgVmVjdG9yM1xuICAgICAqL1xuICAgIHN1YnRyYWN0RnJvbUZsb2F0c1RvUmVmKHgsIHksIHosIHJlc3VsdCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0LmNvcHlGcm9tRmxvYXRzKHRoaXMueCAtIHgsIHRoaXMueSAtIHksIHRoaXMueiAtIHopO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNdWx0aXBsaWVzIHRoaXMgdmVjdG9yICh3aXRoIGFuIGltcGxpY2l0IDEgaW4gdGhlIDR0aCBkaW1lbnNpb24pIGFuZCBtLCBhbmQgZGl2aWRlcyBieSBwZXJzcGVjdGl2ZVxuICAgICAqIEBwYXJhbSBtYXRyaXggLSBUaGUgdHJhbnNmb3JtYXRpb24gbWF0cml4XG4gICAgICovXG4gICAgYXBwbHlNYXRyaXg0KG1hdHJpeCkge1xuICAgICAgICB0aGlzLmFwcGx5TWF0cml4NFRvUmVmKG1hdHJpeCwgdGhpcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE11bHRpcGxpZXMgdGhpcyB2ZWN0b3IgKHdpdGggYW4gaW1wbGljaXQgMSBpbiB0aGUgNHRoIGRpbWVuc2lvbikgYW5kIG0sIGFuZCBkaXZpZGVzIGJ5IHBlcnNwZWN0aXZlIGFuZCBzZXQgdGhlIGdpdmVuIHZlY3RvciBcInJlc3VsdFwiIHdpdGggdGhpcyByZXN1bHRcbiAgICAgKiBAcGFyYW0gbWF0cml4IC0gVGhlIHRyYW5zZm9ybWF0aW9uIG1hdHJpeFxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSBWZWN0b3IzIG9iamVjdCB3aGVyZSB0byBzdG9yZSB0aGUgcmVzdWx0XG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgVmVjdG9yM1xuICAgICAqL1xuICAgIGFwcGx5TWF0cml4NFRvUmVmKG1hdHJpeCwgcmVzdWx0KSB7XG4gICAgICAgIGNvbnN0IHsgeCwgeSwgeiB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgeyBtIH0gPSBtYXRyaXg7XG4gICAgICAgIGNvbnN0IHcgPSAxIC8gKG1bM10gKiB4ICsgbVs3XSAqIHkgKyBtWzExXSAqIHogKyBtWzE1XSk7XG4gICAgICAgIHJlc3VsdC54ID0gKG1bMF0gKiB4ICsgbVs0XSAqIHkgKyBtWzhdICogeiArIG1bMTJdKSAqIHc7XG4gICAgICAgIHJlc3VsdC55ID0gKG1bMV0gKiB4ICsgbVs1XSAqIHkgKyBtWzldICogeiArIG1bMTNdKSAqIHc7XG4gICAgICAgIHJlc3VsdC56ID0gKG1bMl0gKiB4ICsgbVs2XSAqIHkgKyBtWzEwXSAqIHogKyBtWzE0XSkgKiB3O1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSb3RhdGVzIHRoZSBjdXJyZW50IFZlY3RvcjMgYmFzZWQgb24gdGhlIGdpdmVuIHF1YXRlcm5pb25cbiAgICAgKiBAcGFyYW0gcSAtIGRlZmluZXMgdGhlIFF1YXRlcm5pb25cbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCBWZWN0b3IzXG4gICAgICovXG4gICAgcm90YXRlKHEpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucm90YXRlVG9SZWYocSwgdGhpcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJvdGF0ZXMgY3VycmVudCBWZWN0b3IzIGJhc2VkIG9uIHRoZSBnaXZlbiBxdWF0ZXJuaW9uLCBidXQgYXBwbGllcyB0aGUgcm90YXRpb24gdG8gdGFyZ2V0IFZlY3RvcjMuXG4gICAgICogQHBhcmFtIHEgLSBkZWZpbmVzIHRoZSBRdWF0ZXJuaW9uXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIHRhcmdldCBWZWN0b3IzXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgVmVjdG9yM1xuICAgICAqL1xuICAgIHJvdGF0ZVRvUmVmKHEsIHJlc3VsdCkge1xuICAgICAgICBjb25zdCB7IHgsIHksIHogfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHsgeDogcXgsIHk6IHF5LCB6OiBxeiwgdzogcXcgfSA9IHE7XG4gICAgICAgIC8vIGNhbGN1bGF0ZSBxdWF0ICogdmVjdG9yXG4gICAgICAgIGNvbnN0IGl4ID0gcXcgKiB4ICsgcXkgKiB6IC0gcXogKiB5O1xuICAgICAgICBjb25zdCBpeSA9IHF3ICogeSArIHF6ICogeCAtIHF4ICogejtcbiAgICAgICAgY29uc3QgaXogPSBxdyAqIHogKyBxeCAqIHkgLSBxeSAqIHg7XG4gICAgICAgIGNvbnN0IGl3ID0gLXF4ICogeCAtIHF5ICogeSAtIHF6ICogejtcbiAgICAgICAgLy8gY2FsY3VsYXRlIHJlc3VsdCAqIGludmVyc2UgcXVhdFxuICAgICAgICByZXN1bHQueCA9IGl4ICogcXcgKyBpdyAqIC1xeCArIGl5ICogLXF6IC0gaXogKiAtcXk7XG4gICAgICAgIHJlc3VsdC55ID0gaXkgKiBxdyArIGl3ICogLXF5ICsgaXogKiAtcXggLSBpeCAqIC1xejtcbiAgICAgICAgcmVzdWx0LnogPSBpeiAqIHF3ICsgaXcgKiAtcXogKyBpeCAqIC1xeSAtIGl5ICogLXF4O1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgbmV3IFZlY3RvcjMgc2V0IHdpdGggdGhlIGN1cnJlbnQgVmVjdG9yMyBuZWdhdGVkIGNvb3JkaW5hdGVzXG4gICAgICogQHJldHVybnMgYSBuZXcgVmVjdG9yM1xuICAgICAqL1xuICAgIG5lZ2F0ZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IzKC10aGlzLngsIC10aGlzLnksIC10aGlzLnopO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNdWx0aXBsaWVzIHRoZSBWZWN0b3IzIGNvb3JkaW5hdGVzIGJ5IHRoZSBmbG9hdCBcInNjYWxlXCJcbiAgICAgKiBAcGFyYW0gc2NhbGUgLSBkZWZpbmVzIHRoZSBtdWx0aXBsaWVyIGZhY3RvclxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IHVwZGF0ZWQgVmVjdG9yM1xuICAgICAqL1xuICAgIHNjYWxlSW5QbGFjZShzY2FsZSkge1xuICAgICAgICB0aGlzLnggKj0gc2NhbGU7XG4gICAgICAgIHRoaXMueSAqPSBzY2FsZTtcbiAgICAgICAgdGhpcy56ICo9IHNjYWxlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBWZWN0b3IzIHNldCB3aXRoIHRoZSBjdXJyZW50IFZlY3RvcjMgY29vcmRpbmF0ZXMgbXVsdGlwbGllZCBieSB0aGUgZmxvYXQgXCJzY2FsZVwiXG4gICAgICogQHBhcmFtIHNjYWxlIC0gZGVmaW5lcyB0aGUgbXVsdGlwbGllciBmYWN0b3JcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBWZWN0b3IzXG4gICAgICovXG4gICAgc2NhbGUoc2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IzKHRoaXMueCAqIHNjYWxlLCB0aGlzLnkgKiBzY2FsZSwgdGhpcy56ICogc2NhbGUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNdWx0aXBsaWVzIHRoZSBjdXJyZW50IFZlY3RvcjMgY29vcmRpbmF0ZXMgYnkgdGhlIGZsb2F0IFwic2NhbGVcIiBhbmQgc3RvcmVzIHRoZSByZXN1bHQgaW4gdGhlIGdpdmVuIHZlY3RvciBcInJlc3VsdFwiIGNvb3JkaW5hdGVzXG4gICAgICogQHBhcmFtIHNjYWxlIC0gZGVmaW5lcyB0aGUgbXVsdGlwbGllciBmYWN0b3JcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgVmVjdG9yMyBvYmplY3Qgd2hlcmUgdG8gc3RvcmUgdGhlIHJlc3VsdFxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IFZlY3RvcjNcbiAgICAgKi9cbiAgICBzY2FsZVRvUmVmKHNjYWxlLCByZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdC5jb3B5RnJvbUZsb2F0cyh0aGlzLnggKiBzY2FsZSwgdGhpcy55ICogc2NhbGUsIHRoaXMueiAqIHNjYWxlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2NhbGUgdGhlIGN1cnJlbnQgVmVjdG9yMyB2YWx1ZXMgYnkgYSBmYWN0b3IgYW5kIGFkZCB0aGUgcmVzdWx0IHRvIGEgZ2l2ZW4gVmVjdG9yM1xuICAgICAqIEBwYXJhbSBzY2FsZSAtIGRlZmluZXMgdGhlIHNjYWxlIGZhY3RvclxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSBWZWN0b3IzIG9iamVjdCB3aGVyZSB0byBzdG9yZSB0aGUgcmVzdWx0XG4gICAgICogQHJldHVybnMgdGhlIHVubW9kaWZpZWQgY3VycmVudCBWZWN0b3IzXG4gICAgICovXG4gICAgc2NhbGVBbmRBZGRUb1JlZihzY2FsZSwgcmVzdWx0KSB7XG4gICAgICAgIHJldHVybiByZXN1bHQuYWRkSW5QbGFjZUZyb21GbG9hdHModGhpcy54ICogc2NhbGUsIHRoaXMueSAqIHNjYWxlLCB0aGlzLnogKiBzY2FsZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgY3VycmVudCBWZWN0b3IzIGFuZCB0aGUgZ2l2ZW4gdmVjdG9yIGNvb3JkaW5hdGVzIGFyZSBzdHJpY3RseSBlcXVhbFxuICAgICAqIEBwYXJhbSBvdGhlclZlY3RvciAtIGRlZmluZXMgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAgICogQHJldHVybnMgdHJ1ZSBpZiBib3RoIHZlY3RvcnMgYXJlIGVxdWFsc1xuICAgICAqL1xuICAgIGVxdWFscyhvdGhlclZlY3Rvcikge1xuICAgICAgICByZXR1cm4gKG90aGVyVmVjdG9yICYmXG4gICAgICAgICAgICB0aGlzLnggPT09IG90aGVyVmVjdG9yLnggJiZcbiAgICAgICAgICAgIHRoaXMueSA9PT0gb3RoZXJWZWN0b3IueSAmJlxuICAgICAgICAgICAgdGhpcy56ID09PSBvdGhlclZlY3Rvci56KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBjdXJyZW50IFZlY3RvcjMgYW5kIHRoZSBnaXZlbiB2ZWN0b3IgY29vcmRpbmF0ZXMgYXJlIGRpc3RhbnQgbGVzcyB0aGFuIGVwc2lsb25cbiAgICAgKiBAcGFyYW0gb3RoZXJWZWN0b3IgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEBwYXJhbSBlcHNpbG9uIC0gZGVmaW5lcyB0aGUgbWluaW1hbCBkaXN0YW5jZSB0byBkZWZpbmUgdmFsdWVzIGFzIGVxdWFsc1xuICAgICAqIEByZXR1cm5zIHRydWUgaWYgYm90aCB2ZWN0b3JzIGFyZSBkaXN0YW50IGxlc3MgdGhhbiBlcHNpbG9uXG4gICAgICovXG4gICAgZXF1YWxzV2l0aEVwc2lsb24ob3RoZXJWZWN0b3IsIGVwc2lsb24gPSB0eXBlc18xLkVwc2lsb24pIHtcbiAgICAgICAgcmV0dXJuIChvdGhlclZlY3RvciAmJlxuICAgICAgICAgICAgU2NhbGFyXzEuU2NhbGFyLldpdGhpbkVwc2lsb24odGhpcy54LCBvdGhlclZlY3Rvci54LCBlcHNpbG9uKSAmJlxuICAgICAgICAgICAgU2NhbGFyXzEuU2NhbGFyLldpdGhpbkVwc2lsb24odGhpcy55LCBvdGhlclZlY3Rvci55LCBlcHNpbG9uKSAmJlxuICAgICAgICAgICAgU2NhbGFyXzEuU2NhbGFyLldpdGhpbkVwc2lsb24odGhpcy56LCBvdGhlclZlY3Rvci56LCBlcHNpbG9uKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgY3VycmVudCBWZWN0b3IzIGNvb3JkaW5hdGVzIGVxdWFscyB0aGUgZ2l2ZW4gZmxvYXRzXG4gICAgICogQHBhcmFtIHggLSBkZWZpbmVzIHRoZSB4IGNvb3JkaW5hdGUgb2YgdGhlIG9wZXJhbmRcbiAgICAgKiBAcGFyYW0geSAtIGRlZmluZXMgdGhlIHkgY29vcmRpbmF0ZSBvZiB0aGUgb3BlcmFuZFxuICAgICAqIEBwYXJhbSB6IC0gZGVmaW5lcyB0aGUgeiBjb29yZGluYXRlIG9mIHRoZSBvcGVyYW5kXG4gICAgICogQHJldHVybnMgdHJ1ZSBpZiBib3RoIHZlY3RvcnMgYXJlIGVxdWFsc1xuICAgICAqL1xuICAgIGVxdWFsc1RvRmxvYXRzKHgsIHksIHopIHtcbiAgICAgICAgcmV0dXJuIHRoaXMueCA9PT0geCAmJiB0aGlzLnkgPT09IHkgJiYgdGhpcy56ID09PSB6O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNdWx0aXBsaWVzIHRoZSBjdXJyZW50IFZlY3RvcjMgY29vcmRpbmF0ZXMgYnkgdGhlIGdpdmVuIG9uZXNcbiAgICAgKiBAcGFyYW0gb3RoZXJWZWN0b3IgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IHVwZGF0ZWQgVmVjdG9yM1xuICAgICAqL1xuICAgIG11bHRpcGx5SW5QbGFjZShvdGhlclZlY3Rvcikge1xuICAgICAgICB0aGlzLnggKj0gb3RoZXJWZWN0b3IueDtcbiAgICAgICAgdGhpcy55ICo9IG90aGVyVmVjdG9yLnk7XG4gICAgICAgIHRoaXMueiAqPSBvdGhlclZlY3Rvci56O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBWZWN0b3IzLCByZXN1bHQgb2YgdGhlIG11bHRpcGxpY2F0aW9uIG9mIHRoZSBjdXJyZW50IFZlY3RvcjMgYnkgdGhlIGdpdmVuIHZlY3RvclxuICAgICAqIEBwYXJhbSBvdGhlclZlY3RvciAtIGRlZmluZXMgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAgICogQHJldHVybnMgdGhlIG5ldyBWZWN0b3IzXG4gICAgICovXG4gICAgbXVsdGlwbHkob3RoZXJWZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubXVsdGlwbHlCeUZsb2F0cyhvdGhlclZlY3Rvci54LCBvdGhlclZlY3Rvci55LCBvdGhlclZlY3Rvci56KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTXVsdGlwbGllcyB0aGUgY3VycmVudCBWZWN0b3IzIGJ5IHRoZSBnaXZlbiBvbmUgYW5kIHN0b3JlcyB0aGUgcmVzdWx0IGluIHRoZSBnaXZlbiB2ZWN0b3IgXCJyZXN1bHRcIlxuICAgICAqIEBwYXJhbSBvdGhlclZlY3RvciAtIGRlZmluZXMgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIFZlY3RvcjMgb2JqZWN0IHdoZXJlIHRvIHN0b3JlIHRoZSByZXN1bHRcbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCBWZWN0b3IzXG4gICAgICovXG4gICAgbXVsdGlwbHlUb1JlZihvdGhlclZlY3RvciwgcmVzdWx0KSB7XG4gICAgICAgIHJldHVybiByZXN1bHQuY29weUZyb21GbG9hdHModGhpcy54ICogb3RoZXJWZWN0b3IueCwgdGhpcy55ICogb3RoZXJWZWN0b3IueSwgdGhpcy56ICogb3RoZXJWZWN0b3Iueik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBzZXQgd2l0aCB0aGUgcmVzdWx0IG9mIHRoZSBtdWxsaXBsaWNhdGlvbiBvZiB0aGUgY3VycmVudCBWZWN0b3IzIGNvb3JkaW5hdGVzIGJ5IHRoZSBnaXZlbiBmbG9hdHNcbiAgICAgKiBAcGFyYW0geCAtIGRlZmluZXMgdGhlIHggY29vcmRpbmF0ZSBvZiB0aGUgb3BlcmFuZFxuICAgICAqIEBwYXJhbSB5IC0gZGVmaW5lcyB0aGUgeSBjb29yZGluYXRlIG9mIHRoZSBvcGVyYW5kXG4gICAgICogQHBhcmFtIHogLSBkZWZpbmVzIHRoZSB6IGNvb3JkaW5hdGUgb2YgdGhlIG9wZXJhbmRcbiAgICAgKiBAcmV0dXJucyB0aGUgbmV3IFZlY3RvcjNcbiAgICAgKi9cbiAgICBtdWx0aXBseUJ5RmxvYXRzKHgsIHksIHopIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IzKHRoaXMueCAqIHgsIHRoaXMueSAqIHksIHRoaXMueiAqIHopO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IFZlY3RvcjMgc2V0IHdpdGggdGhlIHJlc3VsdCBvZiB0aGUgZGl2aXNpb24gb2YgdGhlIGN1cnJlbnQgVmVjdG9yMyBjb29yZGluYXRlcyBieSB0aGUgZ2l2ZW4gb25lc1xuICAgICAqIEBwYXJhbSBvdGhlclZlY3RvciAtIGRlZmluZXMgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAgICogQHJldHVybnMgdGhlIG5ldyBWZWN0b3IzXG4gICAgICovXG4gICAgZGl2aWRlKG90aGVyVmVjdG9yKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMyh0aGlzLnggLyBvdGhlclZlY3Rvci54LCB0aGlzLnkgLyBvdGhlclZlY3Rvci55LCB0aGlzLnogLyBvdGhlclZlY3Rvci56KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGl2aWRlcyB0aGUgY3VycmVudCBWZWN0b3IzIGNvb3JkaW5hdGVzIGJ5IHRoZSBnaXZlbiBvbmVzIGFuZCBzdG9yZXMgdGhlIHJlc3VsdCBpbiB0aGUgZ2l2ZW4gdmVjdG9yIFwicmVzdWx0XCJcbiAgICAgKiBAcGFyYW0gb3RoZXJWZWN0b3IgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSBWZWN0b3IzIG9iamVjdCB3aGVyZSB0byBzdG9yZSB0aGUgcmVzdWx0XG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgVmVjdG9yM1xuICAgICAqL1xuICAgIGRpdmlkZVRvUmVmKG90aGVyVmVjdG9yLCByZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdC5jb3B5RnJvbUZsb2F0cyh0aGlzLnggLyBvdGhlclZlY3Rvci54LCB0aGlzLnkgLyBvdGhlclZlY3Rvci55LCB0aGlzLnogLyBvdGhlclZlY3Rvci56KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGl2aWRlcyB0aGUgY3VycmVudCBWZWN0b3IzIGNvb3JkaW5hdGVzIGJ5IHRoZSBnaXZlbiBvbmVzLlxuICAgICAqIEBwYXJhbSBvdGhlclZlY3RvciAtIGRlZmluZXMgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgdXBkYXRlZCBWZWN0b3IzXG4gICAgICovXG4gICAgZGl2aWRlSW5QbGFjZShvdGhlclZlY3Rvcikge1xuICAgICAgICByZXR1cm4gdGhpcy5kaXZpZGVUb1JlZihvdGhlclZlY3RvciwgdGhpcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGN1cnJlbnQgVmVjdG9yMyB3aXRoIHRoZSBtaW5pbWFsIGNvb3JkaW5hdGUgdmFsdWVzIGJldHdlZW4gaXRzIGFuZCB0aGUgZ2l2ZW4gdmVjdG9yIG9uZXNcbiAgICAgKiBAcGFyYW0gb3RoZXIgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IHVwZGF0ZWQgVmVjdG9yM1xuICAgICAqL1xuICAgIG1pbmltaXplSW5QbGFjZShvdGhlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5taW5pbWl6ZUluUGxhY2VGcm9tRmxvYXRzKG90aGVyLngsIG90aGVyLnksIG90aGVyLnopO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBjdXJyZW50IFZlY3RvcjMgd2l0aCB0aGUgbWF4aW1hbCBjb29yZGluYXRlIHZhbHVlcyBiZXR3ZWVuIGl0cyBhbmQgdGhlIGdpdmVuIHZlY3RvciBvbmVzLlxuICAgICAqIEBwYXJhbSBvdGhlciAtIGRlZmluZXMgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgdXBkYXRlZCBWZWN0b3IzXG4gICAgICovXG4gICAgbWF4aW1pemVJblBsYWNlKG90aGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1heGltaXplSW5QbGFjZUZyb21GbG9hdHMob3RoZXIueCwgb3RoZXIueSwgb3RoZXIueik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGN1cnJlbnQgVmVjdG9yMyB3aXRoIHRoZSBtaW5pbWFsIGNvb3JkaW5hdGUgdmFsdWVzIGJldHdlZW4gaXRzIGFuZCB0aGUgZ2l2ZW4gY29vcmRpbmF0ZXNcbiAgICAgKiBAcGFyYW0geCAtIGRlZmluZXMgdGhlIHggY29vcmRpbmF0ZSBvZiB0aGUgb3BlcmFuZFxuICAgICAqIEBwYXJhbSB5IC0gZGVmaW5lcyB0aGUgeSBjb29yZGluYXRlIG9mIHRoZSBvcGVyYW5kXG4gICAgICogQHBhcmFtIHogLSBkZWZpbmVzIHRoZSB6IGNvb3JkaW5hdGUgb2YgdGhlIG9wZXJhbmRcbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCB1cGRhdGVkIFZlY3RvcjNcbiAgICAgKi9cbiAgICBtaW5pbWl6ZUluUGxhY2VGcm9tRmxvYXRzKHgsIHksIHopIHtcbiAgICAgICAgaWYgKHggPCB0aGlzLngpIHtcbiAgICAgICAgICAgIHRoaXMueCA9IHg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHkgPCB0aGlzLnkpIHtcbiAgICAgICAgICAgIHRoaXMueSA9IHk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHogPCB0aGlzLnopIHtcbiAgICAgICAgICAgIHRoaXMueiA9IHo7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGN1cnJlbnQgVmVjdG9yMyB3aXRoIHRoZSBtYXhpbWFsIGNvb3JkaW5hdGUgdmFsdWVzIGJldHdlZW4gaXRzIGFuZCB0aGUgZ2l2ZW4gY29vcmRpbmF0ZXMuXG4gICAgICogQHBhcmFtIHggLSBkZWZpbmVzIHRoZSB4IGNvb3JkaW5hdGUgb2YgdGhlIG9wZXJhbmRcbiAgICAgKiBAcGFyYW0geSAtIGRlZmluZXMgdGhlIHkgY29vcmRpbmF0ZSBvZiB0aGUgb3BlcmFuZFxuICAgICAqIEBwYXJhbSB6IC0gZGVmaW5lcyB0aGUgeiBjb29yZGluYXRlIG9mIHRoZSBvcGVyYW5kXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgdXBkYXRlZCBWZWN0b3IzXG4gICAgICovXG4gICAgbWF4aW1pemVJblBsYWNlRnJvbUZsb2F0cyh4LCB5LCB6KSB7XG4gICAgICAgIGlmICh4ID4gdGhpcy54KSB7XG4gICAgICAgICAgICB0aGlzLnggPSB4O1xuICAgICAgICB9XG4gICAgICAgIGlmICh5ID4gdGhpcy55KSB7XG4gICAgICAgICAgICB0aGlzLnkgPSB5O1xuICAgICAgICB9XG4gICAgICAgIGlmICh6ID4gdGhpcy56KSB7XG4gICAgICAgICAgICB0aGlzLnogPSB6O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgbmV3IFZlY3RvcjMgZnJvbSBjdXJyZW50IFZlY3RvcjMgZmxvb3JlZCB2YWx1ZXNcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBWZWN0b3IzXG4gICAgICovXG4gICAgZmxvb3IoKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMyhNYXRoLmZsb29yKHRoaXMueCksIE1hdGguZmxvb3IodGhpcy55KSwgTWF0aC5mbG9vcih0aGlzLnopKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyBhIG5ldyBWZWN0b3IzIGZyb20gY3VycmVudCBWZWN0b3IzIGZsb29yZWQgdmFsdWVzXG4gICAgICogQHJldHVybnMgYSBuZXcgVmVjdG9yM1xuICAgICAqL1xuICAgIGZyYWN0KCkge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjModGhpcy54IC0gTWF0aC5mbG9vcih0aGlzLngpLCB0aGlzLnkgLSBNYXRoLmZsb29yKHRoaXMueSksIHRoaXMueiAtIE1hdGguZmxvb3IodGhpcy56KSk7XG4gICAgfVxuICAgIC8vIFByb3BlcnRpZXNcbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBsZW5ndGggb2YgdGhlIFZlY3RvcjNcbiAgICAgKiBAcmV0dXJucyB0aGUgbGVuZ3RoIG9mIHRoZSBWZWN0bzNcbiAgICAgKi9cbiAgICBsZW5ndGgoKSB7XG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQodGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55ICsgdGhpcy56ICogdGhpcy56KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgc3F1YXJlZCBsZW5ndGggb2YgdGhlIFZlY3RvcjNcbiAgICAgKiBAcmV0dXJucyBzcXVhcmVkIGxlbmd0aCBvZiB0aGUgVmVjdG9yM1xuICAgICAqL1xuICAgIGxlbmd0aFNxdWFyZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnkgKyB0aGlzLnogKiB0aGlzLno7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE5vcm1hbGl6ZSB0aGUgY3VycmVudCBWZWN0b3IzLlxuICAgICAqIFBsZWFzZSBub3RlIHRoYXQgdGhpcyBpcyBhbiBpbiBwbGFjZSBvcGVyYXRpb24uXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgdXBkYXRlZCBWZWN0b3IzXG4gICAgICovXG4gICAgbm9ybWFsaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ub3JtYWxpemVGcm9tTGVuZ3RoKHRoaXMubGVuZ3RoKCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBOb3JtYWxpemUgdGhlIGN1cnJlbnQgVmVjdG9yMyB3aXRoIHRoZSBnaXZlbiBpbnB1dCBsZW5ndGguXG4gICAgICogUGxlYXNlIG5vdGUgdGhhdCB0aGlzIGlzIGFuIGluIHBsYWNlIG9wZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0gbGVuIC0gdGhlIGxlbmd0aCBvZiB0aGUgdmVjdG9yXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgdXBkYXRlZCBWZWN0b3IzXG4gICAgICovXG4gICAgbm9ybWFsaXplRnJvbUxlbmd0aChsZW4pIHtcbiAgICAgICAgaWYgKGxlbiA9PT0gMCB8fCBsZW4gPT09IDEuMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuc2NhbGVJblBsYWNlKDEuMCAvIGxlbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE5vcm1hbGl6ZSB0aGUgY3VycmVudCBWZWN0b3IzIHRvIGEgbmV3IHZlY3RvclxuICAgICAqIEByZXR1cm5zIHRoZSBuZXcgVmVjdG9yM1xuICAgICAqL1xuICAgIG5vcm1hbGl6ZVRvTmV3KCkge1xuICAgICAgICBjb25zdCBub3JtYWxpemVkID0gbmV3IFZlY3RvcjMoMCwgMCwgMCk7XG4gICAgICAgIHRoaXMubm9ybWFsaXplVG9SZWYobm9ybWFsaXplZCk7XG4gICAgICAgIHJldHVybiBub3JtYWxpemVkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBOb3JtYWxpemUgdGhlIGN1cnJlbnQgVmVjdG9yMyB0byB0aGUgcmVmZXJlbmNlXG4gICAgICogQHBhcmFtIHJlZmVyZW5jZSAtIGRlZmluZSB0aGUgVmVjdG9yMyB0byB1cGRhdGVcbiAgICAgKiBAcmV0dXJucyB0aGUgdXBkYXRlZCBWZWN0b3IzXG4gICAgICovXG4gICAgbm9ybWFsaXplVG9SZWYocmVmZXJlbmNlKSB7XG4gICAgICAgIGNvbnN0IGxlbiA9IHRoaXMubGVuZ3RoKCk7XG4gICAgICAgIGlmIChsZW4gPT09IDAgfHwgbGVuID09PSAxLjApIHtcbiAgICAgICAgICAgIHJldHVybiByZWZlcmVuY2UuY29weUZyb21GbG9hdHModGhpcy54LCB0aGlzLnksIHRoaXMueik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuc2NhbGVUb1JlZigxLjAgLyBsZW4sIHJlZmVyZW5jZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgVmVjdG9yMyBjb3BpZWQgZnJvbSB0aGUgY3VycmVudCBWZWN0b3IzXG4gICAgICogQHJldHVybnMgdGhlIG5ldyBWZWN0b3IzXG4gICAgICovXG4gICAgY2xvbmUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMyh0aGlzLngsIHRoaXMueSwgdGhpcy56KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29waWVzIHRoZSBnaXZlbiB2ZWN0b3IgY29vcmRpbmF0ZXMgdG8gdGhlIGN1cnJlbnQgVmVjdG9yMyBvbmVzXG4gICAgICogQHBhcmFtIHNvdXJjZSAtIGRlZmluZXMgdGhlIHNvdXJjZSBWZWN0b3IzXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgdXBkYXRlZCBWZWN0b3IzXG4gICAgICovXG4gICAgY29weUZyb20oc291cmNlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvcHlGcm9tRmxvYXRzKHNvdXJjZS54LCBzb3VyY2UueSwgc291cmNlLnopO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgdGhlIGdpdmVuIGZsb2F0cyB0byB0aGUgY3VycmVudCBWZWN0b3IzIGNvb3JkaW5hdGVzXG4gICAgICogQHBhcmFtIHggLSBkZWZpbmVzIHRoZSB4IGNvb3JkaW5hdGUgb2YgdGhlIG9wZXJhbmRcbiAgICAgKiBAcGFyYW0geSAtIGRlZmluZXMgdGhlIHkgY29vcmRpbmF0ZSBvZiB0aGUgb3BlcmFuZFxuICAgICAqIEBwYXJhbSB6IC0gZGVmaW5lcyB0aGUgeiBjb29yZGluYXRlIG9mIHRoZSBvcGVyYW5kXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgdXBkYXRlZCBWZWN0b3IzXG4gICAgICovXG4gICAgY29weUZyb21GbG9hdHMoeCwgeSwgeikge1xuICAgICAgICB0aGlzLnggPSB4O1xuICAgICAgICB0aGlzLnkgPSB5O1xuICAgICAgICB0aGlzLnogPSB6O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29waWVzIHRoZSBnaXZlbiBmbG9hdHMgdG8gdGhlIGN1cnJlbnQgVmVjdG9yMyBjb29yZGluYXRlc1xuICAgICAqIEBwYXJhbSB4IC0gZGVmaW5lcyB0aGUgeCBjb29yZGluYXRlIG9mIHRoZSBvcGVyYW5kXG4gICAgICogQHBhcmFtIHkgLSBkZWZpbmVzIHRoZSB5IGNvb3JkaW5hdGUgb2YgdGhlIG9wZXJhbmRcbiAgICAgKiBAcGFyYW0geiAtIGRlZmluZXMgdGhlIHogY29vcmRpbmF0ZSBvZiB0aGUgb3BlcmFuZFxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IHVwZGF0ZWQgVmVjdG9yM1xuICAgICAqL1xuICAgIHNldCh4LCB5LCB6KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvcHlGcm9tRmxvYXRzKHgsIHksIHopO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgdGhlIGdpdmVuIGZsb2F0IHRvIHRoZSBjdXJyZW50IFZlY3RvcjMgY29vcmRpbmF0ZXNcbiAgICAgKiBAcGFyYW0gdiAtIGRlZmluZXMgdGhlIHgsIHkgYW5kIHogY29vcmRpbmF0ZXMgb2YgdGhlIG9wZXJhbmRcbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCB1cGRhdGVkIFZlY3RvcjNcbiAgICAgKi9cbiAgICBzZXRBbGwodikge1xuICAgICAgICB0aGlzLnggPSB0aGlzLnkgPSB0aGlzLnogPSB2O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG5leHBvcnRzLlZlY3RvcjMgPSBWZWN0b3IzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VmVjdG9yMy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTWF0aFRtcCA9IHZvaWQgMDtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbmNvbnN0IFZlY3RvcjNfMSA9IHJlcXVpcmUoXCIuL1ZlY3RvcjNcIik7XG5jb25zdCBRdWF0ZXJuaW9uXzEgPSByZXF1aXJlKFwiLi9RdWF0ZXJuaW9uXCIpO1xuY29uc3QgTWF0cml4XzEgPSByZXF1aXJlKFwiLi9NYXRyaXhcIik7XG4vLyBUZW1wb3JhcnkgcHJlLWFsbG9jYXRlZCBvYmplY3RzIGZvciBlbmdpbmUgaW50ZXJuYWwgdXNlXG4vLyB1c2FnZSBpbiBhbnkgaW50ZXJuYWwgZnVuY3Rpb24gOlxuLy8gdmFyIHRtcCA9IFRtcC5WZWN0b3IzWzBdOyAgIDw9IGdldHMgYWNjZXNzIHRvIHRoZSBmaXJzdCBwcmUtY3JlYXRlZCBWZWN0b3IzXG4vLyBUaGVyZSdzIGEgVG1wIGFycmF5IHBlciBvYmplY3QgdHlwZSA6IGludCwgZmxvYXQsIFZlY3RvcjIsIFZlY3RvcjMsIFZlY3RvcjQsIFF1YXRlcm5pb24sIE1hdHJpeFxuLyoqXG4gKiBAcHVibGljXG4gKiBTYW1lIGFzIFRtcCBidXQgbm90IGV4cG9ydGVkIHRvIGtlZXAgaXQgb25seSBmb3IgbWF0aCBmdW5jdGlvbnMgdG8gYXZvaWQgY29uZmxpY3RzXG4gKi9cbmV4cG9ydHMuTWF0aFRtcCA9IHtcbiAgICBWZWN0b3IzOiAoMCwgdXRpbHNfMS5idWlsZEFycmF5KSg2LCBWZWN0b3IzXzEuVmVjdG9yMy5aZXJvKSxcbiAgICBNYXRyaXg6ICgwLCB1dGlsc18xLmJ1aWxkQXJyYXkpKDIsIE1hdHJpeF8xLk1hdHJpeC5JZGVudGl0eSksXG4gICAgUXVhdGVybmlvbjogKDAsIHV0aWxzXzEuYnVpbGRBcnJheSkoMywgUXVhdGVybmlvbl8xLlF1YXRlcm5pb24uWmVybyksXG4gICAgc3RhdGljVXA6IFZlY3RvcjNfMS5WZWN0b3IzLlVwKCksXG4gICAgdG1wTWF0cml4OiBNYXRyaXhfMS5NYXRyaXguWmVybygpXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJlYWxsb2NhdGVkVmFyaWFibGVzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BbmdsZSA9IHZvaWQgMDtcbi8qKlxuICogRGVmaW5lcyBhbmdsZSByZXByZXNlbnRhdGlvblxuICogQHB1YmxpY1xuICovXG5jbGFzcyBBbmdsZSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBBbmdsZSBvYmplY3Qgb2YgXCJyYWRpYW5zXCIgcmFkaWFucyAoZmxvYXQpLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHJhZGlhbnMpIHtcbiAgICAgICAgdGhpcy5fcmFkaWFucyA9IHJhZGlhbnM7XG4gICAgICAgIGlmICh0aGlzLl9yYWRpYW5zIDwgMC4wKSB7XG4gICAgICAgICAgICB0aGlzLl9yYWRpYW5zICs9IDIuMCAqIE1hdGguUEk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyBhIG5ldyBBbmdsZSBvYmplY3QgdmFsdWVkIHdpdGggdGhlIGFuZ2xlIHZhbHVlIGluIHJhZGlhbnMgYmV0d2VlbiB0aGUgdHdvIGdpdmVuIHZlY3RvcnNcbiAgICAgKiBAcGFyYW0gYSAtIGRlZmluZXMgZmlyc3QgdmVjdG9yXG4gICAgICogQHBhcmFtIGIgLSBkZWZpbmVzIHNlY29uZCB2ZWN0b3JcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBBbmdsZVxuICAgICAqL1xuICAgIHN0YXRpYyBCZXR3ZWVuVHdvUG9pbnRzKGEsIGIpIHtcbiAgICAgICAgY29uc3QgZGVsdGEgPSBiLnN1YnRyYWN0KGEpO1xuICAgICAgICBjb25zdCB0aGV0YSA9IE1hdGguYXRhbjIoZGVsdGEueSwgZGVsdGEueCk7XG4gICAgICAgIHJldHVybiBuZXcgQW5nbGUodGhldGEpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgbmV3IEFuZ2xlIG9iamVjdCBmcm9tIHRoZSBnaXZlbiBmbG9hdCBpbiByYWRpYW5zXG4gICAgICogQHBhcmFtIHJhZGlhbnMgLSBkZWZpbmVzIHRoZSBhbmdsZSB2YWx1ZSBpbiByYWRpYW5zXG4gICAgICogQHJldHVybnMgYSBuZXcgQW5nbGVcbiAgICAgKi9cbiAgICBzdGF0aWMgRnJvbVJhZGlhbnMocmFkaWFucykge1xuICAgICAgICByZXR1cm4gbmV3IEFuZ2xlKHJhZGlhbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgbmV3IEFuZ2xlIG9iamVjdCBmcm9tIHRoZSBnaXZlbiBmbG9hdCBpbiBkZWdyZWVzXG4gICAgICogQHBhcmFtIGRlZ3JlZXMgLSBkZWZpbmVzIHRoZSBhbmdsZSB2YWx1ZSBpbiBkZWdyZWVzXG4gICAgICogQHJldHVybnMgYSBuZXcgQW5nbGVcbiAgICAgKi9cbiAgICBzdGF0aWMgRnJvbURlZ3JlZXMoZGVncmVlcykge1xuICAgICAgICByZXR1cm4gbmV3IEFuZ2xlKChkZWdyZWVzICogTWF0aC5QSSkgLyAxODAuMCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB2YWx1ZSBpbiBkZWdyZWVzXG4gICAgICogQHJldHVybnMgdGhlIEFuZ2xlIHZhbHVlIGluIGRlZ3JlZXMgKGZsb2F0KVxuICAgICAqL1xuICAgIGRlZ3JlZXMoKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5fcmFkaWFucyAqIDE4MC4wKSAvIE1hdGguUEk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB2YWx1ZSBpbiByYWRpYW5zXG4gICAgICogQHJldHVybnMgdGhlIEFuZ2xlIHZhbHVlIGluIHJhZGlhbnMgKGZsb2F0KVxuICAgICAqL1xuICAgIHJhZGlhbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yYWRpYW5zO1xuICAgIH1cbn1cbmV4cG9ydHMuQW5nbGUgPSBBbmdsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFuZ2xlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5WZWN0b3IyID0gdm9pZCAwO1xuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCIuL3R5cGVzXCIpO1xuY29uc3QgU2NhbGFyXzEgPSByZXF1aXJlKFwiLi9TY2FsYXJcIik7XG4vKipcbiAqIENsYXNzIHJlcHJlc2VudGluZyBhIHZlY3RvciBjb250YWluaW5nIDIgY29vcmRpbmF0ZXNcbiAqIEBwdWJsaWNcbiAqL1xuY2xhc3MgVmVjdG9yMiB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBWZWN0b3IyIGZyb20gdGhlIGdpdmVuIHggYW5kIHkgY29vcmRpbmF0ZXNcbiAgICAgKiBAcGFyYW0geCAtIGRlZmluZXMgdGhlIGZpcnN0IGNvb3JkaW5hdGVcbiAgICAgKiBAcGFyYW0geSAtIGRlZmluZXMgdGhlIHNlY29uZCBjb29yZGluYXRlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqIGRlZmluZXMgdGhlIGZpcnN0IGNvb3JkaW5hdGUgKi9cbiAgICB4ID0gMCwgXG4gICAgLyoqIGRlZmluZXMgdGhlIHNlY29uZCBjb29yZGluYXRlICovXG4gICAgeSA9IDApIHtcbiAgICAgICAgdGhpcy54ID0geDtcbiAgICAgICAgdGhpcy55ID0geTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyBhIG5ldyBWZWN0b3IyKDAsIDApXG4gICAgICogQHJldHVybnMgYSBuZXcgVmVjdG9yMlxuICAgICAqL1xuICAgIHN0YXRpYyBaZXJvKCkge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjIoMCwgMCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgYSBuZXcgVmVjdG9yMigxLCAxKVxuICAgICAqIEByZXR1cm5zIGEgbmV3IFZlY3RvcjJcbiAgICAgKi9cbiAgICBzdGF0aWMgT25lKCkge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjIoMSwgMSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMiBhcyB0aGUgcmVzdWx0IG9mIHRoZSBhZGRpdGlvbiBvZiB0aGUgdHdvIGdpdmVuIHZlY3RvcnMuXG4gICAgICogQHBhcmFtIHZlY3RvcjEgLSB0aGUgZmlyc3QgdmVjdG9yXG4gICAgICogQHBhcmFtIHZlY3RvcjIgLSB0aGUgc2Vjb25kIHZlY3RvclxuICAgICAqIEByZXR1cm5zIHRoZSByZXN1bHRpbmcgdmVjdG9yXG4gICAgICovXG4gICAgc3RhdGljIEFkZCh2ZWN0b3IxLCB2ZWN0b3IyKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMih2ZWN0b3IxLngsIHZlY3RvcjEueSkuYWRkSW5QbGFjZSh2ZWN0b3IyKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyBhIG5ldyBWZWN0b3IyIHNldCBmcm9tIHRoZSBnaXZlbiBpbmRleCBlbGVtZW50IG9mIHRoZSBnaXZlbiBhcnJheVxuICAgICAqIEBwYXJhbSBhcnJheSAtIGRlZmluZXMgdGhlIGRhdGEgc291cmNlXG4gICAgICogQHBhcmFtIG9mZnNldCAtIGRlZmluZXMgdGhlIG9mZnNldCBpbiB0aGUgZGF0YSBzb3VyY2VcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBWZWN0b3IyXG4gICAgICovXG4gICAgc3RhdGljIEZyb21BcnJheShhcnJheSwgb2Zmc2V0ID0gMCkge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjIoYXJyYXlbb2Zmc2V0XSwgYXJyYXlbb2Zmc2V0ICsgMV0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIFwicmVzdWx0XCIgZnJvbSB0aGUgZ2l2ZW4gaW5kZXggZWxlbWVudCBvZiB0aGUgZ2l2ZW4gYXJyYXlcbiAgICAgKiBAcGFyYW0gYXJyYXkgLSBkZWZpbmVzIHRoZSBkYXRhIHNvdXJjZVxuICAgICAqIEBwYXJhbSBvZmZzZXQgLSBkZWZpbmVzIHRoZSBvZmZzZXQgaW4gdGhlIGRhdGEgc291cmNlXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIHRhcmdldCB2ZWN0b3JcbiAgICAgKi9cbiAgICBzdGF0aWMgRnJvbUFycmF5VG9SZWYoYXJyYXksIG9mZnNldCwgcmVzdWx0KSB7XG4gICAgICAgIHJlc3VsdC54ID0gYXJyYXlbb2Zmc2V0XTtcbiAgICAgICAgcmVzdWx0LnkgPSBhcnJheVtvZmZzZXQgKyAxXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyBhIG5ldyBWZWN0b3IyIGxvY2F0ZWQgZm9yIFwiYW1vdW50XCIgKGZsb2F0KSBvbiB0aGUgQ2F0bXVsbFJvbSBzcGxpbmUgZGVmaW5lZCBieSB0aGUgZ2l2ZW4gZm91ciBWZWN0b3IyXG4gICAgICogQHBhcmFtIHZhbHVlMSAtIGRlZmluZXMgMXN0IHBvaW50IG9mIGNvbnRyb2xcbiAgICAgKiBAcGFyYW0gdmFsdWUyIC0gZGVmaW5lcyAybmQgcG9pbnQgb2YgY29udHJvbFxuICAgICAqIEBwYXJhbSB2YWx1ZTMgLSBkZWZpbmVzIDNyZCBwb2ludCBvZiBjb250cm9sXG4gICAgICogQHBhcmFtIHZhbHVlNCAtIGRlZmluZXMgNHRoIHBvaW50IG9mIGNvbnRyb2xcbiAgICAgKiBAcGFyYW0gYW1vdW50IC0gZGVmaW5lcyB0aGUgaW50ZXJwb2xhdGlvbiBmYWN0b3JcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBWZWN0b3IyXG4gICAgICovXG4gICAgc3RhdGljIENhdG11bGxSb20odmFsdWUxLCB2YWx1ZTIsIHZhbHVlMywgdmFsdWU0LCBhbW91bnQpIHtcbiAgICAgICAgY29uc3Qgc3F1YXJlZCA9IGFtb3VudCAqIGFtb3VudDtcbiAgICAgICAgY29uc3QgY3ViZWQgPSBhbW91bnQgKiBzcXVhcmVkO1xuICAgICAgICBjb25zdCB4ID0gMC41ICpcbiAgICAgICAgICAgICgyLjAgKiB2YWx1ZTIueCArXG4gICAgICAgICAgICAgICAgKC12YWx1ZTEueCArIHZhbHVlMy54KSAqIGFtb3VudCArXG4gICAgICAgICAgICAgICAgKDIuMCAqIHZhbHVlMS54IC0gNS4wICogdmFsdWUyLnggKyA0LjAgKiB2YWx1ZTMueCAtIHZhbHVlNC54KSAqXG4gICAgICAgICAgICAgICAgICAgIHNxdWFyZWQgK1xuICAgICAgICAgICAgICAgICgtdmFsdWUxLnggKyAzLjAgKiB2YWx1ZTIueCAtIDMuMCAqIHZhbHVlMy54ICsgdmFsdWU0LngpICogY3ViZWQpO1xuICAgICAgICBjb25zdCB5ID0gMC41ICpcbiAgICAgICAgICAgICgyLjAgKiB2YWx1ZTIueSArXG4gICAgICAgICAgICAgICAgKC12YWx1ZTEueSArIHZhbHVlMy55KSAqIGFtb3VudCArXG4gICAgICAgICAgICAgICAgKDIuMCAqIHZhbHVlMS55IC0gNS4wICogdmFsdWUyLnkgKyA0LjAgKiB2YWx1ZTMueSAtIHZhbHVlNC55KSAqXG4gICAgICAgICAgICAgICAgICAgIHNxdWFyZWQgK1xuICAgICAgICAgICAgICAgICgtdmFsdWUxLnkgKyAzLjAgKiB2YWx1ZTIueSAtIDMuMCAqIHZhbHVlMy55ICsgdmFsdWU0LnkpICogY3ViZWQpO1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjIoeCwgeSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMiBzZXQgd2l0aCBzYW1lIHRoZSBjb29yZGluYXRlcyB0aGFuIFwidmFsdWVcIiBvbmVzIGlmIHRoZSB2ZWN0b3IgXCJ2YWx1ZVwiIGlzIGluIHRoZSBzcXVhcmUgZGVmaW5lZCBieSBcIm1pblwiIGFuZCBcIm1heFwiLlxuICAgICAqIElmIGEgY29vcmRpbmF0ZSBvZiBcInZhbHVlXCIgaXMgbG93ZXIgdGhhbiBcIm1pblwiIGNvb3JkaW5hdGVzLCB0aGUgcmV0dXJuZWQgVmVjdG9yMiBpcyBnaXZlbiB0aGlzIFwibWluXCIgY29vcmRpbmF0ZS5cbiAgICAgKiBJZiBhIGNvb3JkaW5hdGUgb2YgXCJ2YWx1ZVwiIGlzIGdyZWF0ZXIgdGhhbiBcIm1heFwiIGNvb3JkaW5hdGVzLCB0aGUgcmV0dXJuZWQgVmVjdG9yMiBpcyBnaXZlbiB0aGlzIFwibWF4XCIgY29vcmRpbmF0ZVxuICAgICAqIEBwYXJhbSB2YWx1ZSAtIGRlZmluZXMgdGhlIHZhbHVlIHRvIGNsYW1wXG4gICAgICogQHBhcmFtIG1pbiAtIGRlZmluZXMgdGhlIGxvd2VyIGxpbWl0XG4gICAgICogQHBhcmFtIG1heCAtIGRlZmluZXMgdGhlIHVwcGVyIGxpbWl0XG4gICAgICogQHJldHVybnMgYSBuZXcgVmVjdG9yMlxuICAgICAqL1xuICAgIHN0YXRpYyBDbGFtcCh2YWx1ZSwgbWluLCBtYXgpIHtcbiAgICAgICAgbGV0IHggPSB2YWx1ZS54O1xuICAgICAgICB4ID0geCA+IG1heC54ID8gbWF4LnggOiB4O1xuICAgICAgICB4ID0geCA8IG1pbi54ID8gbWluLnggOiB4O1xuICAgICAgICBsZXQgeSA9IHZhbHVlLnk7XG4gICAgICAgIHkgPSB5ID4gbWF4LnkgPyBtYXgueSA6IHk7XG4gICAgICAgIHkgPSB5IDwgbWluLnkgPyBtaW4ueSA6IHk7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMih4LCB5KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBWZWN0b3IyIGxvY2F0ZWQgZm9yIFwiYW1vdW50XCIgKGZsb2F0KSBvbiB0aGUgSGVybWl0ZSBzcGxpbmUgZGVmaW5lZCBieSB0aGUgdmVjdG9ycyBcInZhbHVlMVwiLCBcInZhbHVlM1wiLCBcInRhbmdlbnQxXCIsIFwidGFuZ2VudDJcIlxuICAgICAqIEBwYXJhbSB2YWx1ZTEgLSBkZWZpbmVzIHRoZSAxc3QgY29udHJvbCBwb2ludFxuICAgICAqIEBwYXJhbSB0YW5nZW50MSAtIGRlZmluZXMgdGhlIG91dGdvaW5nIHRhbmdlbnRcbiAgICAgKiBAcGFyYW0gdmFsdWUyIC0gZGVmaW5lcyB0aGUgMm5kIGNvbnRyb2wgcG9pbnRcbiAgICAgKiBAcGFyYW0gdGFuZ2VudDIgLSBkZWZpbmVzIHRoZSBpbmNvbWluZyB0YW5nZW50XG4gICAgICogQHBhcmFtIGFtb3VudCAtIGRlZmluZXMgdGhlIGludGVycG9sYXRpb24gZmFjdG9yXG4gICAgICogQHJldHVybnMgYSBuZXcgVmVjdG9yMlxuICAgICAqL1xuICAgIHN0YXRpYyBIZXJtaXRlKHZhbHVlMSwgdGFuZ2VudDEsIHZhbHVlMiwgdGFuZ2VudDIsIGFtb3VudCkge1xuICAgICAgICBjb25zdCBzcXVhcmVkID0gYW1vdW50ICogYW1vdW50O1xuICAgICAgICBjb25zdCBjdWJlZCA9IGFtb3VudCAqIHNxdWFyZWQ7XG4gICAgICAgIGNvbnN0IHBhcnQxID0gMi4wICogY3ViZWQgLSAzLjAgKiBzcXVhcmVkICsgMS4wO1xuICAgICAgICBjb25zdCBwYXJ0MiA9IC0yLjAgKiBjdWJlZCArIDMuMCAqIHNxdWFyZWQ7XG4gICAgICAgIGNvbnN0IHBhcnQzID0gY3ViZWQgLSAyLjAgKiBzcXVhcmVkICsgYW1vdW50O1xuICAgICAgICBjb25zdCBwYXJ0NCA9IGN1YmVkIC0gc3F1YXJlZDtcbiAgICAgICAgY29uc3QgeCA9IHZhbHVlMS54ICogcGFydDEgK1xuICAgICAgICAgICAgdmFsdWUyLnggKiBwYXJ0MiArXG4gICAgICAgICAgICB0YW5nZW50MS54ICogcGFydDMgK1xuICAgICAgICAgICAgdGFuZ2VudDIueCAqIHBhcnQ0O1xuICAgICAgICBjb25zdCB5ID0gdmFsdWUxLnkgKiBwYXJ0MSArXG4gICAgICAgICAgICB2YWx1ZTIueSAqIHBhcnQyICtcbiAgICAgICAgICAgIHRhbmdlbnQxLnkgKiBwYXJ0MyArXG4gICAgICAgICAgICB0YW5nZW50Mi55ICogcGFydDQ7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMih4LCB5KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBWZWN0b3IyIGxvY2F0ZWQgZm9yIFwiYW1vdW50XCIgKGZsb2F0KSBvbiB0aGUgbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiB0aGUgdmVjdG9yIFwic3RhcnRcIiBhZG4gdGhlIHZlY3RvciBcImVuZFwiLlxuICAgICAqIEBwYXJhbSBzdGFydCAtIGRlZmluZXMgdGhlIHN0YXJ0IHZlY3RvclxuICAgICAqIEBwYXJhbSBlbmQgLSBkZWZpbmVzIHRoZSBlbmQgdmVjdG9yXG4gICAgICogQHBhcmFtIGFtb3VudCAtIGRlZmluZXMgdGhlIGludGVycG9sYXRpb24gZmFjdG9yXG4gICAgICogQHJldHVybnMgYSBuZXcgVmVjdG9yMlxuICAgICAqL1xuICAgIHN0YXRpYyBMZXJwKHN0YXJ0LCBlbmQsIGFtb3VudCkge1xuICAgICAgICBjb25zdCB4ID0gc3RhcnQueCArIChlbmQueCAtIHN0YXJ0LngpICogYW1vdW50O1xuICAgICAgICBjb25zdCB5ID0gc3RhcnQueSArIChlbmQueSAtIHN0YXJ0LnkpICogYW1vdW50O1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjIoeCwgeSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGRvdCBwcm9kdWN0IG9mIHRoZSB2ZWN0b3IgXCJsZWZ0XCIgYW5kIHRoZSB2ZWN0b3IgXCJyaWdodFwiXG4gICAgICogQHBhcmFtIGxlZnQgLSBkZWZpbmVzIGZpcnN0IHZlY3RvclxuICAgICAqIEBwYXJhbSByaWdodCAtIGRlZmluZXMgc2Vjb25kIHZlY3RvclxuICAgICAqIEByZXR1cm5zIHRoZSBkb3QgcHJvZHVjdCAoZmxvYXQpXG4gICAgICovXG4gICAgc3RhdGljIERvdChsZWZ0LCByaWdodCkge1xuICAgICAgICByZXR1cm4gbGVmdC54ICogcmlnaHQueCArIGxlZnQueSAqIHJpZ2h0Lnk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMiBlcXVhbCB0byB0aGUgbm9ybWFsaXplZCBnaXZlbiB2ZWN0b3JcbiAgICAgKiBAcGFyYW0gdmVjdG9yIC0gZGVmaW5lcyB0aGUgdmVjdG9yIHRvIG5vcm1hbGl6ZVxuICAgICAqIEByZXR1cm5zIGEgbmV3IFZlY3RvcjJcbiAgICAgKi9cbiAgICBzdGF0aWMgTm9ybWFsaXplKHZlY3Rvcikge1xuICAgICAgICBjb25zdCBuZXdWZWN0b3IgPSBuZXcgVmVjdG9yMih2ZWN0b3IueCwgdmVjdG9yLnkpO1xuICAgICAgICBuZXdWZWN0b3Iubm9ybWFsaXplKCk7XG4gICAgICAgIHJldHVybiBuZXdWZWN0b3I7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgYSBuZXcgVmVjdG9yMiBzZXQgd2l0aCB0aGUgbWluaW1hbCBjb29yZGluYXRlIHZhbHVlcyBmcm9tIHRoZSBcImxlZnRcIiBhbmQgXCJyaWdodFwiIHZlY3RvcnNcbiAgICAgKiBAcGFyYW0gbGVmdCAtIGRlZmluZXMgMXN0IHZlY3RvclxuICAgICAqIEBwYXJhbSByaWdodCAtIGRlZmluZXMgMm5kIHZlY3RvclxuICAgICAqIEByZXR1cm5zIGEgbmV3IFZlY3RvcjJcbiAgICAgKi9cbiAgICBzdGF0aWMgTWluaW1pemUobGVmdCwgcmlnaHQpIHtcbiAgICAgICAgY29uc3QgeCA9IGxlZnQueCA8IHJpZ2h0LnggPyBsZWZ0LnggOiByaWdodC54O1xuICAgICAgICBjb25zdCB5ID0gbGVmdC55IDwgcmlnaHQueSA/IGxlZnQueSA6IHJpZ2h0Lnk7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMih4LCB5KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyBhIG5ldyBWZWN0bzIgc2V0IHdpdGggdGhlIG1heGltYWwgY29vcmRpbmF0ZSB2YWx1ZXMgZnJvbSB0aGUgXCJsZWZ0XCIgYW5kIFwicmlnaHRcIiB2ZWN0b3JzXG4gICAgICogQHBhcmFtIGxlZnQgLSBkZWZpbmVzIDFzdCB2ZWN0b3JcbiAgICAgKiBAcGFyYW0gcmlnaHQgLSBkZWZpbmVzIDJuZCB2ZWN0b3JcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBWZWN0b3IyXG4gICAgICovXG4gICAgc3RhdGljIE1heGltaXplKGxlZnQsIHJpZ2h0KSB7XG4gICAgICAgIGNvbnN0IHggPSBsZWZ0LnggPiByaWdodC54ID8gbGVmdC54IDogcmlnaHQueDtcbiAgICAgICAgY29uc3QgeSA9IGxlZnQueSA+IHJpZ2h0LnkgPyBsZWZ0LnkgOiByaWdodC55O1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjIoeCwgeSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgYSBuZXcgVmVjdG9yMiBzZXQgd2l0aCB0aGUgdHJhbnNmb3JtZWQgY29vcmRpbmF0ZXMgb2YgdGhlIGdpdmVuIHZlY3RvciBieSB0aGUgZ2l2ZW4gdHJhbnNmb3JtYXRpb24gbWF0cml4XG4gICAgICogQHBhcmFtIHZlY3RvciAtIGRlZmluZXMgdGhlIHZlY3RvciB0byB0cmFuc2Zvcm1cbiAgICAgKiBAcGFyYW0gdHJhbnNmb3JtYXRpb24gLSBkZWZpbmVzIHRoZSBtYXRyaXggdG8gYXBwbHlcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBWZWN0b3IyXG4gICAgICovXG4gICAgc3RhdGljIFRyYW5zZm9ybSh2ZWN0b3IsIHRyYW5zZm9ybWF0aW9uKSB7XG4gICAgICAgIGNvbnN0IHIgPSBWZWN0b3IyLlplcm8oKTtcbiAgICAgICAgVmVjdG9yMi5UcmFuc2Zvcm1Ub1JlZih2ZWN0b3IsIHRyYW5zZm9ybWF0aW9uLCByKTtcbiAgICAgICAgcmV0dXJuIHI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRyYW5zZm9ybXMgdGhlIGdpdmVuIHZlY3RvciBjb29yZGluYXRlcyBieSB0aGUgZ2l2ZW4gdHJhbnNmb3JtYXRpb24gbWF0cml4IGFuZCBzdG9yZXMgdGhlIHJlc3VsdCBpbiB0aGUgdmVjdG9yIFwicmVzdWx0XCIgY29vcmRpbmF0ZXNcbiAgICAgKiBAcGFyYW0gdmVjdG9yIC0gZGVmaW5lcyB0aGUgdmVjdG9yIHRvIHRyYW5zZm9ybVxuICAgICAqIEBwYXJhbSB0cmFuc2Zvcm1hdGlvbiAtIGRlZmluZXMgdGhlIG1hdHJpeCB0byBhcHBseVxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSB0YXJnZXQgdmVjdG9yXG4gICAgICovXG4gICAgc3RhdGljIFRyYW5zZm9ybVRvUmVmKHZlY3RvciwgdHJhbnNmb3JtYXRpb24sIHJlc3VsdCkge1xuICAgICAgICBjb25zdCBtID0gdHJhbnNmb3JtYXRpb24ubTtcbiAgICAgICAgY29uc3QgeCA9IHZlY3Rvci54ICogbVswXSArIHZlY3Rvci55ICogbVs0XSArIG1bMTJdO1xuICAgICAgICBjb25zdCB5ID0gdmVjdG9yLnggKiBtWzFdICsgdmVjdG9yLnkgKiBtWzVdICsgbVsxM107XG4gICAgICAgIHJlc3VsdC54ID0geDtcbiAgICAgICAgcmVzdWx0LnkgPSB5O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIGlmIGEgZ2l2ZW4gdmVjdG9yIGlzIGluY2x1ZGVkIGluIGEgdHJpYW5nbGVcbiAgICAgKiBAcGFyYW0gcCAtIGRlZmluZXMgdGhlIHZlY3RvciB0byB0ZXN0XG4gICAgICogQHBhcmFtIHAwIC0gZGVmaW5lcyAxc3QgdHJpYW5nbGUgcG9pbnRcbiAgICAgKiBAcGFyYW0gcDEgLSBkZWZpbmVzIDJuZCB0cmlhbmdsZSBwb2ludFxuICAgICAqIEBwYXJhbSBwMiAtIGRlZmluZXMgM3JkIHRyaWFuZ2xlIHBvaW50XG4gICAgICogQHJldHVybnMgdHJ1ZSBpZiB0aGUgcG9pbnQgXCJwXCIgaXMgaW4gdGhlIHRyaWFuZ2xlIGRlZmluZWQgYnkgdGhlIHZlcnRvcnMgXCJwMFwiLCBcInAxXCIsIFwicDJcIlxuICAgICAqL1xuICAgIHN0YXRpYyBQb2ludEluVHJpYW5nbGUocCwgcDAsIHAxLCBwMikge1xuICAgICAgICBjb25zdCBhID0gKDEgLyAyKSAqXG4gICAgICAgICAgICAoLXAxLnkgKiBwMi54ICtcbiAgICAgICAgICAgICAgICBwMC55ICogKC1wMS54ICsgcDIueCkgK1xuICAgICAgICAgICAgICAgIHAwLnggKiAocDEueSAtIHAyLnkpICtcbiAgICAgICAgICAgICAgICBwMS54ICogcDIueSk7XG4gICAgICAgIGNvbnN0IHNpZ24gPSBhIDwgMCA/IC0xIDogMTtcbiAgICAgICAgY29uc3QgcyA9IChwMC55ICogcDIueCAtIHAwLnggKiBwMi55ICsgKHAyLnkgLSBwMC55KSAqIHAueCArIChwMC54IC0gcDIueCkgKiBwLnkpICpcbiAgICAgICAgICAgIHNpZ247XG4gICAgICAgIGNvbnN0IHQgPSAocDAueCAqIHAxLnkgLSBwMC55ICogcDEueCArIChwMC55IC0gcDEueSkgKiBwLnggKyAocDEueCAtIHAwLngpICogcC55KSAqXG4gICAgICAgICAgICBzaWduO1xuICAgICAgICByZXR1cm4gcyA+IDAgJiYgdCA+IDAgJiYgcyArIHQgPCAyICogYSAqIHNpZ247XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGRpc3RhbmNlIGJldHdlZW4gdGhlIHZlY3RvcnMgXCJ2YWx1ZTFcIiBhbmQgXCJ2YWx1ZTJcIlxuICAgICAqIEBwYXJhbSB2YWx1ZTEgLSBkZWZpbmVzIGZpcnN0IHZlY3RvclxuICAgICAqIEBwYXJhbSB2YWx1ZTIgLSBkZWZpbmVzIHNlY29uZCB2ZWN0b3JcbiAgICAgKiBAcmV0dXJucyB0aGUgZGlzdGFuY2UgYmV0d2VlbiB2ZWN0b3JzXG4gICAgICovXG4gICAgc3RhdGljIERpc3RhbmNlKHZhbHVlMSwgdmFsdWUyKSB7XG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQoVmVjdG9yMi5EaXN0YW5jZVNxdWFyZWQodmFsdWUxLCB2YWx1ZTIpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgc3F1YXJlZCBkaXN0YW5jZSBiZXR3ZWVuIHRoZSB2ZWN0b3JzIFwidmFsdWUxXCIgYW5kIFwidmFsdWUyXCJcbiAgICAgKiBAcGFyYW0gdmFsdWUxIC0gZGVmaW5lcyBmaXJzdCB2ZWN0b3JcbiAgICAgKiBAcGFyYW0gdmFsdWUyIC0gZGVmaW5lcyBzZWNvbmQgdmVjdG9yXG4gICAgICogQHJldHVybnMgdGhlIHNxdWFyZWQgZGlzdGFuY2UgYmV0d2VlbiB2ZWN0b3JzXG4gICAgICovXG4gICAgc3RhdGljIERpc3RhbmNlU3F1YXJlZCh2YWx1ZTEsIHZhbHVlMikge1xuICAgICAgICBjb25zdCB4ID0gdmFsdWUxLnggLSB2YWx1ZTIueDtcbiAgICAgICAgY29uc3QgeSA9IHZhbHVlMS55IC0gdmFsdWUyLnk7XG4gICAgICAgIHJldHVybiB4ICogeCArIHkgKiB5O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgbmV3IFZlY3RvcjIgbG9jYXRlZCBhdCB0aGUgY2VudGVyIG9mIHRoZSB2ZWN0b3JzIFwidmFsdWUxXCIgYW5kIFwidmFsdWUyXCJcbiAgICAgKiBAcGFyYW0gdmFsdWUxIC0gZGVmaW5lcyBmaXJzdCB2ZWN0b3JcbiAgICAgKiBAcGFyYW0gdmFsdWUyIC0gZGVmaW5lcyBzZWNvbmQgdmVjdG9yXG4gICAgICogQHJldHVybnMgYSBuZXcgVmVjdG9yMlxuICAgICAqL1xuICAgIHN0YXRpYyBDZW50ZXIodmFsdWUxLCB2YWx1ZTIpIHtcbiAgICAgICAgY29uc3QgY2VudGVyID0gVmVjdG9yMi5BZGQodmFsdWUxLCB2YWx1ZTIpO1xuICAgICAgICBjZW50ZXIuc2NhbGVJblBsYWNlKDAuNSk7XG4gICAgICAgIHJldHVybiBjZW50ZXI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHNob3J0ZXN0IGRpc3RhbmNlIChmbG9hdCkgYmV0d2VlbiB0aGUgcG9pbnQgXCJwXCIgYW5kIHRoZSBzZWdtZW50IGRlZmluZWQgYnkgdGhlIHR3byBwb2ludHMgXCJzZWdBXCIgYW5kIFwic2VnQlwiLlxuICAgICAqIEBwYXJhbSBwIC0gZGVmaW5lcyB0aGUgbWlkZGxlIHBvaW50XG4gICAgICogQHBhcmFtIHNlZ0EgLSBkZWZpbmVzIG9uZSBwb2ludCBvZiB0aGUgc2VnbWVudFxuICAgICAqIEBwYXJhbSBzZWdCIC0gZGVmaW5lcyB0aGUgb3RoZXIgcG9pbnQgb2YgdGhlIHNlZ21lbnRcbiAgICAgKiBAcmV0dXJucyB0aGUgc2hvcnRlc3QgZGlzdGFuY2VcbiAgICAgKi9cbiAgICBzdGF0aWMgRGlzdGFuY2VPZlBvaW50RnJvbVNlZ21lbnQocCwgc2VnQSwgc2VnQikge1xuICAgICAgICBjb25zdCBsMiA9IFZlY3RvcjIuRGlzdGFuY2VTcXVhcmVkKHNlZ0EsIHNlZ0IpO1xuICAgICAgICBpZiAobDIgPT09IDAuMCkge1xuICAgICAgICAgICAgcmV0dXJuIFZlY3RvcjIuRGlzdGFuY2UocCwgc2VnQSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdiA9IHNlZ0Iuc3VidHJhY3Qoc2VnQSk7XG4gICAgICAgIGNvbnN0IHQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBWZWN0b3IyLkRvdChwLnN1YnRyYWN0KHNlZ0EpLCB2KSAvIGwyKSk7XG4gICAgICAgIGNvbnN0IHByb2ogPSBzZWdBLmFkZCh2Lm11bHRpcGx5QnlGbG9hdHModCwgdCkpO1xuICAgICAgICByZXR1cm4gVmVjdG9yMi5EaXN0YW5jZShwLCBwcm9qKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyBhIHN0cmluZyB3aXRoIHRoZSBWZWN0b3IyIGNvb3JkaW5hdGVzXG4gICAgICogQHJldHVybnMgYSBzdHJpbmcgd2l0aCB0aGUgVmVjdG9yMiBjb29yZGluYXRlc1xuICAgICAqL1xuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gJ3tYOiAnICsgdGhpcy54ICsgJyBZOicgKyB0aGlzLnkgKyAnfSc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgY2xhc3MgbmFtZVxuICAgICAqIEByZXR1cm5zIHRoZSBzdHJpbmcgXCJWZWN0b3IyXCJcbiAgICAgKi9cbiAgICBnZXRDbGFzc05hbWUoKSB7XG4gICAgICAgIHJldHVybiAnVmVjdG9yMic7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgY3VycmVudCB2ZWN0b3IgaGFzaCBjb2RlXG4gICAgICogQHJldHVybnMgdGhlIFZlY3RvcjIgaGFzaCBjb2RlIGFzIGEgbnVtYmVyXG4gICAgICovXG4gICAgZ2V0SGFzaENvZGUoKSB7XG4gICAgICAgIGxldCBoYXNoID0gdGhpcy54IHx8IDA7XG4gICAgICAgIGhhc2ggPSAoaGFzaCAqIDM5NykgXiAodGhpcy55IHx8IDApO1xuICAgICAgICByZXR1cm4gaGFzaDtcbiAgICB9XG4gICAgLy8gT3BlcmF0b3JzXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgVmVjdG9yMiBjb29yZGluYXRlcyBpbiB0aGUgZ2l2ZW4gYXJyYXkgb3IgRmxvYXRBcnJheSBmcm9tIHRoZSBnaXZlbiBpbmRleC5cbiAgICAgKiBAcGFyYW0gYXJyYXkgLSBkZWZpbmVzIHRoZSBzb3VyY2UgYXJyYXlcbiAgICAgKiBAcGFyYW0gaW5kZXggLSBkZWZpbmVzIHRoZSBvZmZzZXQgaW4gc291cmNlIGFycmF5XG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgVmVjdG9yMlxuICAgICAqL1xuICAgIHRvQXJyYXkoYXJyYXksIGluZGV4ID0gMCkge1xuICAgICAgICBhcnJheVtpbmRleF0gPSB0aGlzLng7XG4gICAgICAgIGFycmF5W2luZGV4ICsgMV0gPSB0aGlzLnk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb3B5IHRoZSBjdXJyZW50IHZlY3RvciB0byBhbiBhcnJheVxuICAgICAqIEByZXR1cm5zIGEgbmV3IGFycmF5IHdpdGggMiBlbGVtZW50czogdGhlIFZlY3RvcjIgY29vcmRpbmF0ZXMuXG4gICAgICovXG4gICAgYXNBcnJheSgpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IEFycmF5KCk7XG4gICAgICAgIHRoaXMudG9BcnJheShyZXN1bHQsIDApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBWZWN0b3IyIGNvb3JkaW5hdGVzIHdpdGggdGhlIGdpdmVuIFZlY3RvcjIgY29vcmRpbmF0ZXNcbiAgICAgKiBAcGFyYW0gc291cmNlIC0gZGVmaW5lcyB0aGUgc291cmNlIFZlY3RvcjJcbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCB1cGRhdGVkIFZlY3RvcjJcbiAgICAgKi9cbiAgICBjb3B5RnJvbShzb3VyY2UpIHtcbiAgICAgICAgdGhpcy54ID0gc291cmNlLng7XG4gICAgICAgIHRoaXMueSA9IHNvdXJjZS55O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgVmVjdG9yMiBjb29yZGluYXRlcyB3aXRoIHRoZSBnaXZlbiBmbG9hdHNcbiAgICAgKiBAcGFyYW0geCAtIGRlZmluZXMgdGhlIGZpcnN0IGNvb3JkaW5hdGVcbiAgICAgKiBAcGFyYW0geSAtIGRlZmluZXMgdGhlIHNlY29uZCBjb29yZGluYXRlXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgdXBkYXRlZCBWZWN0b3IyXG4gICAgICovXG4gICAgY29weUZyb21GbG9hdHMoeCwgeSkge1xuICAgICAgICB0aGlzLnggPSB4O1xuICAgICAgICB0aGlzLnkgPSB5O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgVmVjdG9yMiBjb29yZGluYXRlcyB3aXRoIHRoZSBnaXZlbiBmbG9hdHNcbiAgICAgKiBAcGFyYW0geCAtIGRlZmluZXMgdGhlIGZpcnN0IGNvb3JkaW5hdGVcbiAgICAgKiBAcGFyYW0geSAtIGRlZmluZXMgdGhlIHNlY29uZCBjb29yZGluYXRlXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgdXBkYXRlZCBWZWN0b3IyXG4gICAgICovXG4gICAgc2V0KHgsIHkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29weUZyb21GbG9hdHMoeCwgeSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZCBhbm90aGVyIHZlY3RvciB3aXRoIHRoZSBjdXJyZW50IG9uZVxuICAgICAqIEBwYXJhbSBvdGhlclZlY3RvciAtIGRlZmluZXMgdGhlIG90aGVyIHZlY3RvclxuICAgICAqIEByZXR1cm5zIGEgbmV3IFZlY3RvcjIgc2V0IHdpdGggdGhlIGFkZGl0aW9uIG9mIHRoZSBjdXJyZW50IFZlY3RvcjIgYW5kIHRoZSBnaXZlbiBvbmUgY29vcmRpbmF0ZXNcbiAgICAgKi9cbiAgICBhZGQob3RoZXJWZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IyKHRoaXMueCArIG90aGVyVmVjdG9yLngsIHRoaXMueSArIG90aGVyVmVjdG9yLnkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBcInJlc3VsdFwiIGNvb3JkaW5hdGVzIHdpdGggdGhlIGFkZGl0aW9uIG9mIHRoZSBjdXJyZW50IFZlY3RvcjIgYW5kIHRoZSBnaXZlbiBvbmUgY29vcmRpbmF0ZXNcbiAgICAgKiBAcGFyYW0gb3RoZXJWZWN0b3IgLSBkZWZpbmVzIHRoZSBvdGhlciB2ZWN0b3JcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgdGFyZ2V0IHZlY3RvclxuICAgICAqIEByZXR1cm5zIHRoZSB1bm1vZGlmaWVkIGN1cnJlbnQgVmVjdG9yMlxuICAgICAqL1xuICAgIGFkZFRvUmVmKG90aGVyVmVjdG9yLCByZXN1bHQpIHtcbiAgICAgICAgcmVzdWx0LnggPSB0aGlzLnggKyBvdGhlclZlY3Rvci54O1xuICAgICAgICByZXN1bHQueSA9IHRoaXMueSArIG90aGVyVmVjdG9yLnk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIFZlY3RvcjIgY29vcmRpbmF0ZXMgYnkgYWRkaW5nIHRoZSBnaXZlbiBWZWN0b3IyIGNvb3JkaW5hdGVzXG4gICAgICogQHBhcmFtIG90aGVyVmVjdG9yIC0gZGVmaW5lcyB0aGUgb3RoZXIgdmVjdG9yXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgdXBkYXRlZCBWZWN0b3IyXG4gICAgICovXG4gICAgYWRkSW5QbGFjZShvdGhlclZlY3Rvcikge1xuICAgICAgICB0aGlzLnggKz0gb3RoZXJWZWN0b3IueDtcbiAgICAgICAgdGhpcy55ICs9IG90aGVyVmVjdG9yLnk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgbmV3IFZlY3RvcjIgYnkgYWRkaW5nIHRoZSBjdXJyZW50IFZlY3RvcjIgY29vcmRpbmF0ZXMgdG8gdGhlIGdpdmVuIFZlY3RvcjMgeCwgeSBjb29yZGluYXRlc1xuICAgICAqIEBwYXJhbSBvdGhlclZlY3RvciAtIGRlZmluZXMgdGhlIG90aGVyIHZlY3RvclxuICAgICAqIEByZXR1cm5zIGEgbmV3IFZlY3RvcjJcbiAgICAgKi9cbiAgICBhZGRWZWN0b3IzKG90aGVyVmVjdG9yKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMih0aGlzLnggKyBvdGhlclZlY3Rvci54LCB0aGlzLnkgKyBvdGhlclZlY3Rvci55KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyBhIG5ldyBWZWN0b3IyIHNldCB3aXRoIHRoZSBzdWJ0cmFjdGVkIGNvb3JkaW5hdGVzIG9mIHRoZSBnaXZlbiBvbmUgZnJvbSB0aGUgY3VycmVudCBWZWN0b3IyXG4gICAgICogQHBhcmFtIG90aGVyVmVjdG9yIC0gZGVmaW5lcyB0aGUgb3RoZXIgdmVjdG9yXG4gICAgICogQHJldHVybnMgYSBuZXcgVmVjdG9yMlxuICAgICAqL1xuICAgIHN1YnRyYWN0KG90aGVyVmVjdG9yKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMih0aGlzLnggLSBvdGhlclZlY3Rvci54LCB0aGlzLnkgLSBvdGhlclZlY3Rvci55KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgXCJyZXN1bHRcIiBjb29yZGluYXRlcyB3aXRoIHRoZSBzdWJ0cmFjdGlvbiBvZiB0aGUgZ2l2ZW4gb25lIGZyb20gdGhlIGN1cnJlbnQgVmVjdG9yMiBjb29yZGluYXRlcy5cbiAgICAgKiBAcGFyYW0gb3RoZXJWZWN0b3IgLSBkZWZpbmVzIHRoZSBvdGhlciB2ZWN0b3JcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgdGFyZ2V0IHZlY3RvclxuICAgICAqIEByZXR1cm5zIHRoZSB1bm1vZGlmaWVkIGN1cnJlbnQgVmVjdG9yMlxuICAgICAqL1xuICAgIHN1YnRyYWN0VG9SZWYob3RoZXJWZWN0b3IsIHJlc3VsdCkge1xuICAgICAgICByZXN1bHQueCA9IHRoaXMueCAtIG90aGVyVmVjdG9yLng7XG4gICAgICAgIHJlc3VsdC55ID0gdGhpcy55IC0gb3RoZXJWZWN0b3IueTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGN1cnJlbnQgVmVjdG9yMiBjb29yZGluYXRlcyBieSBzdWJ0cmFjdGluZyBmcm9tIGl0IHRoZSBnaXZlbiBvbmUgY29vcmRpbmF0ZXNcbiAgICAgKiBAcGFyYW0gb3RoZXJWZWN0b3IgLSBkZWZpbmVzIHRoZSBvdGhlciB2ZWN0b3JcbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCB1cGRhdGVkIFZlY3RvcjJcbiAgICAgKi9cbiAgICBzdWJ0cmFjdEluUGxhY2Uob3RoZXJWZWN0b3IpIHtcbiAgICAgICAgdGhpcy54IC09IG90aGVyVmVjdG9yLng7XG4gICAgICAgIHRoaXMueSAtPSBvdGhlclZlY3Rvci55O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogTXVsdGlwbGllcyBpbiBwbGFjZSB0aGUgY3VycmVudCBWZWN0b3IyIGNvb3JkaW5hdGVzIGJ5IHRoZSBnaXZlbiBvbmVzXG4gICAgICogQHBhcmFtIG90aGVyVmVjdG9yIC0gZGVmaW5lcyB0aGUgb3RoZXIgdmVjdG9yXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgdXBkYXRlZCBWZWN0b3IyXG4gICAgICovXG4gICAgbXVsdGlwbHlJblBsYWNlKG90aGVyVmVjdG9yKSB7XG4gICAgICAgIHRoaXMueCAqPSBvdGhlclZlY3Rvci54O1xuICAgICAgICB0aGlzLnkgKj0gb3RoZXJWZWN0b3IueTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMiBzZXQgd2l0aCB0aGUgbXVsdGlwbGljYXRpb24gb2YgdGhlIGN1cnJlbnQgVmVjdG9yMiBhbmQgdGhlIGdpdmVuIG9uZSBjb29yZGluYXRlc1xuICAgICAqIEBwYXJhbSBvdGhlclZlY3RvciAtIGRlZmluZXMgdGhlIG90aGVyIHZlY3RvclxuICAgICAqIEByZXR1cm5zIGEgbmV3IFZlY3RvcjJcbiAgICAgKi9cbiAgICBtdWx0aXBseShvdGhlclZlY3Rvcikge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjIodGhpcy54ICogb3RoZXJWZWN0b3IueCwgdGhpcy55ICogb3RoZXJWZWN0b3IueSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgXCJyZXN1bHRcIiBjb29yZGluYXRlcyB3aXRoIHRoZSBtdWx0aXBsaWNhdGlvbiBvZiB0aGUgY3VycmVudCBWZWN0b3IyIGFuZCB0aGUgZ2l2ZW4gb25lIGNvb3JkaW5hdGVzXG4gICAgICogQHBhcmFtIG90aGVyVmVjdG9yIC0gZGVmaW5lcyB0aGUgb3RoZXIgdmVjdG9yXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIHRhcmdldCB2ZWN0b3JcbiAgICAgKiBAcmV0dXJucyB0aGUgdW5tb2RpZmllZCBjdXJyZW50IFZlY3RvcjJcbiAgICAgKi9cbiAgICBtdWx0aXBseVRvUmVmKG90aGVyVmVjdG9yLCByZXN1bHQpIHtcbiAgICAgICAgcmVzdWx0LnggPSB0aGlzLnggKiBvdGhlclZlY3Rvci54O1xuICAgICAgICByZXN1bHQueSA9IHRoaXMueSAqIG90aGVyVmVjdG9yLnk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgbmV3IFZlY3RvcjIgc2V0IHdpdGggdGhlIFZlY3RvcjIgY29vcmRpbmF0ZXMgbXVsdGlwbGllZCBieSB0aGUgZ2l2ZW4gZmxvYXRzXG4gICAgICogQHBhcmFtIHggLSBkZWZpbmVzIHRoZSBmaXJzdCBjb29yZGluYXRlXG4gICAgICogQHBhcmFtIHkgLSBkZWZpbmVzIHRoZSBzZWNvbmQgY29vcmRpbmF0ZVxuICAgICAqIEByZXR1cm5zIGEgbmV3IFZlY3RvcjJcbiAgICAgKi9cbiAgICBtdWx0aXBseUJ5RmxvYXRzKHgsIHkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IyKHRoaXMueCAqIHgsIHRoaXMueSAqIHkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IFZlY3RvcjIgc2V0IHdpdGggdGhlIFZlY3RvcjIgY29vcmRpbmF0ZXMgZGl2aWRlZCBieSB0aGUgZ2l2ZW4gb25lIGNvb3JkaW5hdGVzXG4gICAgICogQHBhcmFtIG90aGVyVmVjdG9yIC0gZGVmaW5lcyB0aGUgb3RoZXIgdmVjdG9yXG4gICAgICogQHJldHVybnMgYSBuZXcgVmVjdG9yMlxuICAgICAqL1xuICAgIGRpdmlkZShvdGhlclZlY3Rvcikge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjIodGhpcy54IC8gb3RoZXJWZWN0b3IueCwgdGhpcy55IC8gb3RoZXJWZWN0b3IueSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIFwicmVzdWx0XCIgY29vcmRpbmF0ZXMgd2l0aCB0aGUgVmVjdG9yMiBkaXZpZGVkIGJ5IHRoZSBnaXZlbiBvbmUgY29vcmRpbmF0ZXNcbiAgICAgKiBAcGFyYW0gb3RoZXJWZWN0b3IgLSBkZWZpbmVzIHRoZSBvdGhlciB2ZWN0b3JcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgdGFyZ2V0IHZlY3RvclxuICAgICAqIEByZXR1cm5zIHRoZSB1bm1vZGlmaWVkIGN1cnJlbnQgVmVjdG9yMlxuICAgICAqL1xuICAgIGRpdmlkZVRvUmVmKG90aGVyVmVjdG9yLCByZXN1bHQpIHtcbiAgICAgICAgcmVzdWx0LnggPSB0aGlzLnggLyBvdGhlclZlY3Rvci54O1xuICAgICAgICByZXN1bHQueSA9IHRoaXMueSAvIG90aGVyVmVjdG9yLnk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEaXZpZGVzIHRoZSBjdXJyZW50IFZlY3RvcjIgY29vcmRpbmF0ZXMgYnkgdGhlIGdpdmVuIG9uZXNcbiAgICAgKiBAcGFyYW0gb3RoZXJWZWN0b3IgLSBkZWZpbmVzIHRoZSBvdGhlciB2ZWN0b3JcbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCB1cGRhdGVkIFZlY3RvcjJcbiAgICAgKi9cbiAgICBkaXZpZGVJblBsYWNlKG90aGVyVmVjdG9yKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpdmlkZVRvUmVmKG90aGVyVmVjdG9yLCB0aGlzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyBhIG5ldyBWZWN0b3IyIHdpdGggY3VycmVudCBWZWN0b3IyIG5lZ2F0ZWQgY29vcmRpbmF0ZXNcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBWZWN0b3IyXG4gICAgICovXG4gICAgbmVnYXRlKCkge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjIoLXRoaXMueCwgLXRoaXMueSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE11bHRpcGx5IHRoZSBWZWN0b3IyIGNvb3JkaW5hdGVzIGJ5IHNjYWxlXG4gICAgICogQHBhcmFtIHNjYWxlIC0gZGVmaW5lcyB0aGUgc2NhbGluZyBmYWN0b3JcbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCB1cGRhdGVkIFZlY3RvcjJcbiAgICAgKi9cbiAgICBzY2FsZUluUGxhY2Uoc2NhbGUpIHtcbiAgICAgICAgdGhpcy54ICo9IHNjYWxlO1xuICAgICAgICB0aGlzLnkgKj0gc2NhbGU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IFZlY3RvcjIgc2NhbGVkIGJ5IFwic2NhbGVcIiBmcm9tIHRoZSBjdXJyZW50IFZlY3RvcjJcbiAgICAgKiBAcGFyYW0gc2NhbGUgLSBkZWZpbmVzIHRoZSBzY2FsaW5nIGZhY3RvclxuICAgICAqIEByZXR1cm5zIGEgbmV3IFZlY3RvcjJcbiAgICAgKi9cbiAgICBzY2FsZShzY2FsZSkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgVmVjdG9yMigwLCAwKTtcbiAgICAgICAgdGhpcy5zY2FsZVRvUmVmKHNjYWxlLCByZXN1bHQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTY2FsZSB0aGUgY3VycmVudCBWZWN0b3IyIHZhbHVlcyBieSBhIGZhY3RvciB0byBhIGdpdmVuIFZlY3RvcjJcbiAgICAgKiBAcGFyYW0gc2NhbGUgLSBkZWZpbmVzIHRoZSBzY2FsZSBmYWN0b3JcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgVmVjdG9yMiBvYmplY3Qgd2hlcmUgdG8gc3RvcmUgdGhlIHJlc3VsdFxuICAgICAqIEByZXR1cm5zIHRoZSB1bm1vZGlmaWVkIGN1cnJlbnQgVmVjdG9yMlxuICAgICAqL1xuICAgIHNjYWxlVG9SZWYoc2NhbGUsIHJlc3VsdCkge1xuICAgICAgICByZXN1bHQueCA9IHRoaXMueCAqIHNjYWxlO1xuICAgICAgICByZXN1bHQueSA9IHRoaXMueSAqIHNjYWxlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2NhbGUgdGhlIGN1cnJlbnQgVmVjdG9yMiB2YWx1ZXMgYnkgYSBmYWN0b3IgYW5kIGFkZCB0aGUgcmVzdWx0IHRvIGEgZ2l2ZW4gVmVjdG9yMlxuICAgICAqIEBwYXJhbSBzY2FsZSAtIGRlZmluZXMgdGhlIHNjYWxlIGZhY3RvclxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSBWZWN0b3IyIG9iamVjdCB3aGVyZSB0byBzdG9yZSB0aGUgcmVzdWx0XG4gICAgICogQHJldHVybnMgdGhlIHVubW9kaWZpZWQgY3VycmVudCBWZWN0b3IyXG4gICAgICovXG4gICAgc2NhbGVBbmRBZGRUb1JlZihzY2FsZSwgcmVzdWx0KSB7XG4gICAgICAgIHJlc3VsdC54ICs9IHRoaXMueCAqIHNjYWxlO1xuICAgICAgICByZXN1bHQueSArPSB0aGlzLnkgKiBzY2FsZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgYSBib29sZWFuIGlmIHR3byB2ZWN0b3JzIGFyZSBlcXVhbHNcbiAgICAgKiBAcGFyYW0gb3RoZXJWZWN0b3IgLSBkZWZpbmVzIHRoZSBvdGhlciB2ZWN0b3JcbiAgICAgKiBAcmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiB2ZWN0b3IgY29vcmRpbmF0ZXMgc3RyaWN0bHkgZXF1YWwgdGhlIGN1cnJlbnQgVmVjdG9yMiBvbmVzXG4gICAgICovXG4gICAgZXF1YWxzKG90aGVyVmVjdG9yKSB7XG4gICAgICAgIHJldHVybiBvdGhlclZlY3RvciAmJiB0aGlzLnggPT09IG90aGVyVmVjdG9yLnggJiYgdGhpcy55ID09PSBvdGhlclZlY3Rvci55O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgYm9vbGVhbiBpZiB0d28gdmVjdG9ycyBhcmUgZXF1YWxzICh1c2luZyBhbiBlcHNpbG9uIHZhbHVlKVxuICAgICAqIEBwYXJhbSBvdGhlclZlY3RvciAtIGRlZmluZXMgdGhlIG90aGVyIHZlY3RvclxuICAgICAqIEBwYXJhbSBlcHNpbG9uIC0gZGVmaW5lcyB0aGUgbWluaW1hbCBkaXN0YW5jZSB0byBjb25zaWRlciBlcXVhbGl0eVxuICAgICAqIEByZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIHZlY3RvciBjb29yZGluYXRlcyBhcmUgY2xvc2UgdG8gdGhlIGN1cnJlbnQgb25lcyBieSBhIGRpc3RhbmNlIG9mIGVwc2lsb24uXG4gICAgICovXG4gICAgZXF1YWxzV2l0aEVwc2lsb24ob3RoZXJWZWN0b3IsIGVwc2lsb24gPSB0eXBlc18xLkVwc2lsb24pIHtcbiAgICAgICAgcmV0dXJuIChvdGhlclZlY3RvciAmJlxuICAgICAgICAgICAgU2NhbGFyXzEuU2NhbGFyLldpdGhpbkVwc2lsb24odGhpcy54LCBvdGhlclZlY3Rvci54LCBlcHNpbG9uKSAmJlxuICAgICAgICAgICAgU2NhbGFyXzEuU2NhbGFyLldpdGhpbkVwc2lsb24odGhpcy55LCBvdGhlclZlY3Rvci55LCBlcHNpbG9uKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgYSBuZXcgVmVjdG9yMiBmcm9tIGN1cnJlbnQgVmVjdG9yMiBmbG9vcmVkIHZhbHVlc1xuICAgICAqIEByZXR1cm5zIGEgbmV3IFZlY3RvcjJcbiAgICAgKi9cbiAgICBmbG9vcigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IyKE1hdGguZmxvb3IodGhpcy54KSwgTWF0aC5mbG9vcih0aGlzLnkpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyBhIG5ldyBWZWN0b3IyIGZyb20gY3VycmVudCBWZWN0b3IyIGZsb29yZWQgdmFsdWVzXG4gICAgICogQHJldHVybnMgYSBuZXcgVmVjdG9yMlxuICAgICAqL1xuICAgIGZyYWN0KCkge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjIodGhpcy54IC0gTWF0aC5mbG9vcih0aGlzLngpLCB0aGlzLnkgLSBNYXRoLmZsb29yKHRoaXMueSkpO1xuICAgIH1cbiAgICAvLyBQcm9wZXJ0aWVzXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbGVuZ3RoIG9mIHRoZSB2ZWN0b3JcbiAgICAgKiBAcmV0dXJucyB0aGUgdmVjdG9yIGxlbmd0aCAoZmxvYXQpXG4gICAgICovXG4gICAgbGVuZ3RoKCkge1xuICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHZlY3RvciBzcXVhcmVkIGxlbmd0aFxuICAgICAqIEByZXR1cm5zIHRoZSB2ZWN0b3Igc3F1YXJlZCBsZW5ndGggKGZsb2F0KVxuICAgICAqL1xuICAgIGxlbmd0aFNxdWFyZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnk7XG4gICAgfVxuICAgIC8vIE1ldGhvZHNcbiAgICAvKipcbiAgICAgKiBOb3JtYWxpemUgdGhlIHZlY3RvclxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IHVwZGF0ZWQgVmVjdG9yMlxuICAgICAqL1xuICAgIG5vcm1hbGl6ZSgpIHtcbiAgICAgICAgY29uc3QgbGVuID0gdGhpcy5sZW5ndGgoKTtcbiAgICAgICAgaWYgKGxlbiA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbnVtID0gMS4wIC8gbGVuO1xuICAgICAgICB0aGlzLnggKj0gbnVtO1xuICAgICAgICB0aGlzLnkgKj0gbnVtO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyBhIG5ldyBWZWN0b3IyIGNvcGllZCBmcm9tIHRoZSBWZWN0b3IyXG4gICAgICogQHJldHVybnMgYSBuZXcgVmVjdG9yMlxuICAgICAqL1xuICAgIGNsb25lKCkge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjIodGhpcy54LCB0aGlzLnkpO1xuICAgIH1cbn1cbmV4cG9ydHMuVmVjdG9yMiA9IFZlY3RvcjI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WZWN0b3IyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BcmMyID0gdm9pZCAwO1xuY29uc3QgQW5nbGVfMSA9IHJlcXVpcmUoXCIuL0FuZ2xlXCIpO1xuY29uc3QgVmVjdG9yMl8xID0gcmVxdWlyZShcIi4vVmVjdG9yMlwiKTtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi90eXBlc1wiKTtcbi8qKlxuICogVGhpcyByZXByZXNlbnRzIGFuIGFyYyBpbiBhIDJkIHNwYWNlLlxuICogQHB1YmxpY1xuICovXG5jbGFzcyBBcmMyIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIEFyYyBvYmplY3QgZnJvbSB0aGUgdGhyZWUgZ2l2ZW4gcG9pbnRzIDogc3RhcnQsIG1pZGRsZSBhbmQgZW5kLlxuICAgICAqIEBwYXJhbSBzdGFydFBvaW50IC0gRGVmaW5lcyB0aGUgc3RhcnQgcG9pbnQgb2YgdGhlIGFyY1xuICAgICAqIEBwYXJhbSBtaWRQb2ludCAtIERlZmluZXMgdGhlIG1pZGxsZSBwb2ludCBvZiB0aGUgYXJjXG4gICAgICogQHBhcmFtIGVuZFBvaW50IC0gRGVmaW5lcyB0aGUgZW5kIHBvaW50IG9mIHRoZSBhcmNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKiogRGVmaW5lcyB0aGUgc3RhcnQgcG9pbnQgb2YgdGhlIGFyYyAqL1xuICAgIHN0YXJ0UG9pbnQsIFxuICAgIC8qKiBEZWZpbmVzIHRoZSBtaWQgcG9pbnQgb2YgdGhlIGFyYyAqL1xuICAgIG1pZFBvaW50LCBcbiAgICAvKiogRGVmaW5lcyB0aGUgZW5kIHBvaW50IG9mIHRoZSBhcmMgKi9cbiAgICBlbmRQb2ludCkge1xuICAgICAgICB0aGlzLnN0YXJ0UG9pbnQgPSBzdGFydFBvaW50O1xuICAgICAgICB0aGlzLm1pZFBvaW50ID0gbWlkUG9pbnQ7XG4gICAgICAgIHRoaXMuZW5kUG9pbnQgPSBlbmRQb2ludDtcbiAgICAgICAgY29uc3QgdGVtcCA9IE1hdGgucG93KG1pZFBvaW50LngsIDIpICsgTWF0aC5wb3cobWlkUG9pbnQueSwgMik7XG4gICAgICAgIGNvbnN0IHN0YXJ0VG9NaWQgPSAoTWF0aC5wb3coc3RhcnRQb2ludC54LCAyKSArIE1hdGgucG93KHN0YXJ0UG9pbnQueSwgMikgLSB0ZW1wKSAvIDI7XG4gICAgICAgIGNvbnN0IG1pZFRvRW5kID0gKHRlbXAgLSBNYXRoLnBvdyhlbmRQb2ludC54LCAyKSAtIE1hdGgucG93KGVuZFBvaW50LnksIDIpKSAvIDI7XG4gICAgICAgIGNvbnN0IGRldCA9IChzdGFydFBvaW50LnggLSBtaWRQb2ludC54KSAqIChtaWRQb2ludC55IC0gZW5kUG9pbnQueSkgLVxuICAgICAgICAgICAgKG1pZFBvaW50LnggLSBlbmRQb2ludC54KSAqIChzdGFydFBvaW50LnkgLSBtaWRQb2ludC55KTtcbiAgICAgICAgdGhpcy5jZW50ZXJQb2ludCA9IG5ldyBWZWN0b3IyXzEuVmVjdG9yMigoc3RhcnRUb01pZCAqIChtaWRQb2ludC55IC0gZW5kUG9pbnQueSkgLVxuICAgICAgICAgICAgbWlkVG9FbmQgKiAoc3RhcnRQb2ludC55IC0gbWlkUG9pbnQueSkpIC9cbiAgICAgICAgICAgIGRldCwgKChzdGFydFBvaW50LnggLSBtaWRQb2ludC54KSAqIG1pZFRvRW5kIC1cbiAgICAgICAgICAgIChtaWRQb2ludC54IC0gZW5kUG9pbnQueCkgKiBzdGFydFRvTWlkKSAvXG4gICAgICAgICAgICBkZXQpO1xuICAgICAgICB0aGlzLnJhZGl1cyA9IHRoaXMuY2VudGVyUG9pbnQuc3VidHJhY3QodGhpcy5zdGFydFBvaW50KS5sZW5ndGgoKTtcbiAgICAgICAgdGhpcy5zdGFydEFuZ2xlID0gQW5nbGVfMS5BbmdsZS5CZXR3ZWVuVHdvUG9pbnRzKHRoaXMuY2VudGVyUG9pbnQsIHRoaXMuc3RhcnRQb2ludCk7XG4gICAgICAgIGNvbnN0IGExID0gdGhpcy5zdGFydEFuZ2xlLmRlZ3JlZXMoKTtcbiAgICAgICAgbGV0IGEyID0gQW5nbGVfMS5BbmdsZS5CZXR3ZWVuVHdvUG9pbnRzKHRoaXMuY2VudGVyUG9pbnQsIHRoaXMubWlkUG9pbnQpLmRlZ3JlZXMoKTtcbiAgICAgICAgbGV0IGEzID0gQW5nbGVfMS5BbmdsZS5CZXR3ZWVuVHdvUG9pbnRzKHRoaXMuY2VudGVyUG9pbnQsIHRoaXMuZW5kUG9pbnQpLmRlZ3JlZXMoKTtcbiAgICAgICAgLy8gYW5nbGVzIGNvcnJlY3Rpb25cbiAgICAgICAgaWYgKGEyIC0gYTEgPiArMTgwLjApIHtcbiAgICAgICAgICAgIGEyIC09IDM2MC4wO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhMiAtIGExIDwgLTE4MC4wKSB7XG4gICAgICAgICAgICBhMiArPSAzNjAuMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYTMgLSBhMiA+ICsxODAuMCkge1xuICAgICAgICAgICAgYTMgLT0gMzYwLjA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGEzIC0gYTIgPCAtMTgwLjApIHtcbiAgICAgICAgICAgIGEzICs9IDM2MC4wO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3JpZW50YXRpb24gPSBhMiAtIGExIDwgMCA/IHR5cGVzXzEuT3JpZW50YXRpb24uQ1cgOiB0eXBlc18xLk9yaWVudGF0aW9uLkNDVztcbiAgICAgICAgdGhpcy5hbmdsZSA9IEFuZ2xlXzEuQW5nbGUuRnJvbURlZ3JlZXModGhpcy5vcmllbnRhdGlvbiA9PT0gdHlwZXNfMS5PcmllbnRhdGlvbi5DVyA/IGExIC0gYTMgOiBhMyAtIGExKTtcbiAgICB9XG59XG5leHBvcnRzLkFyYzIgPSBBcmMyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXJjMi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQXhpcyA9IHZvaWQgMDtcbmNvbnN0IFZlY3RvcjNfMSA9IHJlcXVpcmUoXCIuL1ZlY3RvcjNcIik7XG4vKipcbiAqIERlZmluZXMgdGhlIDMgbWFpbiBheGVzXG4gKiBAcHVibGljXG4gKi9cbmNsYXNzIEF4aXMge1xufVxuZXhwb3J0cy5BeGlzID0gQXhpcztcbi8qKiBYIGF4aXMgKi9cbkF4aXMuWCA9IG5ldyBWZWN0b3IzXzEuVmVjdG9yMygxLjAsIDAuMCwgMC4wKTtcbi8qKiBZIGF4aXMgKi9cbkF4aXMuWSA9IG5ldyBWZWN0b3IzXzEuVmVjdG9yMygwLjAsIDEuMCwgMC4wKTtcbi8qKiBaIGF4aXMgKi9cbkF4aXMuWiA9IG5ldyBWZWN0b3IzXzEuVmVjdG9yMygwLjAsIDAuMCwgMS4wKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUF4aXMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkJlemllckN1cnZlID0gdm9pZCAwO1xuLyoqXG4gKiBDbGFzcyB1c2VkIHRvIHJlcHJlc2VudCBhIEJlemllciBjdXJ2ZVxuICogQHB1YmxpY1xuICovXG5jbGFzcyBCZXppZXJDdXJ2ZSB7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY3ViaWMgQmV6aWVyIGludGVycG9sYXRlZCB2YWx1ZSAoZmxvYXQpIGF0IFwidFwiIChmbG9hdCkgZnJvbSB0aGUgZ2l2ZW4geDEsIHkxLCB4MiwgeTIgZmxvYXRzXG4gICAgICogQHBhcmFtIHQgLSBkZWZpbmVzIHRoZSB0aW1lXG4gICAgICogQHBhcmFtIHgxIC0gZGVmaW5lcyB0aGUgbGVmdCBjb29yZGluYXRlIG9uIFggYXhpc1xuICAgICAqIEBwYXJhbSB5MSAtIGRlZmluZXMgdGhlIGxlZnQgY29vcmRpbmF0ZSBvbiBZIGF4aXNcbiAgICAgKiBAcGFyYW0geDIgLSBkZWZpbmVzIHRoZSByaWdodCBjb29yZGluYXRlIG9uIFggYXhpc1xuICAgICAqIEBwYXJhbSB5MiAtIGRlZmluZXMgdGhlIHJpZ2h0IGNvb3JkaW5hdGUgb24gWSBheGlzXG4gICAgICogQHJldHVybnMgdGhlIGludGVycG9sYXRlZCB2YWx1ZVxuICAgICAqL1xuICAgIHN0YXRpYyBJbnRlcnBvbGF0ZSh0LCB4MSwgeTEsIHgyLCB5Mikge1xuICAgICAgICAvLyBFeHRyYWN0IFggKHdoaWNoIGlzIGVxdWFsIHRvIHRpbWUgaGVyZSlcbiAgICAgICAgY29uc3QgZjAgPSAxIC0gMyAqIHgyICsgMyAqIHgxO1xuICAgICAgICBjb25zdCBmMSA9IDMgKiB4MiAtIDYgKiB4MTtcbiAgICAgICAgY29uc3QgZjIgPSAzICogeDE7XG4gICAgICAgIGxldCByZWZpbmVkVCA9IHQ7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNTsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCByZWZpbmVkVDIgPSByZWZpbmVkVCAqIHJlZmluZWRUO1xuICAgICAgICAgICAgY29uc3QgcmVmaW5lZFQzID0gcmVmaW5lZFQyICogcmVmaW5lZFQ7XG4gICAgICAgICAgICBjb25zdCB4ID0gZjAgKiByZWZpbmVkVDMgKyBmMSAqIHJlZmluZWRUMiArIGYyICogcmVmaW5lZFQ7XG4gICAgICAgICAgICBjb25zdCBzbG9wZSA9IDEuMCAvICgzLjAgKiBmMCAqIHJlZmluZWRUMiArIDIuMCAqIGYxICogcmVmaW5lZFQgKyBmMik7XG4gICAgICAgICAgICByZWZpbmVkVCAtPSAoeCAtIHQpICogc2xvcGU7XG4gICAgICAgICAgICByZWZpbmVkVCA9IE1hdGgubWluKDEsIE1hdGgubWF4KDAsIHJlZmluZWRUKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVzb2x2ZSBjdWJpYyBiZXppZXIgZm9yIHRoZSBnaXZlbiB4XG4gICAgICAgIHJldHVybiAoMyAqIE1hdGgucG93KDEgLSByZWZpbmVkVCwgMikgKiByZWZpbmVkVCAqIHkxICtcbiAgICAgICAgICAgIDMgKiAoMSAtIHJlZmluZWRUKSAqIE1hdGgucG93KHJlZmluZWRULCAyKSAqIHkyICtcbiAgICAgICAgICAgIE1hdGgucG93KHJlZmluZWRULCAzKSk7XG4gICAgfVxufVxuZXhwb3J0cy5CZXppZXJDdXJ2ZSA9IEJlemllckN1cnZlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QmV6aWVyQ3VydmUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvbG9yNCA9IHZvaWQgMDtcbmNvbnN0IFNjYWxhcl8xID0gcmVxdWlyZShcIi4vU2NhbGFyXCIpO1xuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCIuL3R5cGVzXCIpO1xuLyoqXG4gKiBDbGFzcyB1c2VkIHRvIGhvbGQgYSBSQkdBIGNvbG9yXG4gKiBAcHVibGljXG4gKi9cbmNsYXNzIENvbG9yNCB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBDb2xvcjQgb2JqZWN0IGZyb20gcmVkLCBncmVlbiwgYmx1ZSB2YWx1ZXMsIGFsbCBiZXR3ZWVuIDAgYW5kIDFcbiAgICAgKiBAcGFyYW0gciAtIGRlZmluZXMgdGhlIHJlZCBjb21wb25lbnQgKGJldHdlZW4gMCBhbmQgMSwgZGVmYXVsdCBpcyAwKVxuICAgICAqIEBwYXJhbSBnIC0gZGVmaW5lcyB0aGUgZ3JlZW4gY29tcG9uZW50IChiZXR3ZWVuIDAgYW5kIDEsIGRlZmF1bHQgaXMgMClcbiAgICAgKiBAcGFyYW0gYiAtIGRlZmluZXMgdGhlIGJsdWUgY29tcG9uZW50IChiZXR3ZWVuIDAgYW5kIDEsIGRlZmF1bHQgaXMgMClcbiAgICAgKiBAcGFyYW0gYSAtIGRlZmluZXMgdGhlIGFscGhhIGNvbXBvbmVudCAoYmV0d2VlbiAwIGFuZCAxLCBkZWZhdWx0IGlzIDEpXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgcmVkIGNvbXBvbmVudCAoYmV0d2VlbiAwIGFuZCAxLCBkZWZhdWx0IGlzIDApXG4gICAgICovXG4gICAgciA9IDAsIFxuICAgIC8qKlxuICAgICAqIERlZmluZXMgdGhlIGdyZWVuIGNvbXBvbmVudCAoYmV0d2VlbiAwIGFuZCAxLCBkZWZhdWx0IGlzIDApXG4gICAgICovXG4gICAgZyA9IDAsIFxuICAgIC8qKlxuICAgICAqIERlZmluZXMgdGhlIGJsdWUgY29tcG9uZW50IChiZXR3ZWVuIDAgYW5kIDEsIGRlZmF1bHQgaXMgMClcbiAgICAgKi9cbiAgICBiID0gMCwgXG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgYWxwaGEgY29tcG9uZW50IChiZXR3ZWVuIDAgYW5kIDEsIGRlZmF1bHQgaXMgMSlcbiAgICAgKi9cbiAgICBhID0gMSkge1xuICAgICAgICB0aGlzLnIgPSByO1xuICAgICAgICB0aGlzLmcgPSBnO1xuICAgICAgICB0aGlzLmIgPSBiO1xuICAgICAgICB0aGlzLmEgPSBhO1xuICAgIH1cbiAgICAvLyBTdGF0aWNzXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBDb2xvcjQgZnJvbSB0aGUgc3RyaW5nIGNvbnRhaW5pbmcgdmFsaWQgaGV4YWRlY2ltYWwgdmFsdWVzXG4gICAgICogQHBhcmFtIGhleCAtIGRlZmluZXMgYSBzdHJpbmcgY29udGFpbmluZyB2YWxpZCBoZXhhZGVjaW1hbCB2YWx1ZXNcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBDb2xvcjQgb2JqZWN0XG4gICAgICovXG4gICAgc3RhdGljIEZyb21IZXhTdHJpbmcoaGV4KSB7XG4gICAgICAgIGlmIChoZXguc3Vic3RyaW5nKDAsIDEpICE9PSAnIycgfHwgaGV4Lmxlbmd0aCAhPT0gOSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcjQoMC4wLCAwLjAsIDAuMCwgMC4wKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByID0gcGFyc2VJbnQoaGV4LnN1YnN0cmluZygxLCAzKSwgMTYpO1xuICAgICAgICBjb25zdCBnID0gcGFyc2VJbnQoaGV4LnN1YnN0cmluZygzLCA1KSwgMTYpO1xuICAgICAgICBjb25zdCBiID0gcGFyc2VJbnQoaGV4LnN1YnN0cmluZyg1LCA3KSwgMTYpO1xuICAgICAgICBjb25zdCBhID0gcGFyc2VJbnQoaGV4LnN1YnN0cmluZyg3LCA5KSwgMTYpO1xuICAgICAgICByZXR1cm4gQ29sb3I0LkZyb21JbnRzKHIsIGcsIGIsIGEpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IENvbG9yNCBvYmplY3Qgc2V0IHdpdGggdGhlIGxpbmVhcmx5IGludGVycG9sYXRlZCB2YWx1ZXMgb2YgXCJhbW91bnRcIiBiZXR3ZWVuIHRoZSBsZWZ0IENvbG9yNCBvYmplY3QgYW5kIHRoZSByaWdodCBDb2xvcjQgb2JqZWN0XG4gICAgICogQHBhcmFtIGxlZnQgLSBkZWZpbmVzIHRoZSBzdGFydCB2YWx1ZVxuICAgICAqIEBwYXJhbSByaWdodCAtIGRlZmluZXMgdGhlIGVuZCB2YWx1ZVxuICAgICAqIEBwYXJhbSBhbW91bnQgLSBkZWZpbmVzIHRoZSBncmFkaWVudCBmYWN0b3JcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBDb2xvcjQgb2JqZWN0XG4gICAgICovXG4gICAgc3RhdGljIExlcnAobGVmdCwgcmlnaHQsIGFtb3VudCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgQ29sb3I0KDAuMCwgMC4wLCAwLjAsIDAuMCk7XG4gICAgICAgIENvbG9yNC5MZXJwVG9SZWYobGVmdCwgcmlnaHQsIGFtb3VudCwgcmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBnaXZlbiBcInJlc3VsdFwiIHdpdGggdGhlIGxpbmVhcmx5IGludGVycG9sYXRlZCB2YWx1ZXMgb2YgXCJhbW91bnRcIiBiZXR3ZWVuIHRoZSBsZWZ0IENvbG9yNCBvYmplY3QgYW5kIHRoZSByaWdodCBDb2xvcjQgb2JqZWN0XG4gICAgICogQHBhcmFtIGxlZnQgLSBkZWZpbmVzIHRoZSBzdGFydCB2YWx1ZVxuICAgICAqIEBwYXJhbSByaWdodCAtIGRlZmluZXMgdGhlIGVuZCB2YWx1ZVxuICAgICAqIEBwYXJhbSBhbW91bnQgLSBkZWZpbmVzIHRoZSBncmFkaWVudCBmYWN0b3JcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgQ29sb3I0IG9iamVjdCB3aGVyZSB0byBzdG9yZSBkYXRhXG4gICAgICovXG4gICAgc3RhdGljIExlcnBUb1JlZihsZWZ0LCByaWdodCwgYW1vdW50LCByZXN1bHQpIHtcbiAgICAgICAgcmVzdWx0LnIgPSBsZWZ0LnIgKyAocmlnaHQuciAtIGxlZnQucikgKiBhbW91bnQ7XG4gICAgICAgIHJlc3VsdC5nID0gbGVmdC5nICsgKHJpZ2h0LmcgLSBsZWZ0LmcpICogYW1vdW50O1xuICAgICAgICByZXN1bHQuYiA9IGxlZnQuYiArIChyaWdodC5iIC0gbGVmdC5iKSAqIGFtb3VudDtcbiAgICAgICAgcmVzdWx0LmEgPSBsZWZ0LmEgKyAocmlnaHQuYSAtIGxlZnQuYSkgKiBhbW91bnQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBDb2xvcjQgdmFsdWUgY29udGFpbmluZyBhIHJlZCBjb2xvclxuICAgICAqIEByZXR1cm5zIGEgbmV3IENvbG9yMyBvYmplY3RcbiAgICAgKi9cbiAgICBzdGF0aWMgUmVkKCkge1xuICAgICAgICByZXR1cm4gbmV3IENvbG9yNCgxLjAsIDAsIDAsIDEuMCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBDb2xvcjQgdmFsdWUgY29udGFpbmluZyBhIGdyZWVuIGNvbG9yXG4gICAgICogQHJldHVybnMgYSBuZXcgQ29sb3I0IG9iamVjdFxuICAgICAqL1xuICAgIHN0YXRpYyBHcmVlbigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xvcjQoMCwgMS4wLCAwLCAxLjApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgQ29sb3I0IHZhbHVlIGNvbnRhaW5pbmcgYSBibHVlIGNvbG9yXG4gICAgICogQHJldHVybnMgYSBuZXcgQ29sb3I0IG9iamVjdFxuICAgICAqL1xuICAgIHN0YXRpYyBCbHVlKCkge1xuICAgICAgICByZXR1cm4gbmV3IENvbG9yNCgwLCAwLCAxLjAsIDEuMCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBDb2xvcjQgdmFsdWUgY29udGFpbmluZyBhIGJsYWNrIGNvbG9yXG4gICAgICogQHJldHVybnMgYSBuZXcgQ29sb3I0IG9iamVjdFxuICAgICAqL1xuICAgIHN0YXRpYyBCbGFjaygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xvcjQoMCwgMCwgMCwgMSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBDb2xvcjQgdmFsdWUgY29udGFpbmluZyBhIHdoaXRlIGNvbG9yXG4gICAgICogQHJldHVybnMgYSBuZXcgQ29sb3I0IG9iamVjdFxuICAgICAqL1xuICAgIHN0YXRpYyBXaGl0ZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xvcjQoMSwgMSwgMSwgMSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBDb2xvcjQgdmFsdWUgY29udGFpbmluZyBhIHB1cnBsZSBjb2xvclxuICAgICAqIEByZXR1cm5zIGEgbmV3IENvbG9yNCBvYmplY3RcbiAgICAgKi9cbiAgICBzdGF0aWMgUHVycGxlKCkge1xuICAgICAgICByZXR1cm4gbmV3IENvbG9yNCgwLjUsIDAsIDAuNSwgMSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBDb2xvcjQgdmFsdWUgY29udGFpbmluZyBhIG1hZ2VudGEgY29sb3JcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBDb2xvcjQgb2JqZWN0XG4gICAgICovXG4gICAgc3RhdGljIE1hZ2VudGEoKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ29sb3I0KDEsIDAsIDEsIDEpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgQ29sb3I0IHZhbHVlIGNvbnRhaW5pbmcgYSB5ZWxsb3cgY29sb3JcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBDb2xvcjQgb2JqZWN0XG4gICAgICovXG4gICAgc3RhdGljIFllbGxvdygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xvcjQoMSwgMSwgMCwgMSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBDb2xvcjQgdmFsdWUgY29udGFpbmluZyBhIGdyYXkgY29sb3JcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBDb2xvcjQgb2JqZWN0XG4gICAgICovXG4gICAgc3RhdGljIEdyYXkoKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ29sb3I0KDAuNSwgMC41LCAwLjUsIDEuMCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBDb2xvcjQgdmFsdWUgY29udGFpbmluZyBhIHRlYWwgY29sb3JcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBDb2xvcjQgb2JqZWN0XG4gICAgICovXG4gICAgc3RhdGljIFRlYWwoKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ29sb3I0KDAsIDEuMCwgMS4wLCAxLjApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgQ29sb3I0IHZhbHVlIGNvbnRhaW5pbmcgYSB0cmFuc3BhcmVudCBjb2xvclxuICAgICAqIEByZXR1cm5zIGEgbmV3IENvbG9yNCBvYmplY3RcbiAgICAgKi9cbiAgICBzdGF0aWMgQ2xlYXIoKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ29sb3I0KDAsIDAsIDAsIDApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IENvbG9yNCBmcm9tIGEgQ29sb3IzIGFuZCBhbiBhbHBoYSB2YWx1ZVxuICAgICAqIEBwYXJhbSBjb2xvcjMgLSBkZWZpbmVzIHRoZSBzb3VyY2UgQ29sb3IzIHRvIHJlYWQgZnJvbVxuICAgICAqIEBwYXJhbSBhbHBoYSAtIGRlZmluZXMgdGhlIGFscGhhIGNvbXBvbmVudCAoMS4wIGJ5IGRlZmF1bHQpXG4gICAgICogQHJldHVybnMgYSBuZXcgQ29sb3I0IG9iamVjdFxuICAgICAqL1xuICAgIHN0YXRpYyBGcm9tQ29sb3IzKGNvbG9yMywgYWxwaGEgPSAxLjApIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xvcjQoY29sb3IzLnIsIGNvbG9yMy5nLCBjb2xvcjMuYiwgYWxwaGEpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IENvbG9yNCBmcm9tIHRoZSBzdGFydGluZyBpbmRleCBlbGVtZW50IG9mIHRoZSBnaXZlbiBhcnJheVxuICAgICAqIEBwYXJhbSBhcnJheSAtIGRlZmluZXMgdGhlIHNvdXJjZSBhcnJheSB0byByZWFkIGZyb21cbiAgICAgKiBAcGFyYW0gb2Zmc2V0IC0gZGVmaW5lcyB0aGUgb2Zmc2V0IGluIHRoZSBzb3VyY2UgYXJyYXlcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBDb2xvcjQgb2JqZWN0XG4gICAgICovXG4gICAgc3RhdGljIEZyb21BcnJheShhcnJheSwgb2Zmc2V0ID0gMCkge1xuICAgICAgICByZXR1cm4gbmV3IENvbG9yNChhcnJheVtvZmZzZXRdLCBhcnJheVtvZmZzZXQgKyAxXSwgYXJyYXlbb2Zmc2V0ICsgMl0sIGFycmF5W29mZnNldCArIDNdKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBDb2xvcjMgZnJvbSBpbnRlZ2VyIHZhbHVlcyAobGVzcyB0aGFuIDI1NilcbiAgICAgKiBAcGFyYW0gciAtIGRlZmluZXMgdGhlIHJlZCBjb21wb25lbnQgdG8gcmVhZCBmcm9tICh2YWx1ZSBiZXR3ZWVuIDAgYW5kIDI1NSlcbiAgICAgKiBAcGFyYW0gZyAtIGRlZmluZXMgdGhlIGdyZWVuIGNvbXBvbmVudCB0byByZWFkIGZyb20gKHZhbHVlIGJldHdlZW4gMCBhbmQgMjU1KVxuICAgICAqIEBwYXJhbSBiIC0gZGVmaW5lcyB0aGUgYmx1ZSBjb21wb25lbnQgdG8gcmVhZCBmcm9tICh2YWx1ZSBiZXR3ZWVuIDAgYW5kIDI1NSlcbiAgICAgKiBAcGFyYW0gYSAtIGRlZmluZXMgdGhlIGFscGhhIGNvbXBvbmVudCB0byByZWFkIGZyb20gKHZhbHVlIGJldHdlZW4gMCBhbmQgMjU1KVxuICAgICAqIEByZXR1cm5zIGEgbmV3IENvbG9yMyBvYmplY3RcbiAgICAgKi9cbiAgICBzdGF0aWMgRnJvbUludHMociwgZywgYiwgYSkge1xuICAgICAgICByZXR1cm4gbmV3IENvbG9yNChyIC8gMjU1LjAsIGcgLyAyNTUuMCwgYiAvIDI1NS4wLCBhIC8gMjU1LjApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGVjayB0aGUgY29udGVudCBvZiBhIGdpdmVuIGFycmF5IGFuZCBjb252ZXJ0IGl0IHRvIGFuIGFycmF5IGNvbnRhaW5pbmcgUkdCQSBkYXRhXG4gICAgICogSWYgdGhlIG9yaWdpbmFsIGFycmF5IHdhcyBhbHJlYWR5IGNvbnRhaW5pbmcgY291bnQgKiA0IHZhbHVlcyB0aGVuIGl0IGlzIHJldHVybmVkIGRpcmVjdGx5XG4gICAgICogQHBhcmFtIGNvbG9ycyAtIGRlZmluZXMgdGhlIGFycmF5IHRvIGNoZWNrXG4gICAgICogQHBhcmFtIGNvdW50IC0gZGVmaW5lcyB0aGUgbnVtYmVyIG9mIFJHQkEgZGF0YSB0byBleHBlY3RcbiAgICAgKiBAcmV0dXJucyBhbiBhcnJheSBjb250YWluaW5nIGNvdW50ICogNCB2YWx1ZXMgKFJHQkEpXG4gICAgICovXG4gICAgc3RhdGljIENoZWNrQ29sb3JzNChjb2xvcnMsIGNvdW50KSB7XG4gICAgICAgIC8vIENoZWNrIGlmIGNvbG9yMyB3YXMgdXNlZFxuICAgICAgICBpZiAoY29sb3JzLmxlbmd0aCA9PT0gY291bnQgKiAzKSB7XG4gICAgICAgICAgICBjb25zdCBjb2xvcnM0ID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgY29sb3JzLmxlbmd0aDsgaW5kZXggKz0gMykge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld0luZGV4ID0gKGluZGV4IC8gMykgKiA0O1xuICAgICAgICAgICAgICAgIGNvbG9yczRbbmV3SW5kZXhdID0gY29sb3JzW2luZGV4XTtcbiAgICAgICAgICAgICAgICBjb2xvcnM0W25ld0luZGV4ICsgMV0gPSBjb2xvcnNbaW5kZXggKyAxXTtcbiAgICAgICAgICAgICAgICBjb2xvcnM0W25ld0luZGV4ICsgMl0gPSBjb2xvcnNbaW5kZXggKyAyXTtcbiAgICAgICAgICAgICAgICBjb2xvcnM0W25ld0luZGV4ICsgM10gPSAxLjA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY29sb3JzNDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29sb3JzO1xuICAgIH1cbiAgICAvLyBPcGVyYXRvcnNcbiAgICAvKipcbiAgICAgKiBBZGRzIGluIHBsYWNlIHRoZSBnaXZlbiBDb2xvcjQgdmFsdWVzIHRvIHRoZSBjdXJyZW50IENvbG9yNCBvYmplY3RcbiAgICAgKiBAcGFyYW0gcmlnaHQgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IHVwZGF0ZWQgQ29sb3I0IG9iamVjdFxuICAgICAqL1xuICAgIGFkZEluUGxhY2UocmlnaHQpIHtcbiAgICAgICAgdGhpcy5yICs9IHJpZ2h0LnI7XG4gICAgICAgIHRoaXMuZyArPSByaWdodC5nO1xuICAgICAgICB0aGlzLmIgKz0gcmlnaHQuYjtcbiAgICAgICAgdGhpcy5hICs9IHJpZ2h0LmE7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGFycmF5IHBvcHVsYXRlZCB3aXRoIDQgbnVtZXJpYyBlbGVtZW50cyA6IHJlZCwgZ3JlZW4sIGJsdWUsIGFscGhhIHZhbHVlc1xuICAgICAqIEByZXR1cm5zIHRoZSBuZXcgYXJyYXlcbiAgICAgKi9cbiAgICBhc0FycmF5KCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgdGhpcy50b0FycmF5KHJlc3VsdCwgMCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0b3JlcyBmcm9tIHRoZSBzdGFydGluZyBpbmRleCBpbiB0aGUgZ2l2ZW4gYXJyYXkgdGhlIENvbG9yNCBzdWNjZXNzaXZlIHZhbHVlc1xuICAgICAqIEBwYXJhbSBhcnJheSAtIGRlZmluZXMgdGhlIGFycmF5IHdoZXJlIHRvIHN0b3JlIHRoZSByLGcsYiBjb21wb25lbnRzXG4gICAgICogQHBhcmFtIGluZGV4IC0gZGVmaW5lcyBhbiBvcHRpb25hbCBpbmRleCBpbiB0aGUgdGFyZ2V0IGFycmF5IHRvIGRlZmluZSB3aGVyZSB0byBzdGFydCBzdG9yaW5nIHZhbHVlc1xuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IENvbG9yNCBvYmplY3RcbiAgICAgKi9cbiAgICB0b0FycmF5KGFycmF5LCBpbmRleCA9IDApIHtcbiAgICAgICAgYXJyYXlbaW5kZXhdID0gdGhpcy5yO1xuICAgICAgICBhcnJheVtpbmRleCArIDFdID0gdGhpcy5nO1xuICAgICAgICBhcnJheVtpbmRleCArIDJdID0gdGhpcy5iO1xuICAgICAgICBhcnJheVtpbmRleCArIDNdID0gdGhpcy5hO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBDb2xvcjQgc2V0IHdpdGggdGhlIGFkZGVkIHZhbHVlcyBvZiB0aGUgY3VycmVudCBDb2xvcjQgYW5kIG9mIHRoZSBnaXZlbiBvbmVcbiAgICAgKiBAcGFyYW0gcmlnaHQgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEByZXR1cm5zIGEgbmV3IENvbG9yNCBvYmplY3RcbiAgICAgKi9cbiAgICBhZGQocmlnaHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xvcjQodGhpcy5yICsgcmlnaHQuciwgdGhpcy5nICsgcmlnaHQuZywgdGhpcy5iICsgcmlnaHQuYiwgdGhpcy5hICsgcmlnaHQuYSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgQ29sb3I0IHNldCB3aXRoIHRoZSBzdWJ0cmFjdGVkIHZhbHVlcyBvZiB0aGUgZ2l2ZW4gb25lIGZyb20gdGhlIGN1cnJlbnQgQ29sb3I0XG4gICAgICogQHBhcmFtIHJpZ2h0IC0gZGVmaW5lcyB0aGUgc2Vjb25kIG9wZXJhbmRcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBDb2xvcjQgb2JqZWN0XG4gICAgICovXG4gICAgc3VidHJhY3QocmlnaHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xvcjQodGhpcy5yIC0gcmlnaHQuciwgdGhpcy5nIC0gcmlnaHQuZywgdGhpcy5iIC0gcmlnaHQuYiwgdGhpcy5hIC0gcmlnaHQuYSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN1YnRyYWN0cyB0aGUgZ2l2ZW4gb25lcyBmcm9tIHRoZSBjdXJyZW50IENvbG9yNCB2YWx1ZXMgYW5kIHN0b3JlcyB0aGUgcmVzdWx0cyBpbiBcInJlc3VsdFwiXG4gICAgICogQHBhcmFtIHJpZ2h0IC0gZGVmaW5lcyB0aGUgc2Vjb25kIG9wZXJhbmRcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgQ29sb3I0IG9iamVjdCB3aGVyZSB0byBzdG9yZSB0aGUgcmVzdWx0XG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgQ29sb3I0IG9iamVjdFxuICAgICAqL1xuICAgIHN1YnRyYWN0VG9SZWYocmlnaHQsIHJlc3VsdCkge1xuICAgICAgICByZXN1bHQuciA9IHRoaXMuciAtIHJpZ2h0LnI7XG4gICAgICAgIHJlc3VsdC5nID0gdGhpcy5nIC0gcmlnaHQuZztcbiAgICAgICAgcmVzdWx0LmIgPSB0aGlzLmIgLSByaWdodC5iO1xuICAgICAgICByZXN1bHQuYSA9IHRoaXMuYSAtIHJpZ2h0LmE7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IENvbG9yNCB3aXRoIHRoZSBjdXJyZW50IENvbG9yNCB2YWx1ZXMgbXVsdGlwbGllZCBieSBzY2FsZVxuICAgICAqIEBwYXJhbSBzY2FsZSAtIGRlZmluZXMgdGhlIHNjYWxpbmcgZmFjdG9yIHRvIGFwcGx5XG4gICAgICogQHJldHVybnMgYSBuZXcgQ29sb3I0IG9iamVjdFxuICAgICAqL1xuICAgIHNjYWxlKHNjYWxlKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ29sb3I0KHRoaXMuciAqIHNjYWxlLCB0aGlzLmcgKiBzY2FsZSwgdGhpcy5iICogc2NhbGUsIHRoaXMuYSAqIHNjYWxlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTXVsdGlwbGllcyB0aGUgY3VycmVudCBDb2xvcjQgdmFsdWVzIGJ5IHNjYWxlIGFuZCBzdG9yZXMgdGhlIHJlc3VsdCBpbiBcInJlc3VsdFwiXG4gICAgICogQHBhcmFtIHNjYWxlIC0gZGVmaW5lcyB0aGUgc2NhbGluZyBmYWN0b3IgdG8gYXBwbHlcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgQ29sb3I0IG9iamVjdCB3aGVyZSB0byBzdG9yZSB0aGUgcmVzdWx0XG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgdW5tb2RpZmllZCBDb2xvcjRcbiAgICAgKi9cbiAgICBzY2FsZVRvUmVmKHNjYWxlLCByZXN1bHQpIHtcbiAgICAgICAgcmVzdWx0LnIgPSB0aGlzLnIgKiBzY2FsZTtcbiAgICAgICAgcmVzdWx0LmcgPSB0aGlzLmcgKiBzY2FsZTtcbiAgICAgICAgcmVzdWx0LmIgPSB0aGlzLmIgKiBzY2FsZTtcbiAgICAgICAgcmVzdWx0LmEgPSB0aGlzLmEgKiBzY2FsZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNjYWxlIHRoZSBjdXJyZW50IENvbG9yNCB2YWx1ZXMgYnkgYSBmYWN0b3IgYW5kIGFkZCB0aGUgcmVzdWx0IHRvIGEgZ2l2ZW4gQ29sb3I0XG4gICAgICogQHBhcmFtIHNjYWxlIC0gZGVmaW5lcyB0aGUgc2NhbGUgZmFjdG9yXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIENvbG9yNCBvYmplY3Qgd2hlcmUgdG8gc3RvcmUgdGhlIHJlc3VsdFxuICAgICAqIEByZXR1cm5zIHRoZSB1bm1vZGlmaWVkIGN1cnJlbnQgQ29sb3I0XG4gICAgICovXG4gICAgc2NhbGVBbmRBZGRUb1JlZihzY2FsZSwgcmVzdWx0KSB7XG4gICAgICAgIHJlc3VsdC5yICs9IHRoaXMuciAqIHNjYWxlO1xuICAgICAgICByZXN1bHQuZyArPSB0aGlzLmcgKiBzY2FsZTtcbiAgICAgICAgcmVzdWx0LmIgKz0gdGhpcy5iICogc2NhbGU7XG4gICAgICAgIHJlc3VsdC5hICs9IHRoaXMuYSAqIHNjYWxlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xhbXBzIHRoZSByZ2IgdmFsdWVzIGJ5IHRoZSBtaW4gYW5kIG1heCB2YWx1ZXMgYW5kIHN0b3JlcyB0aGUgcmVzdWx0IGludG8gXCJyZXN1bHRcIlxuICAgICAqIEBwYXJhbSBtaW4gLSBkZWZpbmVzIG1pbmltdW0gY2xhbXBpbmcgdmFsdWUgKGRlZmF1bHQgaXMgMClcbiAgICAgKiBAcGFyYW0gbWF4IC0gZGVmaW5lcyBtYXhpbXVtIGNsYW1waW5nIHZhbHVlIChkZWZhdWx0IGlzIDEpXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgY29sb3IgdG8gc3RvcmUgdGhlIHJlc3VsdCBpbnRvLlxuICAgICAqIEByZXR1cm5zIHRoZSBjdXVyZW50IENvbG9yNFxuICAgICAqL1xuICAgIGNsYW1wVG9SZWYobWluID0gMCwgbWF4ID0gMSwgcmVzdWx0KSB7XG4gICAgICAgIHJlc3VsdC5yID0gU2NhbGFyXzEuU2NhbGFyLkNsYW1wKHRoaXMuciwgbWluLCBtYXgpO1xuICAgICAgICByZXN1bHQuZyA9IFNjYWxhcl8xLlNjYWxhci5DbGFtcCh0aGlzLmcsIG1pbiwgbWF4KTtcbiAgICAgICAgcmVzdWx0LmIgPSBTY2FsYXJfMS5TY2FsYXIuQ2xhbXAodGhpcy5iLCBtaW4sIG1heCk7XG4gICAgICAgIHJlc3VsdC5hID0gU2NhbGFyXzEuU2NhbGFyLkNsYW1wKHRoaXMuYSwgbWluLCBtYXgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogTXVsdGlweSBhbiBDb2xvcjQgdmFsdWUgYnkgYW5vdGhlciBhbmQgcmV0dXJuIGEgbmV3IENvbG9yNCBvYmplY3RcbiAgICAgKiBAcGFyYW0gY29sb3IgLSBkZWZpbmVzIHRoZSBDb2xvcjQgdmFsdWUgdG8gbXVsdGlwbHkgYnlcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBDb2xvcjQgb2JqZWN0XG4gICAgICovXG4gICAgbXVsdGlwbHkoY29sb3IpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xvcjQodGhpcy5yICogY29sb3IuciwgdGhpcy5nICogY29sb3IuZywgdGhpcy5iICogY29sb3IuYiwgdGhpcy5hICogY29sb3IuYSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE11bHRpcHkgYSBDb2xvcjQgdmFsdWUgYnkgYW5vdGhlciBhbmQgcHVzaCB0aGUgcmVzdWx0IGluIGEgcmVmZXJlbmNlIHZhbHVlXG4gICAgICogQHBhcmFtIGNvbG9yIC0gZGVmaW5lcyB0aGUgQ29sb3I0IHZhbHVlIHRvIG11bHRpcGx5IGJ5XG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIENvbG9yNCB0byBmaWxsIHRoZSByZXN1bHQgaW5cbiAgICAgKiBAcmV0dXJucyB0aGUgcmVzdWx0IENvbG9yNFxuICAgICAqL1xuICAgIG11bHRpcGx5VG9SZWYoY29sb3IsIHJlc3VsdCkge1xuICAgICAgICByZXN1bHQuciA9IHRoaXMuciAqIGNvbG9yLnI7XG4gICAgICAgIHJlc3VsdC5nID0gdGhpcy5nICogY29sb3IuZztcbiAgICAgICAgcmVzdWx0LmIgPSB0aGlzLmIgKiBjb2xvci5iO1xuICAgICAgICByZXN1bHQuYSA9IHRoaXMuYSAqIGNvbG9yLmE7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzdHJpbmcgd2l0aCB0aGUgQ29sb3I0IGN1cnJlbnQgdmFsdWVzXG4gICAgICogQHJldHVybnMgdGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgQ29sb3I0IG9iamVjdFxuICAgICAqL1xuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gKCd7UjogJyArIHRoaXMuciArICcgRzonICsgdGhpcy5nICsgJyBCOicgKyB0aGlzLmIgKyAnIEE6JyArIHRoaXMuYSArICd9Jyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHN0cmluZyBcIkNvbG9yNFwiXG4gICAgICogQHJldHVybnMgXCJDb2xvcjRcIlxuICAgICAqL1xuICAgIGdldENsYXNzTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdDb2xvcjQnO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb21wdXRlIHRoZSBDb2xvcjQgaGFzaCBjb2RlXG4gICAgICogQHJldHVybnMgYW4gdW5pcXVlIG51bWJlciB0aGF0IGNhbiBiZSB1c2VkIHRvIGhhc2ggQ29sb3I0IG9iamVjdHNcbiAgICAgKi9cbiAgICBnZXRIYXNoQ29kZSgpIHtcbiAgICAgICAgbGV0IGhhc2ggPSB0aGlzLnIgfHwgMDtcbiAgICAgICAgaGFzaCA9IChoYXNoICogMzk3KSBeICh0aGlzLmcgfHwgMCk7XG4gICAgICAgIGhhc2ggPSAoaGFzaCAqIDM5NykgXiAodGhpcy5iIHx8IDApO1xuICAgICAgICBoYXNoID0gKGhhc2ggKiAzOTcpIF4gKHRoaXMuYSB8fCAwKTtcbiAgICAgICAgcmV0dXJuIGhhc2g7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgQ29sb3I0IGNvcGllZCBmcm9tIHRoZSBjdXJyZW50IG9uZVxuICAgICAqIEByZXR1cm5zIGEgbmV3IENvbG9yNCBvYmplY3RcbiAgICAgKi9cbiAgICBjbG9uZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xvcjQodGhpcy5yLCB0aGlzLmcsIHRoaXMuYiwgdGhpcy5hKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29waWVzIHRoZSBnaXZlbiBDb2xvcjQgdmFsdWVzIGludG8gdGhlIGN1cnJlbnQgb25lXG4gICAgICogQHBhcmFtIHNvdXJjZSAtIGRlZmluZXMgdGhlIHNvdXJjZSBDb2xvcjQgb2JqZWN0XG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgdXBkYXRlZCBDb2xvcjQgb2JqZWN0XG4gICAgICovXG4gICAgY29weUZyb20oc291cmNlKSB7XG4gICAgICAgIHRoaXMuciA9IHNvdXJjZS5yO1xuICAgICAgICB0aGlzLmcgPSBzb3VyY2UuZztcbiAgICAgICAgdGhpcy5iID0gc291cmNlLmI7XG4gICAgICAgIHRoaXMuYSA9IHNvdXJjZS5hO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29waWVzIHRoZSBnaXZlbiBmbG9hdCB2YWx1ZXMgaW50byB0aGUgY3VycmVudCBvbmVcbiAgICAgKiBAcGFyYW0gciAtIGRlZmluZXMgdGhlIHJlZCBjb21wb25lbnQgdG8gcmVhZCBmcm9tXG4gICAgICogQHBhcmFtIGcgLSBkZWZpbmVzIHRoZSBncmVlbiBjb21wb25lbnQgdG8gcmVhZCBmcm9tXG4gICAgICogQHBhcmFtIGIgLSBkZWZpbmVzIHRoZSBibHVlIGNvbXBvbmVudCB0byByZWFkIGZyb21cbiAgICAgKiBAcGFyYW0gYSAtIGRlZmluZXMgdGhlIGFscGhhIGNvbXBvbmVudCB0byByZWFkIGZyb21cbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCB1cGRhdGVkIENvbG9yNCBvYmplY3RcbiAgICAgKi9cbiAgICBjb3B5RnJvbUZsb2F0cyhyLCBnLCBiLCBhKSB7XG4gICAgICAgIHRoaXMuciA9IHI7XG4gICAgICAgIHRoaXMuZyA9IGc7XG4gICAgICAgIHRoaXMuYiA9IGI7XG4gICAgICAgIHRoaXMuYSA9IGE7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgdGhlIGdpdmVuIGZsb2F0IHZhbHVlcyBpbnRvIHRoZSBjdXJyZW50IG9uZVxuICAgICAqIEBwYXJhbSByIC0gZGVmaW5lcyB0aGUgcmVkIGNvbXBvbmVudCB0byByZWFkIGZyb21cbiAgICAgKiBAcGFyYW0gZyAtIGRlZmluZXMgdGhlIGdyZWVuIGNvbXBvbmVudCB0byByZWFkIGZyb21cbiAgICAgKiBAcGFyYW0gYiAtIGRlZmluZXMgdGhlIGJsdWUgY29tcG9uZW50IHRvIHJlYWQgZnJvbVxuICAgICAqIEBwYXJhbSBhIC0gZGVmaW5lcyB0aGUgYWxwaGEgY29tcG9uZW50IHRvIHJlYWQgZnJvbVxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IHVwZGF0ZWQgQ29sb3I0IG9iamVjdFxuICAgICAqL1xuICAgIHNldChyLCBnLCBiLCBhKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvcHlGcm9tRmxvYXRzKHIsIGcsIGIsIGEpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb21wdXRlIHRoZSBDb2xvcjQgaGV4YWRlY2ltYWwgY29kZSBhcyBhIHN0cmluZ1xuICAgICAqIEByZXR1cm5zIGEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIGhleGFkZWNpbWFsIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBDb2xvcjQgb2JqZWN0XG4gICAgICovXG4gICAgdG9IZXhTdHJpbmcoKSB7XG4gICAgICAgIGNvbnN0IGludFIgPSAodGhpcy5yICogMjU1KSB8IDA7XG4gICAgICAgIGNvbnN0IGludEcgPSAodGhpcy5nICogMjU1KSB8IDA7XG4gICAgICAgIGNvbnN0IGludEIgPSAodGhpcy5iICogMjU1KSB8IDA7XG4gICAgICAgIGNvbnN0IGludEEgPSAodGhpcy5hICogMjU1KSB8IDA7XG4gICAgICAgIHJldHVybiAoJyMnICtcbiAgICAgICAgICAgIFNjYWxhcl8xLlNjYWxhci5Ub0hleChpbnRSKSArXG4gICAgICAgICAgICBTY2FsYXJfMS5TY2FsYXIuVG9IZXgoaW50RykgK1xuICAgICAgICAgICAgU2NhbGFyXzEuU2NhbGFyLlRvSGV4KGludEIpICtcbiAgICAgICAgICAgIFNjYWxhcl8xLlNjYWxhci5Ub0hleChpbnRBKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIGEgbmV3IENvbG9yNCBjb252ZXJ0ZWQgZnJvbSB0aGUgY3VycmVudCBvbmUgdG8gbGluZWFyIHNwYWNlXG4gICAgICogQHJldHVybnMgYSBuZXcgQ29sb3I0IG9iamVjdFxuICAgICAqL1xuICAgIHRvTGluZWFyU3BhY2UoKSB7XG4gICAgICAgIGNvbnN0IGNvbnZlcnRlZENvbG9yID0gbmV3IENvbG9yNCgpO1xuICAgICAgICB0aGlzLnRvTGluZWFyU3BhY2VUb1JlZihjb252ZXJ0ZWRDb2xvcik7XG4gICAgICAgIHJldHVybiBjb252ZXJ0ZWRDb2xvcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIENvbG9yNCB2YWx1ZXMgdG8gbGluZWFyIHNwYWNlIGFuZCBzdG9yZXMgdGhlIHJlc3VsdCBpbiBcImNvbnZlcnRlZENvbG9yXCJcbiAgICAgKiBAcGFyYW0gY29udmVydGVkQ29sb3IgLSBkZWZpbmVzIHRoZSBDb2xvcjQgb2JqZWN0IHdoZXJlIHRvIHN0b3JlIHRoZSBsaW5lYXIgc3BhY2UgdmVyc2lvblxuICAgICAqIEByZXR1cm5zIHRoZSB1bm1vZGlmaWVkIENvbG9yNFxuICAgICAqL1xuICAgIHRvTGluZWFyU3BhY2VUb1JlZihjb252ZXJ0ZWRDb2xvcikge1xuICAgICAgICBjb252ZXJ0ZWRDb2xvci5yID0gTWF0aC5wb3codGhpcy5yLCB0eXBlc18xLlRvTGluZWFyU3BhY2UpO1xuICAgICAgICBjb252ZXJ0ZWRDb2xvci5nID0gTWF0aC5wb3codGhpcy5nLCB0eXBlc18xLlRvTGluZWFyU3BhY2UpO1xuICAgICAgICBjb252ZXJ0ZWRDb2xvci5iID0gTWF0aC5wb3codGhpcy5iLCB0eXBlc18xLlRvTGluZWFyU3BhY2UpO1xuICAgICAgICBjb252ZXJ0ZWRDb2xvci5hID0gdGhpcy5hO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgYSBuZXcgQ29sb3I0IGNvbnZlcnRlZCBmcm9tIHRoZSBjdXJyZW50IG9uZSB0byBnYW1tYSBzcGFjZVxuICAgICAqIEByZXR1cm5zIGEgbmV3IENvbG9yNCBvYmplY3RcbiAgICAgKi9cbiAgICB0b0dhbW1hU3BhY2UoKSB7XG4gICAgICAgIGNvbnN0IGNvbnZlcnRlZENvbG9yID0gbmV3IENvbG9yNCgpO1xuICAgICAgICB0aGlzLnRvR2FtbWFTcGFjZVRvUmVmKGNvbnZlcnRlZENvbG9yKTtcbiAgICAgICAgcmV0dXJuIGNvbnZlcnRlZENvbG9yO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgQ29sb3I0IHZhbHVlcyB0byBnYW1tYSBzcGFjZSBhbmQgc3RvcmVzIHRoZSByZXN1bHQgaW4gXCJjb252ZXJ0ZWRDb2xvclwiXG4gICAgICogQHBhcmFtIGNvbnZlcnRlZENvbG9yIC0gZGVmaW5lcyB0aGUgQ29sb3I0IG9iamVjdCB3aGVyZSB0byBzdG9yZSB0aGUgZ2FtbWEgc3BhY2UgdmVyc2lvblxuICAgICAqIEByZXR1cm5zIHRoZSB1bm1vZGlmaWVkIENvbG9yNFxuICAgICAqL1xuICAgIHRvR2FtbWFTcGFjZVRvUmVmKGNvbnZlcnRlZENvbG9yKSB7XG4gICAgICAgIGNvbnZlcnRlZENvbG9yLnIgPSBNYXRoLnBvdyh0aGlzLnIsIHR5cGVzXzEuVG9HYW1tYVNwYWNlKTtcbiAgICAgICAgY29udmVydGVkQ29sb3IuZyA9IE1hdGgucG93KHRoaXMuZywgdHlwZXNfMS5Ub0dhbW1hU3BhY2UpO1xuICAgICAgICBjb252ZXJ0ZWRDb2xvci5iID0gTWF0aC5wb3codGhpcy5iLCB0eXBlc18xLlRvR2FtbWFTcGFjZSk7XG4gICAgICAgIGNvbnZlcnRlZENvbG9yLmEgPSB0aGlzLmE7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cbmV4cG9ydHMuQ29sb3I0ID0gQ29sb3I0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q29sb3I0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db2xvcjMgPSB2b2lkIDA7XG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4vdHlwZXNcIik7XG5jb25zdCBDb2xvcjRfMSA9IHJlcXVpcmUoXCIuL0NvbG9yNFwiKTtcbmNvbnN0IFNjYWxhcl8xID0gcmVxdWlyZShcIi4vU2NhbGFyXCIpO1xuLyoqXG4gKiBDbGFzcyB1c2VkIHRvIGhvbGQgYSBSQkcgY29sb3JcbiAqIEBwdWJsaWNcbiAqL1xuY2xhc3MgQ29sb3IzIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IENvbG9yMyBvYmplY3QgZnJvbSByZWQsIGdyZWVuLCBibHVlIHZhbHVlcywgYWxsIGJldHdlZW4gMCBhbmQgMVxuICAgICAqIEBwYXJhbSByIC0gZGVmaW5lcyB0aGUgcmVkIGNvbXBvbmVudCAoYmV0d2VlbiAwIGFuZCAxLCBkZWZhdWx0IGlzIDApXG4gICAgICogQHBhcmFtIGcgLSBkZWZpbmVzIHRoZSBncmVlbiBjb21wb25lbnQgKGJldHdlZW4gMCBhbmQgMSwgZGVmYXVsdCBpcyAwKVxuICAgICAqIEBwYXJhbSBiIC0gZGVmaW5lcyB0aGUgYmx1ZSBjb21wb25lbnQgKGJldHdlZW4gMCBhbmQgMSwgZGVmYXVsdCBpcyAwKVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgICAqIERlZmluZXMgdGhlIHJlZCBjb21wb25lbnQgKGJldHdlZW4gMCBhbmQgMSwgZGVmYXVsdCBpcyAwKVxuICAgICAqL1xuICAgIHIgPSAwLCBcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBncmVlbiBjb21wb25lbnQgKGJldHdlZW4gMCBhbmQgMSwgZGVmYXVsdCBpcyAwKVxuICAgICAqL1xuICAgIGcgPSAwLCBcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBibHVlIGNvbXBvbmVudCAoYmV0d2VlbiAwIGFuZCAxLCBkZWZhdWx0IGlzIDApXG4gICAgICovXG4gICAgYiA9IDApIHtcbiAgICAgICAgdGhpcy5yID0gcjtcbiAgICAgICAgdGhpcy5nID0gZztcbiAgICAgICAgdGhpcy5iID0gYjtcbiAgICB9XG4gICAgLy8gU3RhdGljc1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgQ29sb3IzIGZyb20gdGhlIHN0cmluZyBjb250YWluaW5nIHZhbGlkIGhleGFkZWNpbWFsIHZhbHVlc1xuICAgICAqIEBwYXJhbSBoZXggLSBkZWZpbmVzIGEgc3RyaW5nIGNvbnRhaW5pbmcgdmFsaWQgaGV4YWRlY2ltYWwgdmFsdWVzXG4gICAgICogQHJldHVybnMgYSBuZXcgQ29sb3IzIG9iamVjdFxuICAgICAqL1xuICAgIHN0YXRpYyBGcm9tSGV4U3RyaW5nKGhleCkge1xuICAgICAgICBpZiAoaGV4LnN1YnN0cmluZygwLCAxKSAhPT0gJyMnIHx8IGhleC5sZW5ndGggIT09IDcpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ29sb3IzKDAsIDAsIDApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHIgPSBwYXJzZUludChoZXguc3Vic3RyaW5nKDEsIDMpLCAxNik7XG4gICAgICAgIGNvbnN0IGcgPSBwYXJzZUludChoZXguc3Vic3RyaW5nKDMsIDUpLCAxNik7XG4gICAgICAgIGNvbnN0IGIgPSBwYXJzZUludChoZXguc3Vic3RyaW5nKDUsIDcpLCAxNik7XG4gICAgICAgIHJldHVybiBDb2xvcjMuRnJvbUludHMociwgZywgYik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgVmVjdG9yMyBmcm9tIHRoZSBzdGFydGluZyBpbmRleCBvZiB0aGUgZ2l2ZW4gYXJyYXlcbiAgICAgKiBAcGFyYW0gYXJyYXkgLSBkZWZpbmVzIHRoZSBzb3VyY2UgYXJyYXlcbiAgICAgKiBAcGFyYW0gb2Zmc2V0IC0gZGVmaW5lcyBhbiBvZmZzZXQgaW4gdGhlIHNvdXJjZSBhcnJheVxuICAgICAqIEByZXR1cm5zIGEgbmV3IENvbG9yMyBvYmplY3RcbiAgICAgKi9cbiAgICBzdGF0aWMgRnJvbUFycmF5KGFycmF5LCBvZmZzZXQgPSAwKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ29sb3IzKGFycmF5W29mZnNldF0sIGFycmF5W29mZnNldCArIDFdLCBhcnJheVtvZmZzZXQgKyAyXSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgQ29sb3IzIGZyb20gaW50ZWdlciB2YWx1ZXMgKGxlc3MgdGhhbiAyNTYpXG4gICAgICogQHBhcmFtIHIgLSBkZWZpbmVzIHRoZSByZWQgY29tcG9uZW50IHRvIHJlYWQgZnJvbSAodmFsdWUgYmV0d2VlbiAwIGFuZCAyNTUpXG4gICAgICogQHBhcmFtIGcgLSBkZWZpbmVzIHRoZSBncmVlbiBjb21wb25lbnQgdG8gcmVhZCBmcm9tICh2YWx1ZSBiZXR3ZWVuIDAgYW5kIDI1NSlcbiAgICAgKiBAcGFyYW0gYiAtIGRlZmluZXMgdGhlIGJsdWUgY29tcG9uZW50IHRvIHJlYWQgZnJvbSAodmFsdWUgYmV0d2VlbiAwIGFuZCAyNTUpXG4gICAgICogQHJldHVybnMgYSBuZXcgQ29sb3IzIG9iamVjdFxuICAgICAqL1xuICAgIHN0YXRpYyBGcm9tSW50cyhyLCBnLCBiKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ29sb3IzKHIgLyAyNTUuMCwgZyAvIDI1NS4wLCBiIC8gMjU1LjApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IENvbG9yMyB3aXRoIHZhbHVlcyBsaW5lYXJseSBpbnRlcnBvbGF0ZWQgb2YgXCJhbW91bnRcIiBiZXR3ZWVuIHRoZSBzdGFydCBDb2xvcjMgYW5kIHRoZSBlbmQgQ29sb3IzXG4gICAgICogQHBhcmFtIHN0YXJ0IC0gZGVmaW5lcyB0aGUgc3RhcnQgQ29sb3IzIHZhbHVlXG4gICAgICogQHBhcmFtIGVuZCAtIGRlZmluZXMgdGhlIGVuZCBDb2xvcjMgdmFsdWVcbiAgICAgKiBAcGFyYW0gYW1vdW50IC0gZGVmaW5lcyB0aGUgZ3JhZGllbnQgdmFsdWUgYmV0d2VlbiBzdGFydCBhbmQgZW5kXG4gICAgICogQHJldHVybnMgYSBuZXcgQ29sb3IzIG9iamVjdFxuICAgICAqL1xuICAgIHN0YXRpYyBMZXJwKHN0YXJ0LCBlbmQsIGFtb3VudCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgQ29sb3IzKDAuMCwgMC4wLCAwLjApO1xuICAgICAgICBDb2xvcjMuTGVycFRvUmVmKHN0YXJ0LCBlbmQsIGFtb3VudCwgcmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBDb2xvcjMgd2l0aCB2YWx1ZXMgbGluZWFybHkgaW50ZXJwb2xhdGVkIG9mIFwiYW1vdW50XCIgYmV0d2VlbiB0aGUgc3RhcnQgQ29sb3IzIGFuZCB0aGUgZW5kIENvbG9yM1xuICAgICAqIEBwYXJhbSBsZWZ0IC0gZGVmaW5lcyB0aGUgc3RhcnQgdmFsdWVcbiAgICAgKiBAcGFyYW0gcmlnaHQgLSBkZWZpbmVzIHRoZSBlbmQgdmFsdWVcbiAgICAgKiBAcGFyYW0gYW1vdW50IC0gZGVmaW5lcyB0aGUgZ3JhZGllbnQgZmFjdG9yXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIENvbG9yMyBvYmplY3Qgd2hlcmUgdG8gc3RvcmUgdGhlIHJlc3VsdFxuICAgICAqL1xuICAgIHN0YXRpYyBMZXJwVG9SZWYobGVmdCwgcmlnaHQsIGFtb3VudCwgcmVzdWx0KSB7XG4gICAgICAgIHJlc3VsdC5yID0gbGVmdC5yICsgKHJpZ2h0LnIgLSBsZWZ0LnIpICogYW1vdW50O1xuICAgICAgICByZXN1bHQuZyA9IGxlZnQuZyArIChyaWdodC5nIC0gbGVmdC5nKSAqIGFtb3VudDtcbiAgICAgICAgcmVzdWx0LmIgPSBsZWZ0LmIgKyAocmlnaHQuYiAtIGxlZnQuYikgKiBhbW91bnQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBDb2xvcjMgdmFsdWUgY29udGFpbmluZyBhIHJlZCBjb2xvclxuICAgICAqIEByZXR1cm5zIGEgbmV3IENvbG9yMyBvYmplY3RcbiAgICAgKi9cbiAgICBzdGF0aWMgUmVkKCkge1xuICAgICAgICByZXR1cm4gbmV3IENvbG9yMygxLCAwLCAwKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIENvbG9yMyB2YWx1ZSBjb250YWluaW5nIGEgZ3JlZW4gY29sb3JcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBDb2xvcjMgb2JqZWN0XG4gICAgICovXG4gICAgc3RhdGljIEdyZWVuKCkge1xuICAgICAgICByZXR1cm4gbmV3IENvbG9yMygwLCAxLCAwKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIENvbG9yMyB2YWx1ZSBjb250YWluaW5nIGEgYmx1ZSBjb2xvclxuICAgICAqIEByZXR1cm5zIGEgbmV3IENvbG9yMyBvYmplY3RcbiAgICAgKi9cbiAgICBzdGF0aWMgQmx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xvcjMoMCwgMCwgMSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBDb2xvcjMgdmFsdWUgY29udGFpbmluZyBhIGJsYWNrIGNvbG9yXG4gICAgICogQHJldHVybnMgYSBuZXcgQ29sb3IzIG9iamVjdFxuICAgICAqL1xuICAgIHN0YXRpYyBCbGFjaygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xvcjMoMCwgMCwgMCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBDb2xvcjMgdmFsdWUgY29udGFpbmluZyBhIHdoaXRlIGNvbG9yXG4gICAgICogQHJldHVybnMgYSBuZXcgQ29sb3IzIG9iamVjdFxuICAgICAqL1xuICAgIHN0YXRpYyBXaGl0ZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xvcjMoMSwgMSwgMSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBDb2xvcjMgdmFsdWUgY29udGFpbmluZyBhIHB1cnBsZSBjb2xvclxuICAgICAqIEByZXR1cm5zIGEgbmV3IENvbG9yMyBvYmplY3RcbiAgICAgKi9cbiAgICBzdGF0aWMgUHVycGxlKCkge1xuICAgICAgICByZXR1cm4gbmV3IENvbG9yMygwLjUsIDAsIDAuNSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBDb2xvcjMgdmFsdWUgY29udGFpbmluZyBhIG1hZ2VudGEgY29sb3JcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBDb2xvcjMgb2JqZWN0XG4gICAgICovXG4gICAgc3RhdGljIE1hZ2VudGEoKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ29sb3IzKDEsIDAsIDEpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgQ29sb3IzIHZhbHVlIGNvbnRhaW5pbmcgYSB5ZWxsb3cgY29sb3JcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBDb2xvcjMgb2JqZWN0XG4gICAgICovXG4gICAgc3RhdGljIFllbGxvdygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xvcjMoMSwgMSwgMCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBDb2xvcjMgdmFsdWUgY29udGFpbmluZyBhIGdyYXkgY29sb3JcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBDb2xvcjMgb2JqZWN0XG4gICAgICovXG4gICAgc3RhdGljIEdyYXkoKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ29sb3IzKDAuNSwgMC41LCAwLjUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgQ29sb3IzIHZhbHVlIGNvbnRhaW5pbmcgYSB0ZWFsIGNvbG9yXG4gICAgICogQHJldHVybnMgYSBuZXcgQ29sb3IzIG9iamVjdFxuICAgICAqL1xuICAgIHN0YXRpYyBUZWFsKCkge1xuICAgICAgICByZXR1cm4gbmV3IENvbG9yMygwLCAxLjAsIDEuMCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBDb2xvcjMgdmFsdWUgY29udGFpbmluZyBhIHJhbmRvbSBjb2xvclxuICAgICAqIEByZXR1cm5zIGEgbmV3IENvbG9yMyBvYmplY3RcbiAgICAgKi9cbiAgICBzdGF0aWMgUmFuZG9tKCkge1xuICAgICAgICByZXR1cm4gbmV3IENvbG9yMyhNYXRoLnJhbmRvbSgpLCBNYXRoLnJhbmRvbSgpLCBNYXRoLnJhbmRvbSgpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHN0cmluZyB3aXRoIHRoZSBDb2xvcjMgY3VycmVudCB2YWx1ZXNcbiAgICAgKiBAcmV0dXJucyB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBDb2xvcjMgb2JqZWN0XG4gICAgICovXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiAne1I6ICcgKyB0aGlzLnIgKyAnIEc6JyArIHRoaXMuZyArICcgQjonICsgdGhpcy5iICsgJ30nO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBzdHJpbmcgXCJDb2xvcjNcIlxuICAgICAqIEByZXR1cm5zIFwiQ29sb3IzXCJcbiAgICAgKi9cbiAgICBnZXRDbGFzc05hbWUoKSB7XG4gICAgICAgIHJldHVybiAnQ29sb3IzJztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29tcHV0ZSB0aGUgQ29sb3IzIGhhc2ggY29kZVxuICAgICAqIEByZXR1cm5zIGFuIHVuaXF1ZSBudW1iZXIgdGhhdCBjYW4gYmUgdXNlZCB0byBoYXNoIENvbG9yMyBvYmplY3RzXG4gICAgICovXG4gICAgZ2V0SGFzaENvZGUoKSB7XG4gICAgICAgIGxldCBoYXNoID0gdGhpcy5yIHx8IDA7XG4gICAgICAgIGhhc2ggPSAoaGFzaCAqIDM5NykgXiAodGhpcy5nIHx8IDApO1xuICAgICAgICBoYXNoID0gKGhhc2ggKiAzOTcpIF4gKHRoaXMuYiB8fCAwKTtcbiAgICAgICAgcmV0dXJuIGhhc2g7XG4gICAgfVxuICAgIC8vIE9wZXJhdG9yc1xuICAgIC8qKlxuICAgICAqIFN0b3JlcyBpbiB0aGUgZ2l2ZW4gYXJyYXkgZnJvbSB0aGUgZ2l2ZW4gc3RhcnRpbmcgaW5kZXggdGhlIHJlZCwgZ3JlZW4sIGJsdWUgdmFsdWVzIGFzIHN1Y2Nlc3NpdmUgZWxlbWVudHNcbiAgICAgKiBAcGFyYW0gYXJyYXkgLSBkZWZpbmVzIHRoZSBhcnJheSB3aGVyZSB0byBzdG9yZSB0aGUgcixnLGIgY29tcG9uZW50c1xuICAgICAqIEBwYXJhbSBpbmRleCAtIGRlZmluZXMgYW4gb3B0aW9uYWwgaW5kZXggaW4gdGhlIHRhcmdldCBhcnJheSB0byBkZWZpbmUgd2hlcmUgdG8gc3RhcnQgc3RvcmluZyB2YWx1ZXNcbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCBDb2xvcjMgb2JqZWN0XG4gICAgICovXG4gICAgdG9BcnJheShhcnJheSwgaW5kZXggPSAwKSB7XG4gICAgICAgIGFycmF5W2luZGV4XSA9IHRoaXMucjtcbiAgICAgICAgYXJyYXlbaW5kZXggKyAxXSA9IHRoaXMuZztcbiAgICAgICAgYXJyYXlbaW5kZXggKyAyXSA9IHRoaXMuYjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgQ29sb3I0IG9iamVjdCBmcm9tIHRoZSBjdXJyZW50IENvbG9yMyBhbmQgdGhlIGdpdmVuIGFscGhhXG4gICAgICogQHBhcmFtIGFscGhhIC0gZGVmaW5lcyB0aGUgYWxwaGEgY29tcG9uZW50IG9uIHRoZSBuZXcgQ29sb3I0IG9iamVjdCAoZGVmYXVsdCBpcyAxKVxuICAgICAqIEByZXR1cm5zIGEgbmV3IENvbG9yNCBvYmplY3RcbiAgICAgKi9cbiAgICB0b0NvbG9yNChhbHBoYSA9IDEpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xvcjRfMS5Db2xvcjQodGhpcy5yLCB0aGlzLmcsIHRoaXMuYiwgYWxwaGEpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IGFycmF5IHBvcHVsYXRlZCB3aXRoIDMgbnVtZXJpYyBlbGVtZW50cyA6IHJlZCwgZ3JlZW4gYW5kIGJsdWUgdmFsdWVzXG4gICAgICogQHJldHVybnMgdGhlIG5ldyBhcnJheVxuICAgICAqL1xuICAgIGFzQXJyYXkoKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBBcnJheSgpO1xuICAgICAgICB0aGlzLnRvQXJyYXkocmVzdWx0LCAwKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbHVtaW5hbmNlIHZhbHVlXG4gICAgICogQHJldHVybnMgYSBmbG9hdCB2YWx1ZVxuICAgICAqL1xuICAgIHRvTHVtaW5hbmNlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yICogMC4zICsgdGhpcy5nICogMC41OSArIHRoaXMuYiAqIDAuMTE7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE11bHRpcGx5IGVhY2ggQ29sb3IzIHJnYiB2YWx1ZXMgYnkgdGhlIGdpdmVuIENvbG9yMyByZ2IgdmFsdWVzIGluIGEgbmV3IENvbG9yMyBvYmplY3RcbiAgICAgKiBAcGFyYW0gb3RoZXJDb2xvciAtIGRlZmluZXMgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAgICogQHJldHVybnMgdGhlIG5ldyBDb2xvcjMgb2JqZWN0XG4gICAgICovXG4gICAgbXVsdGlwbHkob3RoZXJDb2xvcikge1xuICAgICAgICByZXR1cm4gbmV3IENvbG9yMyh0aGlzLnIgKiBvdGhlckNvbG9yLnIsIHRoaXMuZyAqIG90aGVyQ29sb3IuZywgdGhpcy5iICogb3RoZXJDb2xvci5iKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTXVsdGlwbHkgdGhlIHJnYiB2YWx1ZXMgb2YgdGhlIENvbG9yMyBhbmQgdGhlIGdpdmVuIENvbG9yMyBhbmQgc3RvcmVzIHRoZSByZXN1bHQgaW4gdGhlIG9iamVjdCBcInJlc3VsdFwiXG4gICAgICogQHBhcmFtIG90aGVyQ29sb3IgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSBDb2xvcjMgb2JqZWN0IHdoZXJlIHRvIHN0b3JlIHRoZSByZXN1bHRcbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCBDb2xvcjNcbiAgICAgKi9cbiAgICBtdWx0aXBseVRvUmVmKG90aGVyQ29sb3IsIHJlc3VsdCkge1xuICAgICAgICByZXN1bHQuciA9IHRoaXMuciAqIG90aGVyQ29sb3IucjtcbiAgICAgICAgcmVzdWx0LmcgPSB0aGlzLmcgKiBvdGhlckNvbG9yLmc7XG4gICAgICAgIHJlc3VsdC5iID0gdGhpcy5iICogb3RoZXJDb2xvci5iO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyBlcXVhbGl0eSBiZXR3ZWVuIENvbG9yMyBvYmplY3RzXG4gICAgICogQHBhcmFtIG90aGVyQ29sb3IgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEByZXR1cm5zIHRydWUgaWYgdGhlIHJnYiB2YWx1ZXMgYXJlIGVxdWFsIHRvIHRoZSBnaXZlbiBvbmVzXG4gICAgICovXG4gICAgZXF1YWxzKG90aGVyQ29sb3IpIHtcbiAgICAgICAgcmV0dXJuIChvdGhlckNvbG9yICYmXG4gICAgICAgICAgICB0aGlzLnIgPT09IG90aGVyQ29sb3IuciAmJlxuICAgICAgICAgICAgdGhpcy5nID09PSBvdGhlckNvbG9yLmcgJiZcbiAgICAgICAgICAgIHRoaXMuYiA9PT0gb3RoZXJDb2xvci5iKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyBlcXVhbGl0eSBiZXR3ZWVuIHRoZSBjdXJyZW50IENvbG9yMyBvYmplY3QgYW5kIGEgc2V0IG9mIHIsYixnIHZhbHVlc1xuICAgICAqIEBwYXJhbSByIC0gZGVmaW5lcyB0aGUgcmVkIGNvbXBvbmVudCB0byBjaGVja1xuICAgICAqIEBwYXJhbSBnIC0gZGVmaW5lcyB0aGUgZ3JlZW4gY29tcG9uZW50IHRvIGNoZWNrXG4gICAgICogQHBhcmFtIGIgLSBkZWZpbmVzIHRoZSBibHVlIGNvbXBvbmVudCB0byBjaGVja1xuICAgICAqIEByZXR1cm5zIHRydWUgaWYgdGhlIHJnYiB2YWx1ZXMgYXJlIGVxdWFsIHRvIHRoZSBnaXZlbiBvbmVzXG4gICAgICovXG4gICAgZXF1YWxzRmxvYXRzKHIsIGcsIGIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuciA9PT0gciAmJiB0aGlzLmcgPT09IGcgJiYgdGhpcy5iID09PSBiO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNdWx0aXBsaWVzIGluIHBsYWNlIGVhY2ggcmdiIHZhbHVlIGJ5IHNjYWxlXG4gICAgICogQHBhcmFtIHNjYWxlIC0gZGVmaW5lcyB0aGUgc2NhbGluZyBmYWN0b3JcbiAgICAgKiBAcmV0dXJucyB0aGUgdXBkYXRlZCBDb2xvcjNcbiAgICAgKi9cbiAgICBzY2FsZShzY2FsZSkge1xuICAgICAgICByZXR1cm4gbmV3IENvbG9yMyh0aGlzLnIgKiBzY2FsZSwgdGhpcy5nICogc2NhbGUsIHRoaXMuYiAqIHNjYWxlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTXVsdGlwbGllcyB0aGUgcmdiIHZhbHVlcyBieSBzY2FsZSBhbmQgc3RvcmVzIHRoZSByZXN1bHQgaW50byBcInJlc3VsdFwiXG4gICAgICogQHBhcmFtIHNjYWxlIC0gZGVmaW5lcyB0aGUgc2NhbGluZyBmYWN0b3JcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgQ29sb3IzIG9iamVjdCB3aGVyZSB0byBzdG9yZSB0aGUgcmVzdWx0XG4gICAgICogQHJldHVybnMgdGhlIHVubW9kaWZpZWQgY3VycmVudCBDb2xvcjNcbiAgICAgKi9cbiAgICBzY2FsZVRvUmVmKHNjYWxlLCByZXN1bHQpIHtcbiAgICAgICAgcmVzdWx0LnIgPSB0aGlzLnIgKiBzY2FsZTtcbiAgICAgICAgcmVzdWx0LmcgPSB0aGlzLmcgKiBzY2FsZTtcbiAgICAgICAgcmVzdWx0LmIgPSB0aGlzLmIgKiBzY2FsZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNjYWxlIHRoZSBjdXJyZW50IENvbG9yMyB2YWx1ZXMgYnkgYSBmYWN0b3IgYW5kIGFkZCB0aGUgcmVzdWx0IHRvIGEgZ2l2ZW4gQ29sb3IzXG4gICAgICogQHBhcmFtIHNjYWxlIC0gZGVmaW5lcyB0aGUgc2NhbGUgZmFjdG9yXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgY29sb3IgdG8gc3RvcmUgdGhlIHJlc3VsdCBpbnRvXG4gICAgICogQHJldHVybnMgdGhlIHVubW9kaWZpZWQgY3VycmVudCBDb2xvcjNcbiAgICAgKi9cbiAgICBzY2FsZUFuZEFkZFRvUmVmKHNjYWxlLCByZXN1bHQpIHtcbiAgICAgICAgcmVzdWx0LnIgKz0gdGhpcy5yICogc2NhbGU7XG4gICAgICAgIHJlc3VsdC5nICs9IHRoaXMuZyAqIHNjYWxlO1xuICAgICAgICByZXN1bHQuYiArPSB0aGlzLmIgKiBzY2FsZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENsYW1wcyB0aGUgcmdiIHZhbHVlcyBieSB0aGUgbWluIGFuZCBtYXggdmFsdWVzIGFuZCBzdG9yZXMgdGhlIHJlc3VsdCBpbnRvIFwicmVzdWx0XCJcbiAgICAgKiBAcGFyYW0gbWluIC0gZGVmaW5lcyBtaW5pbXVtIGNsYW1waW5nIHZhbHVlIChkZWZhdWx0IGlzIDApXG4gICAgICogQHBhcmFtIG1heCAtIGRlZmluZXMgbWF4aW11bSBjbGFtcGluZyB2YWx1ZSAoZGVmYXVsdCBpcyAxKVxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIGNvbG9yIHRvIHN0b3JlIHRoZSByZXN1bHQgaW50b1xuICAgICAqIEByZXR1cm5zIHRoZSBvcmlnaW5hbCBDb2xvcjNcbiAgICAgKi9cbiAgICBjbGFtcFRvUmVmKG1pbiA9IDAsIG1heCA9IDEsIHJlc3VsdCkge1xuICAgICAgICByZXN1bHQuciA9IFNjYWxhcl8xLlNjYWxhci5DbGFtcCh0aGlzLnIsIG1pbiwgbWF4KTtcbiAgICAgICAgcmVzdWx0LmcgPSBTY2FsYXJfMS5TY2FsYXIuQ2xhbXAodGhpcy5nLCBtaW4sIG1heCk7XG4gICAgICAgIHJlc3VsdC5iID0gU2NhbGFyXzEuU2NhbGFyLkNsYW1wKHRoaXMuYiwgbWluLCBtYXgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBDb2xvcjMgc2V0IHdpdGggdGhlIGFkZGVkIHZhbHVlcyBvZiB0aGUgY3VycmVudCBDb2xvcjMgYW5kIG9mIHRoZSBnaXZlbiBvbmVcbiAgICAgKiBAcGFyYW0gb3RoZXJDb2xvciAtIGRlZmluZXMgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAgICogQHJldHVybnMgdGhlIG5ldyBDb2xvcjNcbiAgICAgKi9cbiAgICBhZGQob3RoZXJDb2xvcikge1xuICAgICAgICByZXR1cm4gbmV3IENvbG9yMyh0aGlzLnIgKyBvdGhlckNvbG9yLnIsIHRoaXMuZyArIG90aGVyQ29sb3IuZywgdGhpcy5iICsgb3RoZXJDb2xvci5iKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RvcmVzIHRoZSByZXN1bHQgb2YgdGhlIGFkZGl0aW9uIG9mIHRoZSBjdXJyZW50IENvbG9yMyBhbmQgZ2l2ZW4gb25lIHJnYiB2YWx1ZXMgaW50byBcInJlc3VsdFwiXG4gICAgICogQHBhcmFtIG90aGVyQ29sb3IgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIENvbG9yMyBvYmplY3QgdG8gc3RvcmUgdGhlIHJlc3VsdCBpbnRvXG4gICAgICogQHJldHVybnMgdGhlIHVubW9kaWZpZWQgY3VycmVudCBDb2xvcjNcbiAgICAgKi9cbiAgICBhZGRUb1JlZihvdGhlckNvbG9yLCByZXN1bHQpIHtcbiAgICAgICAgcmVzdWx0LnIgPSB0aGlzLnIgKyBvdGhlckNvbG9yLnI7XG4gICAgICAgIHJlc3VsdC5nID0gdGhpcy5nICsgb3RoZXJDb2xvci5nO1xuICAgICAgICByZXN1bHQuYiA9IHRoaXMuYiArIG90aGVyQ29sb3IuYjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgQ29sb3IzIHNldCB3aXRoIHRoZSBzdWJ0cmFjdGVkIHZhbHVlcyBvZiB0aGUgZ2l2ZW4gb25lIGZyb20gdGhlIGN1cnJlbnQgQ29sb3IzXG4gICAgICogQHBhcmFtIG90aGVyQ29sb3IgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEByZXR1cm5zIHRoZSBuZXcgQ29sb3IzXG4gICAgICovXG4gICAgc3VidHJhY3Qob3RoZXJDb2xvcikge1xuICAgICAgICByZXR1cm4gbmV3IENvbG9yMyh0aGlzLnIgLSBvdGhlckNvbG9yLnIsIHRoaXMuZyAtIG90aGVyQ29sb3IuZywgdGhpcy5iIC0gb3RoZXJDb2xvci5iKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RvcmVzIHRoZSByZXN1bHQgb2YgdGhlIHN1YnRyYWN0aW9uIG9mIGdpdmVuIG9uZSBmcm9tIHRoZSBjdXJyZW50IENvbG9yMyByZ2IgdmFsdWVzIGludG8gXCJyZXN1bHRcIlxuICAgICAqIEBwYXJhbSBvdGhlckNvbG9yIC0gZGVmaW5lcyB0aGUgc2Vjb25kIG9wZXJhbmRcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyBDb2xvcjMgb2JqZWN0IHRvIHN0b3JlIHRoZSByZXN1bHQgaW50b1xuICAgICAqIEByZXR1cm5zIHRoZSB1bm1vZGlmaWVkIGN1cnJlbnQgQ29sb3IzXG4gICAgICovXG4gICAgc3VidHJhY3RUb1JlZihvdGhlckNvbG9yLCByZXN1bHQpIHtcbiAgICAgICAgcmVzdWx0LnIgPSB0aGlzLnIgLSBvdGhlckNvbG9yLnI7XG4gICAgICAgIHJlc3VsdC5nID0gdGhpcy5nIC0gb3RoZXJDb2xvci5nO1xuICAgICAgICByZXN1bHQuYiA9IHRoaXMuYiAtIG90aGVyQ29sb3IuYjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvcHkgdGhlIGN1cnJlbnQgb2JqZWN0XG4gICAgICogQHJldHVybnMgYSBuZXcgQ29sb3IzIGNvcGllZCB0aGUgY3VycmVudCBvbmVcbiAgICAgKi9cbiAgICBjbG9uZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xvcjModGhpcy5yLCB0aGlzLmcsIHRoaXMuYik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvcGllcyB0aGUgcmdiIHZhbHVlcyBmcm9tIHRoZSBzb3VyY2UgaW4gdGhlIGN1cnJlbnQgQ29sb3IzXG4gICAgICogQHBhcmFtIHNvdXJjZSAtIGRlZmluZXMgdGhlIHNvdXJjZSBDb2xvcjMgb2JqZWN0XG4gICAgICogQHJldHVybnMgdGhlIHVwZGF0ZWQgQ29sb3IzIG9iamVjdFxuICAgICAqL1xuICAgIGNvcHlGcm9tKHNvdXJjZSkge1xuICAgICAgICB0aGlzLnIgPSBzb3VyY2UucjtcbiAgICAgICAgdGhpcy5nID0gc291cmNlLmc7XG4gICAgICAgIHRoaXMuYiA9IHNvdXJjZS5iO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgQ29sb3IzIHJnYiB2YWx1ZXMgZnJvbSB0aGUgZ2l2ZW4gZmxvYXRzXG4gICAgICogQHBhcmFtIHIgLSBkZWZpbmVzIHRoZSByZWQgY29tcG9uZW50IHRvIHJlYWQgZnJvbVxuICAgICAqIEBwYXJhbSBnIC0gZGVmaW5lcyB0aGUgZ3JlZW4gY29tcG9uZW50IHRvIHJlYWQgZnJvbVxuICAgICAqIEBwYXJhbSBiIC0gZGVmaW5lcyB0aGUgYmx1ZSBjb21wb25lbnQgdG8gcmVhZCBmcm9tXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgQ29sb3IzIG9iamVjdFxuICAgICAqL1xuICAgIGNvcHlGcm9tRmxvYXRzKHIsIGcsIGIpIHtcbiAgICAgICAgdGhpcy5yID0gcjtcbiAgICAgICAgdGhpcy5nID0gZztcbiAgICAgICAgdGhpcy5iID0gYjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIENvbG9yMyByZ2IgdmFsdWVzIGZyb20gdGhlIGdpdmVuIGZsb2F0c1xuICAgICAqIEBwYXJhbSByIC0gZGVmaW5lcyB0aGUgcmVkIGNvbXBvbmVudCB0byByZWFkIGZyb21cbiAgICAgKiBAcGFyYW0gZyAtIGRlZmluZXMgdGhlIGdyZWVuIGNvbXBvbmVudCB0byByZWFkIGZyb21cbiAgICAgKiBAcGFyYW0gYiAtIGRlZmluZXMgdGhlIGJsdWUgY29tcG9uZW50IHRvIHJlYWQgZnJvbVxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IENvbG9yMyBvYmplY3RcbiAgICAgKi9cbiAgICBzZXQociwgZywgYikge1xuICAgICAgICByZXR1cm4gdGhpcy5jb3B5RnJvbUZsb2F0cyhyLCBnLCBiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29tcHV0ZSB0aGUgQ29sb3IzIGhleGFkZWNpbWFsIGNvZGUgYXMgYSBzdHJpbmdcbiAgICAgKiBAcmV0dXJucyBhIHN0cmluZyBjb250YWluaW5nIHRoZSBoZXhhZGVjaW1hbCByZXByZXNlbnRhdGlvbiBvZiB0aGUgQ29sb3IzIG9iamVjdFxuICAgICAqL1xuICAgIHRvSGV4U3RyaW5nKCkge1xuICAgICAgICBjb25zdCBpbnRSID0gKHRoaXMuciAqIDI1NSkgfCAwO1xuICAgICAgICBjb25zdCBpbnRHID0gKHRoaXMuZyAqIDI1NSkgfCAwO1xuICAgICAgICBjb25zdCBpbnRCID0gKHRoaXMuYiAqIDI1NSkgfCAwO1xuICAgICAgICByZXR1cm4gJyMnICsgU2NhbGFyXzEuU2NhbGFyLlRvSGV4KGludFIpICsgU2NhbGFyXzEuU2NhbGFyLlRvSGV4KGludEcpICsgU2NhbGFyXzEuU2NhbGFyLlRvSGV4KGludEIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBhIG5ldyBDb2xvcjMgY29udmVydGVkIGZyb20gdGhlIGN1cnJlbnQgb25lIHRvIGxpbmVhciBzcGFjZVxuICAgICAqIEByZXR1cm5zIGEgbmV3IENvbG9yMyBvYmplY3RcbiAgICAgKi9cbiAgICB0b0xpbmVhclNwYWNlKCkge1xuICAgICAgICBjb25zdCBjb252ZXJ0ZWRDb2xvciA9IG5ldyBDb2xvcjMoKTtcbiAgICAgICAgdGhpcy50b0xpbmVhclNwYWNlVG9SZWYoY29udmVydGVkQ29sb3IpO1xuICAgICAgICByZXR1cm4gY29udmVydGVkQ29sb3I7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBDb2xvcjMgdmFsdWVzIHRvIGxpbmVhciBzcGFjZSBhbmQgc3RvcmVzIHRoZSByZXN1bHQgaW4gXCJjb252ZXJ0ZWRDb2xvclwiXG4gICAgICogQHBhcmFtIGNvbnZlcnRlZENvbG9yIC0gZGVmaW5lcyB0aGUgQ29sb3IzIG9iamVjdCB3aGVyZSB0byBzdG9yZSB0aGUgbGluZWFyIHNwYWNlIHZlcnNpb25cbiAgICAgKiBAcmV0dXJucyB0aGUgdW5tb2RpZmllZCBDb2xvcjNcbiAgICAgKi9cbiAgICB0b0xpbmVhclNwYWNlVG9SZWYoY29udmVydGVkQ29sb3IpIHtcbiAgICAgICAgY29udmVydGVkQ29sb3IuciA9IE1hdGgucG93KHRoaXMuciwgdHlwZXNfMS5Ub0xpbmVhclNwYWNlKTtcbiAgICAgICAgY29udmVydGVkQ29sb3IuZyA9IE1hdGgucG93KHRoaXMuZywgdHlwZXNfMS5Ub0xpbmVhclNwYWNlKTtcbiAgICAgICAgY29udmVydGVkQ29sb3IuYiA9IE1hdGgucG93KHRoaXMuYiwgdHlwZXNfMS5Ub0xpbmVhclNwYWNlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIGEgbmV3IENvbG9yMyBjb252ZXJ0ZWQgZnJvbSB0aGUgY3VycmVudCBvbmUgdG8gZ2FtbWEgc3BhY2VcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBDb2xvcjMgb2JqZWN0XG4gICAgICovXG4gICAgdG9HYW1tYVNwYWNlKCkge1xuICAgICAgICBjb25zdCBjb252ZXJ0ZWRDb2xvciA9IG5ldyBDb2xvcjMoKTtcbiAgICAgICAgdGhpcy50b0dhbW1hU3BhY2VUb1JlZihjb252ZXJ0ZWRDb2xvcik7XG4gICAgICAgIHJldHVybiBjb252ZXJ0ZWRDb2xvcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIENvbG9yMyB2YWx1ZXMgdG8gZ2FtbWEgc3BhY2UgYW5kIHN0b3JlcyB0aGUgcmVzdWx0IGluIFwiY29udmVydGVkQ29sb3JcIlxuICAgICAqIEBwYXJhbSBjb252ZXJ0ZWRDb2xvciAtIGRlZmluZXMgdGhlIENvbG9yMyBvYmplY3Qgd2hlcmUgdG8gc3RvcmUgdGhlIGdhbW1hIHNwYWNlIHZlcnNpb25cbiAgICAgKiBAcmV0dXJucyB0aGUgdW5tb2RpZmllZCBDb2xvcjNcbiAgICAgKi9cbiAgICB0b0dhbW1hU3BhY2VUb1JlZihjb252ZXJ0ZWRDb2xvcikge1xuICAgICAgICBjb252ZXJ0ZWRDb2xvci5yID0gTWF0aC5wb3codGhpcy5yLCB0eXBlc18xLlRvR2FtbWFTcGFjZSk7XG4gICAgICAgIGNvbnZlcnRlZENvbG9yLmcgPSBNYXRoLnBvdyh0aGlzLmcsIHR5cGVzXzEuVG9HYW1tYVNwYWNlKTtcbiAgICAgICAgY29udmVydGVkQ29sb3IuYiA9IE1hdGgucG93KHRoaXMuYiwgdHlwZXNfMS5Ub0dhbW1hU3BhY2UpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VyaWFsaXplcyBDb2xvcjNcbiAgICAgKi9cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByOiB0aGlzLnIsXG4gICAgICAgICAgICBnOiB0aGlzLmcsXG4gICAgICAgICAgICBiOiB0aGlzLmJcbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnRzLkNvbG9yMyA9IENvbG9yMztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNvbG9yMy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ3VydmUzID0gdm9pZCAwO1xuY29uc3QgVmVjdG9yM18xID0gcmVxdWlyZShcIi4vVmVjdG9yM1wiKTtcbi8qKlxuICogQSBDdXJ2ZTMgb2JqZWN0IGlzIGEgbG9naWNhbCBvYmplY3QsIHNvIG5vdCBhIG1lc2gsIHRvIGhhbmRsZSBjdXJ2ZXMgaW4gdGhlIDNEIGdlb21ldHJpYyBzcGFjZS5cbiAqIEEgQ3VydmUzIGlzIGRlc2lnbmVkIGZyb20gYSBzZXJpZXMgb2Ygc3VjY2Vzc2l2ZSBWZWN0b3IzLlxuICoge0BsaW5rIGh0dHBzOi8vZG9jLmJhYnlsb25qcy5jb20vaG93X3RvL2hvd190b191c2VfY3VydmUzIH1cbiAqIEBwdWJsaWNcbiAqL1xuY2xhc3MgQ3VydmUzIHtcbiAgICAvKipcbiAgICAgKiBBIEN1cnZlMyBvYmplY3QgaXMgYSBsb2dpY2FsIG9iamVjdCwgc28gbm90IGEgbWVzaCwgdG8gaGFuZGxlIGN1cnZlcyBpbiB0aGUgM0QgZ2VvbWV0cmljIHNwYWNlLlxuICAgICAqIEEgQ3VydmUzIGlzIGRlc2lnbmVkIGZyb20gYSBzZXJpZXMgb2Ygc3VjY2Vzc2l2ZSBWZWN0b3IzLlxuICAgICAqIHtAbGluayBodHRwOi8vZG9jLmJhYnlsb25qcy5jb20vdHV0b3JpYWxzL0hvd190b191c2VfQ3VydmUzI2N1cnZlMy1vYmplY3QgfCBUdXRvcmlhbCB9XG4gICAgICogQHBhcmFtIHBvaW50cyAtIHBvaW50cyB3aGljaCBtYWtlIHVwIHRoZSBjdXJ2ZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHBvaW50cykge1xuICAgICAgICB0aGlzLl9sZW5ndGggPSAwLjA7XG4gICAgICAgIHRoaXMuX3BvaW50cyA9IHBvaW50cztcbiAgICAgICAgdGhpcy5fbGVuZ3RoID0gdGhpcy5fY29tcHV0ZUxlbmd0aChwb2ludHMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgQ3VydmUzIG9iamVjdCBhbG9uZyBhIFF1YWRyYXRpYyBCZXppZXIgY3VydmUgOiBodHRwOi8vZG9jLmJhYnlsb25qcy5jb20vdHV0b3JpYWxzL0hvd190b191c2VfQ3VydmUzI3F1YWRyYXRpYy1iZXppZXItY3VydmVcbiAgICAgKiBAcGFyYW0gdjAgLSAoVmVjdG9yMykgdGhlIG9yaWdpbiBwb2ludCBvZiB0aGUgUXVhZHJhdGljIEJlemllclxuICAgICAqIEBwYXJhbSB2MSAtIChWZWN0b3IzKSB0aGUgY29udHJvbCBwb2ludFxuICAgICAqIEBwYXJhbSB2MiAtIChWZWN0b3IzKSB0aGUgZW5kIHBvaW50IG9mIHRoZSBRdWFkcmF0aWMgQmV6aWVyXG4gICAgICogQHBhcmFtIG5iUG9pbnRzIC0gKGludGVnZXIpIHRoZSB3YW50ZWQgbnVtYmVyIG9mIHBvaW50cyBpbiB0aGUgY3VydmVcbiAgICAgKiBAcmV0dXJucyB0aGUgY3JlYXRlZCBDdXJ2ZTNcbiAgICAgKi9cbiAgICBzdGF0aWMgQ3JlYXRlUXVhZHJhdGljQmV6aWVyKHYwLCB2MSwgdjIsIG5iUG9pbnRzKSB7XG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1wYXJhbWV0ZXItcmVhc3NpZ25tZW50XG4gICAgICAgIG5iUG9pbnRzID0gbmJQb2ludHMgPiAyID8gbmJQb2ludHMgOiAzO1xuICAgICAgICBjb25zdCBiZXogPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgY29uc3QgZXF1YXRpb24gPSAodCwgdmFsMCwgdmFsMSwgdmFsMikgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVzID0gKDEuMCAtIHQpICogKDEuMCAtIHQpICogdmFsMCArIDIuMCAqIHQgKiAoMS4wIC0gdCkgKiB2YWwxICsgdCAqIHQgKiB2YWwyO1xuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gbmJQb2ludHM7IGkrKykge1xuICAgICAgICAgICAgYmV6LnB1c2gobmV3IFZlY3RvcjNfMS5WZWN0b3IzKGVxdWF0aW9uKGkgLyBuYlBvaW50cywgdjAueCwgdjEueCwgdjIueCksIGVxdWF0aW9uKGkgLyBuYlBvaW50cywgdjAueSwgdjEueSwgdjIueSksIGVxdWF0aW9uKGkgLyBuYlBvaW50cywgdjAueiwgdjEueiwgdjIueikpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEN1cnZlMyhiZXopO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgQ3VydmUzIG9iamVjdCBhbG9uZyBhIEN1YmljIEJlemllciBjdXJ2ZSA6IGh0dHA6Ly9kb2MuYmFieWxvbmpzLmNvbS90dXRvcmlhbHMvSG93X3RvX3VzZV9DdXJ2ZTMjY3ViaWMtYmV6aWVyLWN1cnZlXG4gICAgICogQHBhcmFtIHYwIC0gKFZlY3RvcjMpIHRoZSBvcmlnaW4gcG9pbnQgb2YgdGhlIEN1YmljIEJlemllclxuICAgICAqIEBwYXJhbSB2MSAtIChWZWN0b3IzKSB0aGUgZmlyc3QgY29udHJvbCBwb2ludFxuICAgICAqIEBwYXJhbSB2MiAtIChWZWN0b3IzKSB0aGUgc2Vjb25kIGNvbnRyb2wgcG9pbnRcbiAgICAgKiBAcGFyYW0gdjMgLSAoVmVjdG9yMykgdGhlIGVuZCBwb2ludCBvZiB0aGUgQ3ViaWMgQmV6aWVyXG4gICAgICogQHBhcmFtIG5iUG9pbnRzIC0gKGludGVnZXIpIHRoZSB3YW50ZWQgbnVtYmVyIG9mIHBvaW50cyBpbiB0aGUgY3VydmVcbiAgICAgKiBAcmV0dXJucyB0aGUgY3JlYXRlZCBDdXJ2ZTNcbiAgICAgKi9cbiAgICBzdGF0aWMgQ3JlYXRlQ3ViaWNCZXppZXIodjAsIHYxLCB2MiwgdjMsIG5iUG9pbnRzKSB7XG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1wYXJhbWV0ZXItcmVhc3NpZ25tZW50XG4gICAgICAgIG5iUG9pbnRzID0gbmJQb2ludHMgPiAzID8gbmJQb2ludHMgOiA0O1xuICAgICAgICBjb25zdCBiZXogPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgY29uc3QgZXF1YXRpb24gPSAodCwgdmFsMCwgdmFsMSwgdmFsMiwgdmFsMykgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVzID0gKDEuMCAtIHQpICogKDEuMCAtIHQpICogKDEuMCAtIHQpICogdmFsMCArXG4gICAgICAgICAgICAgICAgMy4wICogdCAqICgxLjAgLSB0KSAqICgxLjAgLSB0KSAqIHZhbDEgK1xuICAgICAgICAgICAgICAgIDMuMCAqIHQgKiB0ICogKDEuMCAtIHQpICogdmFsMiArXG4gICAgICAgICAgICAgICAgdCAqIHQgKiB0ICogdmFsMztcbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH07XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDw9IG5iUG9pbnRzOyBpKyspIHtcbiAgICAgICAgICAgIGJlei5wdXNoKG5ldyBWZWN0b3IzXzEuVmVjdG9yMyhlcXVhdGlvbihpIC8gbmJQb2ludHMsIHYwLngsIHYxLngsIHYyLngsIHYzLngpLCBlcXVhdGlvbihpIC8gbmJQb2ludHMsIHYwLnksIHYxLnksIHYyLnksIHYzLnkpLCBlcXVhdGlvbihpIC8gbmJQb2ludHMsIHYwLnosIHYxLnosIHYyLnosIHYzLnopKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBDdXJ2ZTMoYmV6KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIEN1cnZlMyBvYmplY3QgYWxvbmcgYSBIZXJtaXRlIFNwbGluZSBjdXJ2ZSA6IGh0dHA6Ly9kb2MuYmFieWxvbmpzLmNvbS90dXRvcmlhbHMvSG93X3RvX3VzZV9DdXJ2ZTMjaGVybWl0ZS1zcGxpbmVcbiAgICAgKiBAcGFyYW0gcDEgLSAoVmVjdG9yMykgdGhlIG9yaWdpbiBwb2ludCBvZiB0aGUgSGVybWl0ZSBTcGxpbmVcbiAgICAgKiBAcGFyYW0gdDEgLSAoVmVjdG9yMykgdGhlIHRhbmdlbnQgdmVjdG9yIGF0IHRoZSBvcmlnaW4gcG9pbnRcbiAgICAgKiBAcGFyYW0gcDIgLSAoVmVjdG9yMykgdGhlIGVuZCBwb2ludCBvZiB0aGUgSGVybWl0ZSBTcGxpbmVcbiAgICAgKiBAcGFyYW0gdDIgLSAoVmVjdG9yMykgdGhlIHRhbmdlbnQgdmVjdG9yIGF0IHRoZSBlbmQgcG9pbnRcbiAgICAgKiBAcGFyYW0gbmJQb2ludHMgLSAoaW50ZWdlcikgdGhlIHdhbnRlZCBudW1iZXIgb2YgcG9pbnRzIGluIHRoZSBjdXJ2ZVxuICAgICAqIEByZXR1cm5zIHRoZSBjcmVhdGVkIEN1cnZlM1xuICAgICAqL1xuICAgIHN0YXRpYyBDcmVhdGVIZXJtaXRlU3BsaW5lKHAxLCB0MSwgcDIsIHQyLCBuYlBvaW50cykge1xuICAgICAgICBjb25zdCBoZXJtaXRlID0gbmV3IEFycmF5KCk7XG4gICAgICAgIGNvbnN0IHN0ZXAgPSAxLjAgLyBuYlBvaW50cztcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gbmJQb2ludHM7IGkrKykge1xuICAgICAgICAgICAgaGVybWl0ZS5wdXNoKFZlY3RvcjNfMS5WZWN0b3IzLkhlcm1pdGUocDEsIHQxLCBwMiwgdDIsIGkgKiBzdGVwKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBDdXJ2ZTMoaGVybWl0ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBDdXJ2ZTMgb2JqZWN0IGFsb25nIGEgQ2F0bXVsbFJvbSBTcGxpbmUgY3VydmUgOlxuICAgICAqIEBwYXJhbSBwb2ludHMgLSAoYXJyYXkgb2YgVmVjdG9yMykgdGhlIHBvaW50cyB0aGUgc3BsaW5lIG11c3QgcGFzcyB0aHJvdWdoLiBBdCBsZWFzdCwgZm91ciBwb2ludHMgcmVxdWlyZWRcbiAgICAgKiBAcGFyYW0gbmJQb2ludHMgLSAoaW50ZWdlcikgdGhlIHdhbnRlZCBudW1iZXIgb2YgcG9pbnRzIGJldHdlZW4gZWFjaCBjdXJ2ZSBjb250cm9sIHBvaW50c1xuICAgICAqIEBwYXJhbSBjbG9zZWQgLSAoYm9vbGVhbikgb3B0aW9uYWwgd2l0aCBkZWZhdWx0IGZhbHNlLCB3aGVuIHRydWUgZm9ybXMgYSBjbG9zZWQgbG9vcCBmcm9tIHRoZSBwb2ludHNcbiAgICAgKiBAcmV0dXJucyB0aGUgY3JlYXRlZCBDdXJ2ZTNcbiAgICAgKi9cbiAgICBzdGF0aWMgQ3JlYXRlQ2F0bXVsbFJvbVNwbGluZShwb2ludHMsIG5iUG9pbnRzLCBjbG9zZWQpIHtcbiAgICAgICAgY29uc3QgY2F0bXVsbFJvbSA9IG5ldyBBcnJheSgpO1xuICAgICAgICBjb25zdCBzdGVwID0gMS4wIC8gbmJQb2ludHM7XG4gICAgICAgIGxldCBhbW91bnQgPSAwLjA7XG4gICAgICAgIGlmIChjbG9zZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHBvaW50c0NvdW50ID0gcG9pbnRzLmxlbmd0aDtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRzQ291bnQ7IGkrKykge1xuICAgICAgICAgICAgICAgIGFtb3VudCA9IDA7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCBuYlBvaW50czsgYysrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhdG11bGxSb20ucHVzaChWZWN0b3IzXzEuVmVjdG9yMy5DYXRtdWxsUm9tKHBvaW50c1tpICUgcG9pbnRzQ291bnRdLCBwb2ludHNbKGkgKyAxKSAlIHBvaW50c0NvdW50XSwgcG9pbnRzWyhpICsgMikgJSBwb2ludHNDb3VudF0sIHBvaW50c1soaSArIDMpICUgcG9pbnRzQ291bnRdLCBhbW91bnQpKTtcbiAgICAgICAgICAgICAgICAgICAgYW1vdW50ICs9IHN0ZXA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0bXVsbFJvbS5wdXNoKGNhdG11bGxSb21bMF0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgdG90YWxQb2ludHMgPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgICAgIHRvdGFsUG9pbnRzLnB1c2gocG9pbnRzWzBdLmNsb25lKCkpO1xuICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodG90YWxQb2ludHMsIHBvaW50cyk7XG4gICAgICAgICAgICB0b3RhbFBvaW50cy5wdXNoKHBvaW50c1twb2ludHMubGVuZ3RoIC0gMV0uY2xvbmUoKSk7XG4gICAgICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdG90YWxQb2ludHMubGVuZ3RoIC0gMzsgaSsrKSB7XG4gICAgICAgICAgICAgICAgYW1vdW50ID0gMDtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBjID0gMDsgYyA8IG5iUG9pbnRzOyBjKyspIHtcbiAgICAgICAgICAgICAgICAgICAgY2F0bXVsbFJvbS5wdXNoKFZlY3RvcjNfMS5WZWN0b3IzLkNhdG11bGxSb20odG90YWxQb2ludHNbaV0sIHRvdGFsUG9pbnRzW2kgKyAxXSwgdG90YWxQb2ludHNbaSArIDJdLCB0b3RhbFBvaW50c1tpICsgM10sIGFtb3VudCkpO1xuICAgICAgICAgICAgICAgICAgICBhbW91bnQgKz0gc3RlcDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpLS07XG4gICAgICAgICAgICBjYXRtdWxsUm9tLnB1c2goVmVjdG9yM18xLlZlY3RvcjMuQ2F0bXVsbFJvbSh0b3RhbFBvaW50c1tpXSwgdG90YWxQb2ludHNbaSArIDFdLCB0b3RhbFBvaW50c1tpICsgMl0sIHRvdGFsUG9pbnRzW2kgKyAzXSwgYW1vdW50KSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBDdXJ2ZTMoY2F0bXVsbFJvbSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHRoZSBDdXJ2ZTMgc3RvcmVkIGFycmF5IG9mIHN1Y2Nlc3NpdmUgVmVjdG9yM1xuICAgICAqL1xuICAgIGdldFBvaW50cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BvaW50cztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgdGhlIGNvbXB1dGVkIGxlbmd0aCAoZmxvYXQpIG9mIHRoZSBjdXJ2ZS5cbiAgICAgKi9cbiAgICBsZW5ndGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9sZW5ndGg7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgaW5zdGFuY2Ugb2YgQ3VydmUzIG9iamVjdCA6IHZhciBjdXJ2ZSA9IGN1cnZlQS5jb250aW51ZShjdXJ2ZUIpO1xuICAgICAqIFRoaXMgbmV3IEN1cnZlMyBpcyBidWlsdCBieSB0cmFuc2xhdGluZyBhbmQgc3RpY2tpbmcgdGhlIGN1cnZlQiBhdCB0aGUgZW5kIG9mIHRoZSBjdXJ2ZUEuXG4gICAgICogY3VydmVBIGFuZCBjdXJ2ZUIga2VlcCB1bmNoYW5nZWQuXG4gICAgICogQHBhcmFtIGN1cnZlIC0gdGhlIGN1cnZlIHRvIGNvbnRpbnVlIGZyb20gdGhpcyBjdXJ2ZVxuICAgICAqIEByZXR1cm5zIHRoZSBuZXdseSBjb25zdHJ1Y3RlZCBjdXJ2ZVxuICAgICAqL1xuICAgIGNvbnRpbnVlKGN1cnZlKSB7XG4gICAgICAgIGNvbnN0IGxhc3RQb2ludCA9IHRoaXMuX3BvaW50c1t0aGlzLl9wb2ludHMubGVuZ3RoIC0gMV07XG4gICAgICAgIGNvbnN0IGNvbnRpbnVlZFBvaW50cyA9IHRoaXMuX3BvaW50cy5zbGljZSgpO1xuICAgICAgICBjb25zdCBjdXJ2ZVBvaW50cyA9IGN1cnZlLmdldFBvaW50cygpO1xuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGN1cnZlUG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb250aW51ZWRQb2ludHMucHVzaChjdXJ2ZVBvaW50c1tpXS5zdWJ0cmFjdChjdXJ2ZVBvaW50c1swXSkuYWRkKGxhc3RQb2ludCkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbnRpbnVlZEN1cnZlID0gbmV3IEN1cnZlMyhjb250aW51ZWRQb2ludHMpO1xuICAgICAgICByZXR1cm4gY29udGludWVkQ3VydmU7XG4gICAgfVxuICAgIF9jb21wdXRlTGVuZ3RoKHBhdGgpIHtcbiAgICAgICAgbGV0IGwgPSAwO1xuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGwgKz0gcGF0aFtpXS5zdWJ0cmFjdChwYXRoW2kgLSAxXSkubGVuZ3RoKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGw7XG4gICAgfVxufVxuZXhwb3J0cy5DdXJ2ZTMgPSBDdXJ2ZTM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1DdXJ2ZTNkLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5QbGFuZSA9IHZvaWQgMDtcbmNvbnN0IFZlY3RvcjNfMSA9IHJlcXVpcmUoXCIuL1ZlY3RvcjNcIik7XG5jb25zdCBNYXRyaXhfMSA9IHJlcXVpcmUoXCIuL01hdHJpeFwiKTtcbmNvbnN0IHByZWFsbG9jYXRlZFZhcmlhYmxlc18xID0gcmVxdWlyZShcIi4vcHJlYWxsb2NhdGVkVmFyaWFibGVzXCIpO1xuLyoqXG4gKiBSZXByZXNlbnMgYSBwbGFuZSBieSB0aGUgZXF1YXRpb24gYXggKyBieSArIGN6ICsgZCA9IDBcbiAqIEBwdWJsaWNcbiAqL1xuY2xhc3MgUGxhbmUge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBQbGFuZSBvYmplY3QgYWNjb3JkaW5nIHRvIHRoZSBnaXZlbiBmbG9hdHMgYSwgYiwgYywgZCBhbmQgdGhlIHBsYW5lIGVxdWF0aW9uIDogYXggKyBieSArIGN6ICsgZCA9IDBcbiAgICAgKiBAcGFyYW0gYSAtIGEgY29tcG9uZW50IG9mIHRoZSBwbGFuZVxuICAgICAqIEBwYXJhbSBiIC0gYiBjb21wb25lbnQgb2YgdGhlIHBsYW5lXG4gICAgICogQHBhcmFtIGMgLSBjIGNvbXBvbmVudCBvZiB0aGUgcGxhbmVcbiAgICAgKiBAcGFyYW0gZCAtIGQgY29tcG9uZW50IG9mIHRoZSBwbGFuZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGEsIGIsIGMsIGQpIHtcbiAgICAgICAgdGhpcy5ub3JtYWwgPSBuZXcgVmVjdG9yM18xLlZlY3RvcjMoYSwgYiwgYyk7XG4gICAgICAgIHRoaXMuZCA9IGQ7XG4gICAgfVxuICAgIC8vIFN0YXRpY3NcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgcGxhbmUgZnJvbSBhbiAgYXJyYXlcbiAgICAgKiBAcGFyYW0gYXJyYXkgLSB0aGUgYXJyYXkgdG8gY3JlYXRlIGEgcGxhbmUgZnJvbVxuICAgICAqIEByZXR1cm5zIGEgbmV3IFBsYW5lIGZyb20gdGhlIGdpdmVuIGFycmF5LlxuICAgICAqL1xuICAgIHN0YXRpYyBGcm9tQXJyYXkoYXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQbGFuZShhcnJheVswXSwgYXJyYXlbMV0sIGFycmF5WzJdLCBhcnJheVszXSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBwbGFuZSBmcm9tIHRocmVlIHBvaW50c1xuICAgICAqIEBwYXJhbSBwb2ludDEgLSBwb2ludCB1c2VkIHRvIGNyZWF0ZSB0aGUgcGxhbmVcbiAgICAgKiBAcGFyYW0gcG9pbnQyIC0gcG9pbnQgdXNlZCB0byBjcmVhdGUgdGhlIHBsYW5lXG4gICAgICogQHBhcmFtIHBvaW50MyAtIHBvaW50IHVzZWQgdG8gY3JlYXRlIHRoZSBwbGFuZVxuICAgICAqIEByZXR1cm5zIGEgbmV3IFBsYW5lIGRlZmluZWQgYnkgdGhlIHRocmVlIGdpdmVuIHBvaW50cy5cbiAgICAgKi9cbiAgICBzdGF0aWMgRnJvbVBvaW50cyhwb2ludDEsIHBvaW50MiwgcG9pbnQzKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBQbGFuZSgwLjAsIDAuMCwgMC4wLCAwLjApO1xuICAgICAgICByZXN1bHQuY29weUZyb21Qb2ludHMocG9pbnQxLCBwb2ludDIsIHBvaW50Myk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBwbGFuZSBmcm9tIGFuIG9yaWdpbiBwb2ludCBhbmQgYSBub3JtYWxcbiAgICAgKiBAcGFyYW0gb3JpZ2luIC0gb3JpZ2luIG9mIHRoZSBwbGFuZSB0byBiZSBjb25zdHJ1Y3RlZFxuICAgICAqIEBwYXJhbSBub3JtYWwgLSBub3JtYWwgb2YgdGhlIHBsYW5lIHRvIGJlIGNvbnN0cnVjdGVkXG4gICAgICogQHJldHVybnMgYSBuZXcgUGxhbmUgdGhlIG5vcm1hbCB2ZWN0b3IgdG8gdGhpcyBwbGFuZSBhdCB0aGUgZ2l2ZW4gb3JpZ2luIHBvaW50LlxuICAgICAqIE5vdGUgOiB0aGUgdmVjdG9yIFwibm9ybWFsXCIgaXMgdXBkYXRlZCBiZWNhdXNlIG5vcm1hbGl6ZWQuXG4gICAgICovXG4gICAgc3RhdGljIEZyb21Qb3NpdGlvbkFuZE5vcm1hbChvcmlnaW4sIG5vcm1hbCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgUGxhbmUoMC4wLCAwLjAsIDAuMCwgMC4wKTtcbiAgICAgICAgbm9ybWFsLm5vcm1hbGl6ZSgpO1xuICAgICAgICByZXN1bHQubm9ybWFsID0gbm9ybWFsO1xuICAgICAgICByZXN1bHQuZCA9IC0obm9ybWFsLnggKiBvcmlnaW4ueCArXG4gICAgICAgICAgICBub3JtYWwueSAqIG9yaWdpbi55ICtcbiAgICAgICAgICAgIG5vcm1hbC56ICogb3JpZ2luLnopO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGVzIHRoZSBkaXN0YW5jZSBmcm9tIGEgcGxhbmUgYW5kIGEgcG9pbnRcbiAgICAgKiBAcGFyYW0gb3JpZ2luIC0gb3JpZ2luIG9mIHRoZSBwbGFuZSB0byBiZSBjb25zdHJ1Y3RlZFxuICAgICAqIEBwYXJhbSBub3JtYWwgLSBub3JtYWwgb2YgdGhlIHBsYW5lIHRvIGJlIGNvbnN0cnVjdGVkXG4gICAgICogQHBhcmFtIHBvaW50IC0gcG9pbnQgdG8gY2FsY3VsYXRlIGRpc3RhbmNlIHRvXG4gICAgICogQHJldHVybnMgdGhlIHNpZ25lZCBkaXN0YW5jZSBiZXR3ZWVuIHRoZSBwbGFuZSBkZWZpbmVkIGJ5IHRoZSBub3JtYWwgdmVjdG9yIGF0IHRoZSBcIm9yaWdpblwiXCIgcG9pbnQgYW5kIHRoZSBnaXZlbiBvdGhlciBwb2ludC5cbiAgICAgKi9cbiAgICBzdGF0aWMgU2lnbmVkRGlzdGFuY2VUb1BsYW5lRnJvbVBvc2l0aW9uQW5kTm9ybWFsKG9yaWdpbiwgbm9ybWFsLCBwb2ludCkge1xuICAgICAgICBjb25zdCBkID0gLShub3JtYWwueCAqIG9yaWdpbi54ICsgbm9ybWFsLnkgKiBvcmlnaW4ueSArIG5vcm1hbC56ICogb3JpZ2luLnopO1xuICAgICAgICByZXR1cm4gVmVjdG9yM18xLlZlY3RvcjMuRG90KHBvaW50LCBub3JtYWwpICsgZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgdGhlIHBsYW5lIGNvb3JkaW5hdGVzIGFzIGEgbmV3IGFycmF5IG9mIDQgZWxlbWVudHMgW2EsIGIsIGMsIGRdLlxuICAgICAqL1xuICAgIGFzQXJyYXkoKSB7XG4gICAgICAgIHJldHVybiBbdGhpcy5ub3JtYWwueCwgdGhpcy5ub3JtYWwueSwgdGhpcy5ub3JtYWwueiwgdGhpcy5kXTtcbiAgICB9XG4gICAgLy8gTWV0aG9kc1xuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIGEgbmV3IHBsYW5lIGNvcGllZCBmcm9tIHRoZSBjdXJyZW50IFBsYW5lLlxuICAgICAqL1xuICAgIGNsb25lKCkge1xuICAgICAgICByZXR1cm4gbmV3IFBsYW5lKHRoaXMubm9ybWFsLngsIHRoaXMubm9ybWFsLnksIHRoaXMubm9ybWFsLnosIHRoaXMuZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHRoZSBzdHJpbmcgXCJQbGFuZVwiLlxuICAgICAqL1xuICAgIGdldENsYXNzTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdQbGFuZSc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHRoZSBQbGFuZSBoYXNoIGNvZGUuXG4gICAgICovXG4gICAgZ2V0SGFzaENvZGUoKSB7XG4gICAgICAgIGxldCBoYXNoID0gdGhpcy5ub3JtYWwuZ2V0SGFzaENvZGUoKTtcbiAgICAgICAgaGFzaCA9IChoYXNoICogMzk3KSBeICh0aGlzLmQgfHwgMCk7XG4gICAgICAgIHJldHVybiBoYXNoO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBOb3JtYWxpemUgdGhlIGN1cnJlbnQgUGxhbmUgaW4gcGxhY2UuXG4gICAgICogQHJldHVybnMgdGhlIHVwZGF0ZWQgUGxhbmUuXG4gICAgICovXG4gICAgbm9ybWFsaXplKCkge1xuICAgICAgICBjb25zdCBub3JtID0gTWF0aC5zcXJ0KHRoaXMubm9ybWFsLnggKiB0aGlzLm5vcm1hbC54ICtcbiAgICAgICAgICAgIHRoaXMubm9ybWFsLnkgKiB0aGlzLm5vcm1hbC55ICtcbiAgICAgICAgICAgIHRoaXMubm9ybWFsLnogKiB0aGlzLm5vcm1hbC56KTtcbiAgICAgICAgbGV0IG1hZ25pdHVkZSA9IDAuMDtcbiAgICAgICAgaWYgKG5vcm0gIT09IDApIHtcbiAgICAgICAgICAgIG1hZ25pdHVkZSA9IDEuMCAvIG5vcm07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ub3JtYWwueCAqPSBtYWduaXR1ZGU7XG4gICAgICAgIHRoaXMubm9ybWFsLnkgKj0gbWFnbml0dWRlO1xuICAgICAgICB0aGlzLm5vcm1hbC56ICo9IG1hZ25pdHVkZTtcbiAgICAgICAgdGhpcy5kICo9IG1hZ25pdHVkZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFwcGxpZXMgYSB0cmFuc2Zvcm1hdGlvbiB0aGUgcGxhbmUgYW5kIHJldHVybnMgdGhlIHJlc3VsdFxuICAgICAqIEBwYXJhbSB0cmFuc2Zvcm1hdGlvbiAtIHRoZSB0cmFuc2Zvcm1hdGlvbiBtYXRyaXggdG8gYmUgYXBwbGllZCB0byB0aGUgcGxhbmVcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBQbGFuZSBhcyB0aGUgcmVzdWx0IG9mIHRoZSB0cmFuc2Zvcm1hdGlvbiBvZiB0aGUgY3VycmVudCBQbGFuZSBieSB0aGUgZ2l2ZW4gbWF0cml4LlxuICAgICAqL1xuICAgIHRyYW5zZm9ybSh0cmFuc2Zvcm1hdGlvbikge1xuICAgICAgICBjb25zdCB0cmFuc3Bvc2VkTWF0cml4ID0gcHJlYWxsb2NhdGVkVmFyaWFibGVzXzEuTWF0aFRtcC5NYXRyaXhbMF07XG4gICAgICAgIE1hdHJpeF8xLk1hdHJpeC5UcmFuc3Bvc2VUb1JlZih0cmFuc2Zvcm1hdGlvbiwgdHJhbnNwb3NlZE1hdHJpeCk7XG4gICAgICAgIGNvbnN0IG0gPSB0cmFuc3Bvc2VkTWF0cml4Lm07XG4gICAgICAgIGNvbnN0IHggPSB0aGlzLm5vcm1hbC54O1xuICAgICAgICBjb25zdCB5ID0gdGhpcy5ub3JtYWwueTtcbiAgICAgICAgY29uc3QgeiA9IHRoaXMubm9ybWFsLno7XG4gICAgICAgIGNvbnN0IGQgPSB0aGlzLmQ7XG4gICAgICAgIGNvbnN0IG5vcm1hbFggPSB4ICogbVswXSArIHkgKiBtWzFdICsgeiAqIG1bMl0gKyBkICogbVszXTtcbiAgICAgICAgY29uc3Qgbm9ybWFsWSA9IHggKiBtWzRdICsgeSAqIG1bNV0gKyB6ICogbVs2XSArIGQgKiBtWzddO1xuICAgICAgICBjb25zdCBub3JtYWxaID0geCAqIG1bOF0gKyB5ICogbVs5XSArIHogKiBtWzEwXSArIGQgKiBtWzExXTtcbiAgICAgICAgY29uc3QgZmluYWxEID0geCAqIG1bMTJdICsgeSAqIG1bMTNdICsgeiAqIG1bMTRdICsgZCAqIG1bMTVdO1xuICAgICAgICByZXR1cm4gbmV3IFBsYW5lKG5vcm1hbFgsIG5vcm1hbFksIG5vcm1hbFosIGZpbmFsRCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGN1YWx0dGUgdGhlIGRvdCBwcm9kdWN0IGJldHdlZW4gdGhlIHBvaW50IGFuZCB0aGUgcGxhbmUgbm9ybWFsXG4gICAgICogQHBhcmFtIHBvaW50IC0gcG9pbnQgdG8gY2FsY3VsYXRlIHRoZSBkb3QgcHJvZHVjdCB3aXRoXG4gICAgICogQHJldHVybnMgdGhlIGRvdCBwcm9kdWN0IChmbG9hdCkgb2YgdGhlIHBvaW50IGNvb3JkaW5hdGVzIGFuZCB0aGUgcGxhbmUgbm9ybWFsLlxuICAgICAqL1xuICAgIGRvdENvb3JkaW5hdGUocG9pbnQpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLm5vcm1hbC54ICogcG9pbnQueCArXG4gICAgICAgICAgICB0aGlzLm5vcm1hbC55ICogcG9pbnQueSArXG4gICAgICAgICAgICB0aGlzLm5vcm1hbC56ICogcG9pbnQueiArXG4gICAgICAgICAgICB0aGlzLmQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBjdXJyZW50IFBsYW5lIGZyb20gdGhlIHBsYW5lIGRlZmluZWQgYnkgdGhlIHRocmVlIGdpdmVuIHBvaW50cy5cbiAgICAgKiBAcGFyYW0gcG9pbnQxIC0gb25lIG9mIHRoZSBwb2ludHMgdXNlZCB0byBjb250cnVjdCB0aGUgcGxhbmVcbiAgICAgKiBAcGFyYW0gcG9pbnQyIC0gb25lIG9mIHRoZSBwb2ludHMgdXNlZCB0byBjb250cnVjdCB0aGUgcGxhbmVcbiAgICAgKiBAcGFyYW0gcG9pbnQzIC0gb25lIG9mIHRoZSBwb2ludHMgdXNlZCB0byBjb250cnVjdCB0aGUgcGxhbmVcbiAgICAgKiBAcmV0dXJucyB0aGUgdXBkYXRlZCBQbGFuZS5cbiAgICAgKi9cbiAgICBjb3B5RnJvbVBvaW50cyhwb2ludDEsIHBvaW50MiwgcG9pbnQzKSB7XG4gICAgICAgIGNvbnN0IHgxID0gcG9pbnQyLnggLSBwb2ludDEueDtcbiAgICAgICAgY29uc3QgeTEgPSBwb2ludDIueSAtIHBvaW50MS55O1xuICAgICAgICBjb25zdCB6MSA9IHBvaW50Mi56IC0gcG9pbnQxLno7XG4gICAgICAgIGNvbnN0IHgyID0gcG9pbnQzLnggLSBwb2ludDEueDtcbiAgICAgICAgY29uc3QgeTIgPSBwb2ludDMueSAtIHBvaW50MS55O1xuICAgICAgICBjb25zdCB6MiA9IHBvaW50My56IC0gcG9pbnQxLno7XG4gICAgICAgIGNvbnN0IHl6ID0geTEgKiB6MiAtIHoxICogeTI7XG4gICAgICAgIGNvbnN0IHh6ID0gejEgKiB4MiAtIHgxICogejI7XG4gICAgICAgIGNvbnN0IHh5ID0geDEgKiB5MiAtIHkxICogeDI7XG4gICAgICAgIGNvbnN0IHB5dGggPSBNYXRoLnNxcnQoeXogKiB5eiArIHh6ICogeHogKyB4eSAqIHh5KTtcbiAgICAgICAgbGV0IGludlB5dGg7XG4gICAgICAgIGlmIChweXRoICE9PSAwKSB7XG4gICAgICAgICAgICBpbnZQeXRoID0gMS4wIC8gcHl0aDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGludlB5dGggPSAwLjA7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ub3JtYWwueCA9IHl6ICogaW52UHl0aDtcbiAgICAgICAgdGhpcy5ub3JtYWwueSA9IHh6ICogaW52UHl0aDtcbiAgICAgICAgdGhpcy5ub3JtYWwueiA9IHh5ICogaW52UHl0aDtcbiAgICAgICAgdGhpcy5kID0gLSh0aGlzLm5vcm1hbC54ICogcG9pbnQxLnggK1xuICAgICAgICAgICAgdGhpcy5ub3JtYWwueSAqIHBvaW50MS55ICtcbiAgICAgICAgICAgIHRoaXMubm9ybWFsLnogKiBwb2ludDEueik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgdGhlIHBsYW5lIGlzIGZhY2luZyBhIGdpdmVuIGRpcmVjdGlvblxuICAgICAqIEBwYXJhbSBkaXJlY3Rpb24gLSB0aGUgZGlyZWN0aW9uIHRvIGNoZWNrIGlmIHRoZSBwbGFuZSBpcyBmYWNpbmdcbiAgICAgKiBAcGFyYW0gZXBzaWxvbiAtIHZhbHVlIHRoZSBkb3QgcHJvZHVjdCBpcyBjb21wYXJlZCBhZ2FpbnN0IChyZXR1cm5zIHRydWUgaWYgZG90ICZsdDs9IGVwc2lsb24pXG4gICAgICogQHJldHVybnMgVHJ1ZSBpcyB0aGUgdmVjdG9yIFwiZGlyZWN0aW9uXCIgIGlzIHRoZSBzYW1lIHNpZGUgdGhhbiB0aGUgcGxhbmUgbm9ybWFsLlxuICAgICAqL1xuICAgIGlzRnJvbnRGYWNpbmdUbyhkaXJlY3Rpb24sIGVwc2lsb24pIHtcbiAgICAgICAgY29uc3QgZG90ID0gVmVjdG9yM18xLlZlY3RvcjMuRG90KHRoaXMubm9ybWFsLCBkaXJlY3Rpb24pO1xuICAgICAgICByZXR1cm4gZG90IDw9IGVwc2lsb247XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZXMgdGhlIGRpc3RhbmNlIHRvIGEgcG9pbnRcbiAgICAgKiBAcGFyYW0gcG9pbnQgLSBwb2ludCB0byBjYWxjdWxhdGUgZGlzdGFuY2UgdG9cbiAgICAgKiBAcmV0dXJucyB0aGUgc2lnbmVkIGRpc3RhbmNlIChmbG9hdCkgZnJvbSB0aGUgZ2l2ZW4gcG9pbnQgdG8gdGhlIFBsYW5lLlxuICAgICAqL1xuICAgIHNpZ25lZERpc3RhbmNlVG8ocG9pbnQpIHtcbiAgICAgICAgcmV0dXJuIFZlY3RvcjNfMS5WZWN0b3IzLkRvdChwb2ludCwgdGhpcy5ub3JtYWwpICsgdGhpcy5kO1xuICAgIH1cbn1cbmV4cG9ydHMuUGxhbmUgPSBQbGFuZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVBsYW5lLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5GcnVzdHVtID0gdm9pZCAwO1xuY29uc3QgUGxhbmVfMSA9IHJlcXVpcmUoXCIuL1BsYW5lXCIpO1xuLyoqXG4gKiBSZXByYXNlbnRzIGEgY2FtZXJhIGZydXN0dW1cbiAqIEBwdWJsaWNcbiAqL1xuY2xhc3MgRnJ1c3R1bSB7XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgcGxhbmVzIHJlcHJlc2VudGluZyB0aGUgZnJ1c3R1bVxuICAgICAqIEBwYXJhbSB0cmFuc2Zvcm0gLSBtYXRyaXggdG8gYmUgYXBwbGllZCB0byB0aGUgcmV0dXJuZWQgcGxhbmVzXG4gICAgICogQHJldHVybnMgYSBuZXcgYXJyYXkgb2YgNiBGcnVzdHVtIHBsYW5lcyBjb21wdXRlZCBieSB0aGUgZ2l2ZW4gdHJhbnNmb3JtYXRpb24gbWF0cml4LlxuICAgICAqL1xuICAgIHN0YXRpYyBHZXRQbGFuZXModHJhbnNmb3JtKSB7XG4gICAgICAgIGNvbnN0IGZydXN0dW1QbGFuZXMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IDY7IGluZGV4KyspIHtcbiAgICAgICAgICAgIGZydXN0dW1QbGFuZXMucHVzaChuZXcgUGxhbmVfMS5QbGFuZSgwLjAsIDAuMCwgMC4wLCAwLjApKTtcbiAgICAgICAgfVxuICAgICAgICBGcnVzdHVtLkdldFBsYW5lc1RvUmVmKHRyYW5zZm9ybSwgZnJ1c3R1bVBsYW5lcyk7XG4gICAgICAgIHJldHVybiBmcnVzdHVtUGxhbmVzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBuZWFyIGZydXN0dW0gcGxhbmUgdHJhbnNmb3JtZWQgYnkgdGhlIHRyYW5zZm9ybSBtYXRyaXhcbiAgICAgKiBAcGFyYW0gdHJhbnNmb3JtIC0gdHJhbnNmb3JtYXRpb24gbWF0cml4IHRvIGJlIGFwcGxpZWQgdG8gdGhlIHJlc3VsdGluZyBmcnVzdHVtIHBsYW5lXG4gICAgICogQHBhcmFtIGZydXN0dW1QbGFuZSAtIHRoZSByZXN1bGluZyBmcnVzdHVtIHBsYW5lXG4gICAgICovXG4gICAgc3RhdGljIEdldE5lYXJQbGFuZVRvUmVmKHRyYW5zZm9ybSwgZnJ1c3R1bVBsYW5lKSB7XG4gICAgICAgIGNvbnN0IG0gPSB0cmFuc2Zvcm0ubTtcbiAgICAgICAgZnJ1c3R1bVBsYW5lLm5vcm1hbC54ID0gbVszXSArIG1bMl07XG4gICAgICAgIGZydXN0dW1QbGFuZS5ub3JtYWwueSA9IG1bN10gKyBtWzZdO1xuICAgICAgICBmcnVzdHVtUGxhbmUubm9ybWFsLnogPSBtWzExXSArIG1bMTBdO1xuICAgICAgICBmcnVzdHVtUGxhbmUuZCA9IG1bMTVdICsgbVsxNF07XG4gICAgICAgIGZydXN0dW1QbGFuZS5ub3JtYWxpemUoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZmFyIGZydXN0dW0gcGxhbmUgdHJhbnNmb3JtZWQgYnkgdGhlIHRyYW5zZm9ybSBtYXRyaXhcbiAgICAgKiBAcGFyYW0gdHJhbnNmb3JtIC0gdHJhbnNmb3JtYXRpb24gbWF0cml4IHRvIGJlIGFwcGxpZWQgdG8gdGhlIHJlc3VsdGluZyBmcnVzdHVtIHBsYW5lXG4gICAgICogQHBhcmFtIGZydXN0dW1QbGFuZSAtIHRoZSByZXN1bGluZyBmcnVzdHVtIHBsYW5lXG4gICAgICovXG4gICAgc3RhdGljIEdldEZhclBsYW5lVG9SZWYodHJhbnNmb3JtLCBmcnVzdHVtUGxhbmUpIHtcbiAgICAgICAgY29uc3QgbSA9IHRyYW5zZm9ybS5tO1xuICAgICAgICBmcnVzdHVtUGxhbmUubm9ybWFsLnggPSBtWzNdIC0gbVsyXTtcbiAgICAgICAgZnJ1c3R1bVBsYW5lLm5vcm1hbC55ID0gbVs3XSAtIG1bNl07XG4gICAgICAgIGZydXN0dW1QbGFuZS5ub3JtYWwueiA9IG1bMTFdIC0gbVsxMF07XG4gICAgICAgIGZydXN0dW1QbGFuZS5kID0gbVsxNV0gLSBtWzE0XTtcbiAgICAgICAgZnJ1c3R1bVBsYW5lLm5vcm1hbGl6ZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBsZWZ0IGZydXN0dW0gcGxhbmUgdHJhbnNmb3JtZWQgYnkgdGhlIHRyYW5zZm9ybSBtYXRyaXhcbiAgICAgKiBAcGFyYW0gdHJhbnNmb3JtIC0gdHJhbnNmb3JtYXRpb24gbWF0cml4IHRvIGJlIGFwcGxpZWQgdG8gdGhlIHJlc3VsdGluZyBmcnVzdHVtIHBsYW5lXG4gICAgICogQHBhcmFtIGZydXN0dW1QbGFuZSAtIHRoZSByZXN1bGluZyBmcnVzdHVtIHBsYW5lXG4gICAgICovXG4gICAgc3RhdGljIEdldExlZnRQbGFuZVRvUmVmKHRyYW5zZm9ybSwgZnJ1c3R1bVBsYW5lKSB7XG4gICAgICAgIGNvbnN0IG0gPSB0cmFuc2Zvcm0ubTtcbiAgICAgICAgZnJ1c3R1bVBsYW5lLm5vcm1hbC54ID0gbVszXSArIG1bMF07XG4gICAgICAgIGZydXN0dW1QbGFuZS5ub3JtYWwueSA9IG1bN10gKyBtWzRdO1xuICAgICAgICBmcnVzdHVtUGxhbmUubm9ybWFsLnogPSBtWzExXSArIG1bOF07XG4gICAgICAgIGZydXN0dW1QbGFuZS5kID0gbVsxNV0gKyBtWzEyXTtcbiAgICAgICAgZnJ1c3R1bVBsYW5lLm5vcm1hbGl6ZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSByaWdodCBmcnVzdHVtIHBsYW5lIHRyYW5zZm9ybWVkIGJ5IHRoZSB0cmFuc2Zvcm0gbWF0cml4XG4gICAgICogQHBhcmFtIHRyYW5zZm9ybSAtIHRyYW5zZm9ybWF0aW9uIG1hdHJpeCB0byBiZSBhcHBsaWVkIHRvIHRoZSByZXN1bHRpbmcgZnJ1c3R1bSBwbGFuZVxuICAgICAqIEBwYXJhbSBmcnVzdHVtUGxhbmUgLSB0aGUgcmVzdWxpbmcgZnJ1c3R1bSBwbGFuZVxuICAgICAqL1xuICAgIHN0YXRpYyBHZXRSaWdodFBsYW5lVG9SZWYodHJhbnNmb3JtLCBmcnVzdHVtUGxhbmUpIHtcbiAgICAgICAgY29uc3QgbSA9IHRyYW5zZm9ybS5tO1xuICAgICAgICBmcnVzdHVtUGxhbmUubm9ybWFsLnggPSBtWzNdIC0gbVswXTtcbiAgICAgICAgZnJ1c3R1bVBsYW5lLm5vcm1hbC55ID0gbVs3XSAtIG1bNF07XG4gICAgICAgIGZydXN0dW1QbGFuZS5ub3JtYWwueiA9IG1bMTFdIC0gbVs4XTtcbiAgICAgICAgZnJ1c3R1bVBsYW5lLmQgPSBtWzE1XSAtIG1bMTJdO1xuICAgICAgICBmcnVzdHVtUGxhbmUubm9ybWFsaXplKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHRvcCBmcnVzdHVtIHBsYW5lIHRyYW5zZm9ybWVkIGJ5IHRoZSB0cmFuc2Zvcm0gbWF0cml4XG4gICAgICogQHBhcmFtIHRyYW5zZm9ybSAtIHRyYW5zZm9ybWF0aW9uIG1hdHJpeCB0byBiZSBhcHBsaWVkIHRvIHRoZSByZXN1bHRpbmcgZnJ1c3R1bSBwbGFuZVxuICAgICAqIEBwYXJhbSBmcnVzdHVtUGxhbmUgLSB0aGUgcmVzdWxpbmcgZnJ1c3R1bSBwbGFuZVxuICAgICAqL1xuICAgIHN0YXRpYyBHZXRUb3BQbGFuZVRvUmVmKHRyYW5zZm9ybSwgZnJ1c3R1bVBsYW5lKSB7XG4gICAgICAgIGNvbnN0IG0gPSB0cmFuc2Zvcm0ubTtcbiAgICAgICAgZnJ1c3R1bVBsYW5lLm5vcm1hbC54ID0gbVszXSAtIG1bMV07XG4gICAgICAgIGZydXN0dW1QbGFuZS5ub3JtYWwueSA9IG1bN10gLSBtWzVdO1xuICAgICAgICBmcnVzdHVtUGxhbmUubm9ybWFsLnogPSBtWzExXSAtIG1bOV07XG4gICAgICAgIGZydXN0dW1QbGFuZS5kID0gbVsxNV0gLSBtWzEzXTtcbiAgICAgICAgZnJ1c3R1bVBsYW5lLm5vcm1hbGl6ZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBib3R0b20gZnJ1c3R1bSBwbGFuZSB0cmFuc2Zvcm1lZCBieSB0aGUgdHJhbnNmb3JtIG1hdHJpeFxuICAgICAqIEBwYXJhbSB0cmFuc2Zvcm0gLSB0cmFuc2Zvcm1hdGlvbiBtYXRyaXggdG8gYmUgYXBwbGllZCB0byB0aGUgcmVzdWx0aW5nIGZydXN0dW0gcGxhbmVcbiAgICAgKiBAcGFyYW0gZnJ1c3R1bVBsYW5lIC0gdGhlIHJlc3VsaW5nIGZydXN0dW0gcGxhbmVcbiAgICAgKi9cbiAgICBzdGF0aWMgR2V0Qm90dG9tUGxhbmVUb1JlZih0cmFuc2Zvcm0sIGZydXN0dW1QbGFuZSkge1xuICAgICAgICBjb25zdCBtID0gdHJhbnNmb3JtLm07XG4gICAgICAgIGZydXN0dW1QbGFuZS5ub3JtYWwueCA9IG1bM10gKyBtWzFdO1xuICAgICAgICBmcnVzdHVtUGxhbmUubm9ybWFsLnkgPSBtWzddICsgbVs1XTtcbiAgICAgICAgZnJ1c3R1bVBsYW5lLm5vcm1hbC56ID0gbVsxMV0gKyBtWzldO1xuICAgICAgICBmcnVzdHVtUGxhbmUuZCA9IG1bMTVdICsgbVsxM107XG4gICAgICAgIGZydXN0dW1QbGFuZS5ub3JtYWxpemUoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZ2l2ZW4gYXJyYXkgXCJmcnVzdHVtUGxhbmVzXCIgd2l0aCB0aGUgNiBGcnVzdHVtIHBsYW5lcyBjb21wdXRlZCBieSB0aGUgZ2l2ZW4gdHJhbnNmb3JtYXRpb24gbWF0cml4LlxuICAgICAqIEBwYXJhbSB0cmFuc2Zvcm0gLSB0cmFuc2Zvcm1hdGlvbiBtYXRyaXggdG8gYmUgYXBwbGllZCB0byB0aGUgcmVzdWx0aW5nIGZydXN0dW0gcGxhbmVzXG4gICAgICogQHBhcmFtIGZydXN0dW1QbGFuZXMgLSB0aGUgcmVzdWxpbmcgZnJ1c3R1bSBwbGFuZXNcbiAgICAgKi9cbiAgICBzdGF0aWMgR2V0UGxhbmVzVG9SZWYodHJhbnNmb3JtLCBmcnVzdHVtUGxhbmVzKSB7XG4gICAgICAgIC8vIE5lYXJcbiAgICAgICAgRnJ1c3R1bS5HZXROZWFyUGxhbmVUb1JlZih0cmFuc2Zvcm0sIGZydXN0dW1QbGFuZXNbMF0pO1xuICAgICAgICAvLyBGYXJcbiAgICAgICAgRnJ1c3R1bS5HZXRGYXJQbGFuZVRvUmVmKHRyYW5zZm9ybSwgZnJ1c3R1bVBsYW5lc1sxXSk7XG4gICAgICAgIC8vIExlZnRcbiAgICAgICAgRnJ1c3R1bS5HZXRMZWZ0UGxhbmVUb1JlZih0cmFuc2Zvcm0sIGZydXN0dW1QbGFuZXNbMl0pO1xuICAgICAgICAvLyBSaWdodFxuICAgICAgICBGcnVzdHVtLkdldFJpZ2h0UGxhbmVUb1JlZih0cmFuc2Zvcm0sIGZydXN0dW1QbGFuZXNbM10pO1xuICAgICAgICAvLyBUb3BcbiAgICAgICAgRnJ1c3R1bS5HZXRUb3BQbGFuZVRvUmVmKHRyYW5zZm9ybSwgZnJ1c3R1bVBsYW5lc1s0XSk7XG4gICAgICAgIC8vIEJvdHRvbVxuICAgICAgICBGcnVzdHVtLkdldEJvdHRvbVBsYW5lVG9SZWYodHJhbnNmb3JtLCBmcnVzdHVtUGxhbmVzWzVdKTtcbiAgICB9XG59XG5leHBvcnRzLkZydXN0dW0gPSBGcnVzdHVtO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RnVyc3R1bS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUGF0aDIgPSB2b2lkIDA7XG5jb25zdCBWZWN0b3IyXzEgPSByZXF1aXJlKFwiLi9WZWN0b3IyXCIpO1xuY29uc3QgQXJjMl8xID0gcmVxdWlyZShcIi4vQXJjMlwiKTtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi90eXBlc1wiKTtcbi8qKlxuICogUmVwcmVzZW50cyBhIDJEIHBhdGggbWFkZSB1cCBvZiBtdWx0aXBsZSAyRCBwb2ludHNcbiAqIEBwdWJsaWNcbiAqL1xuY2xhc3MgUGF0aDIge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBQYXRoMiBvYmplY3QgZnJvbSB0aGUgc3RhcnRpbmcgMkQgY29vcmRpbmF0ZXMgeCBhbmQgeS5cbiAgICAgKiBAcGFyYW0geCAtIHRoZSBzdGFydGluZyBwb2ludHMgeCB2YWx1ZVxuICAgICAqIEBwYXJhbSB5IC0gdGhlIHN0YXJ0aW5nIHBvaW50cyB5IHZhbHVlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoeCwgeSkge1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgdGhlIHBhdGggc3RhcnQgYW5kIGVuZCBwb2ludCBhcmUgdGhlIHNhbWVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY2xvc2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3BvaW50cyA9IG5ldyBBcnJheSgpO1xuICAgICAgICB0aGlzLl9sZW5ndGggPSAwLjA7XG4gICAgICAgIHRoaXMuX3BvaW50cy5wdXNoKG5ldyBWZWN0b3IyXzEuVmVjdG9yMih4LCB5KSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgcGF0aCBzdGFydGluZyBmcm9tIGFuIHggYW5kIHkgcG9zaXRpb25cbiAgICAgKiBAcGFyYW0geCAtIHN0YXJ0aW5nIHggdmFsdWVcbiAgICAgKiBAcGFyYW0geSAtIHN0YXJ0aW5nIHkgdmFsdWVcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBQYXRoMiBzdGFydGluZyBhdCB0aGUgY29vcmRpbmF0ZXMgKHgsIHkpLlxuICAgICAqL1xuICAgIHN0YXRpYyBTdGFydGluZ0F0KHgsIHkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQYXRoMih4LCB5KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkcyBhIG5ldyBzZWdtZW50IHVudGlsIHRoZSBnaXZlbiBjb29yZGluYXRlcyAoeCwgeSkgdG8gdGhlIGN1cnJlbnQgUGF0aDIuXG4gICAgICogQHBhcmFtIHggLSB0aGUgYWRkZWQgcG9pbnRzIHggdmFsdWVcbiAgICAgKiBAcGFyYW0geSAtIHRoZSBhZGRlZCBwb2ludHMgeSB2YWx1ZVxuICAgICAqIEByZXR1cm5zIHRoZSB1cGRhdGVkIFBhdGgyLlxuICAgICAqL1xuICAgIGFkZExpbmVUbyh4LCB5KSB7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbmV3UG9pbnQgPSBuZXcgVmVjdG9yMl8xLlZlY3RvcjIoeCwgeSk7XG4gICAgICAgIGNvbnN0IHByZXZpb3VzUG9pbnQgPSB0aGlzLl9wb2ludHNbdGhpcy5fcG9pbnRzLmxlbmd0aCAtIDFdO1xuICAgICAgICB0aGlzLl9wb2ludHMucHVzaChuZXdQb2ludCk7XG4gICAgICAgIHRoaXMuX2xlbmd0aCArPSBuZXdQb2ludC5zdWJ0cmFjdChwcmV2aW91c1BvaW50KS5sZW5ndGgoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZHMgX251bWJlck9mU2VnbWVudHNfIHNlZ21lbnRzIGFjY29yZGluZyB0byB0aGUgYXJjIGRlZmluaXRpb24gKG1pZGRsZSBwb2ludCBjb29yZGluYXRlcywgZW5kIHBvaW50IGNvb3JkaW5hdGVzLCB0aGUgYXJjIHN0YXJ0IHBvaW50IGJlaW5nIHRoZSBjdXJyZW50IFBhdGgyIGxhc3QgcG9pbnQpIHRvIHRoZSBjdXJyZW50IFBhdGgyLlxuICAgICAqIEBwYXJhbSBtaWRYIC0gbWlkZGxlIHBvaW50IHggdmFsdWVcbiAgICAgKiBAcGFyYW0gbWlkWSAtIG1pZGRsZSBwb2ludCB5IHZhbHVlXG4gICAgICogQHBhcmFtIGVuZFggLSBlbmQgcG9pbnQgeCB2YWx1ZVxuICAgICAqIEBwYXJhbSBlbmRZIC0gZW5kIHBvaW50IHkgdmFsdWVcbiAgICAgKiBAcGFyYW0gbnVtYmVyT2ZTZWdtZW50cyAtIChkZWZhdWx0OiAzNilcbiAgICAgKiBAcmV0dXJucyB0aGUgdXBkYXRlZCBQYXRoMi5cbiAgICAgKi9cbiAgICBhZGRBcmNUbyhtaWRYLCBtaWRZLCBlbmRYLCBlbmRZLCBudW1iZXJPZlNlZ21lbnRzID0gMzYpIHtcbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdGFydFBvaW50ID0gdGhpcy5fcG9pbnRzW3RoaXMuX3BvaW50cy5sZW5ndGggLSAxXTtcbiAgICAgICAgY29uc3QgbWlkUG9pbnQgPSBuZXcgVmVjdG9yMl8xLlZlY3RvcjIobWlkWCwgbWlkWSk7XG4gICAgICAgIGNvbnN0IGVuZFBvaW50ID0gbmV3IFZlY3RvcjJfMS5WZWN0b3IyKGVuZFgsIGVuZFkpO1xuICAgICAgICBjb25zdCBhcmMgPSBuZXcgQXJjMl8xLkFyYzIoc3RhcnRQb2ludCwgbWlkUG9pbnQsIGVuZFBvaW50KTtcbiAgICAgICAgbGV0IGluY3JlbWVudCA9IGFyYy5hbmdsZS5yYWRpYW5zKCkgLyBudW1iZXJPZlNlZ21lbnRzO1xuICAgICAgICBpZiAoYXJjLm9yaWVudGF0aW9uID09PSB0eXBlc18xLk9yaWVudGF0aW9uLkNXKSB7XG4gICAgICAgICAgICBpbmNyZW1lbnQgKj0gLTE7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGN1cnJlbnRBbmdsZSA9IGFyYy5zdGFydEFuZ2xlLnJhZGlhbnMoKSArIGluY3JlbWVudDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1iZXJPZlNlZ21lbnRzOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHggPSBNYXRoLmNvcyhjdXJyZW50QW5nbGUpICogYXJjLnJhZGl1cyArIGFyYy5jZW50ZXJQb2ludC54O1xuICAgICAgICAgICAgY29uc3QgeSA9IE1hdGguc2luKGN1cnJlbnRBbmdsZSkgKiBhcmMucmFkaXVzICsgYXJjLmNlbnRlclBvaW50Lnk7XG4gICAgICAgICAgICB0aGlzLmFkZExpbmVUbyh4LCB5KTtcbiAgICAgICAgICAgIGN1cnJlbnRBbmdsZSArPSBpbmNyZW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENsb3NlcyB0aGUgUGF0aDIuXG4gICAgICogQHJldHVybnMgdGhlIFBhdGgyLlxuICAgICAqL1xuICAgIGNsb3NlKCkge1xuICAgICAgICB0aGlzLmNsb3NlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBzdW0gb2YgdGhlIGRpc3RhbmNlIGJldHdlZW4gZWFjaCBzZXF1ZW50aWFsIHBvaW50IGluIHRoZSBwYXRoXG4gICAgICogQHJldHVybnMgdGhlIFBhdGgyIHRvdGFsIGxlbmd0aCAoZmxvYXQpLlxuICAgICAqL1xuICAgIGxlbmd0aCgpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHRoaXMuX2xlbmd0aDtcbiAgICAgICAgaWYgKCF0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgY29uc3QgbGFzdFBvaW50ID0gdGhpcy5fcG9pbnRzW3RoaXMuX3BvaW50cy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIGNvbnN0IGZpcnN0UG9pbnQgPSB0aGlzLl9wb2ludHNbMF07XG4gICAgICAgICAgICByZXN1bHQgKz0gZmlyc3RQb2ludC5zdWJ0cmFjdChsYXN0UG9pbnQpLmxlbmd0aCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHBvaW50cyB3aGljaCBjb25zdHJ1Y3QgdGhlIHBhdGhcbiAgICAgKiBAcmV0dXJucyB0aGUgUGF0aDIgaW50ZXJuYWwgYXJyYXkgb2YgcG9pbnRzLlxuICAgICAqL1xuICAgIGdldFBvaW50cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BvaW50cztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0cmVpdmVzIHRoZSBwb2ludCBhdCB0aGUgZGlzdGFuY2UgYXdheXMgZnJvbSB0aGUgc3RhcnRpbmcgcG9pbnRcbiAgICAgKiBAcGFyYW0gbm9ybWFsaXplZExlbmd0aFBvc2l0aW9uIC0gdGhlIGxlbmd0aCBhbG9uZyB0aGUgcGF0aCB0byByZXRyZWl2ZSB0aGUgcG9pbnQgZnJvbVxuICAgICAqIEByZXR1cm5zIGEgbmV3IFZlY3RvcjIgbG9jYXRlZCBhdCBhIHBlcmNlbnRhZ2Ugb2YgdGhlIFBhdGgyIHRvdGFsIGxlbmd0aCBvbiB0aGlzIHBhdGguXG4gICAgICovXG4gICAgZ2V0UG9pbnRBdExlbmd0aFBvc2l0aW9uKG5vcm1hbGl6ZWRMZW5ndGhQb3NpdGlvbikge1xuICAgICAgICBpZiAobm9ybWFsaXplZExlbmd0aFBvc2l0aW9uIDwgMCB8fCBub3JtYWxpemVkTGVuZ3RoUG9zaXRpb24gPiAxKSB7XG4gICAgICAgICAgICByZXR1cm4gVmVjdG9yMl8xLlZlY3RvcjIuWmVybygpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxlbmd0aFBvc2l0aW9uID0gbm9ybWFsaXplZExlbmd0aFBvc2l0aW9uICogdGhpcy5sZW5ndGgoKTtcbiAgICAgICAgbGV0IHByZXZpb3VzT2Zmc2V0ID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9wb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGogPSAoaSArIDEpICUgdGhpcy5fcG9pbnRzLmxlbmd0aDtcbiAgICAgICAgICAgIGNvbnN0IGEgPSB0aGlzLl9wb2ludHNbaV07XG4gICAgICAgICAgICBjb25zdCBiID0gdGhpcy5fcG9pbnRzW2pdO1xuICAgICAgICAgICAgY29uc3QgYlRvQSA9IGIuc3VidHJhY3QoYSk7XG4gICAgICAgICAgICBjb25zdCBuZXh0T2Zmc2V0ID0gYlRvQS5sZW5ndGgoKSArIHByZXZpb3VzT2Zmc2V0O1xuICAgICAgICAgICAgaWYgKGxlbmd0aFBvc2l0aW9uID49IHByZXZpb3VzT2Zmc2V0ICYmIGxlbmd0aFBvc2l0aW9uIDw9IG5leHRPZmZzZXQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkaXIgPSBiVG9BLm5vcm1hbGl6ZSgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsT2Zmc2V0ID0gbGVuZ3RoUG9zaXRpb24gLSBwcmV2aW91c09mZnNldDtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjJfMS5WZWN0b3IyKGEueCArIGRpci54ICogbG9jYWxPZmZzZXQsIGEueSArIGRpci55ICogbG9jYWxPZmZzZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHJldmlvdXNPZmZzZXQgPSBuZXh0T2Zmc2V0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBWZWN0b3IyXzEuVmVjdG9yMi5aZXJvKCk7XG4gICAgfVxufVxuZXhwb3J0cy5QYXRoMiA9IFBhdGgyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UGF0aDJkLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5QYXRoM0QgPSB2b2lkIDA7XG5jb25zdCBWZWN0b3IzXzEgPSByZXF1aXJlKFwiLi9WZWN0b3IzXCIpO1xuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCIuL3R5cGVzXCIpO1xuY29uc3QgU2NhbGFyXzEgPSByZXF1aXJlKFwiLi9TY2FsYXJcIik7XG4vKipcbiAqIFJlcHJlc2VudHMgYSAzRCBwYXRoIG1hZGUgdXAgb2YgbXVsdGlwbGUgM0QgcG9pbnRzXG4gKiBAcHVibGljXG4gKi9cbmNsYXNzIFBhdGgzRCB7XG4gICAgLyoqXG4gICAgICogbmV3IFBhdGgzRChwYXRoLCBub3JtYWwsIHJhdylcbiAgICAgKiBDcmVhdGVzIGEgUGF0aDNELiBBIFBhdGgzRCBpcyBhIGxvZ2ljYWwgbWF0aCBvYmplY3QsIHNvIG5vdCBhIG1lc2guXG4gICAgICogcGxlYXNlIHJlYWQgdGhlIGRlc2NyaXB0aW9uIGluIHRoZSB0dXRvcmlhbCA6ICBodHRwOi8vZG9jLmJhYnlsb25qcy5jb20vdHV0b3JpYWxzL0hvd190b191c2VfUGF0aDNEXG4gICAgICogQHBhcmFtIHBhdGggLSBhbiBhcnJheSBvZiBWZWN0b3IzLCB0aGUgY3VydmUgYXhpcyBvZiB0aGUgUGF0aDNEXG4gICAgICogQHBhcmFtIG5vcm1hbCAtIChvcHRpb25zKSBWZWN0b3IzLCB0aGUgZmlyc3Qgd2FudGVkIG5vcm1hbCB0byB0aGUgY3VydmUuIEV4ICgwLCAxLCAwKSBmb3IgYSB2ZXJ0aWNhbCBub3JtYWwuXG4gICAgICogQHBhcmFtIHJhdyAtIChvcHRpb25hbCwgZGVmYXVsdCBmYWxzZSkgOiBib29sZWFuLCBpZiB0cnVlIHRoZSByZXR1cm5lZCBQYXRoM0QgaXNuJ3Qgbm9ybWFsaXplZC4gVXNlZnVsIHRvIGRlcGljdCBwYXRoIGFjY2VsZXJhdGlvbiBvciBzcGVlZC5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKipcbiAgICAgKiBhbiBhcnJheSBvZiBWZWN0b3IzLCB0aGUgY3VydmUgYXhpcyBvZiB0aGUgUGF0aDNEXG4gICAgICovXG4gICAgcGF0aCwgZmlyc3ROb3JtYWwgPSBudWxsLCByYXcpIHtcbiAgICAgICAgdGhpcy5wYXRoID0gcGF0aDtcbiAgICAgICAgdGhpcy5fY3VydmUgPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgdGhpcy5fZGlzdGFuY2VzID0gbmV3IEFycmF5KCk7XG4gICAgICAgIHRoaXMuX3RhbmdlbnRzID0gbmV3IEFycmF5KCk7XG4gICAgICAgIHRoaXMuX25vcm1hbHMgPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgdGhpcy5fYmlub3JtYWxzID0gbmV3IEFycmF5KCk7XG4gICAgICAgIGZvciAobGV0IHAgPSAwOyBwIDwgcGF0aC5sZW5ndGg7IHArKykge1xuICAgICAgICAgICAgdGhpcy5fY3VydmVbcF0gPSBwYXRoW3BdLmNsb25lKCk7IC8vIGhhcmQgY29weVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3JhdyA9IHJhdyB8fCBmYWxzZTtcbiAgICAgICAgdGhpcy5fY29tcHV0ZShmaXJzdE5vcm1hbCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIFBhdGgzRCBhcnJheSBvZiBzdWNjZXNzaXZlIFZlY3RvcjMgZGVzaWduaW5nIGl0cyBjdXJ2ZS5cbiAgICAgKiBAcmV0dXJucyB0aGUgUGF0aDNEIGFycmF5IG9mIHN1Y2Nlc3NpdmUgVmVjdG9yMyBkZXNpZ25pbmcgaXRzIGN1cnZlLlxuICAgICAqL1xuICAgIGdldEN1cnZlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY3VydmU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gYXJyYXkgcG9wdWxhdGVkIHdpdGggdGFuZ2VudCB2ZWN0b3JzIG9uIGVhY2ggUGF0aDNEIGN1cnZlIHBvaW50LlxuICAgICAqIEByZXR1cm5zIGFuIGFycmF5IHBvcHVsYXRlZCB3aXRoIHRhbmdlbnQgdmVjdG9ycyBvbiBlYWNoIFBhdGgzRCBjdXJ2ZSBwb2ludC5cbiAgICAgKi9cbiAgICBnZXRUYW5nZW50cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RhbmdlbnRzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIGFycmF5IHBvcHVsYXRlZCB3aXRoIG5vcm1hbCB2ZWN0b3JzIG9uIGVhY2ggUGF0aDNEIGN1cnZlIHBvaW50LlxuICAgICAqIEByZXR1cm5zIGFuIGFycmF5IHBvcHVsYXRlZCB3aXRoIG5vcm1hbCB2ZWN0b3JzIG9uIGVhY2ggUGF0aDNEIGN1cnZlIHBvaW50LlxuICAgICAqL1xuICAgIGdldE5vcm1hbHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9ub3JtYWxzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIGFycmF5IHBvcHVsYXRlZCB3aXRoIGJpbm9ybWFsIHZlY3RvcnMgb24gZWFjaCBQYXRoM0QgY3VydmUgcG9pbnQuXG4gICAgICogQHJldHVybnMgYW4gYXJyYXkgcG9wdWxhdGVkIHdpdGggYmlub3JtYWwgdmVjdG9ycyBvbiBlYWNoIFBhdGgzRCBjdXJ2ZSBwb2ludC5cbiAgICAgKi9cbiAgICBnZXRCaW5vcm1hbHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9iaW5vcm1hbHM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gYXJyYXkgcG9wdWxhdGVkIHdpdGggZGlzdGFuY2VzIChmbG9hdCkgb2YgdGhlIGktdGggcG9pbnQgZnJvbSB0aGUgZmlyc3QgY3VydmUgcG9pbnQuXG4gICAgICogQHJldHVybnMgYW4gYXJyYXkgcG9wdWxhdGVkIHdpdGggZGlzdGFuY2VzIChmbG9hdCkgb2YgdGhlIGktdGggcG9pbnQgZnJvbSB0aGUgZmlyc3QgY3VydmUgcG9pbnQuXG4gICAgICovXG4gICAgZ2V0RGlzdGFuY2VzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGlzdGFuY2VzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGb3JjZXMgdGhlIFBhdGgzRCB0YW5nZW50LCBub3JtYWwsIGJpbm9ybWFsIGFuZCBkaXN0YW5jZSByZWNvbXB1dGF0aW9uLlxuICAgICAqIEBwYXJhbSBwYXRoIC0gcGF0aCB3aGljaCBhbGwgdmFsdWVzIGFyZSBjb3BpZWQgaW50byB0aGUgY3VydmVzIHBvaW50c1xuICAgICAqIEBwYXJhbSBmaXJzdE5vcm1hbCAtIHdoaWNoIHNob3VsZCBiZSBwcm9qZWN0ZWQgb250byB0aGUgY3VydmVcbiAgICAgKiBAcmV0dXJucyB0aGUgc2FtZSBvYmplY3QgdXBkYXRlZC5cbiAgICAgKi9cbiAgICB1cGRhdGUocGF0aCwgZmlyc3ROb3JtYWwgPSBudWxsKSB7XG4gICAgICAgIGZvciAobGV0IHAgPSAwOyBwIDwgcGF0aC5sZW5ndGg7IHArKykge1xuICAgICAgICAgICAgdGhpcy5fY3VydmVbcF0ueCA9IHBhdGhbcF0ueDtcbiAgICAgICAgICAgIHRoaXMuX2N1cnZlW3BdLnkgPSBwYXRoW3BdLnk7XG4gICAgICAgICAgICB0aGlzLl9jdXJ2ZVtwXS56ID0gcGF0aFtwXS56O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2NvbXB1dGUoZmlyc3ROb3JtYWwpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLy8gcHJpdmF0ZSBmdW5jdGlvbiBjb21wdXRlKCkgOiBjb21wdXRlcyB0YW5nZW50cywgbm9ybWFscyBhbmQgYmlub3JtYWxzXG4gICAgX2NvbXB1dGUoZmlyc3ROb3JtYWwpIHtcbiAgICAgICAgY29uc3QgbCA9IHRoaXMuX2N1cnZlLmxlbmd0aDtcbiAgICAgICAgLy8gZmlyc3QgYW5kIGxhc3QgdGFuZ2VudHNcbiAgICAgICAgdGhpcy5fdGFuZ2VudHNbMF0gPSB0aGlzLl9nZXRGaXJzdE5vbk51bGxWZWN0b3IoMCk7XG4gICAgICAgIGlmICghdGhpcy5fcmF3KSB7XG4gICAgICAgICAgICB0aGlzLl90YW5nZW50c1swXS5ub3JtYWxpemUoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90YW5nZW50c1tsIC0gMV0gPSB0aGlzLl9jdXJ2ZVtsIC0gMV0uc3VidHJhY3QodGhpcy5fY3VydmVbbCAtIDJdKTtcbiAgICAgICAgaWYgKCF0aGlzLl9yYXcpIHtcbiAgICAgICAgICAgIHRoaXMuX3RhbmdlbnRzW2wgLSAxXS5ub3JtYWxpemUoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBub3JtYWxzIGFuZCBiaW5vcm1hbHMgYXQgZmlyc3QgcG9pbnQgOiBhcmJpdHJhcnkgdmVjdG9yIHdpdGggX25vcm1hbFZlY3RvcigpXG4gICAgICAgIGNvbnN0IHRnMCA9IHRoaXMuX3RhbmdlbnRzWzBdO1xuICAgICAgICBjb25zdCBwcDAgPSB0aGlzLl9ub3JtYWxWZWN0b3IodGhpcy5fY3VydmVbMF0sIHRnMCwgZmlyc3ROb3JtYWwpO1xuICAgICAgICB0aGlzLl9ub3JtYWxzWzBdID0gcHAwO1xuICAgICAgICBpZiAoIXRoaXMuX3Jhdykge1xuICAgICAgICAgICAgdGhpcy5fbm9ybWFsc1swXS5ub3JtYWxpemUoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9iaW5vcm1hbHNbMF0gPSBWZWN0b3IzXzEuVmVjdG9yMy5Dcm9zcyh0ZzAsIHRoaXMuX25vcm1hbHNbMF0pO1xuICAgICAgICBpZiAoIXRoaXMuX3Jhdykge1xuICAgICAgICAgICAgdGhpcy5fYmlub3JtYWxzWzBdLm5vcm1hbGl6ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2Rpc3RhbmNlc1swXSA9IDAuMDtcbiAgICAgICAgLy8gbm9ybWFscyBhbmQgYmlub3JtYWxzIDogbmV4dCBwb2ludHNcbiAgICAgICAgbGV0IHByZXY7IC8vIHByZXZpb3VzIHZlY3RvciAoc2VnbWVudClcbiAgICAgICAgbGV0IGN1cjsgLy8gY3VycmVudCB2ZWN0b3IgKHNlZ21lbnQpXG4gICAgICAgIGxldCBjdXJUYW5nOyAvLyBjdXJyZW50IHRhbmdlbnRcbiAgICAgICAgLy8gcHJldmlvdXMgbm9ybWFsXG4gICAgICAgIGxldCBwcmV2Qmlub3I7IC8vIHByZXZpb3VzIGJpbm9ybWFsXG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAvLyB0YW5nZW50c1xuICAgICAgICAgICAgcHJldiA9IHRoaXMuX2dldExhc3ROb25OdWxsVmVjdG9yKGkpO1xuICAgICAgICAgICAgaWYgKGkgPCBsIC0gMSkge1xuICAgICAgICAgICAgICAgIGN1ciA9IHRoaXMuX2dldEZpcnN0Tm9uTnVsbFZlY3RvcihpKTtcbiAgICAgICAgICAgICAgICB0aGlzLl90YW5nZW50c1tpXSA9IHByZXYuYWRkKGN1cik7XG4gICAgICAgICAgICAgICAgdGhpcy5fdGFuZ2VudHNbaV0ubm9ybWFsaXplKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9kaXN0YW5jZXNbaV0gPSB0aGlzLl9kaXN0YW5jZXNbaSAtIDFdICsgcHJldi5sZW5ndGgoKTtcbiAgICAgICAgICAgIC8vIG5vcm1hbHMgYW5kIGJpbm9ybWFsc1xuICAgICAgICAgICAgLy8gaHR0cDovL3d3dy5jcy5jbXUuZWR1L2Fmcy9hbmRyZXcvc2NzL2NzLzE1LTQ2Mi93ZWIvb2xkL2Fzc3QyY2FtZXJhLmh0bWxcbiAgICAgICAgICAgIGN1clRhbmcgPSB0aGlzLl90YW5nZW50c1tpXTtcbiAgICAgICAgICAgIHByZXZCaW5vciA9IHRoaXMuX2Jpbm9ybWFsc1tpIC0gMV07XG4gICAgICAgICAgICB0aGlzLl9ub3JtYWxzW2ldID0gVmVjdG9yM18xLlZlY3RvcjMuQ3Jvc3MocHJldkJpbm9yLCBjdXJUYW5nKTtcbiAgICAgICAgICAgIGlmICghdGhpcy5fcmF3KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbm9ybWFsc1tpXS5ub3JtYWxpemUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2Jpbm9ybWFsc1tpXSA9IFZlY3RvcjNfMS5WZWN0b3IzLkNyb3NzKGN1clRhbmcsIHRoaXMuX25vcm1hbHNbaV0pO1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9yYXcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9iaW5vcm1hbHNbaV0ubm9ybWFsaXplKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gcmV0dXJucyB0aGUgZmlyc3Qgbm9uIG51bGwgdmVjdG9yIGZyb20gaW5kZXggOiBjdXJ2ZVtpbmRleCArIE5dLnN1YnRyYWN0KGN1cnZlW2luZGV4XSlcbiAgICBfZ2V0Rmlyc3ROb25OdWxsVmVjdG9yKGluZGV4KSB7XG4gICAgICAgIGxldCBpID0gMTtcbiAgICAgICAgbGV0IG5OVmVjdG9yID0gdGhpcy5fY3VydmVbaW5kZXggKyBpXS5zdWJ0cmFjdCh0aGlzLl9jdXJ2ZVtpbmRleF0pO1xuICAgICAgICB3aGlsZSAobk5WZWN0b3IubGVuZ3RoKCkgPT09IDAgJiYgaW5kZXggKyBpICsgMSA8IHRoaXMuX2N1cnZlLmxlbmd0aCkge1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgbk5WZWN0b3IgPSB0aGlzLl9jdXJ2ZVtpbmRleCArIGldLnN1YnRyYWN0KHRoaXMuX2N1cnZlW2luZGV4XSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5OVmVjdG9yO1xuICAgIH1cbiAgICAvLyByZXR1cm5zIHRoZSBsYXN0IG5vbiBudWxsIHZlY3RvciBmcm9tIGluZGV4IDogY3VydmVbaW5kZXhdLnN1YnRyYWN0KGN1cnZlW2luZGV4IC0gTl0pXG4gICAgX2dldExhc3ROb25OdWxsVmVjdG9yKGluZGV4KSB7XG4gICAgICAgIGxldCBpID0gMTtcbiAgICAgICAgbGV0IG5MVmVjdG9yID0gdGhpcy5fY3VydmVbaW5kZXhdLnN1YnRyYWN0KHRoaXMuX2N1cnZlW2luZGV4IC0gaV0pO1xuICAgICAgICB3aGlsZSAobkxWZWN0b3IubGVuZ3RoKCkgPT09IDAgJiYgaW5kZXggPiBpICsgMSkge1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgbkxWZWN0b3IgPSB0aGlzLl9jdXJ2ZVtpbmRleF0uc3VidHJhY3QodGhpcy5fY3VydmVbaW5kZXggLSBpXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5MVmVjdG9yO1xuICAgIH1cbiAgICAvLyBwcml2YXRlIGZ1bmN0aW9uIG5vcm1hbFZlY3Rvcih2MCwgdnQsIHZhKSA6XG4gICAgLy8gcmV0dXJucyBhbiBhcmJpdHJhcnkgcG9pbnQgaW4gdGhlIHBsYW5lIGRlZmluZWQgYnkgdGhlIHBvaW50IHYwIGFuZCB0aGUgdmVjdG9yIHZ0IG9ydGhvZ29uYWwgdG8gdGhpcyBwbGFuZVxuICAgIC8vIGlmIHZhIGlzIHBhc3NlZCwgaXQgcmV0dXJucyB0aGUgdmEgcHJvamVjdGlvbiBvbiB0aGUgcGxhbmUgb3J0aG9nb25hbCB0byB2dCBhdCB0aGUgcG9pbnQgdjBcbiAgICBfbm9ybWFsVmVjdG9yKHYwLCB2dCwgdmEpIHtcbiAgICAgICAgbGV0IG5vcm1hbDA7XG4gICAgICAgIGxldCB0Z2wgPSB2dC5sZW5ndGgoKTtcbiAgICAgICAgaWYgKHRnbCA9PT0gMC4wKSB7XG4gICAgICAgICAgICB0Z2wgPSAxLjA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhID09PSB1bmRlZmluZWQgfHwgdmEgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGxldCBwb2ludDtcbiAgICAgICAgICAgIGlmICghU2NhbGFyXzEuU2NhbGFyLldpdGhpbkVwc2lsb24oTWF0aC5hYnModnQueSkgLyB0Z2wsIDEuMCwgdHlwZXNfMS5FcHNpbG9uKSkge1xuICAgICAgICAgICAgICAgIC8vIHNlYXJjaCBmb3IgYSBwb2ludCBpbiB0aGUgcGxhbmVcbiAgICAgICAgICAgICAgICBwb2ludCA9IG5ldyBWZWN0b3IzXzEuVmVjdG9yMygwLjAsIC0xLjAsIDAuMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICghU2NhbGFyXzEuU2NhbGFyLldpdGhpbkVwc2lsb24oTWF0aC5hYnModnQueCkgLyB0Z2wsIDEuMCwgdHlwZXNfMS5FcHNpbG9uKSkge1xuICAgICAgICAgICAgICAgIHBvaW50ID0gbmV3IFZlY3RvcjNfMS5WZWN0b3IzKDEuMCwgMC4wLCAwLjApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIVNjYWxhcl8xLlNjYWxhci5XaXRoaW5FcHNpbG9uKE1hdGguYWJzKHZ0LnopIC8gdGdsLCAxLjAsIHR5cGVzXzEuRXBzaWxvbikpIHtcbiAgICAgICAgICAgICAgICBwb2ludCA9IG5ldyBWZWN0b3IzXzEuVmVjdG9yMygwLjAsIDAuMCwgMS4wKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHBvaW50ID0gVmVjdG9yM18xLlZlY3RvcjMuWmVybygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbm9ybWFsMCA9IFZlY3RvcjNfMS5WZWN0b3IzLkNyb3NzKHZ0LCBwb2ludCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBub3JtYWwwID0gVmVjdG9yM18xLlZlY3RvcjMuQ3Jvc3ModnQsIHZhKTtcbiAgICAgICAgICAgIFZlY3RvcjNfMS5WZWN0b3IzLkNyb3NzVG9SZWYobm9ybWFsMCwgdnQsIG5vcm1hbDApO1xuICAgICAgICB9XG4gICAgICAgIG5vcm1hbDAubm9ybWFsaXplKCk7XG4gICAgICAgIHJldHVybiBub3JtYWwwO1xuICAgIH1cbn1cbmV4cG9ydHMuUGF0aDNEID0gUGF0aDNEO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UGF0aDNkLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TaXplID0gdm9pZCAwO1xuLyoqXG4gKiBTaXplIGNvbnRhaW5pbmcgd2lkaHQgYW5kIGhlaWdodFxuICogQHB1YmxpY1xuICovXG5jbGFzcyBTaXplIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgU2l6ZSBvYmplY3QgZnJvbSB0aGUgZ2l2ZW4gd2lkdGggYW5kIGhlaWdodCAoZmxvYXRzKS5cbiAgICAgKiBAcGFyYW0gd2lkdGggLSB3aWR0aCBvZiB0aGUgbmV3IHNpemVcbiAgICAgKiBAcGFyYW0gaGVpZ2h0IC0gaGVpZ2h0IG9mIHRoZSBuZXcgc2l6ZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIHN1cmZhY2Ugb2YgdGhlIFNpemUgOiB3aWR0aCAqIGhlaWdodCAoZmxvYXQpLlxuICAgICAqL1xuICAgIGdldCBzdXJmYWNlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy53aWR0aCAqIHRoaXMuaGVpZ2h0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgc2l6ZSBvZiB6ZXJvXG4gICAgICogQHJldHVybnMgYSBuZXcgU2l6ZSBzZXQgdG8gKDAuMCwgMC4wKVxuICAgICAqL1xuICAgIHN0YXRpYyBaZXJvKCkge1xuICAgICAgICByZXR1cm4gbmV3IFNpemUoMC4wLCAwLjApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IFNpemUgc2V0IGF0IHRoZSBsaW5lYXIgaW50ZXJwb2xhdGlvbiBcImFtb3VudFwiIGJldHdlZW4gXCJzdGFydFwiIGFuZCBcImVuZFwiXG4gICAgICogQHBhcmFtIHN0YXJ0IC0gc3RhcnRpbmcgc2l6ZSB0byBsZXJwIGJldHdlZW5cbiAgICAgKiBAcGFyYW0gZW5kIC0gZW5kIHNpemUgdG8gbGVycCBiZXR3ZWVuXG4gICAgICogQHBhcmFtIGFtb3VudCAtIGFtb3VudCB0byBsZXJwIGJldHdlZW4gdGhlIHN0YXJ0IGFuZCBlbmQgdmFsdWVzXG4gICAgICogQHJldHVybnMgYSBuZXcgU2l6ZSBzZXQgYXQgdGhlIGxpbmVhciBpbnRlcnBvbGF0aW9uIFwiYW1vdW50XCIgYmV0d2VlbiBcInN0YXJ0XCIgYW5kIFwiZW5kXCJcbiAgICAgKi9cbiAgICBzdGF0aWMgTGVycChzdGFydCwgZW5kLCBhbW91bnQpIHtcbiAgICAgICAgY29uc3QgdyA9IHN0YXJ0LndpZHRoICsgKGVuZC53aWR0aCAtIHN0YXJ0LndpZHRoKSAqIGFtb3VudDtcbiAgICAgICAgY29uc3QgaCA9IHN0YXJ0LmhlaWdodCArIChlbmQuaGVpZ2h0IC0gc3RhcnQuaGVpZ2h0KSAqIGFtb3VudDtcbiAgICAgICAgcmV0dXJuIG5ldyBTaXplKHcsIGgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgc3RyaW5nIHdpdGggdGhlIFNpemUgd2lkdGggYW5kIGhlaWdodFxuICAgICAqIEByZXR1cm5zIGEgc3RyaW5nIHdpdGggdGhlIFNpemUgd2lkdGggYW5kIGhlaWdodFxuICAgICAqL1xuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gYHtXOiAke3RoaXMud2lkdGh9LCBIOiAke3RoaXMuaGVpZ2h0fX1gO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBcIlNpemVcIlxuICAgICAqIEByZXR1cm5zIHRoZSBzdHJpbmcgXCJTaXplXCJcbiAgICAgKi9cbiAgICBnZXRDbGFzc05hbWUoKSB7XG4gICAgICAgIHJldHVybiAnU2l6ZSc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIFNpemUgaGFzaCBjb2RlLlxuICAgICAqIEByZXR1cm5zIGEgaGFzaCBjb2RlIGZvciBhIHVuaXF1ZSB3aWR0aCBhbmQgaGVpZ2h0XG4gICAgICovXG4gICAgZ2V0SGFzaENvZGUoKSB7XG4gICAgICAgIGxldCBoYXNoID0gdGhpcy53aWR0aCB8fCAwO1xuICAgICAgICBoYXNoID0gKGhhc2ggKiAzOTcpIF4gKHRoaXMuaGVpZ2h0IHx8IDApO1xuICAgICAgICByZXR1cm4gaGFzaDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgY3VycmVudCBzaXplIGZyb20gdGhlIGdpdmVuIG9uZS5cbiAgICAgKiBAcGFyYW0gc3JjIC0gdGhlIGdpdmVuIHNpemVcbiAgICAgKi9cbiAgICBjb3B5RnJvbShzcmMpIHtcbiAgICAgICAgdGhpcy53aWR0aCA9IHNyYy53aWR0aDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBzcmMuaGVpZ2h0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIGluIHBsYWNlIHRoZSBjdXJyZW50IFNpemUgZnJvbSB0aGUgZ2l2ZW4gZmxvYXRzLlxuICAgICAqIEBwYXJhbSB3aWR0aCAtIHdpZHRoIG9mIHRoZSBuZXcgc2l6ZVxuICAgICAqIEBwYXJhbSBoZWlnaHQgLSBoZWlnaHQgb2YgdGhlIG5ldyBzaXplXG4gICAgICogQHJldHVybnMgdGhlIHVwZGF0ZWQgU2l6ZS5cbiAgICAgKi9cbiAgICBjb3B5RnJvbUZsb2F0cyh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIGluIHBsYWNlIHRoZSBjdXJyZW50IFNpemUgZnJvbSB0aGUgZ2l2ZW4gZmxvYXRzLlxuICAgICAqIEBwYXJhbSB3aWR0aCAtIHdpZHRoIHRvIHNldFxuICAgICAqIEBwYXJhbSBoZWlnaHQgLSBoZWlnaHQgdG8gc2V0XG4gICAgICogQHJldHVybnMgdGhlIHVwZGF0ZWQgU2l6ZS5cbiAgICAgKi9cbiAgICBzZXQod2lkdGgsIGhlaWdodCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb3B5RnJvbUZsb2F0cyh3aWR0aCwgaGVpZ2h0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTXVsdGlwbGllcyB0aGUgd2lkdGggYW5kIGhlaWdodCBieSBudW1iZXJzXG4gICAgICogQHBhcmFtIHcgLSBmYWN0b3IgdG8gbXVsdGlwbGUgdGhlIHdpZHRoIGJ5XG4gICAgICogQHBhcmFtIGggLSBmYWN0b3IgdG8gbXVsdGlwbGUgdGhlIGhlaWdodCBieVxuICAgICAqIEByZXR1cm5zIGEgbmV3IFNpemUgc2V0IHdpdGggdGhlIG11bHRpcGxpY2F0aW9uIHJlc3VsdCBvZiB0aGUgY3VycmVudCBTaXplIGFuZCB0aGUgZ2l2ZW4gZmxvYXRzLlxuICAgICAqL1xuICAgIG11bHRpcGx5QnlGbG9hdHModywgaCkge1xuICAgICAgICByZXR1cm4gbmV3IFNpemUodGhpcy53aWR0aCAqIHcsIHRoaXMuaGVpZ2h0ICogaCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENsb25lcyB0aGUgc2l6ZVxuICAgICAqIEByZXR1cm5zIGEgbmV3IFNpemUgY29waWVkIGZyb20gdGhlIGdpdmVuIG9uZS5cbiAgICAgKi9cbiAgICBjbG9uZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTaXplKHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVHJ1ZSBpZiB0aGUgY3VycmVudCBTaXplIGFuZCB0aGUgZ2l2ZW4gb25lIHdpZHRoIGFuZCBoZWlnaHQgYXJlIHN0cmljdGx5IGVxdWFsLlxuICAgICAqIEBwYXJhbSBvdGhlciAtIHRoZSBvdGhlciBzaXplIHRvIGNvbXBhcmUgYWdhaW5zdFxuICAgICAqIEByZXR1cm5zIFRydWUgaWYgdGhlIGN1cnJlbnQgU2l6ZSBhbmQgdGhlIGdpdmVuIG9uZSB3aWR0aCBhbmQgaGVpZ2h0IGFyZSBzdHJpY3RseSBlcXVhbC5cbiAgICAgKi9cbiAgICBlcXVhbHMob3RoZXIpIHtcbiAgICAgICAgaWYgKCFvdGhlcikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLndpZHRoID09PSBvdGhlci53aWR0aCAmJiB0aGlzLmhlaWdodCA9PT0gb3RoZXIuaGVpZ2h0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdW1zIHRoZSB3aWR0aCBhbmQgaGVpZ2h0IG9mIHR3byBzaXplc1xuICAgICAqIEBwYXJhbSBvdGhlclNpemUgLSBzaXplIHRvIGFkZCB0byB0aGlzIHNpemVcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBTaXplIHNldCBhcyB0aGUgYWRkaXRpb24gcmVzdWx0IG9mIHRoZSBjdXJyZW50IFNpemUgYW5kIHRoZSBnaXZlbiBvbmUuXG4gICAgICovXG4gICAgYWRkKG90aGVyU2l6ZSkge1xuICAgICAgICBjb25zdCByID0gbmV3IFNpemUodGhpcy53aWR0aCArIG90aGVyU2l6ZS53aWR0aCwgdGhpcy5oZWlnaHQgKyBvdGhlclNpemUuaGVpZ2h0KTtcbiAgICAgICAgcmV0dXJuIHI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN1YnRyYWN0cyB0aGUgd2lkdGggYW5kIGhlaWdodCBvZiB0d29cbiAgICAgKiBAcGFyYW0gb3RoZXJTaXplIC0gc2l6ZSB0byBzdWJ0cmFjdCB0byB0aGlzIHNpemVcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBTaXplIHNldCBhcyB0aGUgc3VidHJhY3Rpb24gcmVzdWx0IG9mICB0aGUgZ2l2ZW4gb25lIGZyb20gdGhlIGN1cnJlbnQgU2l6ZS5cbiAgICAgKi9cbiAgICBzdWJ0cmFjdChvdGhlclNpemUpIHtcbiAgICAgICAgY29uc3QgciA9IG5ldyBTaXplKHRoaXMud2lkdGggLSBvdGhlclNpemUud2lkdGgsIHRoaXMuaGVpZ2h0IC0gb3RoZXJTaXplLmhlaWdodCk7XG4gICAgICAgIHJldHVybiByO1xuICAgIH1cbn1cbmV4cG9ydHMuU2l6ZSA9IFNpemU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TaXplLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdHlwZXNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3ByZWFsbG9jYXRlZFZhcmlhYmxlc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vQW5nbGVcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0FyYzJcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0F4aXNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0JlemllckN1cnZlXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9Db2xvcjNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0NvbG9yNFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vQ3VydmUzZFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vRnVyc3R1bVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vTWF0cml4XCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9QYXRoMmRcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL1BhdGgzZFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vUGxhbmVcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL1F1YXRlcm5pb25cIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL1NjYWxhclwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vU2l6ZVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vVmVjdG9yMlwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vVmVjdG9yM1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vVmVjdG9yNFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vaW5kZXhcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiaW1wb3J0IHsgT2JzZXJ2YWJsZUNvbXBvbmVudCB9IGZyb20gJy4uL2Vjcy9Db21wb25lbnQnXG5pbXBvcnQgeyBuZXdJZCB9IGZyb20gJy4uL2Vjcy9oZWxwZXJzJ1xuaW1wb3J0IHsgQW5pbWF0b3IgfSBmcm9tICcuL0NvbXBvbmVudHMnXG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgdHlwZSBBbmltYXRpb25QYXJhbXMgPSB7XG4gIGxvb3Bpbmc/OiBib29sZWFuXG4gIHNwZWVkPzogbnVtYmVyXG4gIHdlaWdodD86IG51bWJlclxuICBsYXllcj86IG51bWJlclxufVxuXG5jb25zdCBkZWZhdWx0UGFyYW1zOiBSZXF1aXJlZDxcbiAgUGljazxBbmltYXRpb25QYXJhbXMsICdsb29waW5nJyB8ICdzcGVlZCcgfCAnd2VpZ2h0JyB8ICdsYXllcic+XG4+ID0ge1xuICBsb29waW5nOiB0cnVlLFxuICBzcGVlZDogMS4wLFxuICB3ZWlnaHQ6IDEuMCxcbiAgbGF5ZXI6IDBcbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBBbmltYXRpb25TdGF0ZSBleHRlbmRzIE9ic2VydmFibGVDb21wb25lbnQge1xuICAvLyBAaW50ZXJuYWxcbiAgcHVibGljIGlzQW5pbWF0aW9uQ2xpcDogYm9vbGVhbiA9IHRydWVcblxuICAvKipcbiAgICogTmFtZSBvZiB0aGUgYW5pbWF0aW9uIGluIHRoZSBtb2RlbFxuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQucmVhZG9ubHlcbiAgcHVibGljIHJlYWRvbmx5IGNsaXA6IHN0cmluZ1xuXG4gIC8qKlxuICAgKiBEb2VzIHRoZSBhbmltYXRpb24gbG9vcD8sIGRlZmF1bHQ6IHRydWVcbiAgICovXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHB1YmxpYyBsb29waW5nOiBib29sZWFuID0gZGVmYXVsdFBhcmFtcy5sb29waW5nXG5cbiAgLyoqXG4gICAqIFdlaWdodCBvZiB0aGUgYW5pbWF0aW9uLCB2YWx1ZXMgZnJvbSAwIHRvIDEsIHVzZWQgdG8gYmxlbmQgc2V2ZXJhbCBhbmltYXRpb25zLiBkZWZhdWx0OiAxXG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBwdWJsaWMgd2VpZ2h0OiBudW1iZXIgPSBkZWZhdWx0UGFyYW1zLndlaWdodFxuXG4gIC8qKlxuICAgKiBJcyB0aGUgYW5pbWF0aW9uIHBsYXlpbmc/IGRlZmF1bHQ6IHRydWVcbiAgICovXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHB1YmxpYyBwbGF5aW5nOiBib29sZWFuID0gZmFsc2VcblxuICAvKipcbiAgICogRG9lcyBhbnkgYW55b25lIGFza2VkIHRvIHJlc2V0IHRoZSBhbmltYXRpb24/IGRlZmF1bHQ6IGZhbHNlXG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBwdWJsaWMgc2hvdWxkUmVzZXQ6IGJvb2xlYW4gPSBmYWxzZVxuXG4gIC8qKlxuICAgKiBUaGUgYW5pbWF0aW9uIHNwZWVkXG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBwdWJsaWMgc3BlZWQ6IG51bWJlciA9IGRlZmF1bHRQYXJhbXMuc3BlZWRcblxuICAvLyBAaW50ZXJuYWxcbiAgQE9ic2VydmFibGVDb21wb25lbnQucmVhZG9ubHlcbiAgcmVhZG9ubHkgbmFtZTogc3RyaW5nID0gbmV3SWQoJ0FuaW1DbGlwJylcblxuICAvKipcbiAgICogTGF5ZXJpbmcgYWxsb3dzIHlvdSB0byBoYXZlIHR3byBvciBtb3JlIGxldmVscyBvZiBhbmltYXRpb24gb24gYW4gb2JqZWN0J3MgcGFyYW1ldGVycyBhdCB0aGUgc2FtZSB0aW1lXG4gICAqL1xuICBwdWJsaWMgbGF5ZXI6IG51bWJlciA9IGRlZmF1bHRQYXJhbXMubGF5ZXJcblxuICAvLyBAaW50ZXJuYWxcbiAgcHVibGljIG93bmVyPzogQW5pbWF0b3JcblxuICBjb25zdHJ1Y3RvcihjbGlwOiBzdHJpbmcsIHBhcmFtczogQW5pbWF0aW9uUGFyYW1zID0gZGVmYXVsdFBhcmFtcykge1xuICAgIHN1cGVyKClcbiAgICB0aGlzLmNsaXAgPSBjbGlwXG4gICAgdGhpcy5zZXRQYXJhbXMoeyAuLi5wYXJhbXMgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBjbGlwIHBhcmFtZXRlcnNcbiAgICovXG4gIHNldFBhcmFtcyhwYXJhbXM6IEFuaW1hdGlvblBhcmFtcykge1xuICAgIHRoaXMubG9vcGluZyA9IHBhcmFtcy5sb29waW5nICE9PSB1bmRlZmluZWQgPyBwYXJhbXMubG9vcGluZyA6IHRoaXMubG9vcGluZ1xuICAgIHRoaXMuc3BlZWQgPSBwYXJhbXMuc3BlZWQgfHwgdGhpcy5zcGVlZFxuICAgIHRoaXMud2VpZ2h0ID0gcGFyYW1zLndlaWdodCB8fCB0aGlzLndlaWdodFxuICAgIHRoaXMubGF5ZXIgPSBwYXJhbXMubGF5ZXIgfHwgdGhpcy5sYXllclxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICB0b0pTT04oKSB7XG4gICAgY29uc3QgcmV0ID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShzdXBlci50b0pTT04oKSkpXG4gICAgaWYgKHRoaXMuc2hvdWxkUmVzZXQpIHtcbiAgICAgIHRoaXMuc2hvdWxkUmVzZXQgPSBmYWxzZVxuICAgIH1cbiAgICByZXR1cm4gcmV0XG4gIH1cblxuICAvKipcbiAgICogU3RhcnRzIHRoZSBhbmltYXRpb25cbiAgICovXG4gIHBsYXkocmVzZXQ6IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgIHRoaXMub3duZXI/LnBsYXkodGhpcywgcmVzZXQpXG4gIH1cblxuICAvKipcbiAgICogUGF1c2VzIHRoZSBhbmltYXRpb25cbiAgICovXG4gIHBhdXNlKCkge1xuICAgIHRoaXMub3duZXI/LnBhdXNlKHRoaXMpXG4gIH1cblxuICAvKipcbiAgICogUmVzZXRzIHRoZSBhbmltYXRpb24gc3RhdGUgdG8gdGhlIGZyYW1lIDBcbiAgICovXG4gIHJlc2V0KCkge1xuICAgIHRoaXMuc2hvdWxkUmVzZXQgPSB0cnVlXG4gIH1cblxuICAvKipcbiAgICogUmVzZXRzIGFuZCBwYXVzZXMgdGhlIGFuaW1hdGlvblxuICAgKi9cbiAgc3RvcCgpIHtcbiAgICB0aGlzLm93bmVyPy5zdG9wKHRoaXMpXG4gIH1cbn1cbiIsImltcG9ydCB7IFJlYWRPbmx5Q29sb3I0IH0gZnJvbSAnQGRjbC9lY3MtbWF0aCdcblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCBlbnVtIElucHV0RXZlbnRUeXBlIHtcbiAgRE9XTixcbiAgVVBcbn1cblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCBlbnVtIENhbWVyYU1vZGUge1xuICBGaXJzdFBlcnNvbiA9IDAsXG4gIFRoaXJkUGVyc29uID0gMSxcbiAgLy8gQGludGVybmFsXG4gIEJ1aWxkaW5nVG9vbEdvZE1vZGUgPSAyXG59XG5cbi8vIEBpbnRlcm5hbFxuZXhwb3J0IGNvbnN0IEFWQVRBUl9PQlNFUlZBQkxFID0gJ0FWQVRBUl9PQlNFUlZBQkxFJ1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHR5cGUgV2VhcmFibGVJZCA9IHN0cmluZ1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHR5cGUgQXZhdGFyRm9yUmVuZGVyZXIgPSB7XG4gIGJvZHlTaGFwZTogV2VhcmFibGVJZFxuICBza2luQ29sb3I6IFJlYWRPbmx5Q29sb3I0XG4gIGhhaXJDb2xvcjogUmVhZE9ubHlDb2xvcjRcbiAgZXllQ29sb3I6IFJlYWRPbmx5Q29sb3I0XG4gIHdlYXJhYmxlczogV2VhcmFibGVJZFtdXG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdHlwZSBXZWFyYWJsZSA9IHtcbiAgaWQ6IFdlYXJhYmxlSWRcbiAgdHlwZTogJ3dlYXJhYmxlJ1xuICBjYXRlZ29yeTogc3RyaW5nXG4gIGJhc2VVcmw6IHN0cmluZ1xuICB0YWdzOiBzdHJpbmdbXVxuICByZXByZXNlbnRhdGlvbnM6IEJvZHlTaGFwZVJlc3ByZXNlbnRhdGlvbltdXG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdHlwZSBCb2R5U2hhcGVSZXNwcmVzZW50YXRpb24gPSB7XG4gIGJvZHlTaGFwZXM6IHN0cmluZ1tdXG4gIG1haW5GaWxlOiBzdHJpbmdcbiAgY29udGVudHM6IEZpbGVBbmRIYXNoW11cbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB0eXBlIEZpbGVBbmRIYXNoID0ge1xuICBmaWxlOiBzdHJpbmdcbiAgaGFzaDogc3RyaW5nXG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdHlwZSBQcm9maWxlRm9yUmVuZGVyZXIgPSB7XG4gIHVzZXJJZDogc3RyaW5nXG4gIG5hbWU6IHN0cmluZ1xuICBkZXNjcmlwdGlvbjogc3RyaW5nXG4gIGVtYWlsOiBzdHJpbmdcbiAgYXZhdGFyOiBBdmF0YXJGb3JSZW5kZXJlclxuICBzbmFwc2hvdHM6IHtcbiAgICBmYWNlMjU2OiBzdHJpbmdcbiAgICBib2R5OiBzdHJpbmdcbiAgfVxuICB2ZXJzaW9uOiBudW1iZXJcbiAgaGFzQ29ubmVjdGVkV2ViMzogYm9vbGVhblxuICB1cGRhdGVkQXQ/OiBudW1iZXJcbiAgY3JlYXRlZEF0PzogbnVtYmVyXG4gIHBhcmNlbHNXaXRoQWNjZXNzPzogUGFyY2Vsc1dpdGhBY2Nlc3Ncbn1cblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCB0eXBlIFBhcmNlbHNXaXRoQWNjZXNzID0gQXJyYXk8e1xuICB4OiBudW1iZXJcbiAgeTogbnVtYmVyXG4gIHJvbGU6IExhbmRSb2xlXG59PlxuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IGVudW0gTGFuZFJvbGUge1xuICBPV05FUiA9ICdvd25lcicsXG4gIE9QRVJBVE9SID0gJ29wZXJhdG9yJ1xufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHR5cGUgTWluaW1hcFNjZW5lSW5mbyA9IHtcbiAgbmFtZTogc3RyaW5nXG4gIG93bmVyOiBzdHJpbmdcbiAgZGVzY3JpcHRpb246IHN0cmluZ1xuICBwcmV2aWV3SW1hZ2VVcmw6IHN0cmluZyB8IHVuZGVmaW5lZFxuICB0eXBlOiBudW1iZXJcbiAgcGFyY2VsczogeyB4OiBudW1iZXI7IHk6IG51bWJlciB9W11cbiAgaXNQT0k6IGJvb2xlYW5cbn1cbiIsImltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICdAZGNsL2Vjcy1tYXRoJ1xuXG5pbXBvcnQgeyBJbnB1dEV2ZW50VHlwZSB9IGZyb20gJy4vVHlwZXMnXG5pbXBvcnQgeyBDb21wb25lbnQsIERpc3Bvc2FibGVDb21wb25lbnQgfSBmcm9tICcuLi9lY3MvQ29tcG9uZW50J1xuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IHR5cGUgSW5wdXRFdmVudEtpbmQgPSAnQlVUVE9OX0RPV04nIHwgJ0JVVFRPTl9VUCdcblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBlbnVtIEFjdGlvbkJ1dHRvbiB7XG4gIFBPSU5URVIgPSAnUE9JTlRFUicsXG4gIFBSSU1BUlkgPSAnUFJJTUFSWScsXG4gIFNFQ09OREFSWSA9ICdTRUNPTkRBUlknLFxuICBBTlkgPSAnQU5ZJyxcbiAgRk9SV0FSRCA9ICdGT1JXQVJEJyxcbiAgQkFDS1dBUkQgPSAnQkFDS1dBUkQnLFxuICBSSUdIVCA9ICdSSUdIVCcsXG4gIExFRlQgPSAnTEVGVCcsXG4gIEpVTVAgPSAnSlVNUCcsXG4gIFdBTEsgPSAnV0FMSycsXG4gIEFDVElPTl8zID0gJ0FDVElPTl8zJyxcbiAgQUNUSU9OXzQgPSAnQUNUSU9OXzQnLFxuICBBQ1RJT05fNSA9ICdBQ1RJT05fNScsXG4gIEFDVElPTl82ID0gJ0FDVElPTl82J1xufVxuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IHR5cGUgSW5wdXRTdGF0ZSA9IFJlY29yZDxcbiAgQWN0aW9uQnV0dG9uLFxuICB7XG4gICAgQlVUVE9OX0RPV046IGJvb2xlYW5cbiAgfVxuPlxuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IHR5cGUgTG9jYWxBY3Rpb25CdXR0b25FdmVudCA9IEdsb2JhbElucHV0RXZlbnRSZXN1bHQgJiB7XG4gIG9yaWdpbjogVmVjdG9yM1xuICBkaXJlY3Rpb246IFZlY3RvcjNcbiAgYnV0dG9uOiBBY3Rpb25CdXR0b25cbiAgaGl0PzogR2xvYmFsSW5wdXRFdmVudFJlc3VsdFsnaGl0J10gJiB7XG4gICAgaGl0UG9pbnQ6IFZlY3RvcjNcbiAgICBub3JtYWw6IFZlY3RvcjNcbiAgICB3b3JsZE5vcm1hbDogVmVjdG9yM1xuICB9XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgUG9pbnRlckV2ZW50Q29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHJlYWRvbmx5IGNhbGxiYWNrOiAoZXZlbnQ6IExvY2FsQWN0aW9uQnV0dG9uRXZlbnQpID0+IHZvaWRcbiAgKSB7XG4gICAgaWYgKCFjYWxsYmFjayB8fCAhKCdhcHBseScgaW4gY2FsbGJhY2spIHx8ICEoJ2NhbGwnIGluIGNhbGxiYWNrKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYWxsYmFjayBpcyBub3QgYSBmdW5jdGlvbicpXG4gICAgfVxuICAgIElucHV0LmVuc3VyZUluc3RhbmNlKClcbiAgfVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQENvbXBvbmVudCgncG9pbnRlckRvd24nKVxuZXhwb3J0IGNsYXNzIEdsb2JhbFBvaW50ZXJEb3duIGV4dGVuZHMgUG9pbnRlckV2ZW50Q29tcG9uZW50IHt9XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5AQ29tcG9uZW50KCdwb2ludGVyVXAnKVxuZXhwb3J0IGNsYXNzIEdsb2JhbFBvaW50ZXJVcCBleHRlbmRzIFBvaW50ZXJFdmVudENvbXBvbmVudCB7fVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIFN1YnNjcmlwdGlvbiB7XG4gIHB1YmxpYyBmbjogKGU6IExvY2FsQWN0aW9uQnV0dG9uRXZlbnQpID0+IHZvaWRcbiAgcHVibGljIHVzZVJheWNhc3Q6IGJvb2xlYW5cblxuICBjb25zdHJ1Y3RvcihmbjogKGU6IExvY2FsQWN0aW9uQnV0dG9uRXZlbnQpID0+IHZvaWQsIHVzZVJheWNhc3Q6IGJvb2xlYW4pIHtcbiAgICB0aGlzLmZuID0gZm5cbiAgICB0aGlzLnVzZVJheWNhc3QgPSB1c2VSYXljYXN0XG4gIH1cbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBJbnB1dCB7XG4gIHByaXZhdGUgc3RhdGljIF9pbnN0YW5jZTogSW5wdXRcblxuICAvLyBAaW50ZXJuYWxcbiAgcHJpdmF0ZSBidXR0b25JZE1hcHBpbmc6IEFjdGlvbkJ1dHRvbltdID0gW1xuICAgIEFjdGlvbkJ1dHRvbi5QT0lOVEVSLFxuICAgIEFjdGlvbkJ1dHRvbi5QUklNQVJZLFxuICAgIEFjdGlvbkJ1dHRvbi5TRUNPTkRBUlksXG4gICAgQWN0aW9uQnV0dG9uLkFOWSxcbiAgICBBY3Rpb25CdXR0b24uRk9SV0FSRCxcbiAgICBBY3Rpb25CdXR0b24uQkFDS1dBUkQsXG4gICAgQWN0aW9uQnV0dG9uLlJJR0hULFxuICAgIEFjdGlvbkJ1dHRvbi5MRUZULFxuICAgIEFjdGlvbkJ1dHRvbi5KVU1QLFxuICAgIEFjdGlvbkJ1dHRvbi5XQUxLLFxuICAgIEFjdGlvbkJ1dHRvbi5BQ1RJT05fMyxcbiAgICBBY3Rpb25CdXR0b24uQUNUSU9OXzQsXG4gICAgQWN0aW9uQnV0dG9uLkFDVElPTl81LFxuICAgIEFjdGlvbkJ1dHRvbi5BQ1RJT05fNlxuICBdXG5cbiAgc3RhdGljIGdldCBpbnN0YW5jZSgpOiBJbnB1dCB7XG4gICAgSW5wdXQuZW5zdXJlSW5zdGFuY2UoKVxuICAgIHJldHVybiBJbnB1dC5faW5zdGFuY2VcbiAgfVxuXG4gIC8vIEBpbnRlcm5hbFxuICBwcml2YXRlIHN1YnNjcmlwdGlvbnM6IFJlY29yZDxcbiAgICBBY3Rpb25CdXR0b24sXG4gICAgUmVjb3JkPElucHV0RXZlbnRLaW5kLCBBcnJheTxTdWJzY3JpcHRpb24+PlxuICA+ID0gdGhpcy5idXR0b25JZE1hcHBpbmcucmVkdWNlKFxuICAgIChhY2MsIGspID0+ICh7IC4uLmFjYywgW2tdOiB7IEJVVFRPTl9ET1dOOiBbXSwgQlVUVE9OX1VQOiBbXSB9IH0pLFxuICAgIHt9IGFzIFJlY29yZDxBY3Rpb25CdXR0b24sIFJlY29yZDxJbnB1dEV2ZW50S2luZCwgQXJyYXk8U3Vic2NyaXB0aW9uPj4+XG4gIClcblxuICBwcml2YXRlIGludGVybmFsU3RhdGU6IElucHV0U3RhdGUgPSB0aGlzLmJ1dHRvbklkTWFwcGluZy5yZWR1Y2UoXG4gICAgKGFjYywgaykgPT4gKHsgLi4uYWNjLCBba106IHsgQlVUVE9OX0RPV046IGZhbHNlIH0gfSksXG4gICAge30gYXMgSW5wdXRTdGF0ZVxuICApXG5cbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgc3RhdGljIGVuc3VyZUluc3RhbmNlKCk6IGFueSB7XG4gICAgaWYgKCFJbnB1dC5faW5zdGFuY2UpIHtcbiAgICAgIElucHV0Ll9pbnN0YW5jZSA9IG5ldyBJbnB1dCgpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFsbG93cyB0byBrbm93IGlmIGEgYnV0dG9uIGlzIHByZXNzZWRcbiAgICpcbiAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBidXR0b24gaXMgcHJlc3NlZFxuICAgKiBAcGFyYW0gYnV0dG9uSWQgLSBUaGUgaWQgb2YgdGhlIGJ1dHRvbi5cbiAgICovXG4gIHB1YmxpYyBpc0J1dHRvblByZXNzZWQoYnV0dG9uSWQ6IEFjdGlvbkJ1dHRvbikge1xuICAgIHJldHVybiB0aGlzLmludGVybmFsU3RhdGVbYnV0dG9uSWRdXG4gIH1cblxuICAvKipcbiAgICogU3Vic2NyaWJlcyB0byBhbiBpbnB1dCBldmVudCBhbmQgdHJpZ2dlcnMgdGhlIHByb3ZpZGVkIGNhbGxiYWNrLlxuICAgKlxuICAgKiBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBjYW4gYmUgY2FsbGVkIHRvIHJlbW92ZSB0aGUgc3Vic2NyaXB0aW9uLlxuICAgKiBAcGFyYW0gZXZlbnROYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGV2ZW50IChzZWUgSW5wdXRFdmVudEtpbmQpLlxuICAgKiBAcGFyYW0gYnV0dG9uSWQgLSBUaGUgaWQgb2YgdGhlIGJ1dHRvbi5cbiAgICogQHBhcmFtIHVzZVJheWNhc3QgLSBFbmFibGVzIGdldHRpbmcgcmF5Y2FzdCBpbmZvcm1hdGlvbi5cbiAgICogQHBhcmFtIGZuIC0gQSBjYWxsYmFjayBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkLlxuICAgKi9cbiAgcHVibGljIHN1YnNjcmliZShcbiAgICBldmVudE5hbWU6IElucHV0RXZlbnRLaW5kLFxuICAgIGJ1dHRvbklkOiBBY3Rpb25CdXR0b24sXG4gICAgdXNlUmF5Y2FzdDogYm9vbGVhbixcbiAgICBmbjogKGU6IExvY2FsQWN0aW9uQnV0dG9uRXZlbnQpID0+IHZvaWRcbiAgKTogKCkgPT4gdm9pZCB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb25zW2J1dHRvbklkXVtldmVudE5hbWVdLnB1c2goXG4gICAgICBuZXcgU3Vic2NyaXB0aW9uKGZuLCB1c2VSYXljYXN0KVxuICAgIClcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgdGhpcy51bnN1YnNjcmliZShldmVudE5hbWUsIGJ1dHRvbklkLCBmbilcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhbiBleGlzdGluZyBpbnB1dCBldmVudCBzdWJzY3JpcHRpb24uXG4gICAqIEBwYXJhbSBldmVudE5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgZXZlbnQgKHNlZSBJbnB1dEV2ZW50S2luZCkuXG4gICAqIEBwYXJhbSBidXR0b25JZCAtIFRoZSBpZCBvZiB0aGUgYnV0dG9uLlxuICAgKiBAcGFyYW0gZm4gLSBUaGUgY2FsbGJhY2sgZnVuY3Rpb24gdXNlZCB3aGVuIHN1YnNjcmliaW5nIHRvIHRoZSBldmVudC5cbiAgICovXG4gIHB1YmxpYyB1bnN1YnNjcmliZShcbiAgICBldmVudE5hbWU6IElucHV0RXZlbnRLaW5kLFxuICAgIGJ1dHRvbklkOiBBY3Rpb25CdXR0b24sXG4gICAgZm46IChlOiBMb2NhbEFjdGlvbkJ1dHRvbkV2ZW50KSA9PiB2b2lkXG4gICkge1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5nZXRTdWJzY3JpcHRpb25JZChldmVudE5hbWUsIGJ1dHRvbklkLCBmbilcbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgcmV0dXJuIHRoaXMuc3Vic2NyaXB0aW9uc1tidXR0b25JZF1bZXZlbnROYW1lXS5zcGxpY2UoaW5kZXgsIDEpXG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgcHVibGljIGhhbmRsZVBvaW50ZXJFdmVudChkYXRhOiBHbG9iYWxJbnB1dEV2ZW50UmVzdWx0KSB7XG4gICAgY29uc3QgYnV0dG9uID0gdGhpcy5nZXRQb2ludGVyQnlJZChkYXRhLmJ1dHRvbklkKVxuXG4gICAgaWYgKCFidXR0b24pIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IGV2ZW50UmVzdWx0OiBMb2NhbEFjdGlvbkJ1dHRvbkV2ZW50ID0ge1xuICAgICAgLi4uZGF0YSxcbiAgICAgIGJ1dHRvbixcbiAgICAgIGRpcmVjdGlvbjogbmV3IFZlY3RvcjMoKS5jb3B5RnJvbShkYXRhLmRpcmVjdGlvbiksXG4gICAgICBvcmlnaW46IG5ldyBWZWN0b3IzKCkuY29weUZyb20oZGF0YS5vcmlnaW4pLFxuICAgICAgaGl0OiB1bmRlZmluZWRcbiAgICB9XG5cbiAgICBjb25zdCBoaXQgPSBkYXRhLmhpdFxuICAgICAgPyB7XG4gICAgICAgICAgLi4uZGF0YS5oaXQsXG4gICAgICAgICAgaGl0UG9pbnQ6IG5ldyBWZWN0b3IzKCkuY29weUZyb20oZGF0YS5oaXQuaGl0UG9pbnQpLFxuICAgICAgICAgIG5vcm1hbDogbmV3IFZlY3RvcjMoKS5jb3B5RnJvbShkYXRhLmhpdC5ub3JtYWwpLFxuICAgICAgICAgIHdvcmxkTm9ybWFsOiBuZXcgVmVjdG9yMygpLmNvcHlGcm9tKGRhdGEuaGl0LndvcmxkTm9ybWFsKVxuICAgICAgICB9XG4gICAgICA6IHVuZGVmaW5lZFxuXG4gICAgaWYgKGRhdGEudHlwZSA9PT0gSW5wdXRFdmVudFR5cGUuRE9XTikge1xuICAgICAgdGhpcy5pbnRlcm5hbFN0YXRlW2J1dHRvbl0uQlVUVE9OX0RPV04gPSB0cnVlXG5cbiAgICAgIGZvciAoXG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgaSA8IHRoaXMuc3Vic2NyaXB0aW9uc1tidXR0b25dWydCVVRUT05fRE9XTiddLmxlbmd0aDtcbiAgICAgICAgaSsrXG4gICAgICApIHtcbiAgICAgICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gdGhpcy5zdWJzY3JpcHRpb25zW2J1dHRvbl1bJ0JVVFRPTl9ET1dOJ11baV1cblxuICAgICAgICAvLyByZW1vdmUgaGl0IGluZm9ybWF0aW9uIHdoZW4gcmF5Y2FzdCBpcyBkaXNhYmxlZFxuICAgICAgICBpZiAoc3Vic2NyaXB0aW9uLnVzZVJheWNhc3QpIHtcbiAgICAgICAgICBldmVudFJlc3VsdC5oaXQgPSBoaXRcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBldmVudFJlc3VsdC5oaXQgPSB1bmRlZmluZWRcbiAgICAgICAgfVxuXG4gICAgICAgIHN1YnNjcmlwdGlvbi5mbihldmVudFJlc3VsdClcbiAgICAgIH1cblxuICAgICAgaWYgKGhpdCAmJiBoaXQuZW50aXR5SWQgJiYgRGlzcG9zYWJsZUNvbXBvbmVudC5lbmdpbmUpIHtcbiAgICAgICAgY29uc3QgZW50aXR5ID0gRGlzcG9zYWJsZUNvbXBvbmVudC5lbmdpbmUuZW50aXRpZXNbaGl0LmVudGl0eUlkXVxuICAgICAgICBjb25zdCBoYW5kbGVyID0gZW50aXR5ICYmIGVudGl0eS5nZXRDb21wb25lbnRPck51bGwoR2xvYmFsUG9pbnRlckRvd24pXG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgZXZlbnRSZXN1bHQuaGl0ID0gaGl0XG4gICAgICAgICAgaGFuZGxlci5jYWxsYmFjayhldmVudFJlc3VsdClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmludGVybmFsU3RhdGVbYnV0dG9uXS5CVVRUT05fRE9XTiA9IGZhbHNlXG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zdWJzY3JpcHRpb25zW2J1dHRvbl1bJ0JVVFRPTl9VUCddLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IHRoaXMuc3Vic2NyaXB0aW9uc1tidXR0b25dWydCVVRUT05fVVAnXVtpXVxuXG4gICAgICAgIC8vIHJlbW92ZSBoaXQgaW5mb3JtYXRpb24gd2hlbiByYXljYXN0IGlzIGRpc2FibGVkXG4gICAgICAgIGlmIChzdWJzY3JpcHRpb24udXNlUmF5Y2FzdCkge1xuICAgICAgICAgIGV2ZW50UmVzdWx0LmhpdCA9IGhpdFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGV2ZW50UmVzdWx0LmhpdCA9IHVuZGVmaW5lZFxuICAgICAgICB9XG5cbiAgICAgICAgc3Vic2NyaXB0aW9uLmZuKGV2ZW50UmVzdWx0KVxuICAgICAgfVxuXG4gICAgICBpZiAoaGl0ICYmIGhpdC5lbnRpdHlJZCAmJiBEaXNwb3NhYmxlQ29tcG9uZW50LmVuZ2luZSkge1xuICAgICAgICBjb25zdCBlbnRpdHkgPSBEaXNwb3NhYmxlQ29tcG9uZW50LmVuZ2luZS5lbnRpdGllc1toaXQuZW50aXR5SWRdXG4gICAgICAgIGNvbnN0IGhhbmRsZXIgPSBlbnRpdHkgJiYgZW50aXR5LmdldENvbXBvbmVudE9yTnVsbChHbG9iYWxQb2ludGVyVXApXG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgZXZlbnRSZXN1bHQuaGl0ID0gaGl0XG4gICAgICAgICAgaGFuZGxlci5jYWxsYmFjayhldmVudFJlc3VsdClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZ2V0U3Vic2NyaXB0aW9uSWQoXG4gICAgZXZlbnROYW1lOiBJbnB1dEV2ZW50S2luZCxcbiAgICBidXR0b25JZDogQWN0aW9uQnV0dG9uLFxuICAgIGZuOiAoZTogTG9jYWxBY3Rpb25CdXR0b25FdmVudCkgPT4gdm9pZFxuICApOiBudW1iZXIge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zdWJzY3JpcHRpb25zW2J1dHRvbklkXVtldmVudE5hbWVdLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodGhpcy5zdWJzY3JpcHRpb25zW2J1dHRvbklkXVtldmVudE5hbWVdW2ldLmZuID09PSBmbikge1xuICAgICAgICByZXR1cm4gaVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAtMVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRQb2ludGVyQnlJZChpZDogbnVtYmVyKTogQWN0aW9uQnV0dG9uIHwgbnVsbCB7XG4gICAgaWYgKGlkIDwgMCB8fCBpZCA+PSB0aGlzLmJ1dHRvbklkTWFwcGluZy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuXG4gICAgY29uc3QgYWN0aW9uQnV0dG9uID0gdGhpcy5idXR0b25JZE1hcHBpbmdbaWRdXG5cbiAgICBpZiAoYWN0aW9uQnV0dG9uID09PSBBY3Rpb25CdXR0b24uQU5ZKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIHJldHVybiBhY3Rpb25CdXR0b25cbiAgfVxufVxuIiwiaW1wb3J0IHtcbiAgVmVjdG9yMyxcbiAgUXVhdGVybmlvbixcbiAgTWF0cml4LFxuICBNYXRoVG1wLFxuICBDb2xvcjMsXG4gIENvbG9yNFxufSBmcm9tICdAZGNsL2Vjcy1tYXRoJ1xuXG5pbXBvcnQge1xuICBDb21wb25lbnQsXG4gIE9ic2VydmFibGVDb21wb25lbnQsXG4gIERpc3Bvc2FibGVDb21wb25lbnQsXG4gIGdldENvbXBvbmVudElkXG59IGZyb20gJy4uL2Vjcy9Db21wb25lbnQnXG5pbXBvcnQgeyBBbmltYXRpb25TdGF0ZSB9IGZyb20gJy4vQW5pbWF0aW9uU3RhdGUnXG5pbXBvcnQgeyBsb2csIG5ld0lkIH0gZnJvbSAnLi4vZWNzL2hlbHBlcnMnXG5pbXBvcnQgeyBBY3Rpb25CdXR0b24gfSBmcm9tICcuL0lucHV0J1xuaW1wb3J0IHsgQ2FtZXJhTW9kZSB9IGZyb20gJy4vVHlwZXMnXG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgdHlwZSBUcmFuZm9ybUNvbnN0cnVjdG9yQXJncyA9IFRyYW5zZm9ybUNvbnN0cnVjdG9yQXJnc1xuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IHR5cGUgVHJhbnNmb3JtQ29uc3RydWN0b3JBcmdzID0ge1xuICBwb3NpdGlvbj86IFZlY3RvcjNcbiAgcm90YXRpb24/OiBRdWF0ZXJuaW9uXG4gIHNjYWxlPzogVmVjdG9yM1xufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGVudW0gQ0xBU1NfSUQge1xuICBUUkFOU0ZPUk0gPSAxLFxuICBVVUlEX0NBTExCQUNLID0gOCxcbiAgQk9YX1NIQVBFID0gMTYsXG4gIFNQSEVSRV9TSEFQRSA9IDE3LFxuICBQTEFORV9TSEFQRSA9IDE4LFxuICBDT05FX1NIQVBFID0gMTksXG4gIENZTElOREVSX1NIQVBFID0gMjAsXG4gIFRFWFRfU0hBUEUgPSAyMSxcblxuICBORlRfU0hBUEUgPSAyMixcbiAgVUlfV09STERfU1BBQ0VfU0hBUEUgPSAyMyxcbiAgVUlfU0NSRUVOX1NQQUNFX1NIQVBFID0gMjQsXG4gIFVJX0NPTlRBSU5FUl9SRUNUID0gMjUsXG4gIFVJX0NPTlRBSU5FUl9TVEFDSyA9IDI2LFxuICBVSV9URVhUX1NIQVBFID0gMjcsXG4gIFVJX0lOUFVUX1RFWFRfU0hBUEUgPSAyOCxcbiAgVUlfSU1BR0VfU0hBUEUgPSAyOSxcbiAgVUlfU0xJREVSX1NIQVBFID0gMzAsXG4gIENJUkNMRV9TSEFQRSA9IDMxLFxuICBCSUxMQk9BUkQgPSAzMixcblxuICBBTklNQVRJT04gPSAzMyxcbiAgRk9OVCA9IDM0LFxuXG4gIFVJX0ZVTExTQ1JFRU5fU0hBUEUgPSA0MCwgLy8gaW50ZXJuYWwgZnVsbHNjcmVlbiBzY2VuZXNcbiAgVUlfQlVUVE9OX1NIQVBFID0gNDEsXG5cbiAgR0xURl9TSEFQRSA9IDU0LFxuICBPQkpfU0hBUEUgPSA1NSxcbiAgQVZBVEFSX1NIQVBFID0gNTYsXG5cbiAgQkFTSUNfTUFURVJJQUwgPSA2NCxcbiAgUEJSX01BVEVSSUFMID0gNjUsXG5cbiAgSElHSExJR0hUX0VOVElUWSA9IDY2LFxuXG4gIC8qKiBAZGVwcmVjYXRlZCBTb3VuZCBoYXMgYmVlbiBkZXByZWNhdGFlZCAqL1xuICBTT1VORCA9IDY3LFxuICBURVhUVVJFID0gNjgsXG5cbiAgVklERU9fQ0xJUCA9IDcwLFxuICBWSURFT19URVhUVVJFID0gNzEsXG5cbiAgQVZBVEFSX1RFWFRVUkUgPSA3MixcblxuICBBVURJT19DTElQID0gMjAwLFxuICBBVURJT19TT1VSQ0UgPSAyMDEsXG4gIEFVRElPX1NUUkVBTSA9IDIwMixcbiAgR0laTU9TID0gMjAzLFxuICBTTUFSVF9JVEVNID0gMjA0LFxuICBBVkFUQVJfTU9ESUZJRVJfQVJFQSA9IDIwNSxcbiAgQVZBVEFSX0FUVEFDSCA9IDIwNixcbiAgQ0FNRVJBX01PREVfQVJFQSA9IDIwNyxcblxuICAvLyBGb3Igc3RhdGUgc3luYyBvbmx5XG4gIE5BTUUgPSAzMDAsXG4gIExPQ0tFRF9PTl9FRElUID0gMzAxLFxuICBWSVNJQkxFX09OX0VESVQgPSAzMDJcbn1cblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCBlbnVtIEF2YXRhck1vZGlmaWVycyB7XG4gIEhJREVfQVZBVEFSUyA9ICdISURFX0FWQVRBUlMnLFxuICBESVNBQkxFX1BBU1NQT1JUUyA9ICdESVNBQkxFX1BBU1NQT1JUUydcbn1cblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCB0eXBlIEFyZWEgPSB7IGJveDogVmVjdG9yMyB9XG5cbi8qKlxuICogRGVmaW5lIGFuIGFyZWEgd2hlcmUgYXZhdGFycyBjYW4gYmUgbW9kaWZpZWQgaW4gc29tZSB3YXlcbiAqIEBwdWJsaWNcbiAqL1xuQENvbXBvbmVudCgnZW5naW5lLmF2YXRhck1vZGlmaWVyQXJlYScsIENMQVNTX0lELkFWQVRBUl9NT0RJRklFUl9BUkVBKVxuZXhwb3J0IGNsYXNzIEF2YXRhck1vZGlmaWVyQXJlYSBleHRlbmRzIE9ic2VydmFibGVDb21wb25lbnQge1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBhcmVhITogQXJlYVxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIG1vZGlmaWVycyE6IEF2YXRhck1vZGlmaWVyc1tdXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgZXhjbHVkZUlkcz86IHN0cmluZ1tdXG5cbiAgY29uc3RydWN0b3IoYXJnczoge1xuICAgIGFyZWE6IEFyZWFcbiAgICBtb2RpZmllcnM6IEF2YXRhck1vZGlmaWVyc1tdXG4gICAgZXhjbHVkZUlkcz86IHN0cmluZ1tdXG4gIH0pIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy5hcmVhID0gYXJncy5hcmVhXG4gICAgdGhpcy5tb2RpZmllcnMgPSBhcmdzLm1vZGlmaWVyc1xuICAgIHRoaXMuZXhjbHVkZUlkcyA9IGFyZ3MuZXhjbHVkZUlkc1xuICB9XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5AQ29tcG9uZW50KCdlbmdpbmUudHJhbnNmb3JtJywgQ0xBU1NfSUQuVFJBTlNGT1JNKVxuZXhwb3J0IGNsYXNzIFRyYW5zZm9ybSBleHRlbmRzIE9ic2VydmFibGVDb21wb25lbnQge1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBwb3NpdGlvbiE6IFZlY3RvcjNcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICByb3RhdGlvbiE6IFF1YXRlcm5pb25cblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBzY2FsZSE6IFZlY3RvcjNcblxuICBjb25zdHJ1Y3RvcihhcmdzOiBUcmFuc2Zvcm1Db25zdHJ1Y3RvckFyZ3MgPSB7fSkge1xuICAgIHN1cGVyKClcbiAgICB0aGlzLnBvc2l0aW9uID0gYXJncy5wb3NpdGlvbiB8fCBWZWN0b3IzLlplcm8oKVxuICAgIHRoaXMucm90YXRpb24gPSBhcmdzLnJvdGF0aW9uIHx8IFF1YXRlcm5pb24uSWRlbnRpdHlcbiAgICB0aGlzLnNjYWxlID0gYXJncy5zY2FsZSB8fCBuZXcgVmVjdG9yMygxLCAxLCAxKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwdWJsaWNcbiAgICogVGhlIHJvdGF0aW9uIGFzIEV1bGVyIGFuZ2xlcyBpbiBkZWdyZWVzLlxuICAgKi9cbiAgZ2V0IGV1bGVyQW5nbGVzKCkge1xuICAgIHJldHVybiB0aGlzLnJvdGF0aW9uLmV1bGVyQW5nbGVzXG4gIH1cblxuICAvKipcbiAgICogQHB1YmxpY1xuICAgKiBSb3RhdGVzIHRoZSB0cmFuc2Zvcm0gc28gdGhlIGZvcndhcmQgdmVjdG9yIHBvaW50cyBhdCB0YXJnZXQncyBjdXJyZW50IHBvc2l0aW9uLlxuICAgKi9cbiAgbG9va0F0KHRhcmdldDogVmVjdG9yMywgd29ybGRVcDogVmVjdG9yMyA9IE1hdGhUbXAuc3RhdGljVXApIHtcbiAgICBjb25zdCByZXN1bHQgPSBuZXcgTWF0cml4KClcbiAgICBNYXRyaXguTG9va0F0TEhUb1JlZih0aGlzLnBvc2l0aW9uLCB0YXJnZXQsIHdvcmxkVXAsIHJlc3VsdClcbiAgICByZXN1bHQuaW52ZXJ0KClcbiAgICBRdWF0ZXJuaW9uLkZyb21Sb3RhdGlvbk1hdHJpeFRvUmVmKHJlc3VsdCwgdGhpcy5yb3RhdGlvbilcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIEBwdWJsaWNcbiAgICogQXBwbGllcyBhIHJvdGF0aW9uIG9mIGV1bGVyIGFuZ2xlcyBhcm91bmQgdGhlIHgsIHkgYW5kIHogYXhpcy5cbiAgICovXG4gIHJvdGF0ZShheGlzOiBWZWN0b3IzLCBhbmdsZTogbnVtYmVyKSB7XG4gICAgdGhpcy5yb3RhdGlvbi5tdWx0aXBseUluUGxhY2UodGhpcy5yb3RhdGlvbi5hbmdsZUF4aXMoYW5nbGUsIGF4aXMpKVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogQHB1YmxpY1xuICAgKiBNb3ZlcyB0aGUgdHJhbnNmb3JtIGluIHRoZSBkaXJlY3Rpb24gYW5kIGRpc3RhbmNlIG9mIHRyYW5zbGF0aW9uLlxuICAgKi9cbiAgdHJhbnNsYXRlKHZlYzogVmVjdG9yMykge1xuICAgIHRoaXMucG9zaXRpb24uYWRkSW5QbGFjZSh2ZWMpXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxufVxuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IGVudW0gQXR0YWNoVG9BdmF0YXJBbmNob3JQb2ludElkIHtcbiAgUG9zaXRpb24gPSAwLFxuICBOYW1lVGFnID0gMSxcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBMZWZ0SGFuZCA9IDIsXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgUmlnaHRIYW5kID0gM1xufVxuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IHR5cGUgQXR0YWNoVG9BdmF0YXJDb25zdHJ1Y3RvckFyZ3MgPSB7XG4gIGF2YXRhcklkPzogc3RyaW5nXG4gIGFuY2hvclBvaW50SWQ/OiBBdHRhY2hUb0F2YXRhckFuY2hvclBvaW50SWRcbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbkBDb21wb25lbnQoJ2VuZ2luZS50cmFuc2Zvcm0nLCBDTEFTU19JRC5BVkFUQVJfQVRUQUNIKVxuZXhwb3J0IGNsYXNzIEF0dGFjaFRvQXZhdGFyIGV4dGVuZHMgT2JzZXJ2YWJsZUNvbXBvbmVudCB7XG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIGF2YXRhcklkITogc3RyaW5nXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgYW5jaG9yUG9pbnRJZCE6IEF0dGFjaFRvQXZhdGFyQW5jaG9yUG9pbnRJZFxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIGF2YXRhclNjZW5lSWQhOiAnZGNsLWdzLWF2YXRhcnMnXG5cbiAgY29uc3RydWN0b3IoYXJnczogQXR0YWNoVG9BdmF0YXJDb25zdHJ1Y3RvckFyZ3MgPSB7fSkge1xuICAgIHN1cGVyKClcbiAgICB0aGlzLmF2YXRhcklkID0gYXJncy5hdmF0YXJJZCB8fCAnJ1xuICAgIHRoaXMuYW5jaG9yUG9pbnRJZCA9XG4gICAgICBhcmdzLmFuY2hvclBvaW50SWQgfHwgQXR0YWNoVG9BdmF0YXJBbmNob3JQb2ludElkLlBvc2l0aW9uXG4gIH1cbn1cblxuLyoqXG4gKiBCaWxsYm9hcmQgZGVmaW5lcyBhIGJlaGF2aW9yIHRoYXQgbWFrZXMgdGhlIGVudGl0eSBmYWNlIHRoZSBjYW1lcmEgaW4gYW55IG1vbWVudC5cbiAqIEBwdWJsaWNcbiAqL1xuQENvbXBvbmVudCgnZW5naW5lLmJpbGxib2FyZCcsIENMQVNTX0lELkJJTExCT0FSRClcbmV4cG9ydCBjbGFzcyBCaWxsYm9hcmQgZXh0ZW5kcyBPYnNlcnZhYmxlQ29tcG9uZW50IHtcbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgeDogYm9vbGVhbiA9IHRydWVcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICB5OiBib29sZWFuID0gdHJ1ZVxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHo6IGJvb2xlYW4gPSB0cnVlXG5cbiAgY29uc3RydWN0b3IoeDogYm9vbGVhbiA9IHRydWUsIHk6IGJvb2xlYW4gPSB0cnVlLCB6OiBib29sZWFuID0gdHJ1ZSkge1xuICAgIHN1cGVyKClcbiAgICB0aGlzLnggPSB4XG4gICAgdGhpcy55ID0geVxuICAgIHRoaXMueiA9IHpcbiAgfVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIFNoYXBlIGV4dGVuZHMgT2JzZXJ2YWJsZUNvbXBvbmVudCB7XG4gIC8qKlxuICAgKiBTZXQgdG8gdHJ1ZSB0byB0dXJuIG9uIHRoZSBjb2xsaWRlciBmb3IgdGhlIGVudGl0eS5cbiAgICovXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHdpdGhDb2xsaXNpb25zOiBib29sZWFuID0gdHJ1ZVxuXG4gIC8qKlxuICAgKiBTZXQgdG8gdHJ1ZSB0byB0dXJuIG9uIHRoZSBQb2ludGVyRXZlbnRzIGJsb2NraW5nIGZvciB0aGUgZW50aXR5LlxuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgaXNQb2ludGVyQmxvY2tlcjogYm9vbGVhbiA9IHRydWVcblxuICAvKipcbiAgICogRGVmaW5lcyBpZiB0aGUgZW50aXR5IGFuZCBpdHMgY2hpbGRyZW4gc2hvdWxkIGJlIHJlbmRlcmVkXG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICB2aXNpYmxlOiBib29sZWFuID0gdHJ1ZVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQERpc3Bvc2FibGVDb21wb25lbnQoJ2VuZ2luZS5zaGFwZScsIENMQVNTX0lELkJPWF9TSEFQRSlcbmV4cG9ydCBjbGFzcyBCb3hTaGFwZSBleHRlbmRzIFNoYXBlIHtcbiAgLyoqXG4gICAqIFNldHMgdGhlIFVWIGNvb3JkaW5hdGVzIGZvciB0aGUgYm94LlxuICAgKiBVc2VkIHRvIG1hcCBzcGVjaWZpYyBwaWVjZXMgb2YgYSBNYXRlcmlhbCdzIHRleHR1cmUgaW50byB0aGUgYm94J3MgZ2VvbWV0cnkuXG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICB1dnM/OiBudW1iZXJbXVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQERpc3Bvc2FibGVDb21wb25lbnQoJ2VuZ2luZS5zaGFwZScsIENMQVNTX0lELlNQSEVSRV9TSEFQRSlcbmV4cG9ydCBjbGFzcyBTcGhlcmVTaGFwZSBleHRlbmRzIFNoYXBlIHt9XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5ARGlzcG9zYWJsZUNvbXBvbmVudCgnZW5naW5lLnNoYXBlJywgQ0xBU1NfSUQuQ0lSQ0xFX1NIQVBFKVxuZXhwb3J0IGNsYXNzIENpcmNsZVNoYXBlIGV4dGVuZHMgU2hhcGUge1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBzZWdtZW50cz86IG51bWJlclxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIGFyYz86IG51bWJlclxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQERpc3Bvc2FibGVDb21wb25lbnQoJ2VuZ2luZS5zaGFwZScsIENMQVNTX0lELlBMQU5FX1NIQVBFKVxuZXhwb3J0IGNsYXNzIFBsYW5lU2hhcGUgZXh0ZW5kcyBTaGFwZSB7XG4gIC8qKlxuICAgKiBTZXRzIHRoZSBob3Jpem9udGFsIGxlbmd0aCBvZiB0aGUgcGxhbmUuIERlZmF1bHRzIHRvIDEuXG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICB3aWR0aDogbnVtYmVyID0gMVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSB2ZXJ0aWNhbCBsZW5ndGggb2YgdGhlIHBsYW5lLiBEZWZhdWx0cyB0byAxLlxuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgaGVpZ2h0OiBudW1iZXIgPSAxXG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIFVWIGNvb3JkaW5hdGVzIGZvciB0aGUgcGxhbmUuXG4gICAqIFVzZWQgdG8gbWFwIHNwZWNpZmljIHBpZWNlcyBvZiBhIE1hdGVyaWFsJ3MgdGV4dHVyZSBpbnRvIHRoZSBwbGFuZSdzIGdlb21ldHJ5LlxuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgdXZzPzogbnVtYmVyW11cbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbkBEaXNwb3NhYmxlQ29tcG9uZW50KCdlbmdpbmUuc2hhcGUnLCBDTEFTU19JRC5DT05FX1NIQVBFKVxuZXhwb3J0IGNsYXNzIENvbmVTaGFwZSBleHRlbmRzIFNoYXBlIHtcbiAgLyoqXG4gICAqIFRoZSByYWRpdXMgb2YgdGhlIHRvcCBvZiBhIHRydW5jYXRlZCBjb25lLiBEZWZhdWx0cyB0byAwLlxuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgcmFkaXVzVG9wOiBudW1iZXIgPSAwXG5cbiAgLyoqXG4gICAqIFRoZSByYWRpdXMgb2YgdGhlIGJhc2Ugb2YgdGhlIGNvbmUuIERlZmF1bHRzIHRvIDEuXG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICByYWRpdXNCb3R0b206IG51bWJlciA9IDFcblxuICAvKipcbiAgICogU2V0cyB0aGUgbnVtYmVyIG9mIHJpbmdzIGFsb25nIHRoZSBjb25lIGhlaWdodCAocG9zaXRpdmUgaW50ZWdlcikuIERlZmF1bHRzIHRvIDEuXG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBzZWdtZW50c0hlaWdodDogbnVtYmVyID0gMVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBudW1iZXIgb2YgY29uZSBzaWRlcyAocG9zaXRpdmUgaW50ZWdlcikuIERlZmF1bHRzIHRvIDM2LlxuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgc2VnbWVudHNSYWRpYWw6IG51bWJlciA9IDM2XG5cbiAgLyoqXG4gICAqIEFkZHMgdHdvIGV4dHJhIGZhY2VzIHBlciBzdWJkaXZpc2lvbiB0byBlbmNsb3NlIHRoZSBjb25lIGFyb3VuZCBpdHMgaGVpZ2h0IGF4aXMuXG4gICAqIERlZmF1bHRzIHRvIGZhbHNlLlxuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgb3BlbkVuZGVkOiBib29sZWFuID0gZmFsc2VcblxuICAvKipcbiAgICogU2V0cyB0aGUgcmFkaXVzIG9mIHRoZSB0b3AgYW5kIGJvdHRvbSBjYXBzIGF0IG9uY2UuXG4gICAqXG4gICAqIFByb3BlcnRpZXMgYHJhZGl1c1RvcGAgYW5kIGByYWRpdXNCb3R0b21gIGFyZSBwcmlvcml0aXplZCBvdmVyIHRoaXMgb25lLlxuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgcmFkaXVzOiBudW1iZXIgfCBudWxsID0gbnVsbFxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSByYXRpbyAobWF4IDEpIHRvIGFwcGx5IHRvIHRoZSBjaXJjdW1mZXJlbmNlIHRvIHNsaWNlIHRoZSBjb25lLiBEZWZhdWx0cyB0byAzNjAuXG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBhcmM6IG51bWJlciA9IDM2MFxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQERpc3Bvc2FibGVDb21wb25lbnQoJ2VuZ2luZS5zaGFwZScsIENMQVNTX0lELkNZTElOREVSX1NIQVBFKVxuZXhwb3J0IGNsYXNzIEN5bGluZGVyU2hhcGUgZXh0ZW5kcyBTaGFwZSB7XG4gIC8qKlxuICAgKiBUaGUgcmFkaXVzIG9mIHRoZSB0b3Agb2YgdGhlIGN5bGluZGVyLiBEZWZhdWx0cyB0byAwLlxuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgcmFkaXVzVG9wOiBudW1iZXIgPSAxXG5cbiAgLyoqXG4gICAqIFRoZSByYWRpdXMgb2YgdGhlIGJhc2Ugb2YgdGhlIGN5bGluZGVyLiBEZWZhdWx0cyB0byAxLlxuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgcmFkaXVzQm90dG9tOiBudW1iZXIgPSAxXG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIG51bWJlciBvZiByaW5ncyBhbG9uZyB0aGUgY3lsaW5kZXIgaGVpZ2h0IChwb3NpdGl2ZSBpbnRlZ2VyKS4gRGVmYXVsdHMgdG8gMS5cbiAgICovXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHNlZ21lbnRzSGVpZ2h0OiBudW1iZXIgPSAxXG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIG51bWJlciBvZiBjeWxpbmRlciBzaWRlcyAocG9zaXRpdmUgaW50ZWdlcikuIERlZmF1bHRzIHRvIDM2LlxuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgc2VnbWVudHNSYWRpYWw6IG51bWJlciA9IDM2XG5cbiAgLyoqXG4gICAqIEFkZHMgdHdvIGV4dHJhIGZhY2VzIHBlciBzdWJkaXZpc2lvbiB0byBlbmNsb3NlIHRoZSBjeWxpbmRlciBhcm91bmQgaXRzIGhlaWdodCBheGlzLlxuICAgKiBEZWZhdWx0cyB0byBmYWxzZS5cbiAgICovXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIG9wZW5FbmRlZDogYm9vbGVhbiA9IGZhbHNlXG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHJhZGl1cyBvZiB0aGUgdG9wIGFuZCBib3R0b20gY2FwcyBhdCBvbmNlLlxuICAgKlxuICAgKiBQcm9wZXJ0aWVzIGByYWRpdXNUb3BgIGFuZCBgcmFkaXVzQm90dG9tYCBhcmUgcHJpb3JpdGl6ZWQgb3ZlciB0aGlzIG9uZS5cbiAgICovXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHJhZGl1czogbnVtYmVyIHwgbnVsbCA9IG51bGxcblxuICAvKipcbiAgICogU2V0cyB0aGUgcmF0aW8gKG1heCAxKSB0byBhcHBseSB0byB0aGUgY2lyY3VtZmVyZW5jZSB0byBzbGljZSB0aGUgY3lsaW5kZXIuIERlZmF1bHRzIHRvIDM2MC5cbiAgICovXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIGFyYzogbnVtYmVyID0gMzYwXG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5ARGlzcG9zYWJsZUNvbXBvbmVudCgnZW5naW5lLnNoYXBlJywgQ0xBU1NfSUQuR0xURl9TSEFQRSlcbmV4cG9ydCBjbGFzcyBHTFRGU2hhcGUgZXh0ZW5kcyBTaGFwZSB7XG4gIEBTaGFwZS5yZWFkb25seVxuICByZWFkb25seSBzcmMhOiBzdHJpbmdcblxuICBjb25zdHJ1Y3RvcihzcmM6IHN0cmluZykge1xuICAgIHN1cGVyKClcbiAgICB0aGlzLnNyYyA9IHNyY1xuICB9XG59XG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgZW51bSBQaWN0dXJlRnJhbWVTdHlsZSB7XG4gIENsYXNzaWMgPSAwLFxuICBCYXJvcXVlX09ybmFtZW50ID0gMSxcbiAgRGlhbW9uZF9Pcm5hbWVudCA9IDIsXG4gIE1pbmltYWxfV2lkZSA9IDMsXG4gIE1pbmltYWxfR3JleSA9IDQsXG4gIEJsb2NreSA9IDUsXG4gIEdvbGRfRWRnZXMgPSA2LFxuICBHb2xkX0NhcnZlZCA9IDcsXG4gIEdvbGRfV2lkZSA9IDgsXG4gIEdvbGRfUm91bmRlZCA9IDksXG4gIE1ldGFsX01lZGl1bSA9IDEwLFxuICBNZXRhbF9XaWRlID0gMTEsXG4gIE1ldGFsX1NsaW0gPSAxMixcbiAgTWV0YWxfUm91bmRlZCA9IDEzLFxuICBQaW5zID0gMTQsXG4gIE1pbmltYWxfQmxhY2sgPSAxNSxcbiAgTWluaW1hbF9XaGl0ZSA9IDE2LFxuICBUYXBlID0gMTcsXG4gIFdvb2RfU2xpbSA9IDE4LFxuICBXb29kX1dpZGUgPSAxOSxcbiAgV29vZF9Ud2lncyA9IDIwLFxuICBDYW52YXMgPSAyMSxcbiAgTm9uZSA9IDIyXG59XG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgdHlwZSBORlRTaGFwZUNvbnN0cnVjdG9yQXJncyA9IHtcbiAgY29sb3I/OiBDb2xvcjNcbiAgc3R5bGU/OiBQaWN0dXJlRnJhbWVTdHlsZVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQERpc3Bvc2FibGVDb21wb25lbnQoJ2VuZ2luZS5zaGFwZScsIENMQVNTX0lELk5GVF9TSEFQRSlcbmV4cG9ydCBjbGFzcyBORlRTaGFwZSBleHRlbmRzIFNoYXBlIHtcbiAgQFNoYXBlLnJlYWRvbmx5XG4gIHJlYWRvbmx5IHNyYyE6IHN0cmluZ1xuXG4gIEBTaGFwZS5yZWFkb25seVxuICByZWFkb25seSBzdHlsZSE6IFBpY3R1cmVGcmFtZVN0eWxlXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgY29sb3I6IENvbG9yM1xuXG4gIGNvbnN0cnVjdG9yKHNyYzogc3RyaW5nKVxuICBjb25zdHJ1Y3RvcihzcmM6IHN0cmluZywgY29sb3I6IENvbG9yMykgLy8gZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG4gIGNvbnN0cnVjdG9yKHNyYzogc3RyaW5nLCBhcmdzOiBORlRTaGFwZUNvbnN0cnVjdG9yQXJncylcbiAgY29uc3RydWN0b3Ioc3JjOiBzdHJpbmcsIGFyZ3M6IGFueSA9IHt9KSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMuc3JjID0gc3JjXG5cbiAgICBsZXQgY29sb3IgPSBuZXcgQ29sb3IzKDAuNjQwNDkxOCwgMC42MTE0NzIsIDAuODU4NDkwNilcbiAgICBsZXQgc3R5bGUgPSBQaWN0dXJlRnJhbWVTdHlsZS5DbGFzc2ljXG5cbiAgICAvLyBjaGVjayBpZiBhcmdzIGlzIGNvbG9yIChiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSlcbiAgICBpZiAoJ3InIGluIGFyZ3MpIHtcbiAgICAgIGNvbG9yID0gYXJnc1xuICAgIH0gZWxzZSBpZiAoYXJncyAhPT0gbnVsbCkge1xuICAgICAgaWYgKGFyZ3MuY29sb3IpIGNvbG9yID0gYXJncy5jb2xvclxuICAgICAgaWYgKGFyZ3Muc3R5bGUpIHN0eWxlID0gYXJncy5zdHlsZVxuICAgIH1cblxuICAgIHRoaXMuY29sb3IgPSBjb2xvclxuICAgIHRoaXMuc3R5bGUgPSBzdHlsZVxuICB9XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5ARGlzcG9zYWJsZUNvbXBvbmVudCgnZW5naW5lLnRleHR1cmUnLCBDTEFTU19JRC5URVhUVVJFKVxuZXhwb3J0IGNsYXNzIFRleHR1cmUgZXh0ZW5kcyBPYnNlcnZhYmxlQ29tcG9uZW50IHtcbiAgQE9ic2VydmFibGVDb21wb25lbnQucmVhZG9ubHlcbiAgcmVhZG9ubHkgc3JjITogc3RyaW5nXG5cbiAgLyoqXG4gICAqIEVuYWJsZXMgY3Jpc3BlciBpbWFnZXMgYmFzZWQgb24gdGhlIHByb3ZpZGVkIHNhbXBsaW5nIG1vZGUuXG4gICAqIHwgVmFsdWUgfCBUeXBlICAgICAgfFxuICAgKiB8LS0tLS0tLXwtLS0tLS0tLS0tLXxcbiAgICogfCAgICAgMCB8IE5FQVJFU1QgICB8XG4gICAqIHwgICAgIDEgfCBCSUxJTkVBUiAgfFxuICAgKiB8ICAgICAyIHwgVFJJTElORUFSIHxcbiAgICovXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LnJlYWRvbmx5XG4gIHJlYWRvbmx5IHNhbXBsaW5nTW9kZSE6IG51bWJlclxuXG4gIC8qKlxuICAgKiBFbmFibGVzIHRleHR1cmUgd3JhcHBpbmcgZm9yIHRoaXMgbWF0ZXJpYWwuXG4gICAqIHwgVmFsdWUgfCBUeXBlICAgICAgfFxuICAgKiB8LS0tLS0tLXwtLS0tLS0tLS0tLXxcbiAgICogfCAgICAgMCB8IENMQU1QICAgICB8XG4gICAqIHwgICAgIDEgfCBXUkFQICAgICAgfFxuICAgKiB8ICAgICAyIHwgTUlSUk9SICAgIHxcbiAgICovXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LnJlYWRvbmx5XG4gIHJlYWRvbmx5IHdyYXAhOiBudW1iZXJcblxuICAvKipcbiAgICogRGVmaW5lcyBpZiB0aGlzIHRleHR1cmUgaGFzIGFuIGFscGhhIGNoYW5uZWxcbiAgICovXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LnJlYWRvbmx5XG4gIHJlYWRvbmx5IGhhc0FscGhhITogYm9vbGVhblxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHNyYzogc3RyaW5nLFxuICAgIG9wdHM/OiBQYXJ0aWFsPFBpY2s8VGV4dHVyZSwgJ3NhbXBsaW5nTW9kZScgfCAnd3JhcCcgfCAnaGFzQWxwaGEnPj5cbiAgKSB7XG4gICAgc3VwZXIoKVxuXG4gICAgY29uc3QgYmFzZTY0VGVzdCA9IG5ldyBSZWdFeHAoJ2RhdGE6W2Etei1dKy9bYS16LV0rO2Jhc2U2NCcpXG4gICAgaWYgKHNyYy5sZW5ndGggPiAyMDQ4IHx8IGJhc2U2NFRlc3QudGVzdChzcmMpKSB7XG4gICAgICBsb2coXG4gICAgICAgICfimqDvuI/wn5qoIEJhc2U2NCB0ZXh0dXJlcyB3aWxsIGJlIGRlcHJlY2F0ZWQgaW4gdmVyc2lvbiA3IG9mIGRlY2VudHJhbGFuZC1lY3MnXG4gICAgICApXG4gICAgfVxuXG4gICAgdGhpcy5zcmMgPSBzcmNcblxuICAgIGlmIChvcHRzKSB7XG4gICAgICBmb3IgKGNvbnN0IGkgaW4gb3B0cykge1xuICAgICAgICBjb25zdCB0aGF0ID0gdGhpcyBhcyBhbnlcbiAgICAgICAgdGhhdFtpIGFzICdzYW1wbGluZ01vZGUnIHwgJ3dyYXAnIHwgJ2hhc0FscGhhJ10gPSAob3B0cyBhcyBhbnkpW2ldXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5AQ29tcG9uZW50KCdlbmdpbmUuYW5pbWF0b3InLCBDTEFTU19JRC5BTklNQVRJT04pXG5leHBvcnQgY2xhc3MgQW5pbWF0b3IgZXh0ZW5kcyBTaGFwZSB7XG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LnJlYWRvbmx5XG4gIHByaXZhdGUgc3RhdGVzOiBBbmltYXRpb25TdGF0ZVtdID0gW11cblxuICAvKipcbiAgICogQWRkcyBhbiBBbmltYXRpb25TdGF0ZSB0byB0aGUgYW5pbWF0aW9uIGxpc3RzLlxuICAgKi9cbiAgYWRkQ2xpcChjbGlwOiBBbmltYXRpb25TdGF0ZSkge1xuICAgIHRoaXMuc3RhdGVzLnB1c2goY2xpcClcbiAgICBjbGlwLm9uQ2hhbmdlKCgpID0+IHtcbiAgICAgIHRoaXMuZGlydHkgPSB0cnVlXG4gICAgfSlcblxuICAgIGNsaXAub3duZXIgPSB0aGlzXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBhbmltYXRpb24gY2xpcCBpbnN0YW5jZSBmb3IgdGhlIHNwZWNpZmllZCBjbGlwIG5hbWUuXG4gICAqIElmIHRoZSBjbGlwIGRvZXNuJ3QgZXhpc3QgYSBuZXcgb25lIHdpbGwgYmUgY3JlYXRlZC5cbiAgICovXG4gIGdldENsaXAoY2xpcE5hbWU6IHN0cmluZyk6IEFuaW1hdGlvblN0YXRlIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc3RhdGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBjbGlwID0gdGhpcy5zdGF0ZXNbaV1cbiAgICAgIGlmIChjbGlwLmNsaXAgPT09IGNsaXBOYW1lKSB7XG4gICAgICAgIHJldHVybiBjbGlwXG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgbmV3Q2xpcCA9IG5ldyBBbmltYXRpb25TdGF0ZShjbGlwTmFtZSlcbiAgICB0aGlzLmFkZENsaXAobmV3Q2xpcClcbiAgICByZXR1cm4gbmV3Q2xpcFxuICB9XG5cbiAgLyoqXG4gICAqIFJlc2V0cyBhbmQgcGF1c2VzIHRoZSBhbmltYXRpb24gc3RhdGUsIGlmIHRoZSBjbGlwIGlzIG51bGwgaXQgd2lsbCBzdG9wIGFsbCBhbmltYXRpb25zIG9uIHRoaXMgYW5pbWF0b3JcbiAgICovXG4gIHN0b3AoY2xpcD86IEFuaW1hdGlvblN0YXRlKSB7XG4gICAgaWYgKGNsaXApIHtcbiAgICAgIGNsaXAucGxheWluZyA9IGZhbHNlXG4gICAgICBjbGlwLnNob3VsZFJlc2V0ID0gdHJ1ZVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc3RhdGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGFuaW1hdGlvblN0YXRlID0gdGhpcy5zdGF0ZXNbaV1cbiAgICAgICAgdGhpcy5zdG9wKGFuaW1hdGlvblN0YXRlKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTdGFydHMgdGhlIGFuaW1hdGlvblxuICAgKi9cbiAgcGxheShjbGlwOiBBbmltYXRpb25TdGF0ZSwgcmVzZXQ6IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zdGF0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGFuaW1hdGlvblN0YXRlID0gdGhpcy5zdGF0ZXNbaV1cbiAgICAgIGlmIChhbmltYXRpb25TdGF0ZS5sYXllciA9PT0gY2xpcC5sYXllciAmJiBjbGlwICE9PSBhbmltYXRpb25TdGF0ZSkge1xuICAgICAgICB0aGlzLnBhdXNlKGFuaW1hdGlvblN0YXRlKVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChyZXNldCkgY2xpcC5zaG91bGRSZXNldCA9IHRydWVcbiAgICBjbGlwLnBsYXlpbmcgPSB0cnVlXG4gICAgY2xpcC5kaXJ0eSA9IHRydWVcbiAgICBjbGlwLmRhdGEubm9uY2UgPSBNYXRoLnJhbmRvbSgpXG4gIH1cblxuICAvKipcbiAgICogUGF1c2VzIHRoZSBhbmltYXRpb24gc3RhdGUsIGlmIHRoZSBjbGlwIGlzIG51bGwgaXQgd2lsbCBwYXVzZSBhbGwgYW5pbWF0aW9ucyBvbiB0aGlzIGFuaW1hdG9yXG4gICAqL1xuICBwYXVzZShjbGlwPzogQW5pbWF0aW9uU3RhdGUpIHtcbiAgICBpZiAoY2xpcCkge1xuICAgICAgY2xpcC5wbGF5aW5nID0gZmFsc2VcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnN0YXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBhbmltYXRpb25TdGF0ZSA9IHRoaXMuc3RhdGVzW2ldXG4gICAgICAgIHRoaXMucGF1c2UoYW5pbWF0aW9uU3RhdGUpXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5ARGlzcG9zYWJsZUNvbXBvbmVudCgnZW5naW5lLnNoYXBlJywgQ0xBU1NfSUQuT0JKX1NIQVBFKVxuZXhwb3J0IGNsYXNzIE9CSlNoYXBlIGV4dGVuZHMgU2hhcGUge1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5yZWFkb25seVxuICByZWFkb25seSBzcmMhOiBzdHJpbmdcblxuICBjb25zdHJ1Y3RvcihzcmM6IHN0cmluZykge1xuICAgIHN1cGVyKClcbiAgICB0aGlzLnNyYyA9IHNyY1xuICB9XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5ARGlzcG9zYWJsZUNvbXBvbmVudCgnZW5naW5lLmZvbnQnLCBDTEFTU19JRC5GT05UKVxuZXhwb3J0IGNsYXNzIEZvbnQgZXh0ZW5kcyBPYnNlcnZhYmxlQ29tcG9uZW50IHtcbiAgQE9ic2VydmFibGVDb21wb25lbnQucmVhZG9ubHlcbiAgcmVhZG9ubHkgc3JjITogc3RyaW5nXG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKHNyYzogc3RyaW5nID0gJycpIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy5zcmMgPSBzcmNcbiAgfVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGVudW0gRm9udHMge1xuICAvKiogQGRlcHJlY2F0ZWQgU2FuRnJhbmNpc2NvIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSBTYW5zU2VyaWYgaW5zdGVhZC4qL1xuICBTYW5GcmFuY2lzY28gPSAnYnVpbHRpbjpTRi1VSS1UZXh0LVJlZ3VsYXIgU0RGJyxcbiAgLyoqIEBkZXByZWNhdGVkIFNhbkZyYW5jaXNjb19IZWF2eSBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgU2Fuc1NlcmlmX0hlYXZ5IGluc3RlYWQuKi9cbiAgU2FuRnJhbmNpc2NvX0hlYXZ5ID0gJ2J1aWx0aW46U0YtVUktVGV4dC1IZWF2eSBTREYnLFxuICAvKiogQGRlcHJlY2F0ZWQgU2FuRnJhbmNpc2NvX1NlbWlib2xkIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSBTYW5zU2VyaWZfU2VtaUJvbGQgaW5zdGVhZC4qL1xuICBTYW5GcmFuY2lzY29fU2VtaWJvbGQgPSAnYnVpbHRpbjpTRi1VSS1UZXh0LVNlbWlib2xkIFNERicsXG4gIExpYmVyYXRpb25TYW5zID0gJ2J1aWx0aW46TGliZXJhdGlvblNhbnMgU0RGJyxcbiAgU2Fuc1NlcmlmID0gJ1NhbnNTZXJpZicsXG4gIFNhbnNTZXJpZl9IZWF2eSA9ICdTYW5zU2VyaWZfSGVhdnknLFxuICBTYW5zU2VyaWZfQm9sZCA9ICdTYW5zU2VyaWZfQm9sZCcsXG4gIFNhbnNTZXJpZl9TZW1pQm9sZCA9ICdTYW5zU2VyaWZfU2VtaUJvbGQnXG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5AQ29tcG9uZW50KCdlbmdpbmUudGV4dCcsIENMQVNTX0lELlRFWFRfU0hBUEUpXG5leHBvcnQgY2xhc3MgVGV4dFNoYXBlIGV4dGVuZHMgT2JzZXJ2YWJsZUNvbXBvbmVudCB7XG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIG91dGxpbmVXaWR0aDogbnVtYmVyID0gMFxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIG91dGxpbmVDb2xvcjogQ29sb3IzID0gbmV3IENvbG9yMygxLCAxLCAxKVxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIGNvbG9yOiBDb2xvcjMgPSBuZXcgQ29sb3IzKDEsIDEsIDEpXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgZm9udFNpemU6IG51bWJlciA9IDEwXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuY29tcG9uZW50XG4gIGZvbnQ/OiBGb250XG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgb3BhY2l0eTogbnVtYmVyID0gMS4wXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgdmFsdWU6IHN0cmluZyA9ICcnXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgbGluZVNwYWNpbmc6IHN0cmluZyA9ICcwcHgnXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgbGluZUNvdW50OiBudW1iZXIgPSAwXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgdGV4dFdyYXBwaW5nOiBib29sZWFuID0gZmFsc2VcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBzaGFkb3dCbHVyOiBudW1iZXIgPSAwXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgc2hhZG93T2Zmc2V0WDogbnVtYmVyID0gMFxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHNoYWRvd09mZnNldFk6IG51bWJlciA9IDBcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBzaGFkb3dDb2xvcjogQ29sb3IzID0gbmV3IENvbG9yMygxLCAxLCAxKVxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIGhUZXh0QWxpZ246IHN0cmluZyA9ICdjZW50ZXInXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgdlRleHRBbGlnbjogc3RyaW5nID0gJ2NlbnRlcidcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICB3aWR0aDogbnVtYmVyID0gMVxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIGhlaWdodDogbnVtYmVyID0gMVxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHBhZGRpbmdUb3A6IG51bWJlciA9IDBcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBwYWRkaW5nUmlnaHQ6IG51bWJlciA9IDBcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBwYWRkaW5nQm90dG9tOiBudW1iZXIgPSAwXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgcGFkZGluZ0xlZnQ6IG51bWJlciA9IDBcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBiaWxsYm9hcmQ6IGJvb2xlYW4gPSBmYWxzZVxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHZpc2libGU6IGJvb2xlYW4gPSB0cnVlXG5cbiAgY29uc3RydWN0b3IodmFsdWU/OiBzdHJpbmcpIHtcbiAgICBzdXBlcigpXG5cbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGVudW0gVHJhbnNwYXJlbmN5TW9kZSB7XG4gIE9QQVFVRSA9IDAsXG4gIEFMUEhBX1RFU1QgPSAxLFxuICBBTFBIQV9CTEVORCA9IDIsXG4gIEFMUEhBX1RFU1RfQU5EX0JMRU5EID0gMyxcbiAgQVVUTyA9IDRcbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbkBEaXNwb3NhYmxlQ29tcG9uZW50KCdlbmdpbmUubWF0ZXJpYWwnLCBDTEFTU19JRC5QQlJfTUFURVJJQUwpXG5leHBvcnQgY2xhc3MgTWF0ZXJpYWwgZXh0ZW5kcyBPYnNlcnZhYmxlQ29tcG9uZW50IHtcbiAgLyoqXG4gICAqIEN1dG9mZiBsZXZlbCBmb3IgQUxQSEFURVNUIG1vZGUuIFJhbmdlIGlzIGJldHdlZW4gMCBhbmQgMS5cbiAgICogRGVmYXVsdHMgdG8gMC41XG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBhbHBoYVRlc3Q/OiBudW1iZXIgPSAwLjVcblxuICAvKipcbiAgICogQUtBIERpZmZ1c2UgQ29sb3IgaW4gb3RoZXIgbm9tZW5jbGF0dXJlLlxuICAgKiBEZWZhdWx0cyB0byAjQ0NDQ0NDLlxuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgYWxiZWRvQ29sb3I/OiBDb2xvcjQgfCBDb2xvcjNcblxuICAvKipcbiAgICogVGhlIGNvbG9yIGVtaXR0ZWQgZnJvbSB0aGUgbWF0ZXJpYWwuXG4gICAqIERlZmF1bHRzIHRvIGJsYWNrLlxuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgZW1pc3NpdmVDb2xvcj86IENvbG9yM1xuXG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgdGhlIG1ldGFsbGljIHNjYWxhciBvZiB0aGUgbWV0YWxsaWMvcm91Z2huZXNzIHdvcmtmbG93LlxuICAgKiBDYW4gYWxzbyBiZSB1c2VkIHRvIHNjYWxlIHRoZSBtZXRhbG5lc3MgdmFsdWVzIG9mIHRoZSBtZXRhbGxpYyB0ZXh0dXJlLlxuICAgKiBEZWZhdWx0cyB0byAgMC41LlxuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgbWV0YWxsaWM/OiBudW1iZXJcblxuICAvKipcbiAgICogU3BlY2lmaWVzIHRoZSByb3VnaG5lc3Mgc2NhbGFyIG9mIHRoZSBtZXRhbGxpYy9yb3VnaG5lc3Mgd29ya2Zsb3cuXG4gICAqIENhbiBhbHNvIGJlIHVzZWQgdG8gc2NhbGUgdGhlIHJvdWdobmVzcyB2YWx1ZXMgb2YgdGhlIG1ldGFsbGljIHRleHR1cmUuXG4gICAqIERlZmF1bHRzIHRvICAwLjUuXG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICByb3VnaG5lc3M/OiBudW1iZXJcblxuICAvKipcbiAgICogQUtBIFNwZWN1bGFyIENvbG9yIGluIG90aGVyIG5vbWVuY2xhdHVyZS5cbiAgICogRGVmYXVsdHMgdG8gd2hpdGUuXG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICByZWZsZWN0aXZpdHlDb2xvcj86IENvbG9yM1xuXG4gIC8qKlxuICAgKiBJbnRlbnNpdHkgb2YgdGhlIGRpcmVjdCBsaWdodHMgZS5nLiB0aGUgZm91ciBsaWdodHMgYXZhaWxhYmxlIGluIHNjZW5lLlxuICAgKiBUaGlzIGltcGFjdHMgYm90aCB0aGUgZGlyZWN0IGRpZmZ1c2UgYW5kIHNwZWN1bGFyIGhpZ2hsaWdodHMuXG4gICAqIERlZmF1bHRzIHRvIDEuXG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBkaXJlY3RJbnRlbnNpdHk/OiBudW1iZXJcblxuICAvKipcbiAgICogQUtBIEdsb3NzaW5lc3MgaW4gb3RoZXIgbm9tZW5jbGF0dXJlLlxuICAgKiBEZWZhdWx0cyB0byAxLlxuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgbWljcm9TdXJmYWNlPzogbnVtYmVyXG5cbiAgLyoqXG4gICAqIEludGVuc2l0eSBvZiB0aGUgZW1pc3NpdmUgcGFydCBvZiB0aGUgbWF0ZXJpYWwuXG4gICAqIFRoaXMgaGVscHMgY29udHJvbGxpbmcgdGhlIGVtaXNzaXZlIGVmZmVjdCB3aXRob3V0IG1vZGlmeWluZyB0aGUgZW1pc3NpdmUgY29sb3IuXG4gICAqIERlZmF1bHRzIHRvIDEuXG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBlbWlzc2l2ZUludGVuc2l0eT86IG51bWJlclxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIGEgc3BlY2lhbCBjb250cm9sIGFsbG93aW5nIHRoZSByZWR1Y3Rpb24gb2YgdGhlIHNwZWN1bGFyIGhpZ2hsaWdodHMgY29taW5nIGZyb20gdGhlXG4gICAqIGZvdXIgbGlnaHRzIG9mIHRoZSBzY2VuZS4gVGhvc2UgaGlnaGxpZ2h0cyBtYXkgbm90IGJlIG5lZWRlZCBpbiBmdWxsIGVudmlyb25tZW50IGxpZ2h0aW5nLlxuICAgKiBEZWZhdWx0cyB0byAxLlxuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgc3BlY3VsYXJJbnRlbnNpdHk/OiBudW1iZXJcblxuICAvKipcbiAgICogVGV4dHVyZSBhcHBsaWVkIGFzIG1hdGVyaWFsLlxuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuY29tcG9uZW50XG4gIGFsYmVkb1RleHR1cmU/OiBUZXh0dXJlIHwgVmlkZW9UZXh0dXJlIHwgQXZhdGFyVGV4dHVyZVxuXG4gIC8qKlxuICAgKiBUZXh0dXJlIGFwcGxpZWQgYXMgb3BhY2l0eS4gRGVmYXVsdDogdGhlIHNhbWUgdGV4dHVyZSB1c2VkIGluIGFsYmVkb1RleHR1cmUuXG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5jb21wb25lbnRcbiAgYWxwaGFUZXh0dXJlPzogVGV4dHVyZSB8IFZpZGVvVGV4dHVyZSB8IEF2YXRhclRleHR1cmVcblxuICAvKipcbiAgICogRW1pc3NpdmUgdGV4dHVyZS5cbiAgICovXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmNvbXBvbmVudFxuICBlbWlzc2l2ZVRleHR1cmU/OiBUZXh0dXJlIHwgVmlkZW9UZXh0dXJlIHwgQXZhdGFyVGV4dHVyZVxuXG4gIC8qKlxuICAgKiBTdG9yZXMgc3VyZmFjZSBub3JtYWwgZGF0YSB1c2VkIHRvIGRpc3BsYWNlIGEgbWVzaCBpbiBhIHRleHR1cmUuXG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5jb21wb25lbnRcbiAgYnVtcFRleHR1cmU/OiBUZXh0dXJlIHwgQXZhdGFyVGV4dHVyZVxuXG4gIC8qKlxuICAgKiBBbGxvdyB0aGUgbWF0ZXJpYWwgdG8gY2FzdCBzaGFkb3dzIG92ZXIgb3RoZXIgb2JqZWN0c1xuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgY2FzdFNoYWRvd3M/OiBib29sZWFuID0gdHJ1ZVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSB0cmFuc3BhcmVuY3kgbW9kZSBvZiB0aGUgbWF0ZXJpYWwuXG4gICAqIERlZmF1bHRzIHRvIC0xLlxuICAgKlxuICAgKiB8IFZhbHVlIHwgVHlwZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAqIHwgLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHxcbiAgICogfCAwICAgICB8IE9QQVFVRSAgKGRlZmF1bHQpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgKiB8IDEgICAgIHwgQUxQSEFURVNUICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAqIHwgMiAgICAgfCBBTFBIQUJMRU5EICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICogfCAzICAgICB8IEFMUEhBVEVTVEFOREJMRU5EICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgKiB8IDQgICAgIHwgQVVUTyAoQUxQSEFCTEVORCBpZiBhbHBoYSBPUEFRVUUgb3RoZXJ3aXNlICAgICB8XG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICB0cmFuc3BhcmVuY3lNb2RlOiBUcmFuc3BhcmVuY3lNb2RlID0gVHJhbnNwYXJlbmN5TW9kZS5BVVRPXG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5ARGlzcG9zYWJsZUNvbXBvbmVudCgnZW5naW5lLm1hdGVyaWFsJywgQ0xBU1NfSUQuQkFTSUNfTUFURVJJQUwpXG5leHBvcnQgY2xhc3MgQmFzaWNNYXRlcmlhbCBleHRlbmRzIE9ic2VydmFibGVDb21wb25lbnQge1xuICAvKipcbiAgICogVGhlIHNvdXJjZSBvZiB0aGUgdGV4dHVyZSBpbWFnZS5cbiAgICovXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmNvbXBvbmVudFxuICB0ZXh0dXJlPzogVGV4dHVyZSB8IFZpZGVvVGV4dHVyZSB8IEF2YXRhclRleHR1cmVcblxuICAvKipcbiAgICogQSBudW1iZXIgYmV0d2VlbiAwIGFuZCAxLlxuICAgKiBBbnkgcGl4ZWwgd2l0aCBhbiBhbHBoYSBsb3dlciB0aGFuIHRoaXMgdmFsdWUgd2lsbCBiZSBzaG93biBhcyB0cmFuc3BhcmVudC5cbiAgICovXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIGFscGhhVGVzdDogbnVtYmVyID0gMC41XG5cbiAgLyoqXG4gICAqIEFsbG93IHRoZSBtYXRlcmlhbCB0byBjYXN0IHNoYWRvd3Mgb3ZlciBvdGhlciBvYmplY3RzXG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBjYXN0U2hhZG93cz86IGJvb2xlYW4gPSB0cnVlXG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgT25VVUlERXZlbnQ8VCBleHRlbmRzIGtleW9mIElFdmVudHM+IGV4dGVuZHMgT2JzZXJ2YWJsZUNvbXBvbmVudCB7XG4gIC8vIEBpbnRlcm5hbFxuICByZWFkb25seSB0eXBlOiBzdHJpbmcgfCB1bmRlZmluZWRcblxuICAvLyBAaW50ZXJuYWxcbiAgcmVhZG9ubHkgdXVpZDogc3RyaW5nID0gbmV3SWQoJ1VVSUQnKVxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIGNhbGxiYWNrITogKGV2ZW50OiBhbnkpID0+IHZvaWRcblxuICBjb25zdHJ1Y3RvcihjYWxsYmFjazogKGV2ZW50OiBJRXZlbnRzW1RdKSA9PiB2b2lkKSB7XG4gICAgc3VwZXIoKVxuXG4gICAgaWYgKCFjYWxsYmFjayB8fCAhKCdhcHBseScgaW4gY2FsbGJhY2spIHx8ICEoJ2NhbGwnIGluIGNhbGxiYWNrKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYWxsYmFjayBpcyBub3QgYSBmdW5jdGlvbicpXG4gICAgfVxuXG4gICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrXG4gIH1cblxuICBzdGF0aWMgdXVpZEV2ZW50KHRhcmdldDogT2JzZXJ2YWJsZUNvbXBvbmVudCwgcHJvcGVydHlLZXk6IHN0cmluZykge1xuICAgIGlmIChkZWxldGUgKHRhcmdldCBhcyBhbnkpW3Byb3BlcnR5S2V5XSkge1xuICAgICAgY29uc3QgY29tcG9uZW50U3ltYm9sID0gcHJvcGVydHlLZXkgKyAnXycgKyBNYXRoLnJhbmRvbSgpXG4gICAgICA7KHRhcmdldCBhcyBhbnkpW2NvbXBvbmVudFN5bWJvbF0gPSB1bmRlZmluZWRcblxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgY29tcG9uZW50U3ltYm9sLCB7XG4gICAgICAgIC4uLk9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBjb21wb25lbnRTeW1ib2wpLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZVxuICAgICAgfSlcblxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXkudG9TdHJpbmcoKSwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpc1tjb21wb25lbnRTeW1ib2xdXG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgY29uc3Qgb2xkVmFsdWUgPSB0aGlzW2NvbXBvbmVudFN5bWJvbF1cblxuICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgT25VVUlERXZlbnQpIHtcbiAgICAgICAgICAgICAgdGhpcy5kYXRhW3Byb3BlcnR5S2V5XSA9IHZhbHVlLnV1aWRcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndmFsdWUgaXMgbm90IGFuIE9uVVVJREV2ZW50JylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5kYXRhW3Byb3BlcnR5S2V5XSA9IG51bGxcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzW2NvbXBvbmVudFN5bWJvbF0gPSB2YWx1ZVxuXG4gICAgICAgICAgaWYgKHZhbHVlICE9PSBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IHRydWVcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnN1YnNjcmlwdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zW2ldKHByb3BlcnR5S2V5LCB2YWx1ZSwgb2xkVmFsdWUpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHRvSlNPTigpIHtcbiAgICByZXR1cm4geyB1dWlkOiB0aGlzLnV1aWQsIHR5cGU6IHRoaXMudHlwZSB9XG4gIH1cbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBPblBvaW50ZXJVVUlERXZlbnQ8XG4gIFQgZXh0ZW5kcyBrZXlvZiBJRXZlbnRzXG4+IGV4dGVuZHMgT25VVUlERXZlbnQ8VD4ge1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBidXR0b246IEFjdGlvbkJ1dHRvbiA9IEFjdGlvbkJ1dHRvbi5BTllcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBob3ZlclRleHQ6IHN0cmluZyA9ICdJbnRlcmFjdCdcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBkaXN0YW5jZTogbnVtYmVyID0gMTBcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBzaG93RmVlZGJhY2s6IGJvb2xlYW4gPSB0cnVlXG5cbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB7XG4gICAgICB1dWlkOiB0aGlzLnV1aWQsXG4gICAgICB0eXBlOiB0aGlzLnR5cGUsXG4gICAgICBidXR0b246IHRoaXMuYnV0dG9uLFxuICAgICAgaG92ZXJUZXh0OiB0aGlzLmhvdmVyVGV4dCxcbiAgICAgIGRpc3RhbmNlOiB0aGlzLmRpc3RhbmNlLFxuICAgICAgc2hvd0ZlZWRiYWNrOiB0aGlzLnNob3dGZWVkYmFja1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5AQ29tcG9uZW50KCdlbmdpbmUub25Qb2ludGVyTG9jaycsIENMQVNTX0lELlVVSURfQ0FMTEJBQ0spXG5leHBvcnQgY2xhc3MgT25Qb2ludGVyTG9jayBleHRlbmRzIE9uVVVJREV2ZW50PCdvblBvaW50ZXJMb2NrJz4ge1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5yZWFkb25seVxuICByZWFkb25seSB0eXBlOiBzdHJpbmcgPSAnb25Qb2ludGVyTG9jaydcbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbkBDb21wb25lbnQoJ2VuZ2luZS5vbkFuaW1hdGlvbkVuZCcsIENMQVNTX0lELlVVSURfQ0FMTEJBQ0spXG5leHBvcnQgY2xhc3MgT25BbmltYXRpb25FbmQgZXh0ZW5kcyBPblVVSURFdmVudDwnb25BbmltYXRpb25FbmQnPiB7XG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LnJlYWRvbmx5XG4gIHJlYWRvbmx5IHR5cGU6IHN0cmluZyA9ICdvbkFuaW1hdGlvbkVuZCdcbn1cblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuQENvbXBvbmVudCgnZW5naW5lLnNtYXJ0SXRlbScsIENMQVNTX0lELlNNQVJUX0lURU0pXG5leHBvcnQgY2xhc3MgU21hcnRJdGVtIGV4dGVuZHMgT2JzZXJ2YWJsZUNvbXBvbmVudCB7fVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQERpc3Bvc2FibGVDb21wb25lbnQoJ2VuZ2luZS5WaWRlb0NsaXAnLCBDTEFTU19JRC5WSURFT19DTElQKVxuZXhwb3J0IGNsYXNzIFZpZGVvQ2xpcCBleHRlbmRzIE9ic2VydmFibGVDb21wb25lbnQge1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5yZWFkb25seVxuICByZWFkb25seSB1cmw6IHN0cmluZ1xuXG4gIGNvbnN0cnVjdG9yKHVybDogc3RyaW5nKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMudXJsID0gdXJsXG4gIH1cbn1cblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCBlbnVtIFZpZGVvU3RhdHVzIHtcbiAgTk9ORSA9IDAsXG4gIEVSUk9SID0gMSxcbiAgTE9BRElORyA9IDIsXG4gIFJFQURZID0gMyxcbiAgUExBWUlORyA9IDQsXG4gIEJVRkZFUklORyA9IDVcbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbkBEaXNwb3NhYmxlQ29tcG9uZW50KCdlbmdpbmUuVmlkZW9UZXh0dXJlJywgQ0xBU1NfSUQuVklERU9fVEVYVFVSRSlcbmV4cG9ydCBjbGFzcyBWaWRlb1RleHR1cmUgZXh0ZW5kcyBPYnNlcnZhYmxlQ29tcG9uZW50IHtcbiAgQE9ic2VydmFibGVDb21wb25lbnQucmVhZG9ubHlcbiAgcmVhZG9ubHkgdmlkZW9DbGlwSWQ6IHN0cmluZ1xuXG4gIC8qKlxuICAgKiBFbmFibGVzIGNyaXNwZXIgaW1hZ2VzIGJhc2VkIG9uIHRoZSBwcm92aWRlZCBzYW1wbGluZyBtb2RlLlxuICAgKiB8IFZhbHVlIHwgVHlwZSAgICAgIHxcbiAgICogfC0tLS0tLS18LS0tLS0tLS0tLS18XG4gICAqIHwgICAgIDEgfCBORUFSRVNUICAgfFxuICAgKiB8ICAgICAyIHwgQklMSU5FQVIgIHxcbiAgICogfCAgICAgMyB8IFRSSUxJTkVBUiB8XG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5yZWFkb25seVxuICByZWFkb25seSBzYW1wbGluZ01vZGUhOiBudW1iZXJcblxuICAvKipcbiAgICogRW5hYmxlcyB0ZXh0dXJlIHdyYXBwaW5nIGZvciB0aGlzIG1hdGVyaWFsLlxuICAgKiB8IFZhbHVlIHwgVHlwZSAgICAgIHxcbiAgICogfC0tLS0tLS18LS0tLS0tLS0tLS18XG4gICAqIHwgICAgIDEgfCBDTEFNUCAgICAgfFxuICAgKiB8ICAgICAyIHwgV1JBUCAgICAgIHxcbiAgICogfCAgICAgMyB8IE1JUlJPUiAgICB8XG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5yZWFkb25seVxuICByZWFkb25seSB3cmFwITogbnVtYmVyXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgdm9sdW1lOiBudW1iZXIgPSAxXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgcGxheWJhY2tSYXRlOiBudW1iZXIgPSAxXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgbG9vcDogYm9vbGVhbiA9IGZhbHNlXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgc2VlazogbnVtYmVyID0gLTFcblxuICBwcml2YXRlIF9wb3NpdGlvbjogbnVtYmVyID0gLTFcbiAgcHJpdmF0ZSBfdmlkZW9MZW5ndGg6IG51bWJlciA9IC0xXG4gIHByaXZhdGUgX3N0YXR1czogVmlkZW9TdGF0dXMgPSBWaWRlb1N0YXR1cy5OT05FXG5cbiAgLyoqXG4gICAqIElzIHRoaXMgVmlkZW9UZXh0dXJlIHBsYXlpbmc/XG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBwbGF5aW5nOiBib29sZWFuID0gZmFsc2VcblxuICBjb25zdHJ1Y3RvcihcbiAgICB2aWRlb0NsaXA6IFZpZGVvQ2xpcCxcbiAgICBvcHRzPzogUGFydGlhbDxQaWNrPFZpZGVvVGV4dHVyZSwgJ3NhbXBsaW5nTW9kZScgfCAnd3JhcCc+PlxuICApIHtcbiAgICBzdXBlcigpXG5cbiAgICBpZiAoISh2aWRlb0NsaXAgaW5zdGFuY2VvZiBWaWRlb0NsaXApKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBUcnlpbmcgdG8gY3JlYXRlIFZpZGVvVGV4dHVyZShWaWRlb0NsaXApIHdpdGggYW4gaW52YWxpZCBWaWRlb0NsaXBgXG4gICAgICApXG4gICAgfVxuICAgIHRoaXMudmlkZW9DbGlwSWQgPSBnZXRDb21wb25lbnRJZCh2aWRlb0NsaXAgYXMgYW55KVxuXG4gICAgaWYgKG9wdHMpIHtcbiAgICAgIGZvciAoY29uc3QgaSBpbiBvcHRzKSB7XG4gICAgICAgIGNvbnN0IHRoYXQgPSB0aGlzIGFzIGFueVxuICAgICAgICB0aGF0W2kgYXMgJ3NhbXBsaW5nTW9kZScgfCAnd3JhcCddID0gKG9wdHMgYXMgYW55KVtpXVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHBsYXkoKSB7XG4gICAgdGhpcy5wbGF5aW5nID0gdHJ1ZVxuICB9XG5cbiAgcGF1c2UoKSB7XG4gICAgdGhpcy5wbGF5aW5nID0gZmFsc2VcbiAgfVxuXG4gIHJlc2V0KCkge1xuICAgIHRoaXMuc2Vla1RpbWUoMClcbiAgICB0aGlzLnBhdXNlKClcbiAgfVxuXG4gIHNlZWtUaW1lKHNlY29uZHM6IG51bWJlcikge1xuICAgIHRoaXMuc2VlayA9IHNlY29uZHNcbiAgICB0aGlzLmRpcnR5ID0gdHJ1ZVxuICAgIHRoaXMuZGF0YS5ub25jZSA9IE1hdGgucmFuZG9tKClcbiAgfVxuXG4gIHRvSlNPTigpIHtcbiAgICBpZiAodGhpcy5zZWVrID49IDApIHtcbiAgICAgIC8vIHRoZSBzZWVrIHZhbHVlIHdhcyBjaGFuZ2VkL3VzZWRcbiAgICAgIGNvbnN0IHJldCA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoc3VwZXIudG9KU09OKCkpKVxuICAgICAgdGhpcy5zZWVrID0gLTFcbiAgICAgIHJldHVybiByZXRcbiAgICB9XG5cbiAgICByZXR1cm4gc3VwZXIudG9KU09OKClcbiAgfVxuXG4gIHVwZGF0ZSh2aWRlb0V2ZW50OiBJRXZlbnRzWyd2aWRlb0V2ZW50J10pIHtcbiAgICBpZiAodmlkZW9FdmVudC52aWRlb0NsaXBJZCA9PT0gdGhpcy52aWRlb0NsaXBJZCkge1xuICAgICAgdGhpcy5fc3RhdHVzID0gKHZpZGVvRXZlbnQudmlkZW9TdGF0dXMgYXMgVmlkZW9TdGF0dXMpIHx8IFZpZGVvU3RhdHVzLk5PTkVcbiAgICAgIHRoaXMuX3ZpZGVvTGVuZ3RoID0gdmlkZW9FdmVudC50b3RhbFZpZGVvTGVuZ3RoXG4gICAgICB0aGlzLl9wb3NpdGlvbiA9IHZpZGVvRXZlbnQuY3VycmVudE9mZnNldFxuICAgIH1cbiAgfVxuXG4gIGdldCBwb3NpdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fcG9zaXRpb25cbiAgfVxuXG4gIGdldCB2aWRlb0xlbmd0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmlkZW9MZW5ndGhcbiAgfVxuXG4gIGdldCBzdGF0dXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3N0YXR1c1xuICB9XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5AQ29tcG9uZW50KCdlbmdpbmUuY2FtZXJhTW9kZUFyZWEnLCBDTEFTU19JRC5DQU1FUkFfTU9ERV9BUkVBKVxuZXhwb3J0IGNsYXNzIENhbWVyYU1vZGVBcmVhIGV4dGVuZHMgT2JzZXJ2YWJsZUNvbXBvbmVudCB7XG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIGFyZWEhOiBBcmVhXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgY2FtZXJhTW9kZSE6IENhbWVyYU1vZGVcblxuICBjb25zdHJ1Y3RvcihhcmdzOiB7IGFyZWE6IEFyZWE7IGNhbWVyYU1vZGU6IENhbWVyYU1vZGUgfSkge1xuICAgIHN1cGVyKClcbiAgICB0aGlzLmFyZWEgPSBhcmdzLmFyZWFcbiAgICB0aGlzLmNhbWVyYU1vZGUgPSBhcmdzLmNhbWVyYU1vZGVcbiAgfVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQERpc3Bvc2FibGVDb21wb25lbnQoJ2VuZ2luZS50ZXh0dXJlJywgQ0xBU1NfSUQuQVZBVEFSX1RFWFRVUkUpXG5leHBvcnQgY2xhc3MgQXZhdGFyVGV4dHVyZSBleHRlbmRzIE9ic2VydmFibGVDb21wb25lbnQge1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5yZWFkb25seVxuICByZWFkb25seSB1c2VySWQhOiBzdHJpbmdcblxuICAvKipcbiAgICogRW5hYmxlcyBjcmlzcGVyIGltYWdlcyBiYXNlZCBvbiB0aGUgcHJvdmlkZWQgc2FtcGxpbmcgbW9kZS5cbiAgICogfCBWYWx1ZSB8IFR5cGUgICAgICB8XG4gICAqIHwtLS0tLS0tfC0tLS0tLS0tLS0tfFxuICAgKiB8ICAgICAwIHwgTkVBUkVTVCAgIHxcbiAgICogfCAgICAgMSB8IEJJTElORUFSICB8XG4gICAqIHwgICAgIDIgfCBUUklMSU5FQVIgfFxuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQucmVhZG9ubHlcbiAgcmVhZG9ubHkgc2FtcGxpbmdNb2RlITogbnVtYmVyXG5cbiAgLyoqXG4gICAqIEVuYWJsZXMgdGV4dHVyZSB3cmFwcGluZyBmb3IgdGhpcyBtYXRlcmlhbC5cbiAgICogfCBWYWx1ZSB8IFR5cGUgICAgICB8XG4gICAqIHwtLS0tLS0tfC0tLS0tLS0tLS0tfFxuICAgKiB8ICAgICAwIHwgQ0xBTVAgICAgIHxcbiAgICogfCAgICAgMSB8IFdSQVAgICAgICB8XG4gICAqIHwgICAgIDIgfCBNSVJST1IgICAgfFxuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQucmVhZG9ubHlcbiAgcmVhZG9ubHkgd3JhcCE6IG51bWJlclxuXG4gIC8qKlxuICAgKiBEZWZpbmVzIGlmIHRoaXMgdGV4dHVyZSBoYXMgYW4gYWxwaGEgY2hhbm5lbFxuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQucmVhZG9ubHlcbiAgcmVhZG9ubHkgaGFzQWxwaGEhOiBib29sZWFuXG5cbiAgY29uc3RydWN0b3IoXG4gICAgdXNlcklkOiBzdHJpbmcsXG4gICAgb3B0cz86IFBhcnRpYWw8UGljazxBdmF0YXJUZXh0dXJlLCAnc2FtcGxpbmdNb2RlJyB8ICd3cmFwJyB8ICdoYXNBbHBoYSc+PlxuICApIHtcbiAgICBzdXBlcigpXG5cbiAgICB0aGlzLnVzZXJJZCA9IHVzZXJJZFxuXG4gICAgaWYgKG9wdHMpIHtcbiAgICAgIGZvciAoY29uc3QgaSBpbiBvcHRzKSB7XG4gICAgICAgIGNvbnN0IHRoYXQgPSB0aGlzIGFzIGFueVxuICAgICAgICB0aGF0W2kgYXMgJ3NhbXBsaW5nTW9kZScgfCAnd3JhcCcgfCAnaGFzQWxwaGEnXSA9IChvcHRzIGFzIGFueSlbaV1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IFZlY3RvcjMsIFF1YXRlcm5pb24gfSBmcm9tICdAZGNsL2Vjcy1tYXRoJ1xuXG5pbXBvcnQgeyBDYW1lcmFNb2RlIH0gZnJvbSAnLi9UeXBlcydcblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBDYW1lcmEge1xuICAvLyBAaW50ZXJuYWxcbiAgcHJpdmF0ZSBzdGF0aWMgX2luc3RhbmNlOiBDYW1lcmFcblxuICBzdGF0aWMgZ2V0IGluc3RhbmNlKCk6IENhbWVyYSB7XG4gICAgaWYgKCFDYW1lcmEuX2luc3RhbmNlKSB7XG4gICAgICBDYW1lcmEuX2luc3RhbmNlID0gbmV3IENhbWVyYSgpXG4gICAgfVxuICAgIHJldHVybiBDYW1lcmEuX2luc3RhbmNlXG4gIH1cblxuICAvKiogQ2FtZXJhIHBvc2l0aW9uLCByZWxhdGl2ZSB0byB0aGUgcGFyY2VsLiAqL1xuICBwdWJsaWMgcmVhZG9ubHkgcG9zaXRpb246IFZlY3RvcjMgPSBuZXcgVmVjdG9yMygpXG4gIC8qKiBDYW1lcmEgcm90YXRpb24gKi9cbiAgcHVibGljIHJlYWRvbmx5IHJvdGF0aW9uOiBRdWF0ZXJuaW9uID0gbmV3IFF1YXRlcm5pb24oKVxuXG4gIC8qKiBGZWV0IHBvc2l0aW9uLCByZWxhdGl2ZSB0byB0aGUgcGFyY2VsLiAgKi9cbiAgcHVibGljIHJlYWRvbmx5IGZlZXRQb3NpdGlvbjogVmVjdG9yMyA9IG5ldyBWZWN0b3IzKClcbiAgLyoqIENhbWVyYSBwb3NpdGlvbiwgYWJzb2x1dGUuICovXG4gIHB1YmxpYyByZWFkb25seSB3b3JsZFBvc2l0aW9uOiBWZWN0b3IzID0gbmV3IFZlY3RvcjMoKVxuXG4gIC8qKiBQbGF5ZXIgaGVpZ2h0LiAqL1xuICBnZXQgcGxheWVySGVpZ2h0KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3BsYXllckhlaWdodFxuICB9XG5cbiAgLyoqIEBkZXByZWNhdGVkIFVzZSBvbkNhbWVyYU1vZGVDaGFuZ2VkT2JzZXJ2YWJsZSBPYnNlcnZhYmxlIGluc3RlYWQuICovXG4gIGdldCBjYW1lcmFNb2RlKCk6IENhbWVyYU1vZGUge1xuICAgIHJldHVybiB0aGlzLl9jYW1lcmFNb2RlXG4gIH1cblxuICAvLyBAaW50ZXJuYWxcbiAgcHJpdmF0ZSBsYXN0RXZlbnRQb3NpdGlvbjogUmVhZE9ubHlWZWN0b3IzID0geyB4OiAwLCB5OiAwLCB6OiAwIH1cbiAgLy8gQGludGVybmFsXG4gIHByaXZhdGUgbGFzdEV2ZW50V29ybGRQb3NpdGlvbjogUmVhZE9ubHlWZWN0b3IzID0geyB4OiAwLCB5OiAwLCB6OiAwIH1cblxuICAvLyBAaW50ZXJuYWxcbiAgcHJpdmF0ZSBsYXN0RXZlbnRSb3RhdGlvbjogUmVhZE9ubHlRdWF0ZXJuaW9uID0geyB4OiAwLCB5OiAwLCB6OiAwLCB3OiAxLjAgfVxuXG4gIC8vIEBpbnRlcm5hbFxuICBwcml2YXRlIF9wbGF5ZXJIZWlnaHQ6IG51bWJlciA9IDEuNlxuICAvLyBAaW50ZXJuYWxcbiAgcHJpdmF0ZSBfY2FtZXJhTW9kZTogQ2FtZXJhTW9kZSA9IENhbWVyYU1vZGUuVGhpcmRQZXJzb25cblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBpZiAodHlwZW9mIGRjbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGRjbC5zdWJzY3JpYmUoJ3Bvc2l0aW9uQ2hhbmdlZCcpXG4gICAgICBkY2wuc3Vic2NyaWJlKCdyb3RhdGlvbkNoYW5nZWQnKVxuICAgICAgZGNsLnN1YnNjcmliZSgnY2FtZXJhTW9kZUNoYW5nZWQnKVxuXG4gICAgICBkY2wub25FdmVudCgoZXZlbnQpID0+IHtcbiAgICAgICAgc3dpdGNoIChldmVudC50eXBlKSB7XG4gICAgICAgICAgY2FzZSAncG9zaXRpb25DaGFuZ2VkJzpcbiAgICAgICAgICAgIHRoaXMucG9zaXRpb25DaGFuZ2VkKGV2ZW50LmRhdGEgYXMgYW55KVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICBjYXNlICdyb3RhdGlvbkNoYW5nZWQnOlxuICAgICAgICAgICAgdGhpcy5yb3RhdGlvbkNoYW5nZWQoZXZlbnQuZGF0YSBhcyBhbnkpXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIGNhc2UgJ2NhbWVyYU1vZGVDaGFuZ2VkJzpcbiAgICAgICAgICAgIHRoaXMuY2FtZXJhTW9kZUNoYW5nZWQoZXZlbnQuZGF0YSBhcyBhbnkpXG4gICAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLnBvc2l0aW9uLCAneCcsIHtcbiAgICAgIGdldDogKCkgPT4gdGhpcy5sYXN0RXZlbnRQb3NpdGlvbi54XG4gICAgfSlcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLnBvc2l0aW9uLCAneScsIHtcbiAgICAgIGdldDogKCkgPT4gdGhpcy5sYXN0RXZlbnRQb3NpdGlvbi55XG4gICAgfSlcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLnBvc2l0aW9uLCAneicsIHtcbiAgICAgIGdldDogKCkgPT4gdGhpcy5sYXN0RXZlbnRQb3NpdGlvbi56XG4gICAgfSlcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLndvcmxkUG9zaXRpb24sICd4Jywge1xuICAgICAgZ2V0OiAoKSA9PiB0aGlzLmxhc3RFdmVudFdvcmxkUG9zaXRpb24ueFxuICAgIH0pXG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcy53b3JsZFBvc2l0aW9uLCAneScsIHtcbiAgICAgIGdldDogKCkgPT4gdGhpcy5sYXN0RXZlbnRXb3JsZFBvc2l0aW9uLnlcbiAgICB9KVxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMud29ybGRQb3NpdGlvbiwgJ3onLCB7XG4gICAgICBnZXQ6ICgpID0+IHRoaXMubGFzdEV2ZW50V29ybGRQb3NpdGlvbi56XG4gICAgfSlcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLmZlZXRQb3NpdGlvbiwgJ3gnLCB7XG4gICAgICBnZXQ6ICgpID0+IHRoaXMubGFzdEV2ZW50UG9zaXRpb24ueFxuICAgIH0pXG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcy5mZWV0UG9zaXRpb24sICd5Jywge1xuICAgICAgZ2V0OiAoKSA9PiB0aGlzLmxhc3RFdmVudFBvc2l0aW9uLnkgLSB0aGlzLnBsYXllckhlaWdodFxuICAgIH0pXG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcy5mZWV0UG9zaXRpb24sICd6Jywge1xuICAgICAgZ2V0OiAoKSA9PiB0aGlzLmxhc3RFdmVudFBvc2l0aW9uLnpcbiAgICB9KVxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMucm90YXRpb24sICd4Jywge1xuICAgICAgZ2V0OiAoKSA9PiB0aGlzLmxhc3RFdmVudFJvdGF0aW9uLnhcbiAgICB9KVxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMucm90YXRpb24sICd5Jywge1xuICAgICAgZ2V0OiAoKSA9PiB0aGlzLmxhc3RFdmVudFJvdGF0aW9uLnlcbiAgICB9KVxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMucm90YXRpb24sICd6Jywge1xuICAgICAgZ2V0OiAoKSA9PiB0aGlzLmxhc3RFdmVudFJvdGF0aW9uLnpcbiAgICB9KVxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMucm90YXRpb24sICd3Jywge1xuICAgICAgZ2V0OiAoKSA9PiB0aGlzLmxhc3RFdmVudFJvdGF0aW9uLndcbiAgICB9KVxuICB9XG5cbiAgLy8gQGludGVybmFsXG4gIHByaXZhdGUgcG9zaXRpb25DaGFuZ2VkKGU6IElFdmVudHNbJ3Bvc2l0aW9uQ2hhbmdlZCddKSB7XG4gICAgdGhpcy5sYXN0RXZlbnRQb3NpdGlvbiA9IGUucG9zaXRpb25cbiAgICB0aGlzLmxhc3RFdmVudFdvcmxkUG9zaXRpb24gPSBlLmNhbWVyYVBvc2l0aW9uXG4gICAgdGhpcy5fcGxheWVySGVpZ2h0ID0gZS5wbGF5ZXJIZWlnaHRcbiAgfVxuXG4gIC8vIEBpbnRlcm5hbFxuICBwcml2YXRlIHJvdGF0aW9uQ2hhbmdlZChlOiBJRXZlbnRzWydyb3RhdGlvbkNoYW5nZWQnXSkge1xuICAgIHRoaXMubGFzdEV2ZW50Um90YXRpb24gPSBlLnF1YXRlcm5pb25cbiAgfVxuXG4gIC8vIEBpbnRlcm5hbFxuICBwcml2YXRlIGNhbWVyYU1vZGVDaGFuZ2VkKGU6IElFdmVudHNbJ2NhbWVyYU1vZGVDaGFuZ2VkJ10pIHtcbiAgICB0aGlzLl9jYW1lcmFNb2RlID0gZS5jYW1lcmFNb2RlXG4gIH1cbn1cbiIsImltcG9ydCB7IFZlY3RvcjMsIE1hdHJpeCB9IGZyb20gJ0BkY2wvZWNzLW1hdGgnXG5cbmltcG9ydCB7IFJheWNhc3RSZXNwb25zZSB9IGZyb20gJy4vRXZlbnRzJ1xuaW1wb3J0IHsgdXVpZCwgbG9nIH0gZnJvbSAnLi4vZWNzL2hlbHBlcnMnXG5cbmltcG9ydCB7IENhbWVyYSB9IGZyb20gJy4vQ2FtZXJhJ1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHR5cGUgUXVlcnlUeXBlID1cbiAgfCAnSGl0Rmlyc3QnXG4gIHwgJ0hpdEFsbCdcbiAgfCAnSGl0Rmlyc3RBdmF0YXInXG4gIHwgJ0hpdEFsbEF2YXRhcnMnXG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmVudW0gUXVlcnlQcmVmaXgge1xuICBIaXRGaXJzdCA9ICdycWhmJyxcbiAgSGl0QWxsID0gJ3JxaGEnXG59XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmF5Y2FzdFF1ZXJ5IHtcbiAgcXVlcnlJZDogc3RyaW5nXG4gIHF1ZXJ5VHlwZTogUXVlcnlUeXBlXG4gIHJheTogUmF5XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgaW50ZXJmYWNlIFJheWNhc3RIaXQge1xuICBkaWRIaXQ6IGJvb2xlYW5cbiAgcmF5OiBSYXlcbiAgaGl0UG9pbnQ6IFJlYWRPbmx5VmVjdG9yM1xuICBoaXROb3JtYWw6IFJlYWRPbmx5VmVjdG9yM1xufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSYXkge1xuICBvcmlnaW46IFJlYWRPbmx5VmVjdG9yM1xuICBkaXJlY3Rpb246IFJlYWRPbmx5VmVjdG9yM1xuICBkaXN0YW5jZTogbnVtYmVyXG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgaW50ZXJmYWNlIEhpdEVudGl0eUluZm8ge1xuICBpc1ZhbGlkOiBib29sZWFuXG4gIGVudGl0eUlkOiBzdHJpbmdcbiAgbWVzaE5hbWU6IHN0cmluZ1xufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSYXljYXN0SGl0RW50aXR5IGV4dGVuZHMgUmF5Y2FzdEhpdCB7XG4gIGVudGl0eTogSGl0RW50aXR5SW5mb1xufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSYXljYXN0SGl0RW50aXRpZXMgZXh0ZW5kcyBSYXljYXN0SGl0IHtcbiAgZW50aXRpZXM6IFJheWNhc3RIaXRFbnRpdHlbXVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBCYXNpY0F2YXRhckluZm8ge1xuICB1c2VySWQ6IHN0cmluZ1xuICBuYW1lOiBzdHJpbmdcbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmF5Y2FzdEhpdEF2YXRhciBleHRlbmRzIFJheWNhc3RIaXQge1xuICBhdmF0YXI6IEJhc2ljQXZhdGFySW5mb1xufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSYXljYXN0SGl0QXZhdGFycyBleHRlbmRzIFJheWNhc3RIaXQge1xuICBhdmF0YXJzOiBCYXNpY0F2YXRhckluZm9bXVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJUGh5c2ljc0Nhc3Qge1xuICBoaXRGaXJzdChcbiAgICByYXk6IFJheSxcbiAgICBoaXRDYWxsYmFjazogKGV2ZW50OiBSYXljYXN0SGl0RW50aXR5KSA9PiB2b2lkLFxuICAgIGlkPzogbnVtYmVyXG4gICk6IHZvaWRcbiAgaGl0QWxsKFxuICAgIHJheTogUmF5LFxuICAgIGhpdENhbGxiYWNrOiAoZXZlbnQ6IFJheWNhc3RIaXRFbnRpdGllcykgPT4gdm9pZCxcbiAgICBpZD86IG51bWJlclxuICApOiB2b2lkXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgaGl0Rmlyc3RBdmF0YXIocmF5OiBSYXksIGhpdENhbGxiYWNrOiAoZXZlbnQ6IFJheWNhc3RIaXRBdmF0YXIpID0+IHZvaWQpOiB2b2lkXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgaGl0QWxsQXZhdGFycyhyYXk6IFJheSwgaGl0Q2FsbGJhY2s6IChldmVudDogUmF5Y2FzdEhpdEF2YXRhcnMpID0+IHZvaWQpOiB2b2lkXG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgUGh5c2ljc0Nhc3QgaW1wbGVtZW50cyBJUGh5c2ljc0Nhc3Qge1xuICBwcml2YXRlIHN0YXRpYyBfaW5zdGFuY2U6IFBoeXNpY3NDYXN0XG4gIHByaXZhdGUgcXVlcmllczogUmVjb3JkPHN0cmluZywgKGV2ZW50OiBSYXljYXN0SGl0KSA9PiB2b2lkPiA9IHt9XG5cbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgcHVibGljIHN0YXRpYyBnZXQgaW5zdGFuY2UoKTogUGh5c2ljc0Nhc3Qge1xuICAgIFBoeXNpY3NDYXN0LmVuc3VyZUluc3RhbmNlKClcbiAgICByZXR1cm4gUGh5c2ljc0Nhc3QuX2luc3RhbmNlXG4gIH1cblxuICBzdGF0aWMgZW5zdXJlSW5zdGFuY2UoKTogYW55IHtcbiAgICBpZiAoIVBoeXNpY3NDYXN0Ll9pbnN0YW5jZSkge1xuICAgICAgUGh5c2ljc0Nhc3QuX2luc3RhbmNlID0gbmV3IFBoeXNpY3NDYXN0KClcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZ2V0UmF5RnJvbUNhbWVyYShkaXN0YW5jZTogbnVtYmVyKSB7XG4gICAgY29uc3Qgcm90YXRpb24gPSBDYW1lcmEuaW5zdGFuY2Uucm90YXRpb25cbiAgICBjb25zdCByb3RhdGlvbk1hdDogTWF0cml4ID0gTWF0cml4LklkZW50aXR5KClcbiAgICByb3RhdGlvbi50b1JvdGF0aW9uTWF0cml4KHJvdGF0aW9uTWF0KVxuICAgIGNvbnN0IGRpcmVjdGlvbiA9IFZlY3RvcjMuVHJhbnNmb3JtQ29vcmRpbmF0ZXMoXG4gICAgICBWZWN0b3IzLkZvcndhcmQoKSxcbiAgICAgIHJvdGF0aW9uTWF0XG4gICAgKVxuXG4gICAgY29uc3QgcmF5OiBSYXkgPSB7XG4gICAgICBvcmlnaW46IENhbWVyYS5pbnN0YW5jZS5wb3NpdGlvbixcbiAgICAgIGRpcmVjdGlvbjogZGlyZWN0aW9uLFxuICAgICAgZGlzdGFuY2U6IGRpc3RhbmNlXG4gICAgfVxuXG4gICAgcmV0dXJuIHJheVxuICB9XG5cbiAgcHVibGljIGdldFJheUZyb21Qb3NpdGlvbnMoZnJvbTogVmVjdG9yMywgdG86IFZlY3RvcjMpIHtcbiAgICBjb25zdCBkaXJlY3Rpb24gPSB0by5zdWJ0cmFjdChmcm9tKVxuICAgIGNvbnN0IGxlbmd0aCA9IGRpcmVjdGlvbi5sZW5ndGgoKVxuXG4gICAgY29uc3QgcmF5OiBSYXkgPSB7XG4gICAgICBvcmlnaW46IGZyb20sXG4gICAgICBkaXJlY3Rpb246IGRpcmVjdGlvbi5ub3JtYWxpemUoKSxcbiAgICAgIGRpc3RhbmNlOiBsZW5ndGhcbiAgICB9XG5cbiAgICByZXR1cm4gcmF5XG4gIH1cblxuICBwdWJsaWMgaGl0Rmlyc3QoXG4gICAgcmF5OiBSYXksXG4gICAgaGl0Q2FsbGJhY2s6IChldmVudDogUmF5Y2FzdEhpdEVudGl0eSkgPT4gdm9pZCxcbiAgICBpZD86IG51bWJlclxuICApIHtcbiAgICBjb25zdCBxdWVyeUlkID0gdHlwZW9mIGlkID09PSAnbnVtYmVyJyA/IFF1ZXJ5UHJlZml4LkhpdEZpcnN0ICsgaWQgOiB1dWlkKClcblxuICAgIHRoaXMucXVlcmllc1txdWVyeUlkXSA9IGhpdENhbGxiYWNrIGFzIChldmVudDogUmF5Y2FzdEhpdCkgPT4gdm9pZFxuXG4gICAgaWYgKHR5cGVvZiBkY2wgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBkY2wucXVlcnkoJ3JheWNhc3QnLCB7IHF1ZXJ5SWQsIHF1ZXJ5VHlwZTogJ0hpdEZpcnN0JywgcmF5IH0pXG4gICAgfVxuICB9XG5cbiAgcHVibGljIGhpdEFsbChcbiAgICByYXk6IFJheSxcbiAgICBoaXRDYWxsYmFjazogKGV2ZW50OiBSYXljYXN0SGl0RW50aXRpZXMpID0+IHZvaWQsXG4gICAgaWQ/OiBudW1iZXJcbiAgKSB7XG4gICAgY29uc3QgcXVlcnlJZCA9IHR5cGVvZiBpZCA9PT0gJ251bWJlcicgPyBRdWVyeVByZWZpeC5IaXRBbGwgKyBpZCA6IHV1aWQoKVxuXG4gICAgdGhpcy5xdWVyaWVzW3F1ZXJ5SWRdID0gaGl0Q2FsbGJhY2sgYXMgKGV2ZW50OiBSYXljYXN0SGl0KSA9PiB2b2lkXG5cbiAgICBpZiAodHlwZW9mIGRjbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGRjbC5xdWVyeSgncmF5Y2FzdCcsIHsgcXVlcnlJZCwgcXVlcnlUeXBlOiAnSGl0QWxsJywgcmF5IH0pXG4gICAgfVxuICB9XG5cbiAgcHVibGljIGhpdEZpcnN0QXZhdGFyKFxuICAgIF9yYXk6IFJheSxcbiAgICBfaGl0Q2FsbGJhY2s6IChldmVudDogUmF5Y2FzdEhpdEF2YXRhcikgPT4gdm9pZFxuICApIHtcbiAgICBsb2coJ25vdCBpbXBsZW1lbnRlZCB5ZXQnKVxuICB9XG5cbiAgcHVibGljIGhpdEFsbEF2YXRhcnMoXG4gICAgX3JheTogUmF5LFxuICAgIF9oaXRDYWxsYmFjazogKGV2ZW50OiBSYXljYXN0SGl0QXZhdGFycykgPT4gdm9pZFxuICApIHtcbiAgICBsb2coJ25vdCBpbXBsZW1lbnRlZCB5ZXQnKVxuICB9XG5cbiAgcHVibGljIGhhbmRsZVJheWNhc3RIaXRGaXJzdFJlc3BvbnNlKFxuICAgIHJlc3BvbnNlOiBSYXljYXN0UmVzcG9uc2U8UmF5Y2FzdEhpdEVudGl0eT5cbiAgKSB7XG4gICAgdGhpcy5xdWVyaWVzW3Jlc3BvbnNlLnBheWxvYWQucXVlcnlJZF0ocmVzcG9uc2UucGF5bG9hZC5wYXlsb2FkKVxuICAgIGRlbGV0ZSB0aGlzLnF1ZXJpZXNbcmVzcG9uc2UucGF5bG9hZC5xdWVyeUlkXVxuICB9XG5cbiAgcHVibGljIGhhbmRsZVJheWNhc3RIaXRBbGxSZXNwb25zZShcbiAgICByZXNwb25zZTogUmF5Y2FzdFJlc3BvbnNlPFJheWNhc3RIaXRFbnRpdGllcz5cbiAgKSB7XG4gICAgdGhpcy5xdWVyaWVzW3Jlc3BvbnNlLnBheWxvYWQucXVlcnlJZF0ocmVzcG9uc2UucGF5bG9hZC5wYXlsb2FkKVxuICAgIGRlbGV0ZSB0aGlzLnF1ZXJpZXNbcmVzcG9uc2UucGF5bG9hZC5xdWVyeUlkXVxuICB9XG59XG4iLCJpbXBvcnQgeyBFbmdpbmUgfSBmcm9tICcuLi9lY3MvRW5naW5lJ1xuaW1wb3J0IHsgVVVJREV2ZW50LCBQb2ludGVyRXZlbnQsIFJheWNhc3RSZXNwb25zZSB9IGZyb20gJy4vRXZlbnRzJ1xuaW1wb3J0IHsgT25VVUlERXZlbnQgfSBmcm9tICcuL0NvbXBvbmVudHMnXG5pbXBvcnQge1xuICBJU3lzdGVtLFxuICBDb21wb25lbnRBZGRlZCxcbiAgQ29tcG9uZW50UmVtb3ZlZCxcbiAgSUVudGl0eVxufSBmcm9tICcuLi9lY3MvSUVudGl0eSdcbmltcG9ydCB7IElucHV0IH0gZnJvbSAnLi9JbnB1dCdcbmltcG9ydCB7XG4gIFBoeXNpY3NDYXN0LFxuICBSYXljYXN0SGl0RW50aXR5LFxuICBSYXljYXN0SGl0RW50aXRpZXNcbn0gZnJvbSAnLi9QaHlzaWNzQ2FzdCdcblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBSYXljYXN0RXZlbnRTeXN0ZW0gaW1wbGVtZW50cyBJU3lzdGVtIHtcbiAgYWN0aXZhdGUoZW5naW5lOiBFbmdpbmUpIHtcbiAgICBlbmdpbmUuZXZlbnRNYW5hZ2VyLmFkZExpc3RlbmVyKFJheWNhc3RSZXNwb25zZSwgdGhpcywgKGV2ZW50KSA9PiB7XG4gICAgICBpZiAoZXZlbnQucGF5bG9hZC5xdWVyeVR5cGUgPT09ICdIaXRGaXJzdCcpIHtcbiAgICAgICAgUGh5c2ljc0Nhc3QuaW5zdGFuY2UuaGFuZGxlUmF5Y2FzdEhpdEZpcnN0UmVzcG9uc2UoXG4gICAgICAgICAgZXZlbnQgYXMgUmF5Y2FzdFJlc3BvbnNlPFJheWNhc3RIaXRFbnRpdHk+XG4gICAgICAgIClcbiAgICAgIH0gZWxzZSBpZiAoZXZlbnQucGF5bG9hZC5xdWVyeVR5cGUgPT09ICdIaXRBbGwnKSB7XG4gICAgICAgIFBoeXNpY3NDYXN0Lmluc3RhbmNlLmhhbmRsZVJheWNhc3RIaXRBbGxSZXNwb25zZShcbiAgICAgICAgICBldmVudCBhcyBSYXljYXN0UmVzcG9uc2U8UmF5Y2FzdEhpdEVudGl0aWVzPlxuICAgICAgICApXG4gICAgICB9XG4gICAgfSlcblxuICAgIGlmICh0eXBlb2YgZGNsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgZGNsLnN1YnNjcmliZSgncmF5Y2FzdFJlc3BvbnNlJylcbiAgICB9XG4gIH1cblxuICBkZWFjdGl2YXRlKCkge1xuICAgIGlmICh0eXBlb2YgZGNsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgZGNsLnVuc3Vic2NyaWJlKCdyYXljYXN0UmVzcG9uc2UnKVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIFBvaW50ZXJFdmVudFN5c3RlbSBpbXBsZW1lbnRzIElTeXN0ZW0ge1xuICBhY3RpdmF0ZShlbmdpbmU6IEVuZ2luZSkge1xuICAgIGVuZ2luZS5ldmVudE1hbmFnZXIuYWRkTGlzdGVuZXIoUG9pbnRlckV2ZW50LCB0aGlzLCAoZXZlbnQpID0+IHtcbiAgICAgIElucHV0Lmluc3RhbmNlLmhhbmRsZVBvaW50ZXJFdmVudChldmVudC5wYXlsb2FkIGFzIEdsb2JhbElucHV0RXZlbnRSZXN1bHQpXG4gICAgfSlcblxuICAgIGlmICh0eXBlb2YgZGNsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgZGNsLnN1YnNjcmliZSgncG9pbnRlclVwJylcbiAgICAgIGRjbC5zdWJzY3JpYmUoJ3BvaW50ZXJEb3duJylcbiAgICAgIGRjbC5zdWJzY3JpYmUoJ2FjdGlvbkJ1dHRvbkV2ZW50JylcbiAgICB9XG4gIH1cblxuICBkZWFjdGl2YXRlKCkge1xuICAgIGlmICh0eXBlb2YgZGNsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgZGNsLnVuc3Vic2NyaWJlKCdwb2ludGVyVXAnKVxuICAgICAgZGNsLnVuc3Vic2NyaWJlKCdwb2ludGVyRG93bicpXG4gICAgICBkY2wudW5zdWJzY3JpYmUoJ2FjdGlvbkJ1dHRvbkV2ZW50JylcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBVVUlERXZlbnRTeXN0ZW0gaW1wbGVtZW50cyBJU3lzdGVtIHtcbiAgaGFuZGxlck1hcDogeyBbdXVpZDogc3RyaW5nXTogT25VVUlERXZlbnQ8YW55PiB9ID0ge31cblxuICBhY3RpdmF0ZShlbmdpbmU6IEVuZ2luZSkge1xuICAgIGVuZ2luZS5ldmVudE1hbmFnZXIuYWRkTGlzdGVuZXIoVVVJREV2ZW50LCB0aGlzLCB0aGlzLmhhbmRsZUV2ZW50KVxuICAgIGVuZ2luZS5ldmVudE1hbmFnZXIuYWRkTGlzdGVuZXIoQ29tcG9uZW50QWRkZWQsIHRoaXMsIHRoaXMuY29tcG9uZW50QWRkZWQpXG4gICAgZW5naW5lLmV2ZW50TWFuYWdlci5hZGRMaXN0ZW5lcihcbiAgICAgIENvbXBvbmVudFJlbW92ZWQsXG4gICAgICB0aGlzLFxuICAgICAgdGhpcy5jb21wb25lbnRSZW1vdmVkXG4gICAgKVxuXG4gICAgaWYgKHR5cGVvZiBkY2wgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBkY2wuc3Vic2NyaWJlKCd1dWlkRXZlbnQnKVxuICAgIH1cbiAgfVxuXG4gIGRlYWN0aXZhdGUoKSB7XG4gICAgaWYgKHR5cGVvZiBkY2wgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBkY2wudW5zdWJzY3JpYmUoJ3V1aWRFdmVudCcpXG4gICAgfVxuICB9XG5cbiAgb25BZGRFbnRpdHkoZW50aXR5OiBJRW50aXR5KSB7XG4gICAgZm9yIChjb25zdCBjb21wb25lbnROYW1lIGluIGVudGl0eS5jb21wb25lbnRzKSB7XG4gICAgICBjb25zdCBjb21wb25lbnQgPSBlbnRpdHkuY29tcG9uZW50c1tjb21wb25lbnROYW1lXVxuXG4gICAgICBpZiAoY29tcG9uZW50IGluc3RhbmNlb2YgT25VVUlERXZlbnQpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVyTWFwW2NvbXBvbmVudC51dWlkXSA9IGNvbXBvbmVudFxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG9uUmVtb3ZlRW50aXR5KGVudGl0eTogSUVudGl0eSkge1xuICAgIGZvciAoY29uc3QgY29tcG9uZW50TmFtZSBpbiBlbnRpdHkuY29tcG9uZW50cykge1xuICAgICAgY29uc3QgY29tcG9uZW50ID0gZW50aXR5LmNvbXBvbmVudHNbY29tcG9uZW50TmFtZV1cblxuICAgICAgaWYgKGNvbXBvbmVudCBpbnN0YW5jZW9mIE9uVVVJREV2ZW50KSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLmhhbmRsZXJNYXBbY29tcG9uZW50LnV1aWRdXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBjb21wb25lbnRBZGRlZChldmVudDogQ29tcG9uZW50QWRkZWQpIHtcbiAgICBpZiAoZXZlbnQuZW50aXR5LmlzQWRkZWRUb0VuZ2luZSgpKSB7XG4gICAgICBjb25zdCBjb21wb25lbnQgPSBldmVudC5lbnRpdHkuY29tcG9uZW50c1tldmVudC5jb21wb25lbnROYW1lXVxuXG4gICAgICBpZiAoY29tcG9uZW50IGluc3RhbmNlb2YgT25VVUlERXZlbnQpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVyTWFwW2NvbXBvbmVudC51dWlkXSA9IGNvbXBvbmVudFxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY29tcG9uZW50UmVtb3ZlZChldmVudDogQ29tcG9uZW50UmVtb3ZlZCkge1xuICAgIGlmIChldmVudC5lbnRpdHkuaXNBZGRlZFRvRW5naW5lKCkpIHtcbiAgICAgIGlmIChldmVudC5jb21wb25lbnQgaW5zdGFuY2VvZiBPblVVSURFdmVudCkge1xuICAgICAgICBkZWxldGUgdGhpcy5oYW5kbGVyTWFwW2V2ZW50LmNvbXBvbmVudC51dWlkXVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlRXZlbnQoZXZlbnQ6IFVVSURFdmVudCk6IHZvaWQge1xuICAgIGlmIChldmVudC51dWlkIGluIHRoaXMuaGFuZGxlck1hcCkge1xuICAgICAgY29uc3QgaGFuZGxlciA9IHRoaXMuaGFuZGxlck1hcFtldmVudC51dWlkXVxuICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgaWYgKGhhbmRsZXIuY2FsbGJhY2sgJiYgJ2NhbGwnIGluIGhhbmRsZXIuY2FsbGJhY2spIHtcbiAgICAgICAgICBoYW5kbGVyLmNhbGxiYWNrKGV2ZW50LnBheWxvYWQpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IHJheWNhc3RFdmVudFN5c3RlbSA9IG5ldyBSYXljYXN0RXZlbnRTeXN0ZW0oKVxuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgcG9pbnRlckV2ZW50U3lzdGVtID0gbmV3IFBvaW50ZXJFdmVudFN5c3RlbSgpXG5cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCB1dWlkRXZlbnRTeXN0ZW0gPSBuZXcgVVVJREV2ZW50U3lzdGVtKClcbiIsImltcG9ydCB7XG4gIERpc3Bvc2FibGVDb21wb25lbnQsXG4gIE9ic2VydmFibGVDb21wb25lbnQsXG4gIENvbXBvbmVudCxcbiAgZ2V0Q29tcG9uZW50SWRcbn0gZnJvbSAnLi4vZWNzL0NvbXBvbmVudCdcbmltcG9ydCB7IENMQVNTX0lEIH0gZnJvbSAnLi9Db21wb25lbnRzJ1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQERpc3Bvc2FibGVDb21wb25lbnQoJ2VuZ2luZS5BdWRpb0NsaXAnLCBDTEFTU19JRC5BVURJT19DTElQKVxuZXhwb3J0IGNsYXNzIEF1ZGlvQ2xpcCBleHRlbmRzIE9ic2VydmFibGVDb21wb25lbnQge1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5yZWFkb25seVxuICByZWFkb25seSB1cmw6IHN0cmluZ1xuXG4gIC8qKlxuICAgKiBJcyB0aGlzIGNsaXAgbG9vcGluZyBieSBkZWZhdWx0P1xuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgbG9vcDogYm9vbGVhbiA9IGZhbHNlXG5cbiAgLy8gQGludGVybmFsXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIGxvYWRpbmdDb21wbGV0ZUV2ZW50SWQ/OiBzdHJpbmdcblxuICAvKipcbiAgICogQ2xpcCdzIG1hc3RlciB2b2x1bWUuIFRoaXMgdm9sdW1lIGFmZmVjdHMgYWxsIHRoZSBBdWRpb1NvdXJjZXMuXG4gICAqIFZhbGlkIHJhbmdlcyBmcm9tIDAgdG8gMVxuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgdm9sdW1lOiBudW1iZXIgPSAxXG5cbiAgY29uc3RydWN0b3IodXJsOiBzdHJpbmcpIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy51cmwgPSB1cmxcbiAgfVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQENvbXBvbmVudCgnZW5naW5lLkF1ZGlvU291cmNlJywgQ0xBU1NfSUQuQVVESU9fU09VUkNFKVxuZXhwb3J0IGNsYXNzIEF1ZGlvU291cmNlIGV4dGVuZHMgT2JzZXJ2YWJsZUNvbXBvbmVudCB7XG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LnJlYWRvbmx5XG4gIHJlYWRvbmx5IGF1ZGlvQ2xpcElkOiBzdHJpbmdcblxuICAvKipcbiAgICogSXMgdGhpcyBjbGlwIGxvb3BpbmcgYnkgZGVmYXVsdD9cbiAgICovXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIGxvb3A6IGJvb2xlYW4gPSBmYWxzZVxuXG4gIC8qKlxuICAgKiBDbGlwJ3MgbWFzdGVyIHZvbHVtZS4gVGhpcyB2b2x1bWUgYWZmZWN0cyBhbGwgdGhlIEF1ZGlvU291cmNlcy5cbiAgICogVmFsaWQgcmFuZ2VzIGZyb20gMCB0byAxXG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICB2b2x1bWU6IG51bWJlciA9IDFcblxuICAvKipcbiAgICogSXMgdGhpcyBBdWRpb1NvdXJjZSBwbGF5aW5nP1xuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgcGxheWluZzogYm9vbGVhbiA9IGZhbHNlXG5cbiAgLyoqXG4gICAqIFBpdGNoLCBkZWZhdWx0OiAxLjAsIHJhbmdlIGZyb20gMC4wIHRvIE1heEZsb2F0XG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBwaXRjaDogbnVtYmVyID0gMS4wXG5cbiAgLyoqXG4gICAqIFRpbWVzdGFtcCBvZiB3aGVuIHRoZSBwbGF5T25jZSB3YXMgZXhlY3V0ZWQgdG8gc2VlIGlmIHdlIG5lZWQgdG8gc3RhcnQgb3ZlciB0aGUgYXVkaW9cbiAgICovXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHBsYXllZEF0VGltZXN0YW1wOiBudW1iZXIgPSBEYXRlLm5vdygpXG5cbiAgY29uc3RydWN0b3IocHVibGljIHJlYWRvbmx5IGF1ZGlvQ2xpcDogQXVkaW9DbGlwKSB7XG4gICAgc3VwZXIoKVxuICAgIGlmICghKGF1ZGlvQ2xpcCBpbnN0YW5jZW9mIEF1ZGlvQ2xpcCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYFRyeWluZyB0byBjcmVhdGUgQXVkaW9Tb3VyY2UoQXVkaW9DbGlwKSB3aXRoIGFuIGludmFsaWQgQXVkaW9DbGlwYFxuICAgICAgKVxuICAgIH1cbiAgICB0aGlzLmF1ZGlvQ2xpcElkID0gZ2V0Q29tcG9uZW50SWQoYXVkaW9DbGlwIGFzIGFueSlcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNhYmxlcyB0aGUgbG9vcGluZyBhbmQgcGxheXMgdGhlIGN1cnJlbnQgc291cmNlIG9uY2UuXG4gICAqIElmIHRoZSBzb3VuZCB3YXMgcGxheWluZywgaXQgc3RvcHMgYW5kIHN0YXJ0cyBvdmVyLlxuICAgKi9cbiAgcGxheU9uY2UoKSB7XG4gICAgdGhpcy5wbGF5aW5nID0gdHJ1ZVxuICAgIHRoaXMuZGlydHkgPSB0cnVlXG4gICAgdGhpcy5wbGF5ZWRBdFRpbWVzdGFtcCA9IERhdGUubm93KClcbiAgICB0aGlzLmRhdGEubm9uY2UgPSBNYXRoLnJhbmRvbSgpXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQENvbXBvbmVudCgnZW5naW5lLkF1ZGlvU3RyZWFtJywgQ0xBU1NfSUQuQVVESU9fU1RSRUFNKVxuZXhwb3J0IGNsYXNzIEF1ZGlvU3RyZWFtIGV4dGVuZHMgT2JzZXJ2YWJsZUNvbXBvbmVudCB7XG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LnJlYWRvbmx5XG4gIHJlYWRvbmx5IHVybDogc3RyaW5nXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgcGxheWluZzogYm9vbGVhbiA9IGZhbHNlXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgdm9sdW1lOiBudW1iZXIgPSAxXG5cbiAgY29uc3RydWN0b3IodXJsOiBzdHJpbmcpIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy51cmwgPSB1cmxcbiAgICB0aGlzLnBsYXlpbmcgPSB0cnVlXG4gIH1cbn1cbiIsImltcG9ydCB7IENvbXBvbmVudCwgT2JzZXJ2YWJsZUNvbXBvbmVudCB9IGZyb20gJy4uL2Vjcy9Db21wb25lbnQnXG5pbXBvcnQgeyBDTEFTU19JRCwgT25VVUlERXZlbnQgfSBmcm9tICcuL0NvbXBvbmVudHMnXG5cbi8qKlxuICogR2l6bW8gaWRlbnRpZmllcnNcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGVudW0gR2l6bW8ge1xuICBNT1ZFID0gJ01PVkUnLFxuICBST1RBVEUgPSAnUk9UQVRFJyxcbiAgU0NBTEUgPSAnU0NBTEUnLFxuICBOT05FID0gJ05PTkUnXG59XG5cbi8qKlxuICogVGhpcyBldmVudCBpcyB0cmlnZ2VyZWQgYWZ0ZXIgdGhlIHVzZXIgZmluYWxpemVzIGRyYWdnaW5nIGEgZ2l6bW8uXG4gKiBAcHVibGljXG4gKi9cbkBDb21wb25lbnQoJ2VuZ2luZS5naXptb0V2ZW50JywgQ0xBU1NfSUQuVVVJRF9DQUxMQkFDSylcbmV4cG9ydCBjbGFzcyBPbkdpem1vRXZlbnQgZXh0ZW5kcyBPblVVSURFdmVudDwnZ2l6bW9FdmVudCc+IHtcbiAgQE9ic2VydmFibGVDb21wb25lbnQucmVhZG9ubHlcbiAgcmVhZG9ubHkgdHlwZTogc3RyaW5nID0gJ2dpem1vRXZlbnQnXG59XG5cbi8qKlxuICogRW5hYmxlcyBnaXptb3MgaW4gdGhlIGVudGl0eS4gR2l6bW9zIG9ubHkgd29yayBpbiBFRElUT1IsIFBSRVZJRVcgb3IgREVCVUcgbW9kZXMuXG4gKiBAcHVibGljXG4gKi9cbkBDb21wb25lbnQoJ2VuZ2luZS5naXptb3MnLCBDTEFTU19JRC5HSVpNT1MpXG5leHBvcnQgY2xhc3MgR2l6bW9zIGV4dGVuZHMgT2JzZXJ2YWJsZUNvbXBvbmVudCB7XG4gIC8qKlxuICAgKiBFbmFibGUgcG9zaXRpb24gZ2l6bW9cbiAgICovXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHBvc2l0aW9uOiBib29sZWFuID0gdHJ1ZVxuXG4gIC8qKlxuICAgKiBFbmFibGUgcm90YXRpb24gZ2l6bW9cbiAgICovXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHJvdGF0aW9uOiBib29sZWFuID0gdHJ1ZVxuXG4gIC8qKlxuICAgKiBFbmFibGUgc2NhbGUgZ2l6bW9cbiAgICovXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHNjYWxlOiBib29sZWFuID0gdHJ1ZVxuXG4gIC8qKlxuICAgKiBDeWNsZSB0aHJvdWdoIGdpem1vcyB1c2luZyBjbGljay5cbiAgICovXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIGN5Y2xlOiBib29sZWFuID0gdHJ1ZVxuXG4gIC8qKlxuICAgKiBJZiBjeWNsZSBpcyBmYWxzZSwgdGhpcyB3aWxsIGJlIHRoZSBzZWxlY3RlZCBnaXptb1xuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgc2VsZWN0ZWRHaXptbz86IEdpem1vXG5cbiAgLyoqXG4gICAqIEFsaWduIHRoZSBnaXptb3MgdG8gbWF0Y2ggdGhlIGxvY2FsIHJlZmVyZW5jZSBzeXN0ZW1cbiAgICovXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIGxvY2FsUmVmZXJlbmNlOiBib29sZWFuID0gZmFsc2Vcbn1cbiIsImltcG9ydCB7IENvbXBvbmVudCwgT2JzZXJ2YWJsZUNvbXBvbmVudCB9IGZyb20gJy4uL2Vjcy9Db21wb25lbnQnXG5pbXBvcnQgeyB1dWlkRXZlbnRTeXN0ZW0gfSBmcm9tICcuL1N5c3RlbXMnXG5pbXBvcnQgeyBDTEFTU19JRCwgT25VVUlERXZlbnQsIE9uUG9pbnRlclVVSURFdmVudCB9IGZyb20gJy4vQ29tcG9uZW50cydcbmltcG9ydCB7IEFjdGlvbkJ1dHRvbiB9IGZyb20gJy4vSW5wdXQnXG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5AQ29tcG9uZW50KCdlbmdpbmUub25Gb2N1cycsIENMQVNTX0lELlVVSURfQ0FMTEJBQ0spXG5leHBvcnQgY2xhc3MgT25Gb2N1cyBleHRlbmRzIE9uVVVJREV2ZW50PCdvbkZvY3VzJz4ge1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5yZWFkb25seVxuICByZWFkb25seSB0eXBlOiBzdHJpbmcgPSAnb25Gb2N1cydcbiAgY29uc3RydWN0b3IoY2FsbGJhY2s6IChldmVudDogSUV2ZW50c1snb25Gb2N1cyddKSA9PiB2b2lkKSB7XG4gICAgc3VwZXIoY2FsbGJhY2spXG4gICAgLy8gVGhpcyBpbmplY3Rpb24gaXMgbmVjZXNzYXJ5IE9OTFkgaW4gZXZlbnRzIHRoYXQgYXJlIEFMV0FZUyB0dXJuZWQgb24gYW5kIGFyZVxuICAgIC8vIG5vdCBhc3NpZ25hYmxlIHRvIGVudGl0aWVzLiBMaWtlIGV2ZW50cyBmb3IgdGhlIFVJIGVsZW1lbnRzXG5cbiAgICAvLyBUT0RPKEJyaWFuKTogVGhpcyB3aWxsIGJlIHJlbW92ZWQgd2hlbiBVSSBnZXRzIGJhY2sgdG8gdGhlIGVudGl0eSBwYXJlbnRpbmcuXG4gICAgdXVpZEV2ZW50U3lzdGVtLmhhbmRsZXJNYXBbdGhpcy51dWlkXSA9IHRoaXNcbiAgfVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQENvbXBvbmVudCgnZW5naW5lLm9uVGV4dFN1Ym1pdCcsIENMQVNTX0lELlVVSURfQ0FMTEJBQ0spXG5leHBvcnQgY2xhc3MgT25UZXh0U3VibWl0IGV4dGVuZHMgT25VVUlERXZlbnQ8J29uVGV4dFN1Ym1pdCc+IHtcbiAgQE9ic2VydmFibGVDb21wb25lbnQucmVhZG9ubHlcbiAgcmVhZG9ubHkgdHlwZTogc3RyaW5nID0gJ29uVGV4dFN1Ym1pdCdcbiAgY29uc3RydWN0b3IoY2FsbGJhY2s6IChldmVudDogSUV2ZW50c1snb25UZXh0U3VibWl0J10pID0+IHZvaWQpIHtcbiAgICBzdXBlcihjYWxsYmFjaylcbiAgICAvLyBUaGlzIGluamVjdGlvbiBpcyBuZWNlc3NhcnkgT05MWSBpbiBldmVudHMgdGhhdCBhcmUgQUxXQVlTIHR1cm5lZCBvbiBhbmQgYXJlXG4gICAgLy8gbm90IGFzc2lnbmFibGUgdG8gZW50aXRpZXMuIExpa2UgZXZlbnRzIGZvciB0aGUgVUkgZWxlbWVudHNcblxuICAgIC8vIFRPRE8oQnJpYW4pOiBUaGlzIHdpbGwgYmUgcmVtb3ZlZCB3aGVuIFVJIGdldHMgYmFjayB0byB0aGUgZW50aXR5IHBhcmVudGluZy5cbiAgICB1dWlkRXZlbnRTeXN0ZW0uaGFuZGxlck1hcFt0aGlzLnV1aWRdID0gdGhpc1xuICB9XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5AQ29tcG9uZW50KCdlbmdpbmUub25CbHVyJywgQ0xBU1NfSUQuVVVJRF9DQUxMQkFDSylcbmV4cG9ydCBjbGFzcyBPbkJsdXIgZXh0ZW5kcyBPblVVSURFdmVudDwnb25CbHVyJz4ge1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5yZWFkb25seVxuICByZWFkb25seSB0eXBlOiBzdHJpbmcgPSAnb25CbHVyJ1xuICBjb25zdHJ1Y3RvcihjYWxsYmFjazogKGV2ZW50OiBJRXZlbnRzWydvbkJsdXInXSkgPT4gdm9pZCkge1xuICAgIHN1cGVyKGNhbGxiYWNrKVxuICAgIC8vIFRoaXMgaW5qZWN0aW9uIGlzIG5lY2Vzc2FyeSBPTkxZIGluIGV2ZW50cyB0aGF0IGFyZSBBTFdBWVMgdHVybmVkIG9uIGFuZCBhcmVcbiAgICAvLyBub3QgYXNzaWduYWJsZSB0byBlbnRpdGllcy4gTGlrZSBldmVudHMgZm9yIHRoZSBVSSBlbGVtZW50c1xuXG4gICAgLy8gVE9ETyhCcmlhbik6IFRoaXMgd2lsbCBiZSByZW1vdmVkIHdoZW4gVUkgZ2V0cyBiYWNrIHRvIHRoZSBlbnRpdHkgcGFyZW50aW5nLlxuICAgIHV1aWRFdmVudFN5c3RlbS5oYW5kbGVyTWFwW3RoaXMudXVpZF0gPSB0aGlzXG4gIH1cbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbkBDb21wb25lbnQoJ2VuZ2luZS5vbkVudGVyJywgQ0xBU1NfSUQuVVVJRF9DQUxMQkFDSylcbmV4cG9ydCBjbGFzcyBPbkVudGVyIGV4dGVuZHMgT25VVUlERXZlbnQ8J29uRW50ZXInPiB7XG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LnJlYWRvbmx5XG4gIHJlYWRvbmx5IHR5cGU6IHN0cmluZyA9ICdvbkVudGVyJ1xuICBjb25zdHJ1Y3RvcihjYWxsYmFjazogKGV2ZW50OiBJRXZlbnRzWydvbkVudGVyJ10pID0+IHZvaWQpIHtcbiAgICBzdXBlcihjYWxsYmFjaylcbiAgICAvLyBUaGlzIGluamVjdGlvbiBpcyBuZWNlc3NhcnkgT05MWSBpbiBldmVudHMgdGhhdCBhcmUgQUxXQVlTIHR1cm5lZCBvbiBhbmQgYXJlXG4gICAgLy8gbm90IGFzc2lnbmFibGUgdG8gZW50aXRpZXMuIExpa2UgZXZlbnRzIGZvciB0aGUgVUkgZWxlbWVudHNcblxuICAgIC8vIFRPRE8oQnJpYW4pOiBUaGlzIHdpbGwgYmUgcmVtb3ZlZCB3aGVuIFVJIGdldHMgYmFjayB0byB0aGUgZW50aXR5IHBhcmVudGluZy5cbiAgICB1dWlkRXZlbnRTeXN0ZW0uaGFuZGxlck1hcFt0aGlzLnV1aWRdID0gdGhpc1xuICB9XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5AQ29tcG9uZW50KCdlbmdpbmUub25DaGFuZ2UnLCBDTEFTU19JRC5VVUlEX0NBTExCQUNLKVxuZXhwb3J0IGNsYXNzIE9uQ2hhbmdlZCBleHRlbmRzIE9uVVVJREV2ZW50PCdvbkNoYW5nZSc+IHtcbiAgQE9ic2VydmFibGVDb21wb25lbnQucmVhZG9ubHlcbiAgcmVhZG9ubHkgdHlwZTogc3RyaW5nID0gJ29uQ2hhbmdlJ1xuICBjb25zdHJ1Y3RvcihjYWxsYmFjazogKGV2ZW50OiBJRXZlbnRzWydvbkNoYW5nZSddKSA9PiB2b2lkKSB7XG4gICAgc3VwZXIoY2FsbGJhY2spXG4gICAgLy8gVGhpcyBpbmplY3Rpb24gaXMgbmVjZXNzYXJ5IE9OTFkgaW4gZXZlbnRzIHRoYXQgYXJlIEFMV0FZUyB0dXJuZWQgb24gYW5kIGFyZVxuICAgIC8vIG5vdCBhc3NpZ25hYmxlIHRvIGVudGl0aWVzLiBMaWtlIGV2ZW50cyBmb3IgdGhlIFVJIGVsZW1lbnRzXG5cbiAgICAvLyBUT0RPKEJyaWFuKTogVGhpcyB3aWxsIGJlIHJlbW92ZWQgd2hlbiBVSSBnZXRzIGJhY2sgdG8gdGhlIGVudGl0eSBwYXJlbnRpbmcuXG4gICAgdXVpZEV2ZW50U3lzdGVtLmhhbmRsZXJNYXBbdGhpcy51dWlkXSA9IHRoaXNcbiAgfVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHR5cGUgT25Qb2ludGVyVVVJREV2ZW50T3B0aW9ucyA9IHtcbiAgYnV0dG9uPzogQWN0aW9uQnV0dG9uXG4gIGhvdmVyVGV4dD86IHN0cmluZ1xuICBzaG93RmVlZGJhY2s/OiBib29sZWFuXG4gIGRpc3RhbmNlPzogbnVtYmVyXG59XG5cbi8qKlxuICogQHB1YmxpYyBAZGVwcmVjYXRlZCB1c2UgYE9uUG9pbnRlckRvd25gIGluc3RlYWRcbiAqL1xuQENvbXBvbmVudCgnZW5naW5lLm9uQ2xpY2snLCBDTEFTU19JRC5VVUlEX0NBTExCQUNLKVxuZXhwb3J0IGNsYXNzIE9uQ2xpY2sgZXh0ZW5kcyBPblBvaW50ZXJVVUlERXZlbnQ8J29uQ2xpY2snPiB7XG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LnJlYWRvbmx5XG4gIHJlYWRvbmx5IHR5cGU6IHN0cmluZyA9ICdvbkNsaWNrJ1xuXG4gIGNvbnN0cnVjdG9yKGNhbGxiYWNrOiAoZXZlbnQ6IElFdmVudHNbJ29uQ2xpY2snXSkgPT4gdm9pZClcbiAgY29uc3RydWN0b3IoXG4gICAgY2FsbGJhY2s6IChldmVudDogSUV2ZW50c1snb25DbGljayddKSA9PiB2b2lkLFxuICAgIG9wdGlvbnM6IE9uUG9pbnRlclVVSURFdmVudE9wdGlvbnNcbiAgKVxuICBjb25zdHJ1Y3RvcihjYWxsYmFjazogKGV2ZW50OiBJRXZlbnRzWydvbkNsaWNrJ10pID0+IHZvaWQsIG9wdGlvbnM/OiBhbnkpIHtcbiAgICBzdXBlcihjYWxsYmFjaylcbiAgICAvLyBUaGlzIGluamVjdGlvbiBpcyBuZWNlc3NhcnkgT05MWSBpbiBldmVudHMgdGhhdCBhcmUgQUxXQVlTIHR1cm5lZCBvbiBhbmQgYXJlXG4gICAgLy8gbm90IGFzc2lnbmFibGUgdG8gZW50aXRpZXMuIExpa2UgZXZlbnRzIGZvciB0aGUgVUkgZWxlbWVudHNcblxuICAgIC8vIFRPRE8oQnJpYW4pOiBUaGlzIHdpbGwgYmUgcmVtb3ZlZCB3aGVuIFVJIGdldHMgYmFjayB0byB0aGUgZW50aXR5IHBhcmVudGluZy5cbiAgICB1dWlkRXZlbnRTeXN0ZW0uaGFuZGxlck1hcFt0aGlzLnV1aWRdID0gdGhpc1xuXG4gICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgIHRoaXMuc2hvd0ZlZWRiYWNrID0gIShvcHRpb25zLnNob3dGZWVkYmFjayA9PT0gZmFsc2UpXG5cbiAgICAgIGlmIChvcHRpb25zLmJ1dHRvbikge1xuICAgICAgICB0aGlzLmJ1dHRvbiA9IG9wdGlvbnMuYnV0dG9uXG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLmhvdmVyVGV4dCkge1xuICAgICAgICB0aGlzLmhvdmVyVGV4dCA9IG9wdGlvbnMuaG92ZXJUZXh0XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLmRpc3RhbmNlKSB7XG4gICAgICAgIHRoaXMuZGlzdGFuY2UgPSBvcHRpb25zLmRpc3RhbmNlXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5AQ29tcG9uZW50KCdlbmdpbmUucG9pbnRlckRvd24nLCBDTEFTU19JRC5VVUlEX0NBTExCQUNLKVxuZXhwb3J0IGNsYXNzIE9uUG9pbnRlckRvd24gZXh0ZW5kcyBPblBvaW50ZXJVVUlERXZlbnQ8J3BvaW50ZXJEb3duJz4ge1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5yZWFkb25seVxuICByZWFkb25seSB0eXBlOiBzdHJpbmcgPSAncG9pbnRlckRvd24nXG5cbiAgY29uc3RydWN0b3IoY2FsbGJhY2s6IChldmVudDogSUV2ZW50c1sncG9pbnRlckRvd24nXSkgPT4gdm9pZClcbiAgY29uc3RydWN0b3IoXG4gICAgY2FsbGJhY2s6IChldmVudDogSUV2ZW50c1sncG9pbnRlckRvd24nXSkgPT4gdm9pZCxcbiAgICBvcHRpb25zOiBPblBvaW50ZXJVVUlERXZlbnRPcHRpb25zXG4gIClcbiAgY29uc3RydWN0b3IoXG4gICAgY2FsbGJhY2s6IChldmVudDogSUV2ZW50c1sncG9pbnRlckRvd24nXSkgPT4gdm9pZCxcbiAgICBvcHRpb25zPzogYW55XG4gICkge1xuICAgIHN1cGVyKGNhbGxiYWNrKVxuICAgIC8vIFRoaXMgaW5qZWN0aW9uIGlzIG5lY2Vzc2FyeSBPTkxZIGluIGV2ZW50cyB0aGF0IGFyZSBBTFdBWVMgdHVybmVkIG9uIGFuZCBhcmVcbiAgICAvLyBub3QgYXNzaWduYWJsZSB0byBlbnRpdGllcy4gTGlrZSBldmVudHMgZm9yIHRoZSBVSSBlbGVtZW50c1xuXG4gICAgLy8gVE9ETyhCcmlhbik6IFRoaXMgd2lsbCBiZSByZW1vdmVkIHdoZW4gVUkgZ2V0cyBiYWNrIHRvIHRoZSBlbnRpdHkgcGFyZW50aW5nLlxuICAgIHV1aWRFdmVudFN5c3RlbS5oYW5kbGVyTWFwW3RoaXMudXVpZF0gPSB0aGlzXG5cbiAgICBpZiAob3B0aW9ucykge1xuICAgICAgdGhpcy5zaG93RmVlZGJhY2sgPSAhKG9wdGlvbnMuc2hvd0ZlZWRiYWNrID09PSBmYWxzZSlcblxuICAgICAgaWYgKG9wdGlvbnMuYnV0dG9uKSB7XG4gICAgICAgIHRoaXMuYnV0dG9uID0gb3B0aW9ucy5idXR0b25cbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMuaG92ZXJUZXh0KSB7XG4gICAgICAgIHRoaXMuaG92ZXJUZXh0ID0gb3B0aW9ucy5ob3ZlclRleHRcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMuZGlzdGFuY2UpIHtcbiAgICAgICAgdGhpcy5kaXN0YW5jZSA9IG9wdGlvbnMuZGlzdGFuY2VcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbkBDb21wb25lbnQoJ2VuZ2luZS5wb2ludGVyVXAnLCBDTEFTU19JRC5VVUlEX0NBTExCQUNLKVxuZXhwb3J0IGNsYXNzIE9uUG9pbnRlclVwIGV4dGVuZHMgT25Qb2ludGVyVVVJREV2ZW50PCdwb2ludGVyVXAnPiB7XG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LnJlYWRvbmx5XG4gIHJlYWRvbmx5IHR5cGU6IHN0cmluZyA9ICdwb2ludGVyVXAnXG5cbiAgY29uc3RydWN0b3IoY2FsbGJhY2s6IChldmVudDogSUV2ZW50c1sncG9pbnRlclVwJ10pID0+IHZvaWQpXG4gIGNvbnN0cnVjdG9yKFxuICAgIGNhbGxiYWNrOiAoZXZlbnQ6IElFdmVudHNbJ3BvaW50ZXJVcCddKSA9PiB2b2lkLFxuICAgIG9wdGlvbnM6IE9uUG9pbnRlclVVSURFdmVudE9wdGlvbnNcbiAgKVxuICBjb25zdHJ1Y3RvcihjYWxsYmFjazogKGV2ZW50OiBJRXZlbnRzWydwb2ludGVyVXAnXSkgPT4gdm9pZCwgb3B0aW9ucz86IGFueSkge1xuICAgIHN1cGVyKGNhbGxiYWNrKVxuICAgIC8vIFRoaXMgaW5qZWN0aW9uIGlzIG5lY2Vzc2FyeSBPTkxZIGluIGV2ZW50cyB0aGF0IGFyZSBBTFdBWVMgdHVybmVkIG9uIGFuZCBhcmVcbiAgICAvLyBub3QgYXNzaWduYWJsZSB0byBlbnRpdGllcy4gTGlrZSBldmVudHMgZm9yIHRoZSBVSSBlbGVtZW50c1xuXG4gICAgLy8gVE9ETyhCcmlhbik6IFRoaXMgd2lsbCBiZSByZW1vdmVkIHdoZW4gVUkgZ2V0cyBiYWNrIHRvIHRoZSBlbnRpdHkgcGFyZW50aW5nLlxuICAgIHV1aWRFdmVudFN5c3RlbS5oYW5kbGVyTWFwW3RoaXMudXVpZF0gPSB0aGlzXG5cbiAgICBpZiAob3B0aW9ucykge1xuICAgICAgdGhpcy5zaG93RmVlZGJhY2sgPSAhKG9wdGlvbnMuc2hvd0ZlZWRiYWNrID09PSBmYWxzZSlcblxuICAgICAgaWYgKG9wdGlvbnMuYnV0dG9uKSB7XG4gICAgICAgIHRoaXMuYnV0dG9uID0gb3B0aW9ucy5idXR0b25cbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMuaG92ZXJUZXh0KSB7XG4gICAgICAgIHRoaXMuaG92ZXJUZXh0ID0gb3B0aW9ucy5ob3ZlclRleHRcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMuZGlzdGFuY2UpIHtcbiAgICAgICAgdGhpcy5kaXN0YW5jZSA9IG9wdGlvbnMuZGlzdGFuY2VcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB0eXBlIE9uUG9pbnRlckhvdmVyRW50ZXJVVUlERXZlbnRPcHRpb25zID0ge1xuICBkaXN0YW5jZT86IG51bWJlclxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQENvbXBvbmVudCgnZW5naW5lLnBvaW50ZXJIb3ZlckVudGVyJywgQ0xBU1NfSUQuVVVJRF9DQUxMQkFDSylcbmV4cG9ydCBjbGFzcyBPblBvaW50ZXJIb3ZlckVudGVyIGV4dGVuZHMgT25Qb2ludGVyVVVJREV2ZW50PCdwb2ludGVySG92ZXJFbnRlcic+IHtcbiAgQE9ic2VydmFibGVDb21wb25lbnQucmVhZG9ubHlcbiAgcmVhZG9ubHkgdHlwZTogc3RyaW5nID0gJ3BvaW50ZXJIb3ZlckVudGVyJ1xuXG4gIGNvbnN0cnVjdG9yKGNhbGxiYWNrOiAoZXZlbnQ6IElFdmVudHNbJ3BvaW50ZXJIb3ZlckVudGVyJ10pID0+IHZvaWQpXG4gIGNvbnN0cnVjdG9yKFxuICAgIGNhbGxiYWNrOiAoZXZlbnQ6IElFdmVudHNbJ3BvaW50ZXJIb3ZlckVudGVyJ10pID0+IHZvaWQsXG4gICAgb3B0aW9uczogT25Qb2ludGVySG92ZXJFbnRlclVVSURFdmVudE9wdGlvbnNcbiAgKVxuICBjb25zdHJ1Y3RvcihcbiAgICBjYWxsYmFjazogKGV2ZW50OiBJRXZlbnRzWydwb2ludGVySG92ZXJFbnRlciddKSA9PiB2b2lkLFxuICAgIG9wdGlvbnM/OiBhbnlcbiAgKSB7XG4gICAgc3VwZXIoY2FsbGJhY2spXG4gICAgLy8gVGhpcyBpbmplY3Rpb24gaXMgbmVjZXNzYXJ5IE9OTFkgaW4gZXZlbnRzIHRoYXQgYXJlIEFMV0FZUyB0dXJuZWQgb24gYW5kIGFyZVxuICAgIC8vIG5vdCBhc3NpZ25hYmxlIHRvIGVudGl0aWVzLiBMaWtlIGV2ZW50cyBmb3IgdGhlIFVJIGVsZW1lbnRzXG5cbiAgICAvLyBUT0RPKEJyaWFuKTogVGhpcyB3aWxsIGJlIHJlbW92ZWQgd2hlbiBVSSBnZXRzIGJhY2sgdG8gdGhlIGVudGl0eSBwYXJlbnRpbmcuXG4gICAgdXVpZEV2ZW50U3lzdGVtLmhhbmRsZXJNYXBbdGhpcy51dWlkXSA9IHRoaXNcblxuICAgIGlmIChvcHRpb25zKSB7XG4gICAgICBpZiAob3B0aW9ucy5kaXN0YW5jZSkge1xuICAgICAgICB0aGlzLmRpc3RhbmNlID0gb3B0aW9ucy5kaXN0YW5jZVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQENvbXBvbmVudCgnZW5naW5lLnBvaW50ZXJIb3ZlckV4aXQnLCBDTEFTU19JRC5VVUlEX0NBTExCQUNLKVxuZXhwb3J0IGNsYXNzIE9uUG9pbnRlckhvdmVyRXhpdCBleHRlbmRzIE9uUG9pbnRlclVVSURFdmVudDwncG9pbnRlckhvdmVyRXhpdCc+IHtcbiAgQE9ic2VydmFibGVDb21wb25lbnQucmVhZG9ubHlcbiAgcmVhZG9ubHkgdHlwZTogc3RyaW5nID0gJ3BvaW50ZXJIb3ZlckV4aXQnXG5cbiAgY29uc3RydWN0b3IoY2FsbGJhY2s6IChldmVudDogSUV2ZW50c1sncG9pbnRlckhvdmVyRXhpdCddKSA9PiB2b2lkKSB7XG4gICAgc3VwZXIoY2FsbGJhY2spXG4gICAgLy8gVGhpcyBpbmplY3Rpb24gaXMgbmVjZXNzYXJ5IE9OTFkgaW4gZXZlbnRzIHRoYXQgYXJlIEFMV0FZUyB0dXJuZWQgb24gYW5kIGFyZVxuICAgIC8vIG5vdCBhc3NpZ25hYmxlIHRvIGVudGl0aWVzLiBMaWtlIGV2ZW50cyBmb3IgdGhlIFVJIGVsZW1lbnRzXG5cbiAgICAvLyBUT0RPKEJyaWFuKTogVGhpcyB3aWxsIGJlIHJlbW92ZWQgd2hlbiBVSSBnZXRzIGJhY2sgdG8gdGhlIGVudGl0eSBwYXJlbnRpbmcuXG4gICAgdXVpZEV2ZW50U3lzdGVtLmhhbmRsZXJNYXBbdGhpcy51dWlkXSA9IHRoaXNcblxuICAgIC8vIENoYW5nZWQgZGVmYXVsdCBkaXN0YW5jZSB2YWx1ZSBmb3IgdGhpcyBjb21wb25lbnQgYmVjYXVzZSBpbiBtb3N0IGNhc2VzIHdlIHByb2JhYmx5XG4gICAgLy8gZG9uJ3Qgd2FudCBmb3IgdGhlIGhvdmVyIGV4aXQgZXZlbnQgdG8gYmUgbGltaXRlZCBieSBhIGRpc3RhbmNlLCBhbmQgaXQgZGVmYXVsdCB2YWx1ZSB3YXMgdG9vIHNtYWxsLlxuICAgIHRoaXMuZGlzdGFuY2UgPSAxNjBcbiAgfVxufVxuIiwiaW1wb3J0IHsgQ29sb3I0IH0gZnJvbSAnQGRjbC9lY3MtbWF0aCdcbmltcG9ydCB7XG4gIE9ic2VydmFibGVDb21wb25lbnQsXG4gIERpc3Bvc2FibGVDb21wb25lbnQsXG4gIGdldENvbXBvbmVudElkXG59IGZyb20gJy4uL2Vjcy9Db21wb25lbnQnXG5pbXBvcnQge1xuICBDTEFTU19JRCxcbiAgT25VVUlERXZlbnQsXG4gIFRleHR1cmUsXG4gIEF2YXRhclRleHR1cmUsXG4gIEZvbnRcbn0gZnJvbSAnLi9Db21wb25lbnRzJ1xuaW1wb3J0IHsgT25UZXh0U3VibWl0LCBPbkJsdXIsIE9uQ2hhbmdlZCwgT25DbGljaywgT25Gb2N1cyB9IGZyb20gJy4vVUlFdmVudHMnXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFVJU2hhcGUgZXh0ZW5kcyBPYnNlcnZhYmxlQ29tcG9uZW50IHtcbiAgLyoqXG4gICAqIERlZmluZXMgaWYgdGhlIGVudGl0eSBhbmQgaXRzIGNoaWxkcmVuIHNob3VsZCBiZSByZW5kZXJlZFxuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgbmFtZTogc3RyaW5nIHwgbnVsbCA9IG51bGxcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICB2aXNpYmxlOiBib29sZWFuID0gdHJ1ZVxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIG9wYWNpdHk6IG51bWJlciA9IDFcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBoQWxpZ246IHN0cmluZyA9ICdjZW50ZXInXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgdkFsaWduOiBzdHJpbmcgPSAnY2VudGVyJ1xuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LnVpVmFsdWVcbiAgd2lkdGg6IHN0cmluZyB8IG51bWJlciA9ICcxMDBweCdcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC51aVZhbHVlXG4gIGhlaWdodDogc3RyaW5nIHwgbnVtYmVyID0gJzUwcHgnXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQudWlWYWx1ZVxuICBwb3NpdGlvblg6IHN0cmluZyB8IG51bWJlciA9ICcwcHgnXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQudWlWYWx1ZVxuICBwb3NpdGlvblk6IHN0cmluZyB8IG51bWJlciA9ICcwcHgnXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgaXNQb2ludGVyQmxvY2tlcjogYm9vbGVhbiA9IHRydWVcblxuICBwcml2YXRlIF9wYXJlbnQ/OiBVSVNoYXBlXG5cbiAgY29uc3RydWN0b3IocGFyZW50OiBVSVNoYXBlIHwgbnVsbCkge1xuICAgIHN1cGVyKClcbiAgICBpZiAocGFyZW50KSB7XG4gICAgICB0aGlzLl9wYXJlbnQgPSBwYXJlbnRcbiAgICAgIHRoaXMuZGF0YS5wYXJlbnRDb21wb25lbnQgPSBnZXRDb21wb25lbnRJZChwYXJlbnQgYXMgYW55KVxuICAgIH1cbiAgfVxuXG4gIGdldCBwYXJlbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3BhcmVudFxuICB9XG5cbiAgLy8gQGludGVybmFsXG4gIGdldCBwYXJlbnRDb21wb25lbnQoKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhLnBhcmVudENvbXBvbmVudFxuICB9XG59XG5cbi8qKlxuICogQGludGVybmFsXG4gKiBOT1RFKEJyaWFuKTogdGhpcyBzaG91bGQgYmUgZGVwcmVjYXRlZFxuICovXG5ARGlzcG9zYWJsZUNvbXBvbmVudCgnZW5naW5lLnNoYXBlJywgQ0xBU1NfSUQuVUlfRlVMTFNDUkVFTl9TSEFQRSlcbmV4cG9ydCBjbGFzcyBVSUZ1bGxTY3JlZW4gZXh0ZW5kcyBVSVNoYXBlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIobnVsbClcbiAgfVxufVxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICogTk9URShCcmlhbik6IHRoaXMgc2hvdWxkIGJlIGRlcHJlY2F0ZWRcbiAqL1xuQERpc3Bvc2FibGVDb21wb25lbnQoJ2VuZ2luZS5zaGFwZScsIENMQVNTX0lELlVJX1dPUkxEX1NQQUNFX1NIQVBFKVxuZXhwb3J0IGNsYXNzIFVJV29ybGRTcGFjZSBleHRlbmRzIFVJU2hhcGUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihudWxsKVxuICB9XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5ARGlzcG9zYWJsZUNvbXBvbmVudCgnZW5naW5lLnNoYXBlJywgQ0xBU1NfSUQuVUlfU0NSRUVOX1NQQUNFX1NIQVBFKVxuZXhwb3J0IGNsYXNzIFVJQ2FudmFzIGV4dGVuZHMgVUlTaGFwZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKG51bGwpXG4gIH1cbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbkBEaXNwb3NhYmxlQ29tcG9uZW50KCdlbmdpbmUuc2hhcGUnLCBDTEFTU19JRC5VSV9DT05UQUlORVJfUkVDVClcbmV4cG9ydCBjbGFzcyBVSUNvbnRhaW5lclJlY3QgZXh0ZW5kcyBVSVNoYXBlIHtcbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgdGhpY2tuZXNzOiBudW1iZXIgPSAwXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgY29sb3I6IENvbG9yNCA9IENvbG9yNC5DbGVhcigpXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgYWxpZ25tZW50VXNlc1NpemU6IGJvb2xlYW4gPSB0cnVlXG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZW51bSBVSVN0YWNrT3JpZW50YXRpb24ge1xuICBWRVJUSUNBTCxcbiAgSE9SSVpPTlRBTFxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQERpc3Bvc2FibGVDb21wb25lbnQoJ2VuZ2luZS5zaGFwZScsIENMQVNTX0lELlVJX0NPTlRBSU5FUl9TVEFDSylcbmV4cG9ydCBjbGFzcyBVSUNvbnRhaW5lclN0YWNrIGV4dGVuZHMgVUlTaGFwZSB7XG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIGFkYXB0V2lkdGg6IGJvb2xlYW4gPSB0cnVlXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgYWRhcHRIZWlnaHQ6IGJvb2xlYW4gPSB0cnVlXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgY29sb3I6IENvbG9yNCA9IENvbG9yNC5DbGVhcigpXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgc3RhY2tPcmllbnRhdGlvbjogVUlTdGFja09yaWVudGF0aW9uID0gVUlTdGFja09yaWVudGF0aW9uLlZFUlRJQ0FMXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgc3BhY2luZzogbnVtYmVyID0gMFxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQERpc3Bvc2FibGVDb21wb25lbnQoJ2VuZ2luZS5zaGFwZScsIENMQVNTX0lELlVJX0JVVFRPTl9TSEFQRSlcbmV4cG9ydCBjbGFzcyBVSUJ1dHRvbiBleHRlbmRzIFVJU2hhcGUge1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBmb250U2l6ZTogbnVtYmVyID0gMTBcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBmb250V2VpZ2h0OiBzdHJpbmcgPSAnbm9ybWFsJ1xuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHRoaWNrbmVzczogbnVtYmVyID0gMFxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIGNvcm5lclJhZGl1czogbnVtYmVyID0gMFxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIGNvbG9yOiBDb2xvcjQgPSBDb2xvcjQuV2hpdGUoKVxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIGJhY2tncm91bmQ6IENvbG9yNCA9IENvbG9yNC5XaGl0ZSgpXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgcGFkZGluZ1RvcDogbnVtYmVyID0gMFxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHBhZGRpbmdSaWdodDogbnVtYmVyID0gMFxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHBhZGRpbmdCb3R0b206IG51bWJlciA9IDBcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBwYWRkaW5nTGVmdDogbnVtYmVyID0gMFxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHNoYWRvd0JsdXI6IG51bWJlciA9IDBcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBzaGFkb3dPZmZzZXRYOiBudW1iZXIgPSAwXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgc2hhZG93T2Zmc2V0WTogbnVtYmVyID0gMFxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHNoYWRvd0NvbG9yOiBDb2xvcjQgPSBDb2xvcjQuQmxhY2soKVxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHRleHQ6IHN0cmluZyA9ICdidXR0b24nXG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5ARGlzcG9zYWJsZUNvbXBvbmVudCgnZW5naW5lLnNoYXBlJywgQ0xBU1NfSUQuVUlfVEVYVF9TSEFQRSlcbmV4cG9ydCBjbGFzcyBVSVRleHQgZXh0ZW5kcyBVSVNoYXBlIHtcbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgb3V0bGluZVdpZHRoOiBudW1iZXIgPSAwXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgb3V0bGluZUNvbG9yOiBDb2xvcjQgPSBDb2xvcjQuV2hpdGUoKVxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIGNvbG9yOiBDb2xvcjQgPSBDb2xvcjQuV2hpdGUoKVxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIGZvbnRTaXplOiBudW1iZXIgPSAxMFxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIGZvbnRBdXRvU2l6ZTogYm9vbGVhbiA9IGZhbHNlXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuY29tcG9uZW50XG4gIGZvbnQ/OiBGb250XG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgdmFsdWU6IHN0cmluZyA9ICcnXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgbGluZVNwYWNpbmc6IG51bWJlciA9IDBcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBsaW5lQ291bnQ6IG51bWJlciA9IDBcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBhZGFwdFdpZHRoOiBib29sZWFuID0gZmFsc2VcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBhZGFwdEhlaWdodDogYm9vbGVhbiA9IGZhbHNlXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgdGV4dFdyYXBwaW5nOiBib29sZWFuID0gZmFsc2VcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBzaGFkb3dCbHVyOiBudW1iZXIgPSAwXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgc2hhZG93T2Zmc2V0WDogbnVtYmVyID0gMFxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHNoYWRvd09mZnNldFk6IG51bWJlciA9IDBcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBzaGFkb3dDb2xvcjogQ29sb3I0ID0gQ29sb3I0LkJsYWNrKClcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBoVGV4dEFsaWduOiBzdHJpbmcgPSAnbGVmdCdcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICB2VGV4dEFsaWduOiBzdHJpbmcgPSAnYm90dG9tJ1xuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHBhZGRpbmdUb3A6IG51bWJlciA9IDBcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBwYWRkaW5nUmlnaHQ6IG51bWJlciA9IDBcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBwYWRkaW5nQm90dG9tOiBudW1iZXIgPSAwXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgcGFkZGluZ0xlZnQ6IG51bWJlciA9IDBcbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbkBEaXNwb3NhYmxlQ29tcG9uZW50KCdlbmdpbmUuc2hhcGUnLCBDTEFTU19JRC5VSV9JTlBVVF9URVhUX1NIQVBFKVxuZXhwb3J0IGNsYXNzIFVJSW5wdXRUZXh0IGV4dGVuZHMgVUlTaGFwZSB7XG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIG91dGxpbmVXaWR0aDogbnVtYmVyID0gMFxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIG91dGxpbmVDb2xvcjogQ29sb3I0ID0gQ29sb3I0LkJsYWNrKClcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBjb2xvcjogQ29sb3I0ID0gQ29sb3I0LkNsZWFyKClcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBmb250U2l6ZTogbnVtYmVyID0gMTBcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5jb21wb25lbnRcbiAgZm9udD86IEZvbnRcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICB2YWx1ZTogc3RyaW5nID0gJydcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBwbGFjZWhvbGRlcjogc3RyaW5nID0gJydcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBtYXJnaW46IG51bWJlciA9IDEwXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgaFRleHRBbGlnbjogc3RyaW5nID0gJ2xlZnQnXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgdlRleHRBbGlnbjogc3RyaW5nID0gJ2JvdHRvbSdcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBmb2N1c2VkQmFja2dyb3VuZDogQ29sb3I0ID0gQ29sb3I0LkJsYWNrKClcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICB0ZXh0V3JhcHBpbmc6IGJvb2xlYW4gPSBmYWxzZVxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHNoYWRvd0JsdXI6IG51bWJlciA9IDBcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBzaGFkb3dPZmZzZXRYOiBudW1iZXIgPSAwXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgc2hhZG93T2Zmc2V0WTogbnVtYmVyID0gMFxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHNoYWRvd0NvbG9yOiBDb2xvcjQgPSBDb2xvcjQuV2hpdGUoKVxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHBhZGRpbmdUb3A6IG51bWJlciA9IDBcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBwYWRkaW5nUmlnaHQ6IG51bWJlciA9IDBcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBwYWRkaW5nQm90dG9tOiBudW1iZXIgPSAwXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgcGFkZGluZ0xlZnQ6IG51bWJlciA9IDBcblxuICBvblRleHRTdWJtaXQ6IE9uVGV4dFN1Ym1pdCB8IG51bGwgPSBudWxsXG5cbiAgb25DaGFuZ2VkOiBPbkNoYW5nZWQgfCBudWxsID0gbnVsbFxuXG4gIC8vIEBpbnRlcm5hbFxuICBAT25VVUlERXZlbnQudXVpZEV2ZW50XG4gIHByb3RlY3RlZCByZWFkb25seSBvblRleHRDaGFuZ2VkOiBPbkNoYW5nZWRcblxuICBAT25VVUlERXZlbnQudXVpZEV2ZW50XG4gIG9uRm9jdXM6IE9uRm9jdXMgfCBudWxsID0gbnVsbFxuXG4gIEBPblVVSURFdmVudC51dWlkRXZlbnRcbiAgb25CbHVyOiBPbkJsdXIgfCBudWxsID0gbnVsbFxuXG4gIGNvbnN0cnVjdG9yKHBhcmVudDogVUlTaGFwZSB8IG51bGwpIHtcbiAgICBzdXBlcihwYXJlbnQpXG4gICAgdGhpcy5vblRleHRDaGFuZ2VkID0gbmV3IE9uQ2hhbmdlZCgoZSkgPT4ge1xuICAgICAgY29uc3QgeyB2YWx1ZSwgaXNTdWJtaXQgfSA9IGUudmFsdWVcblxuICAgICAgLy8gTk9URTogaGVyZSB3ZSB3YW50IHRvIGtlZXAgdGhlIHNhbWUgYGRpcnR5YCBzdGF0ZSBhcyBiZWZvcmUgY2hhbmdpbmcgYHRoaXMudmFsdWVgXG4gICAgICAvLyBiZWNhdXNlIGNoYW5naW5nIGB0aGlzLnZhbHVlYCB3aWxsIHNldCB0aGUgY29tcG9uZW50IGFzIGBkaXJ0eWAgYW5kIHNlbmQgYSBtZXNzYWdlIHRvIHRoZSByZW5kZXJlciB3aXRoIGl0IHZhbHVlXG4gICAgICAvLyBhbmQgdGhhdCBtZXNzYWdlIGlzIHVubmVjZXNhcnkgKGlmIHRoZSBvbmx5IHRoaW5nIHRoYXQgaGF2ZSBjaGFuZ2VkIGlzIGB0aGlzLnZhbHVlYCkgc2luY2UgdGhhdCBuZXcgdmFsdWUgaGFzIGNvbWUgZnJvbSB0aGUgcmVuZGVyZXIgaXRzZWxmXG4gICAgICBjb25zdCBpc0RpcnR5ID0gdGhpcy5kaXJ0eVxuICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlXG4gICAgICB0aGlzLmRpcnR5ID0gaXNEaXJ0eVxuXG4gICAgICBpZiAoaXNTdWJtaXQgJiYgdGhpcy5vblRleHRTdWJtaXQpIHtcbiAgICAgICAgY29uc3Qgb25TdWJtaXRWYWx1ZTogSUV2ZW50c1snb25UZXh0U3VibWl0J10gPSB7IHRleHQ6IHZhbHVlIH1cbiAgICAgICAgdGhpcy5vblRleHRTdWJtaXQuY2FsbGJhY2sob25TdWJtaXRWYWx1ZSlcbiAgICAgIH0gZWxzZSBpZiAoIWlzU3VibWl0ICYmIHRoaXMub25DaGFuZ2VkKSB7XG4gICAgICAgIGNvbnN0IG9uQ2hhbmdlVmFsdWU6IElFdmVudHNbJ29uQ2hhbmdlJ10gPSB7XG4gICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgcG9pbnRlcklkOiBlLnBvaW50ZXJJZFxuICAgICAgICB9XG4gICAgICAgIHRoaXMub25DaGFuZ2VkLmNhbGxiYWNrKG9uQ2hhbmdlVmFsdWUpXG4gICAgICB9XG4gICAgfSlcbiAgfVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQERpc3Bvc2FibGVDb21wb25lbnQoJ2VuZ2luZS5zaGFwZScsIENMQVNTX0lELlVJX0lNQUdFX1NIQVBFKVxuZXhwb3J0IGNsYXNzIFVJSW1hZ2UgZXh0ZW5kcyBVSVNoYXBlIHtcbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgc291cmNlTGVmdDogbnVtYmVyID0gMFxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHNvdXJjZVRvcDogbnVtYmVyID0gMFxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHNvdXJjZVdpZHRoOiBudW1iZXIgPSAxXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgc291cmNlSGVpZ2h0OiBudW1iZXIgPSAxXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuY29tcG9uZW50XG4gIHNvdXJjZT86IFRleHR1cmUgfCBBdmF0YXJUZXh0dXJlXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgcGFkZGluZ1RvcDogbnVtYmVyID0gMFxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHBhZGRpbmdSaWdodDogbnVtYmVyID0gMFxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHBhZGRpbmdCb3R0b206IG51bWJlciA9IDBcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBwYWRkaW5nTGVmdDogbnVtYmVyID0gMFxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHNpemVJblBpeGVsczogYm9vbGVhbiA9IHRydWVcblxuICBAT25VVUlERXZlbnQudXVpZEV2ZW50XG4gIG9uQ2xpY2s6IE9uQ2xpY2sgfCBudWxsID0gbnVsbFxuXG4gIGNvbnN0cnVjdG9yKHBhcmVudDogVUlTaGFwZSwgc291cmNlOiBUZXh0dXJlIHwgQXZhdGFyVGV4dHVyZSkge1xuICAgIHN1cGVyKHBhcmVudClcbiAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZVxuICB9XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5ARGlzcG9zYWJsZUNvbXBvbmVudCgnZW5naW5lLnNoYXBlJywgQ0xBU1NfSUQuVUlfU0xJREVSX1NIQVBFKVxuZXhwb3J0IGNsYXNzIFVJU2Nyb2xsUmVjdCBleHRlbmRzIFVJU2hhcGUge1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICB2YWx1ZVg6IG51bWJlciA9IDBcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICB2YWx1ZVk6IG51bWJlciA9IDBcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBiYWNrZ3JvdW5kQ29sb3I6IENvbG9yNCA9IENvbG9yNC5DbGVhcigpXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgaXNIb3Jpem9udGFsOiBib29sZWFuID0gZmFsc2VcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBpc1ZlcnRpY2FsOiBib29sZWFuID0gZmFsc2VcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBwYWRkaW5nVG9wOiBudW1iZXIgPSAwXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgcGFkZGluZ1JpZ2h0OiBudW1iZXIgPSAwXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgcGFkZGluZ0JvdHRvbTogbnVtYmVyID0gMFxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHBhZGRpbmdMZWZ0OiBudW1iZXIgPSAwXG5cbiAgQE9uVVVJREV2ZW50LnV1aWRFdmVudFxuICBvbkNoYW5nZWQ6IE9uQ2hhbmdlZCB8IG51bGwgPSBudWxsXG59XG4iLCJpbXBvcnQgeyBSZWFkT25seUNvbG9yNCB9IGZyb20gJ0BkY2wvZWNzLW1hdGgnXG5cbmltcG9ydCB7IFdlYXJhYmxlSWQgfSBmcm9tICcuLi9kZWNlbnRyYWxhbmQvVHlwZXMnXG5pbXBvcnQgeyBDb21wb25lbnQsIE9ic2VydmFibGVDb21wb25lbnQgfSBmcm9tICcuLi9lY3MvQ29tcG9uZW50J1xuaW1wb3J0IHsgQ0xBU1NfSUQgfSBmcm9tICcuL0NvbXBvbmVudHMnXG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5AQ29tcG9uZW50KCdlbmdpbmUuYXZhdGFyU2hhcGUnLCBDTEFTU19JRC5BVkFUQVJfU0hBUEUpXG5leHBvcnQgY2xhc3MgQXZhdGFyU2hhcGUgZXh0ZW5kcyBPYnNlcnZhYmxlQ29tcG9uZW50IHtcbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgaWQhOiBzdHJpbmdcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBuYW1lITogc3RyaW5nXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgZXhwcmVzc2lvblRyaWdnZXJJZCE6IHN0cmluZ1xuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIGV4cHJlc3Npb25UcmlnZ2VyVGltZXN0YW1wITogbnVtYmVyXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgYm9keVNoYXBlITogV2VhcmFibGVJZFxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHdlYXJhYmxlcyE6IFdlYXJhYmxlSWRbXVxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHNraW5Db2xvciE6IFJlYWRPbmx5Q29sb3I0XG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgaGFpckNvbG9yITogUmVhZE9ubHlDb2xvcjRcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBleWVDb2xvciE6IFJlYWRPbmx5Q29sb3I0XG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgdXNlRHVtbXlNb2RlbDogYm9vbGVhbiA9IGZhbHNlXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgdGFsa2luZzogYm9vbGVhbiA9IGZhbHNlXG5cbiAgcHVibGljIHN0YXRpYyBEdW1teSgpOiBBdmF0YXJTaGFwZSB7XG4gICAgY29uc3QgYXZhdGFyU2hhcGUgPSBuZXcgQXZhdGFyU2hhcGUoKVxuICAgIGF2YXRhclNoYXBlLnVzZUR1bW15TW9kZWwgPSB0cnVlXG4gICAgcmV0dXJuIGF2YXRhclNoYXBlXG4gIH1cbn1cbiIsImltcG9ydCB7IE9ic2VydmFibGUsIE9ic2VydmVyIH0gZnJvbSAnLi4vZWNzL09ic2VydmFibGUnXG5pbXBvcnQgeyBlcnJvciB9IGZyb20gJy4uL2Vjcy9oZWxwZXJzJ1xuXG5sZXQgY29tbXVuaWNhdGlvbnNDb250cm9sbGVyOiBNb2R1bGVEZXNjcmlwdG9yIHwgbnVsbCA9IG51bGxcbmxldCBjb21tdW5pY2F0aW9uc0NvbnRyb2xsZXJQcm9taXNlOiBQcm9taXNlTGlrZTxNb2R1bGVEZXNjcmlwdG9yPiB8IG51bGwgPSBudWxsXG5cbmxldCBfbWVzc2FnZU9ic2VydmVyOiBudWxsIHwgT2JzZXJ2YWJsZTxJRXZlbnRzWydjb21tcyddPiA9IG51bGxcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldE1lc3NhZ2VPYnNlcnZlcigpIHtcbiAgaWYgKCFfbWVzc2FnZU9ic2VydmVyKSB7XG4gICAgX21lc3NhZ2VPYnNlcnZlciA9IG5ldyBPYnNlcnZhYmxlPElFdmVudHNbJ2NvbW1zJ10+KClcbiAgfVxuICByZXR1cm4gX21lc3NhZ2VPYnNlcnZlclxufVxuXG5mdW5jdGlvbiBlbnN1cmVDb21tdW5pY2F0aW9uc0NvbnRyb2xsZXIoKSB7XG4gIGlmICghY29tbXVuaWNhdGlvbnNDb250cm9sbGVyUHJvbWlzZSkge1xuICAgIGNvbW11bmljYXRpb25zQ29udHJvbGxlclByb21pc2UgPSBkY2wubG9hZE1vZHVsZShcbiAgICAgICdAZGVjZW50cmFsYW5kL0NvbW11bmljYXRpb25zQ29udHJvbGxlcicsXG4gICAgICB7fVxuICAgIClcblxuICAgIHZvaWQgY29tbXVuaWNhdGlvbnNDb250cm9sbGVyUHJvbWlzZS50aGVuKCgkKSA9PiB7XG4gICAgICBjb21tdW5pY2F0aW9uc0NvbnRyb2xsZXIgPSAkXG4gICAgfSlcblxuICAgIGNvbnN0IG9ic2VydmVyID0gZ2V0TWVzc2FnZU9ic2VydmVyKClcblxuICAgIGRjbC5zdWJzY3JpYmUoJ2NvbW1zJylcbiAgICBkY2wub25FdmVudCgoZXZlbnQpID0+IHtcbiAgICAgIGlmIChldmVudC50eXBlID09PSAnY29tbXMnKSB7XG4gICAgICAgIG9ic2VydmVyLm5vdGlmeU9ic2VydmVycyhldmVudC5kYXRhIGFzIGFueSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG4gIHJldHVybiBjb21tdW5pY2F0aW9uc0NvbnRyb2xsZXJQcm9taXNlXG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgTWVzc2FnZUJ1cyB7XG4gIHByaXZhdGUgbWVzc2FnZVF1ZXVlOiBzdHJpbmdbXSA9IFtdXG4gIHByaXZhdGUgY29ubmVjdGVkID0gZmFsc2VcbiAgcHJpdmF0ZSBmbHVzaGluZyA9IGZhbHNlXG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdm9pZCBlbnN1cmVDb21tdW5pY2F0aW9uc0NvbnRyb2xsZXIoKS50aGVuKCgpID0+IHtcbiAgICAgIHRoaXMuY29ubmVjdGVkID0gdHJ1ZVxuICAgICAgdGhpcy5mbHVzaCgpXG4gICAgfSlcbiAgfVxuXG4gIG9uKFxuICAgIG1lc3NhZ2U6IHN0cmluZyxcbiAgICBjYWxsYmFjazogKHZhbHVlOiBhbnksIHNlbmRlcjogc3RyaW5nKSA9PiB2b2lkXG4gICk6IE9ic2VydmVyPElFdmVudHNbJ2NvbW1zJ10+IHtcbiAgICByZXR1cm4gZ2V0TWVzc2FnZU9ic2VydmVyKCkuYWRkKChlKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBtID0gSlNPTi5wYXJzZShlLm1lc3NhZ2UpXG5cbiAgICAgICAgaWYgKG0ubWVzc2FnZSA9PT0gbWVzc2FnZSkge1xuICAgICAgICAgIGNhbGxiYWNrKG0ucGF5bG9hZCwgZS5zZW5kZXIpXG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgZGNsLmVycm9yKFxuICAgICAgICAgICdFcnJvciBwYXJzaW5nIGNvbW1zIG1lc3NhZ2UgJyArICgoZSBhcyBFcnJvcikubWVzc2FnZSB8fCAnJyksXG4gICAgICAgICAgZVxuICAgICAgICApXG4gICAgICB9XG4gICAgfSkhXG4gIH1cblxuICAvLyBAaW50ZXJuYWxcbiAgc2VuZFJhdyhtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICB0aGlzLm1lc3NhZ2VRdWV1ZS5wdXNoKG1lc3NhZ2UpXG5cbiAgICBpZiAodGhpcy5jb25uZWN0ZWQpIHtcbiAgICAgIHRoaXMuZmx1c2goKVxuICAgIH1cbiAgfVxuXG4gIGVtaXQobWVzc2FnZTogc3RyaW5nLCBwYXlsb2FkOiBSZWNvcmQ8YW55LCBhbnk+KSB7XG4gICAgY29uc3QgbWVzc2FnZVRvU2VuZCA9IEpTT04uc3RyaW5naWZ5KHsgbWVzc2FnZSwgcGF5bG9hZCB9KVxuICAgIHRoaXMuc2VuZFJhdyhtZXNzYWdlVG9TZW5kKVxuICAgIGdldE1lc3NhZ2VPYnNlcnZlcigpLm5vdGlmeU9ic2VydmVycyh7XG4gICAgICBtZXNzYWdlOiBtZXNzYWdlVG9TZW5kLFxuICAgICAgc2VuZGVyOiAnc2VsZidcbiAgICB9KVxuICB9XG5cbiAgcHJpdmF0ZSBmbHVzaCgpIHtcbiAgICBpZiAodGhpcy5tZXNzYWdlUXVldWUubGVuZ3RoID09PSAwKSByZXR1cm5cbiAgICBpZiAoIXRoaXMuY29ubmVjdGVkKSByZXR1cm5cbiAgICBpZiAoIWNvbW11bmljYXRpb25zQ29udHJvbGxlcikgcmV0dXJuXG4gICAgaWYgKHRoaXMuZmx1c2hpbmcpIHJldHVyblxuXG4gICAgY29uc3QgbWVzc2FnZSA9IHRoaXMubWVzc2FnZVF1ZXVlLnNoaWZ0KClcblxuICAgIHRoaXMuZmx1c2hpbmcgPSB0cnVlXG5cbiAgICBkY2wuY2FsbFJwYyhjb21tdW5pY2F0aW9uc0NvbnRyb2xsZXIucnBjSGFuZGxlLCAnc2VuZCcsIFttZXNzYWdlXSkudGhlbihcbiAgICAgIChfKSA9PiB7XG4gICAgICAgIHRoaXMuZmx1c2hpbmcgPSBmYWxzZVxuICAgICAgICB0aGlzLmZsdXNoKClcbiAgICAgIH0sXG4gICAgICAoZSkgPT4ge1xuICAgICAgICB0aGlzLmZsdXNoaW5nID0gZmFsc2VcbiAgICAgICAgZXJyb3IoJ0Vycm9yIGZsdXNoaW5nIE1lc3NhZ2VCdXMnLCBlKVxuICAgICAgfVxuICAgIClcbiAgfVxufVxuIiwiLy8gQ09SRSBERVBFTkRFTkNJRVNcbmV4cG9ydCAqIGZyb20gJy4vZWNzL0F0dGFjaGFibGUnXG5leHBvcnQgKiBmcm9tICcuL2Vjcy9FbmdpbmUnXG5leHBvcnQgKiBmcm9tICcuL2Vjcy9Db21wb25lbnQnXG5leHBvcnQgKiBmcm9tICcuL2Vjcy9Db21wb25lbnRHcm91cCdcbmV4cG9ydCAqIGZyb20gJy4vZWNzL0VudGl0eSdcbmV4cG9ydCAqIGZyb20gJy4vZWNzL0lFbnRpdHknXG5leHBvcnQgKiBmcm9tICcuL2Vjcy9UYXNrJ1xuZXhwb3J0ICogZnJvbSAnLi9lY3MvaGVscGVycydcbmV4cG9ydCAqIGZyb20gJy4vZWNzL09ic2VydmFibGUnXG5leHBvcnQgKiBmcm9tICcuL2Vjcy9VSVZhbHVlJ1xuZXhwb3J0ICogZnJvbSAnLi9lY3MvRXZlbnRNYW5hZ2VyJ1xuZXhwb3J0ICogZnJvbSAnLi9lY3MvVXNlckFjdGlvbnMnXG5cbmltcG9ydCB7IF9pbml0RXZlbnRPYnNlcnZhYmxlcyB9IGZyb20gJy4vZGVjZW50cmFsYW5kL0V2ZW50cydcbmltcG9ydCB7IERlY2VudHJhbGFuZFN5bmNocm9uaXphdGlvblN5c3RlbSB9IGZyb20gJy4vZGVjZW50cmFsYW5kL0ltcGxlbWVudGF0aW9uJ1xuXG4vLyBFQ1MgSU5JVElBTElaQVRJT05cbmltcG9ydCB7IEVuZ2luZSB9IGZyb20gJy4vZWNzL0VuZ2luZSdcbmltcG9ydCB7IEVudGl0eSB9IGZyb20gJy4vZWNzL0VudGl0eSdcblxuY29uc3QgZW50aXR5ID0gbmV3IEVudGl0eSgnc2NlbmUnKVxuOyhlbnRpdHkgYXMgYW55KS51dWlkID0gJzAnXG5cbi8vIEluaXRpYWxpemUgZW5naW5lXG4vKiogQHB1YmxpYyAqL1xuY29uc3QgZW5naW5lID0gbmV3IEVuZ2luZShlbnRpdHkpXG5cbmltcG9ydCB7IERpc3Bvc2FibGVDb21wb25lbnQgfSBmcm9tICcuL2Vjcy9Db21wb25lbnQnXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10cy1jb21tZW50XG4vLyBAdHMtaWdub3JlXG5EaXNwb3NhYmxlQ29tcG9uZW50LmVuZ2luZSA9IGVuZ2luZVxuXG4vLyBJbml0aWFsaXplIERlY2VudHJhbGFuZCBpbnRlcmZhY2VcbmlmICh0eXBlb2YgZGNsICE9PSAndW5kZWZpbmVkJykge1xuICBlbmdpbmUuYWRkU3lzdGVtKG5ldyBEZWNlbnRyYWxhbmRTeW5jaHJvbml6YXRpb25TeXN0ZW0oZGNsKSwgSW5maW5pdHkpXG4gIF9pbml0RXZlbnRPYnNlcnZhYmxlcyhkY2wpXG59XG5cbmltcG9ydCB7XG4gIHV1aWRFdmVudFN5c3RlbSxcbiAgcG9pbnRlckV2ZW50U3lzdGVtLFxuICByYXljYXN0RXZlbnRTeXN0ZW1cbn0gZnJvbSAnLi9kZWNlbnRyYWxhbmQvU3lzdGVtcydcblxuLy8gSW5pdGlhbGl6ZSBVVUlEIEV2ZW50cyBzeXN0ZW1cbmVuZ2luZS5hZGRTeXN0ZW0odXVpZEV2ZW50U3lzdGVtKVxuLy8gSW5pdGlhbGl6ZSBQb2ludGVyIEV2ZW50cyBTeXN0ZW1cbmVuZ2luZS5hZGRTeXN0ZW0ocG9pbnRlckV2ZW50U3lzdGVtKVxuLy8gSW5pdGlhbGl6ZSBSYXljYXN0IEV2ZW50cyBTeXN0ZW1cbmVuZ2luZS5hZGRTeXN0ZW0ocmF5Y2FzdEV2ZW50U3lzdGVtKVxuXG4vLyBERUNFTlRSQUxBTkQgREVQRU5ERU5DSUVTXG5leHBvcnQgKiBmcm9tICcuL2RlY2VudHJhbGFuZC9NYXRoJ1xuZXhwb3J0ICogZnJvbSAnLi9kZWNlbnRyYWxhbmQvVHlwZXMnXG5leHBvcnQgKiBmcm9tICcuL2RlY2VudHJhbGFuZC9Db21wb25lbnRzJ1xuZXhwb3J0ICogZnJvbSAnLi9kZWNlbnRyYWxhbmQvU3lzdGVtcydcbmV4cG9ydCAqIGZyb20gJy4vZGVjZW50cmFsYW5kL0V2ZW50cydcbmV4cG9ydCAqIGZyb20gJy4vZGVjZW50cmFsYW5kL0NhbWVyYSdcbmV4cG9ydCAqIGZyb20gJy4vZGVjZW50cmFsYW5kL0FuaW1hdGlvblN0YXRlJ1xuZXhwb3J0ICogZnJvbSAnLi9kZWNlbnRyYWxhbmQvSW5wdXQnXG5leHBvcnQgKiBmcm9tICcuL2RlY2VudHJhbGFuZC9BdWRpbydcbmV4cG9ydCAqIGZyb20gJy4vZGVjZW50cmFsYW5kL0dpem1vcydcbmV4cG9ydCAqIGZyb20gJy4vZGVjZW50cmFsYW5kL1VJU2hhcGVzJ1xuZXhwb3J0ICogZnJvbSAnLi9kZWNlbnRyYWxhbmQvQXZhdGFyU2hhcGUnXG5leHBvcnQgKiBmcm9tICcuL2RlY2VudHJhbGFuZC9VSUV2ZW50cydcbmV4cG9ydCAqIGZyb20gJy4vZGVjZW50cmFsYW5kL01lc3NhZ2VCdXMnXG5leHBvcnQgKiBmcm9tICcuL2RlY2VudHJhbGFuZC9QaHlzaWNzQ2FzdCdcblxuZXhwb3J0IHsgZW5naW5lIH1cbiJdLCJuYW1lcyI6WyJidWlsZEFycmF5IiwiVUlWYWx1ZVR5cGUiLCJTY2FsYXJfMSIsIlZlY3RvcjRfMSIsInR5cGVzXzEiLCJyZXF1aXJlJCQwIiwicmVxdWlyZSQkMSIsIlZlY3RvcjNfMSIsInJlcXVpcmUkJDIiLCJNYXRyaXhfMSIsIlF1YXRlcm5pb25fMSIsInByZWFsbG9jYXRlZFZhcmlhYmxlc18xIiwicmVxdWlyZSQkMyIsInJlcXVpcmUkJDQiLCJBbmdsZV8xIiwiVmVjdG9yMl8xIiwiQXJjMl8xIiwiQXhpc18xIiwiQmV6aWVyQ3VydmVfMSIsIkNvbG9yNF8xIiwiQ29sb3IzXzEiLCJQbGFuZV8xIiwiU2l6ZV8xIiwidGhpcyIsInJlcXVpcmUkJDUiLCJyZXF1aXJlJCQ2IiwicmVxdWlyZSQkNyIsInJlcXVpcmUkJDgiLCJyZXF1aXJlJCQ5IiwicmVxdWlyZSQkMTAiLCJyZXF1aXJlJCQxMSIsInJlcXVpcmUkJDEyIiwicmVxdWlyZSQkMTMiLCJyZXF1aXJlJCQxNCIsInJlcXVpcmUkJDE1IiwicmVxdWlyZSQkMTYiLCJyZXF1aXJlJCQxNyIsInJlcXVpcmUkJDE4IiwicmVxdWlyZSQkMTkiLCJyZXF1aXJlJCQyMCIsIklucHV0RXZlbnRUeXBlIiwiQ2FtZXJhTW9kZSIsIkxhbmRSb2xlIiwiQWN0aW9uQnV0dG9uIiwiVmVjdG9yMyIsIkNMQVNTX0lEIiwiQXZhdGFyTW9kaWZpZXJzIiwiUXVhdGVybmlvbiIsIk1hdGhUbXAiLCJNYXRyaXgiLCJBdHRhY2hUb0F2YXRhckFuY2hvclBvaW50SWQiLCJQaWN0dXJlRnJhbWVTdHlsZSIsIkNvbG9yMyIsIkZvbnRzIiwiVHJhbnNwYXJlbmN5TW9kZSIsIlZpZGVvU3RhdHVzIiwiR2l6bW8iLCJDb2xvcjQiLCJVSVN0YWNrT3JpZW50YXRpb24iXSwibWFwcGluZ3MiOiI7OztFQUVBOzs7Ozs7TUFLQTtPQWFDOztNQVhpQixpQkFBTSxHQUFlO1VBQ25DLHVCQUF1QixFQUFFLFVBQUMsTUFBZSxJQUFLLE9BQUEsTUFBTSxDQUFDLFlBQVksR0FBQTtPQUN6RCxDQUFBOztNQUVNLDhCQUFtQixHQUFlO1VBQ2hELHVCQUF1QixFQUFFLFVBQUMsTUFBZSxJQUFLLE9BQUEsTUFBTSxDQUFDLHVCQUF1QixHQUFBO09BQ3BFLENBQUE7TUFLWixpQkFBQztHQWJEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztFQ1BBLElBQUksZUFBZSxHQUFHLENBQUMsQ0FBQTtFQUl2Qjs7Ozs7V0FLZ0IsR0FBRztNQUFDLGNBQWM7V0FBZCxVQUFjLEVBQWQscUJBQWMsRUFBZCxJQUFjO1VBQWQseUJBQWM7O01BQ2hDLElBQUksT0FBTyxHQUFHLEtBQUss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QUcsR0FBRyxDQUFDLEVBQUU7RUFDMUMsUUFBUSxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7RUFDbkQsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLE9BQU8sSUFBSSxDQUFDLEtBQUssRUFBRTtFQUN2QixRQUFRLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO0VBQzVDLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxPQUFPLE1BQU0sQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFO0VBQ2pDLFFBQVEsT0FBTyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDO0VBQzNELEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksT0FBTyxTQUFTLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUU7RUFDdEMsUUFBUSxPQUFPLENBQUMsS0FBSyxHQUFHLEdBQUcsS0FBSyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUM7RUFDM0MsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxPQUFPLFdBQVcsQ0FBQyxVQUFVLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRTtFQUM3QyxRQUFRLE9BQU8sVUFBVSxJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7RUFDOUMsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksT0FBTyxVQUFVLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRTtFQUN2QyxRQUFRLElBQUksR0FBRyxHQUFHLE1BQU0sQ0FBQyxN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LENBQUMsSUFBSSxDQUFDLENBQUM7RUFDL0IsUUFBUSxJQUFJLEdBQUcsQ0FBQyxJQUFJLEdBQUcsR0FBRyxLQUFLLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7RUFDNUMsUUFBUSxJQUFJLEdBQUcsQ0FBQyxJQUFJLEdBQUcsR0FBRyxLQUFLLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7RUFDNUMsUUFBUSxJQUFJLEdBQUcsQ0FBQyxJQUFJLEdBQUcsR0FBRyxLQUFLLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7RUFDNUMsUUFBUSxPQUFPLElBQUksQ0FBQztFQUNwQixLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksT0FBTyxHQUFHO0VBQ2QsUUFBUSxNQUFNLE1BQU0sR0FBRyxJQUFJLEtBQUssRUFBRSxDQUFDO0VBQ25DLFFBQVEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7RUFDaEMsUUFBUSxPQUFPLE1BQU0sQ0FBQztFQUN0QixLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxPQUFPLENBQUMsS0FBSyxFQUFFLEtBQUssR0FBRyxDQUFDLEVBQUU7RUFDOUIsUUFBUSxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztFQUM5QixRQUFRLEtBQUssQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztFQUNsQyxRQUFRLEtBQUssQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztFQUNsQyxRQUFRLEtBQUssQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztFQUNsQyxRQUFRLE9BQU8sSUFBSSxDQUFDO0VBQ3BCLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxVQUFVLENBQUMsV0FBVyxFQUFFO0VBQzVCLFFBQVEsSUFBSSxDQUFDLENBQUMsSUFBSSxXQUFXLENBQUMsQ0FBQyxDQUFDO0VBQ2hDLFFBQVEsSUFBSSxDQUFDLENBQUMsSUFBSSxXQUFXLENBQUMsQ0FBQyxDQUFDO0VBQ2hDLFFBQVEsSUFBSSxDQUFDLENBQUMsSUFBSSxXQUFXLENBQUMsQ0FBQyxDQUFDO0VBQ2hDLFFBQVEsSUFBSSxDQUFDLENBQUMsSUFBSSxXQUFXLENBQUMsQ0FBQyxDQUFDO0VBQ2hDLFFBQVEsT0FBTyxJQUFJLENBQUM7RUFDcEIsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLEdBQUcsQ0FBQyxXQUFXLEVBQUU7RUFDckIsUUFBUSxPQUFPLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQzNILEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLFFBQVEsQ0FBQyxXQUFXLEVBQUUsTUFBTSxFQUFFO0VBQ2xDLFFBQVEsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUM7RUFDMUMsUUFBUSxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQztFQUMxQyxRQUFRLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDO0VBQzFDLFFBQVEsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUM7RUFDMUMsUUFBUSxPQUFPLElBQUksQ0FBQztFQUNwQixLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksZUFBZSxDQUFDLFdBQVcsRUFBRTtFQUNqQyxRQUFRLElBQUksQ0FBQyxDQUFDLElBQUksV0FBVyxDQUFDLENBQUMsQ0FBQztFQUNoQyxRQUFRLElBQUksQ0FBQyxDQUFDLElBQUksV0FBVyxDQUFDLENBQUMsQ0FBQztFQUNoQyxRQUFRLElBQUksQ0FBQyxDQUFDLElBQUksV0FBVyxDQUFDLENBQUMsQ0FBQztFQUNoQyxRQUFRLElBQUksQ0FBQyxDQUFDLElBQUksV0FBVyxDQUFDLENBQUMsQ0FBQztFQUNoQyxRQUFRLE9BQU8sSUFBSSxDQUFDO0VBQ3BCLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxRQUFRLENBQUMsV0FBVyxFQUFFO0VBQzFCLFFBQVEsT0FBTyxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUMzSCxLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxhQUFhLENBQUMsV0FBVyxFQUFFLE1BQU0sRUFBRTtFQUN2QyxRQUFRLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDO0VBQzFDLFFBQVEsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUM7RUFDMUMsUUFBUSxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQztFQUMxQyxRQUFRLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxXQUFX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QUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDM0gsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksV0FBVyxDQUFDLFdBQVcsRUFBRSxNQUFNLEVBQUU7RUFDckMsUUFBUSxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQztFQUMxQyxRQUFRLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDO0VBQzFDLFFBQVEsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUM7RUFDMUMsUUFBUSxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQztFQUMxQyxRQUFRLE9BQU8sSUFBSSxDQUFDO0VBQ3BCLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxhQUFhLENBQUMsV0FBVyxFQUFFO0VBQy9CLFFBQVEsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztFQUNuRCxLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksZUFBZSxDQUFDLEtBQUssRUFBRTtFQUMzQixRQUFRLElBQUksS0FBSyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxFQUFFO0VBQzlCLFlBQVksSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0VBQzdCLFNBQVM7RUFDVCxRQUFRLElBQUksS0FBSyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxFQUFFO0VBQzlCLFlBQVksSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0VBQzdCLFNBQVM7RUFDVCxRQUFRLElBQUksS0FBSyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxFQUFFO0VBQzlCLFlBQVksSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0VBQzdCLFNBQVM7RUFDVCxRQUFRLElBQUksS0FBSyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxFQUFFO0VBQzlCLFlBQVksSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0VBQzdCLFNBQVM7RUFDVCxRQUFRLE9BQU8sSUFBSSxDQUFDO0VBQ3BCLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxlQUFlLENBQUMsS0FBSyxFQUFFO0VBQzNCLFFBQVEsSUFBSSxLQUFLLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEVBQUU7RUFDOUIsWUFBWSxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7RUFDN0IsU0FBUztFQUNULFFBQVEsSUFBSSxLQUFLLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEVBQUU7RUFDOUIsWUFBWSxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7RUFDN0IsU0FBUztFQUNULFFBQVEsSUFBSSxLQUFLLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEVBQUU7RUFDOUIsWUFBWSxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7RUFDN0IsU0FBUztFQUNULFFBQVEsSUFBSSxLQUFLLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEVBQUU7RUFDOUIsWUFBWSxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7RUFDN0IsU0FBUztFQUNULFFBQVEsT0FBTyxJQUFJLENBQUM7RUFDcEIsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxLQUFLLEdBQUc7RUFDWixRQUFRLE9BQU8sSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUMzRyxLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLEtBQUssR0FBRztFQUNaLFFBQVEsT0FBTyxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDL0ksS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLE1BQU0sR0FBRztFQUNiLFFBQVEsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ2hHLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksYUFBYSxHQUFHO0VBQ3BCLFFBQVEsT0FBTyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFD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QUNBO0VBQ0E7RUFDQSxJQUFJLE9BQU8sZUFBZSxDQUFDLFVBQVUsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUU7RUFDbk8sUUFBUSxNQUFNLENBQUMsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDO0VBQzVCLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQztFQUMxQixRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUM7RUFDMUIsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDO0VBQzFCLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQztFQUMxQixRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUM7RUFDMUIsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDO0VBQzFCLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQztFQUMxQixRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUM7RUFDMUIsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDO0VBQzFCLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQztFQUMxQixRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxVQUFVLENBQUM7RUFDM0IsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsVUFBVSxDQUFDO0VBQzNCLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFVBQVUsQ0FBQztFQUMzQixRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxVQUFVLENBQUM7RUFDM0IsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsVUFBVSxDQUFDO0VBQzNCLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFVBQVUsQ0FBQztFQUMzQixRQUFRLE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQztFQUNoQyxLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksT0FBTyxVQUFVLENBQUMsVUFBVSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFO0VBQ3ROLFFBQVEsTUFBTSxNQUFNLEdBQUcsSUFBSSxNQUFNLEVBQUUsQ0FBQztFQUNwQyxRQUFRLE1BQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUM7RUFDNUIsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDO0VBQzFCLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQztFQUMxQixRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUM7RUFDMUIsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDO0VBQzFCLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQztFQUMxQixRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUM7RUFDMUIsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDO0VBQzFCLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQztFQUMxQixRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUM7RUFDMUIsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDO0VBQzFCLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFVBQVUsQ0FBQztFQUMzQixRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxVQUFVLENBQUM7RUFDM0IsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsVUFBVSxDQUFDO0VBQzNCLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFVBQVUsQ0FBQztFQUMzQixRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxVQUFVLENBQUM7RUFDM0IsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsVUFBVSxDQUFDO0VBQzNCLFFBQVEsTUFBTSxDQUFDLGNBQWMsRUFBRSxDQUFDO0VBQ2hDLFFBQVEsT0FBTyxNQUFNLENBQUM7RUFDdEIsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxPQUFPLE9BQU8sQ0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRTtFQUNqRCxRQUFRLE1BQU0sTUFBTSxHQUFHLElBQUksTUFBTSxFQUFFLENBQUM7RUFDcEMsUUFBUSxNQUFNLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0VBQ2xFLFFBQVEsT0FBTyxNQUFNLENBQUM7RUFDdEIsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxPQUFPLFlBQVksQ0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUU7RUFDOUQsUUFBUSxNQUFNLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFRCx5QkFBdUIsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FB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LENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRTtFQUNyQyxRQUFRLE1BQU0sTUFBTSxHQUFHLElBQUksTUFBTSxFQUFFLENBQUM7RUFDcEMsUUFBUSxNQUFNLENBQUMsaUJBQWlCLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztFQUN0RCxRQUFRLE9BQU8sTUFBTSxDQUFDO0VBQ3RCLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLE9BQU8saUJBQWlCLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUU7RUFDbEQsUUFBUSxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7RUFDbkMsUUFBUSxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7RUFDbkMsUUFBUSxNQUFNLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0VBQ3pCLFFBQVEsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO0VBQ3pCLFFBQVEsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQztFQUM1QixRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztFQUN4QyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0VBQ2pELFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7RUFDakQsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO0VBQ25CLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7RUFDakQsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7RUFDeEMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztFQUNqRCxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7RUFDbkIsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztFQUNqRCxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0VBQ2pELFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0VBQ3pDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQztFQUNwQixRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUM7RUFDcEIsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDO0VBQ3BCLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQztFQUNwQixRQUFRLENBQUMs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N0IsUUFBUSxNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDO0VBQzdCLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUN0QixRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDdEIsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ3RCLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztFQUN2QixRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDdEIsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ3RCLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUN0QixRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7RUFDdkIsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ3RCLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUN0QixRQUFRLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7RUFDeEIsUUFBUSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0VBQ3hCLFFBQVEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUN2QixRQUFRLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDdkIsUUFBUSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0VBQ3hCLFFBQVEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztFQUN4QjtFQUNBLFFBQVEsTUFBTSxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUM7RUFDbEYsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLE9BQU8sVUFBVSxDQUFDLEtBQUssRUFBRTtFQUM3QixRQUFRLE1BQU0sTUFBTSxHQUFHLElBQUksTUFBTSxFQUFFLENBQUM7RUFDcEMsUUFBUSxNQUFNLENBQUMsZUFBZSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztFQUM5QyxRQUFRLE9BQU8sTUFBTSxDQUFDO0VBQ3RCLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxPQUFPLGVBQWUsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFO0VBQzFDLFFBQVEsS0FBSyxDQUFDLFNBQVMsRUFBRSxDQUFDO0VBQzFCLFFBQVEsTUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7RUFDakMsUUFBUSxNQUFNLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztFQUNqQyxRQUFRLE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0VBQ2pDLFFBQVEsTUFBTSxJQUFJLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0VBQzVCLFFBQVEsTUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0VBQzdCLFFBQVEsTUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0VBQzdCLFFBQVEsTUFBTSxDQUFDLGVBQWUsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEtBQUssR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsS0FBSyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEtBQUssR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxJQUFJLEdBQUcsS0FBSyxDQUFDLENBQUMsRUFBRSxLQUFLLEdBQUcsS0FBSyxDQUFDLENBQUMsRUFBRSxLQUFLLEdBQUcsS0FBSyxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7RUFDek4sS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxPQUFPLGdCQUFnQixDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRTtFQUN6RCxRQUFRLE1BQU0sQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0VBQzNKLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxPQUFPLG1CQUFtQixDQUFDLElBQUksRUFBRSxNQUFNLEVBQUU7RUFDN0MsUUFBUSxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7RUFDbkMsUUFBUSxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7RUFDbkMsUUFBUSxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7RUFDbkMsUUFBUSxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7RUFDbkMsUUFBUSxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7RUFDbkMsUUFBUSxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7RUFDbkMsUUFBUSxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7RUFDbkMsUUFBUSxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7RUFDbkMsUUFBUSxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7RUFDbkMsUUFBUSxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0VBQzdDLFFBQVEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0VBQ3ZDLFFBQVEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0VBQ3ZDLFFBQVEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7RUFDM0IsUUFBUSxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLENB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QUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQzdEO0VBQ0EsUUFBUSxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7RUFDL0Q7RUFDQSxRQUFRLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztFQUNqRTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxRQUFRLE1BQU0sU0FBUyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztFQUNoRCxRQUFRLE1BQU0sU0FBUyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztFQUNoRCxRQUFRLE1BQU0sU0FBUyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztFQUNoRCxRQUFRLE1BQU0sU0FBUyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztFQUNoRCxRQUFRLE1BQU0sU0FBUyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztFQUNoRCxRQUFRLE1BQU0sU0FBUyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztFQUNoRCxRQUFRLE1B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QUUsR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7RUFDakU7RUFDQTtFQUNBLFFBQVEsTUFBTSxTQUFTLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0VBQ2hELFFBQVEsTUFBTSxTQUFTLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0VBQ2hELFFBQVEsTUFBTSxTQUFTLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0VBQ2hELFFBQVEsTUFBTSxTQUFTLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0VBQ2hELFFBQVEsTUFBTSxTQUFTLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0VBQ2hELFFBQVEsTUFBTSxTQUFTLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0VBQ2hELFFBQVEsTUFBTSxTQUFTLEdBQUcsRUFBRSxHQUFHLEdBQUcsU0FBUyxHQUFHLEdBQUcsR0FBRyxTQUFTLEdBQUcsR0FBRyxHQUFHLFNBQVMsQ0FBQyxDQUFDO0VBQ2pGLFFBQVEsTUFBTSxTQUFTLEdBQUcsRUFBRSxHQUFHLEdBQUcsU0FBUyxHQUFHLEdBQUcsR0FBRyxTQUFTLEdBQUcsR0FBRyxHQUFHLFNBQVMsQ0FBQyxDQUFDO0VBQ2pGLFFBQVEsTUFBTSxTQUFTLEdBQUcsRUFBRSxHQUFHLEdBQUcsU0FBUyxHQUFHLEdBQUcsR0FBRyxTQUFTLEdBQUcsR0FBRyxHQUFHLFNBQVMsQ0FBQyxDQUFDO0VBQ2pGLFFBQVEsTUFBTSxTQUFTLEdBQUcsRUFBRSxHQUFHLEdBQUcsU0FBUyxHQUFHLEdBQUcsR0FBRyxTQUFTLEdBQUcsR0FBRyxHQUFHLFNBQVMsQ0FBQyxDQUFDO0VBQ2pGLFFBQVEsTUFBTSxHQUFHLEdBQUcsR0FBRyxHQUFHLFNBQVMsR0FBRyxHQUFHLEdBQUcsU0FBUyxHQUFHLEdBQUcsR0FBRyxTQUFTLEdBQUcsR0FBRyxHQUFHLFNBQVMsQ0FBQztFQUMxRixRQUFRLElBQUksR0FBRyxLQUFLLENBQUMsRUFBRTtFQUN2QjtFQUNBLFlBQVksS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztFQUNqQyxZQUFZLE9BQU8sSUFBSSxDQUFDO0VBQ3hCLFNBQVM7RUFDVCxRQUFRLE1BQU0sTUFBTSxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7RUFDL0IsUUFBUSxNQUFNLFNBQVMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7RUFDaEQsUUFBUSxNQUFNLFNBQVMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7RUFDaEQsUUFBUSxNQUFNLFNBQVMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7RUFDaEQsUUFBUSxNQUFNLFNBQVMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7RUFDaEQsUUFBUSxNQUFNLFNBQVMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7RUFDaEQsUUFBUSxNQUFNLFNBQVMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7RUFDaEQsUUFBUSxNQUFNLFNBQVMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7RUFDaEQsUUFBUSxNQUFNLFNBQVMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7RUFDaEQsUUFBUSxNQUFNLFNBQVMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7RUFDaEQsUUFBUSxNQUFNLFNBQVMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7RUFDaEQsUUFBUSxNQUFNLFNBQVMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7RUFDaEQsUUFBUSxNQUFNLFNBQVMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7RUFDaEQsUUFBUSxNQUFNLFNBQVMsR0FBRyxFQUFFLEdBQUcsR0FBRyxTQUFTLEdBQUcsR0FBRyxHQUFHLFNBQVMsR0FBRyxHQUFHLEdBQUcsU0FBUyxDQUFDLENBQUM7RUFDakYsUUFBUSxNQUFNLFNBQVMsR0FBRyxFQUFFLEdBQUcsR0FBRyxTQUFTLEdBQUcsR0FBRyxHQUFHLFNBQVMsR0FBRyxHQUFHLEdBQUcsU0FBUyxDQUFDLENBQUM7RUFDakYsUUFBUSxNQUFNLFNBQVMsR0FBRyxFQUFFLEdBQUcsR0FBRyxTQUFTLEdBQUcsR0FBRyxHQUFHLFNBQVMsR0FBRyxHQUFHLEdBQUcsU0FBUyxDQUFDLENBQUM7RUFDakYsUUFBUSxNQUFNLFNBQVMsR0FBRyxFQUFFLEdBQUcsR0FBRyxTQUFTLEdBQUcsR0FBRyxHQUFHLFNBQVMsR0FBRyxHQUFHLEdBQUcsU0FBUyxDQUFDLENBQUM7RUFDakYsUUFBUSxNQUFNLFNBQVMsR0FBRyxFQUFFLEdBQUcsR0FBRyxTQUFTLEdBQUcsR0FBRyxHQUFHLFNBQVMsR0FBRyxHQUFHLEdBQUcsU0FBUyxDQUFDLENBQUM7RUFDakYsUUFBUSxNQUFNLFNBQVMsR0FBRyxFQUFFLEdBQUcsR0FBRyxTQUFTLEdBQUcsR0FBRyxHQUFHLFNBQVMsR0FBRyxHQUFHLEdBQUcsU0FBUyxDQUFDLENBQUM7RUFDakYsUUFBUSxNQUFNLFNBQVMsR0FBRyxFQUFFLEdBQUcsR0FBRyxTQUFTLEdBQUcsR0FBRyxHQUFHLFNBQVMsR0FBRyxHQUFHLEdBQUcsU0FBUyxDQUFDLENBQUM7RUFDakYsUUFBUSxNQUFNLFNBQVMsR0FBRyxFQUFFLEdBQUcsR0FBRyxTQUFTLEdBQUcsR0FBRyxHQUFHLFNBQVMsR0FBRyxHQUFHLEdBQUcsU0FBUyxDQUFDLENBQUM7RUFDakYsUUFBUSxNQUFNLFNBQVMsR0FBRyxFQUFFLEdBQUcsR0FBRyxTQUFTLEdBQUcsR0FBRyxHQUFHLFNBQVMsR0FBRyxHQUFHLEdBQUcsU0FBUyxDQUFDLENBQUM7RUFDakYsUUFBUSxNQUFNLFNBQVMsR0FBRyxFQUFFLEdBQUcsR0FBRyxTQUFTLEdBQUcsR0FBRyxHQUFHLFNBQVMsR0FBRyxHQUFHLEdBQUcsU0FBUyxDQUFDLENBQUM7RUFDakYsUUFBUSxNQUFNLFNBQVMsR0FBRyxFQUFFLEdBQUcsR0FBRyxTQUFTLEdBQUcsR0FBRyxHQUFHLFNBQVMsR0FBRyxHQUFHLEdBQUcsU0FBUyxDQUFDLENBQUM7RUFDakYsUUFBUSxNQUFNLFNBQVMsR0FBRyxFQUFFLEdBQUcsR0FBRyxTQUFTLEdBQUcsR0FBRyxHQUFHLFNBQVMsR0FBRyxHQUFHLEdBQUcsU0FBUyxDQUFDLENBQUM7RUFDakYsUUFBUSxNQUFNLENBQUMsZUFBZSxDQUFDLFNBQVMsR0FBRyxNQUFNLEVBQUUsU0FBUyxHQUFHLE1BQU0sRUFBRSxTQUFTLEdBQUcsTUFBTSxFQUFFLFNBQVMsR0FBRyxNQUFNLEVBQUUsU0FBUyxHQUFHLE1BQU0sRUFBRSxTQUFTLEdBQUcsTUFBTSxFQUFFLFNBQVMsR0FBRyxNQUFNLEVBQUUsU0FBUyxHQUFHLE1BQU0sRUFBRSxTQUFTLEdBQUcsTUFBTSxFQUFFLFNBQVMsR0FBRyxNQUFNLEVBQUUsU0FBUyxHQUFHLE1BQU0sRUFBRSxTQUFTLEdBQUcsTUFBTSxFQUFFLFNBQVMsR0FBRyxNQUFNLEVBQUUsU0FBUyxHQUFHLE1BQU0sRUFBRSxTQUFTLEdBQUcsTUFBTSxFQUFFLFNBQVMsR0FBRyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7RUFDdFc7RUFDQSxRQUFRLE9BQU8sSUFBSSxDQUFDO0VBQ3BCLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLFVBQVUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFO0VBQzdCLFFBQVEsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUM7RUFDaEMsUUFBUSxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7RUFDOUIsUUFBUSxPQUFPLElBQUksQ0FBQztFQUNwQixLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxlQUFlLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRTtFQUNsQyxRQUFRLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDO0VBQ2hDLFFBQVEsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0VBQzlCLFFBQVEsT0FBTyxJQUFJLENBQUM7RUFDcEIsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSx3QkFBd0IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtFQUN0QyxRQUFRLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0VBQ3hCLFFBQVEsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7RUFDeEIsUUFBUSxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztFQUN4QixRQUFRLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztFQUM5QixRQUFRLE9BQU8sSUFBSSxDQUFDO0VBQ3BCLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxjQUFjLENBQUMsT0FBTyxFQUFFO0VBQzVCLFFBQVEsT0FBTyxJQUFJLENBQUMsd0JBQXdCLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUM5RSxLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLGNBQWMsR0FBRztFQUNyQixRQUFRLE9BQU8sSUFBSUEsV0FBUyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0VBQzVFLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxtQkFBbUIsQ0FBQyxNQUFNLEVBQUU7RUFDaEMsUUFBUSxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7RUFDL0IsUUFBUSxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7RUFDL0IsUUFBUSxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7RUFDL0IsUUFBUSxPQUFPLElBQUksQ0FBQztFQUNwQixLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLHdCQUF3QixHQUFHO0VBQy9CLFFBQVEsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztFQUN6QixRQUFRLE1BQU0sQ0FBQyxlQUFlLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0VBQzdILFFBQVEsSUFBSSxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FB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QyxDQUFDLENBQUMsQ0FBQztFQUM3RCxRQUFRLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztFQUNqRSxRQUFRLE1BQU0sSUFBSSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztFQUNyRSxRQUFRLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUNqRixRQUFRLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUNqRixRQUFRLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztFQUNyRixRQUFRLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztFQUN6RjtFQUNBLFFBQVEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUM7RUFDeEUsUUFBUSxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUM7RUFDNUUsUUFBUSxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUM7RUFDN0UsUUFBUSxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUM7RUFDN0UsUUFBUSxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUM7RUFDNUUsUUFBUSxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUM7RUFDNUUsUUFBUSxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUM7RUFDN0UsUUFBUSxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUM7RUFDN0UsUUFBUSxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxJQUFJLENBQUM7RUFDOUUsUUFBUSxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxJQUFJLENBQUM7RUFDOUUsUUFBUSxNQUFNLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLENBQUM7RUFDaEYsUUFBUSxNQUFNLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLENBQUM7RUFDaEYsUUFBUSxNQUFNLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQyxHQUFHLElBQUksR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxJQUFJLENBQUM7RUFDakYsUUFBUSxNQUFNLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQyxHQUFHLElBQUksR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxJQUFJLENBQUM7RUFDakYsUUFBUSxNQUFNLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQyxHQUFHLElBQUksR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLENBQUM7RUFDbEYsUUFBUSxNQUFNLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQyxHQUFHLElBQUksR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLENBQUM7RUFDbEYsUUFBUSxPQUFPLElBQUksQ0FBQztFQUNwQixLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksTUFBTSxDQUFDLEtBQUssRUFBRTtFQUNsQixRQUFRLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQztFQUM1QixRQUFRLElBQUksQ0FBQyxLQUFLLEVBQUU7RUFDcEIsWUFBWSxPQUFPLEtBQUssQ0FBQztFQUN6QixTQUFTO0VBQ1QsUUFBUSxJQUFJLElBQUksQ0FBQyxXQUFXLElBQUksS0FBSyxDQUFDLFdBQVcsRUFBRTtFQUNuRCxZQUFZLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEVBQUU7RUFDbkUsZ0JBQWdCLE9BQU8sSUFBSSxDQUFDLFdBQVcsSUFBSSxLQUFLLENBQUMsV0FBVyxDQUFDO0VBQzdELGFBQWE7RUFDYixTQUFTO0VBQ1QsUUFBUSxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0VBQ3pCLFFBQVEsTUFBTSxFQUFFLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztFQUMzQixRQUFRLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7RUFDOUIsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztFQUMxQixZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO0VBQzFCLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7RUFDMUIsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztFQUMxQixZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO0VBQzFCLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7RUFDMUIsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztFQUMxQixZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO0VBQzFCLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7RUFDMUIsWUFBWSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQztFQUM1QixZQUFZLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDO0VBQzVCLFlBQVksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUM7RUFDNUIsWUFBWSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQztFQUM1QixZQUFZLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDO0VBQzVCLFlBQVksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtFQUM5QixLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLEtBQUssR0FBRztFQUNaLFFBQVEsTUFBTSxNQUFNLEdBQUcsSUFBSSxNQUFNLEVBQUUsQ0FBQztFQUNwQyxRQUFRLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7RUFDOUIsUUFBUSxPQUFPLE1BQU0sQ0FBQztFQUN0QixLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLFlBQVksR0FBRztFQUNuQixRQUFRLE9BQU8sUUFBUSxDQUFDO0VBQ3hCLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksV0FBVyxHQUFHO0VBQ2xCLFFBQVEsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7RUFDbkMsUUFBUSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFO0VBQ3JDLFlBQVksSUFBSSxHQUFHLENBQUMsSUFBSSxHQUFHLEdBQUcsS0FBSyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0VBQ3BELFNBQVM7RUFDVCxRQUFRLE9BQU8sSUFBSSxDQUFDO0VBQ3BCLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksU0FBUyxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFO0VBQzVDLFFBQVEsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO0VBQzlCLFlBQVksSUFBSSxXQUFXLEVBQUU7RUFDN0IsZ0JBQWdCLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDdEMsYUFBYTtFQUNiLFlBQVksSUFBSSxLQUFLLEVBQUU7RUFDdkIsZ0JBQWdCLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDaEMsYUFBYTtFQUNiLFlBQVksSUFBSSxRQUFRLEVBQUU7RUFDMUIsZ0JBQWdCLFFBQVEsQ0FBQyxjQUFjLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7RUFDcEQsYUFBYTtFQUNiLFlBQVksT0FBTyxJQUFJLENBQUM7RUFDeEIsU0FBUztFQUNULFFBQVEsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQztFQUMxQixRQUFRLElBQUksV0FBVyxFQUFFO0VBQ3pCLFlBQVksV0FBVyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0VBQzVELFNBQVM7RUFDVCxRQUFRLE1BQU0sU0FBUyxHQUFHLEtBQUssSUFBSUkseUJBQXVCLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUM5RSxRQUFRLFNBQVMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ3pFLFFBQVEsU0FBUyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDekUsUUFBUSxTQUFTLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztFQUMzRSxRQUFRLElBQUksSUFB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dkMsWUFBWSxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUM7RUFDdkMsWUFBWSxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUM7RUFDdkMsU0FBUztFQUNULGFBQWEsSUFBSSxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsR0FBRyxHQUFHLEVBQUU7RUFDekMsWUFBWSxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUM7RUFDdkQsWUFBWSxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUM7RUFDdkMsWUFBWSxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUM7RUFDaEMsWUFBWSxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUM7RUFDdkMsWUFBWSxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUM7RUFDdkMsU0FBUztFQUNULGFBQWEsSUFBSSxHQUFHLEdBQUcsR0FBRyxFQUFFO0VBQzVCLFlBQVksQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0VBQ3ZELFlBQVksTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDO0VBQ3ZDLFlBQVksTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDO0VBQ3ZDLFlBQVksTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDO0VBQ2hDLFlBQVksTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFD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O0VBQ2xDLFlBQVksTUFBTSxDQUFDLENBQUMsR0FBRyxLQUFLO0VBQzVCLFlBQVksUUFBUSxDQUFDLENBQUMsR0FBRyxLQUFLO0VBQzlCLFlBQVksUUFBUSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7RUFDL0IsUUFBUSxNQUFNLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxHQUFHLEtBQUs7RUFDbEMsWUFBWSxNQUFNLENBQUMsQ0FBQyxHQUFHLEtBQUs7RUFDNUIsWUFBWSxRQUFRLENBQUMsQ0FBQyxHQUFHLEtBQUs7RUFDOUIsWUFBWSxRQUFRLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQztFQUMvQixRQUFRLE9BQU8sSUFBSSxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7RUFDMUMsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxXQUFXLFFBQVEsR0FBRztFQUMxQixRQUFRLE9BQU8sSUFBSSxVQUFVLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7RUFDbEQsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLE9BQU8sS0FBSyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUU7RUFDL0IsUUFBUSxNQUFNLEdBQUcsR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztFQUNqRCxRQUFRLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUdMLFNBQU8sQ0FBQyxPQUFPLENBQUM7RUFDM0UsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksT0FBTyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7RUFDMUIsUUFBUSxPQUFPLFVBQVUsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLEdBQUdBLFNBQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHQSxTQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBR0EsU0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0VBQzlHLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxPQUFPLFlBQVksQ0FBQyxPQUFPLEVBQUUsRUFBRSxHQUFHTyx5QkFBdUIsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFO0VBQ2hGLFFBQVEsTUFBTSxVQUFVLEdBQUdKLFdBQVMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0VBQ2hFLFFBQVEsTUFBTSxLQUFLLEdBQUdBLFdBQVMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDQSxXQUFTLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQztFQUMzRixRQUFRLE1BQU0sS0FBSyxHQUFHQSxXQUFTLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLENBQUM7RUFDakUsUUFBUSxNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0VBQzVCLFFBQVEsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztFQUM1QixRQUFRLE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7RUFDNUIsUUFBUSxNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0VBQzVCLFFBQVEsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztFQUM1QixRQUFRLE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7RUFDNUIsUUFBUSxNQUFNLEdBQUcsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDO0VBQ2pDLFFBQVEsTUFBTSxHQUFHLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQztFQUNqQyxRQUFRLE1BQU0sR0FBRyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUM7RUFDakMsUUFBUSxNQUFNLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztFQUNyQyxRQUFRLE1BQU0sVUFBVSxHQUFHLElBQUksVUFBVSxFQUFFLENBQUM7RUFDNUMsUUFBUSxJQUFJLElBQUksR0FBRyxDQUFDLEVBQUU7RUFDdEIsWUFBWSxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQztFQUMxQyxZQUFZLFVBQVUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztFQUNyQyxZQUFZLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0VBQzVCLFlBQVksVUFBVSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDO0VBQzdDLFlBQVksVUFBVSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDO0VBQzdDLFlBQVksVUFBVSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDO0VBQzdDLFlBQVksT0FBTyxVQUFVLENBQUM7RUFDOUIsU0FBUztFQUNULFFBQVEsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLEVBQUU7RUFDdEMsWUFBWSxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0VBQ3hELFlBQVksTUFBTSxJQUFJLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQztFQUNwQyxZQUFZLFVBQVUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQztFQUN0QyxZQUFZLFVBQVUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLElBQUksQ0FBQztFQUM5QyxZQUFZLFVBQVUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdB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YUFBYSxJQUFJLElBQUksR0FBRyxDQUFDLE1BQU0sR0FBRyxJQUFJLEVBQUU7RUFDeEM7RUFDQSxZQUFZLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztFQUNqQyxZQUFZLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUNwRCxZQUFZLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0VBQ3RCLFNBQVM7RUFDVCxhQUFhO0VBQ2I7RUFDQSxZQUFZLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDdkUsWUFBWSxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDdkgsWUFBWSxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJ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LENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUM7RUFDMUIsUUFBUSxJQUFJLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUM7RUFDMUIsUUFBUSxJQUFJLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUM7RUFDMUIsUUFBUSxPQUFPLElBQUksQ0FBQztFQUNwQixLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksUUFBUSxDQUFDLEtBQUssRUFBRTtFQUNwQixRQUFRLE9BQU8sSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDdEcsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLEtBQUssQ0FBQyxLQUFLLEVBQUU7RUFDakIsUUFBUSxPQUFPLElBQUksVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUM7RUFDOUYsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksVUFBVSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUU7RUFDOUIsUUFBUSxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO0VBQ2xDLFFBQVEsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQztFQUNsQyxRQUFRLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7RUFDbEMsUUFBUSxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO0VBQ2xDLFFBQVEsT0FBTyxJQUFJLENBQUM7RUFDcEIsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLFlBQVksQ0FBQyxLQUFLLEVBQUU7RUFDeEIsUUFBUSxJQUFJLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQztFQUN4QixRQUFRLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDO0VBQ3hCLFFBQVEsSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUM7RUFDeEIsUUFBUSxJQUFJLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQztFQUN4QixRQUFRLE9BQU8sSUFBSSxDQUFDO0VBQ3BCLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLGdCQUFnQixDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUU7RUFDcEMsUUFBUSxNQUFNLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO0VBQ25DLFFBQVEsTUFBTSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQztFQUNuQyxRQUFRLE1BQU0sQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7RUFDbkMsUUFBUSxNQUFNLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO0VBQ25DLFFBQVEsT0FBTyxJQUFJLENBQUM7RUFDcEIsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLFFBQVEsQ0FBQyxFQUFFLEVBQUU7RUFDakIsUUFBUSxNQUFNLE1BQU0sR0FBRyxJQUFJLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztFQUNwRCxRQUFRLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0VBQ3ZDLFFBQVEsT0FBTyxNQUFNLENBQUM7RUFDdEIsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksYUFBYSxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUU7RUFDOUIsUUFBUSxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7RUFDaEYsUUFBUSxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztFQUNqRixRQUFRLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztFQUNoRixRQUFRLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0VBQ2pGLFFBQVEsTUFBTSxDQUFDLGNB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QUFNLENBQUMsR0FBRyxjQUFjLENBQUMsQ0FBQyxDQUFDO0VBQ25DLFFBQVEsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0VBQzFELFFBQVEsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0VBQzFELFFBQVEsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0VBQzNELFFBQVEsTUFBTSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0VBQ2pFLFFBQVEsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO0VBQzNCLFFBQVEsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO0VBQzNCLFFBQVEsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO0VBQzNCLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksT0FBTyxlQUFlLENBQUMsTUFB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QUFLO0VBQzlCLFlBQVksUUFBUSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7RUFDL0IsUUFBUSxPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7RUFDcEMsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxPQUFPLElBQUksQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRTtFQUNwQyxRQUFRLE1BQU0sTUFBTSxHQUFHLElBQUksT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7RUFDNUMsUUFBUSxPQUFPLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0VBQ3RELFFBQVEsT0FBTyxNQUFNLENBQUM7RUFDdEIsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxPQUFPLFNBQVMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUU7RUFDakQsUUFBUSxNQUFNLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDO0VBQ3hELFFBQVEsTUFBTSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQztFQUN4RCxRQUFRLE1BQU0sQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUM7RUFDeEQsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksT0FBTyxHQUFHLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRTtFQUM1QixRQUFRLE9BQU8sSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7RUFDdEUsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxPQUFPLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFO0VBQzlCLFFBQVEsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO0VBQ3RDLFFBQVEsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0VBQ2hELFFBQVEsT0FBTyxNQUFNLENBQUM7RUFDdEIsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxPQUFPLFVBQVUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRTtFQUMzQyxRQUFRLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7RUFDdEQsUUFBUSxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0VBQ3RELFFBQVEsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztFQUN0RCxRQUFRLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztFQUN2QyxLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNB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LENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0VBQ2pFLFFBQVEsT0FBTyxNQUFNLENBQUM7RUFDdEIsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLE1BQU0sQ0FBQyxDQUFDLEVBQUU7RUFDZCxRQUFRLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7RUFDekMsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksV0FBVyxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUU7RUFDM0IsUUFBUSxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUM7RUFDakMsUUFBUSxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQztFQUNqRDtFQUNBLFFBQVEsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7RUFDNUMsUUFBUSxNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztFQUM1QyxRQUFRLE1BQU0sRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0VBQzVDLFFBQVEsTUFBTSxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztFQUM3QztFQUNBLFFBQVEsTUFBTSxDQUFD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QUFDLEVBQUUsQ0FBQyxDQUFDO0VBQzVELFFBQVEsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7RUFDckIsUUFBUSxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztFQUNyQixLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksT0FBTyxlQUFlLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFO0VBQzFDLFFBQVEsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQztFQUN4QixhQUFhLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztFQUN6QixnQkFBZ0IsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztFQUNyQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7RUFDcEMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQzdCLFFBQVEsTUFBTSxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7RUFDcEMsUUFBUSxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztFQUN4RixZQUFZLElBQUksQ0FBQztFQUNqQixRQUFRLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0VBQ3hGLFlBQVksSUFBSSxDQUFDO0VBQ2pCLFFBQVEsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQztFQUN0RCxLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxPQUFPLFFBQVEsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFO0VBQ3BDLFFBQVEsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7RUFDbEUsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksT0FBTyxlQUFlLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRTtFQUMzQyxRQUFRLE1BQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQztFQUN0QyxRQUFRLE1BQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQztFQUN0QyxRQUFRLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0VBQzdCLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLE9BQU8sTUFBTSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUU7RUFDbEMsUUFBUSxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFB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UUFBUSxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0VBQ3ZFLFFBQVEsTUFBTSxVQUFVLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLENBQUM7RUFDOUYsUUFBUSxNQUFNLFFBQVEsR0FBRyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztFQUN4RixRQUFRLE1BQU0sR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxLQUFLLFFBQVEsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQztFQUMzRSxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxLQUFLLFVBQVUsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ3BFLFFBQVEsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJTyxXQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsVUFBVSxJQUFJLFFBQVEsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQztFQUN4RixZQUFZLFFBQVEsSUFBSSxVQUFVLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUM7RUFDbEQsWUFBWSxHQUFHLEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLENB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R0FBRyxDQUFDLENBQUM7RUFDbkIsUUFBUSxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztFQUNuQixRQUFRLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0VBQ25CLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLE9BQU8sYUFBYSxDQUFDLEdBQUcsRUFBRTtFQUM5QixRQUFRLElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO0VBQzdELFlBQVksT0FBTyxJQUFJLE1BQU0sQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztFQUNsRCxTQUFTO0VBQ1QsUUFBUSxNQUFNLENBQUMsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7RUFDcEQsUUFBUSxNQUFNLENBQUMsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7RUFDcEQsUUFBUSxNQUFNLENBQUMsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7RUFDcEQsUUFBUSxNQUFNLENBQUMsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7RUFDcEQsUUFBUSxPQUFPLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7RUFDM0MsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxPQUFPLElBQUksQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRTtFQUNyQyxRQUFRLE1BQU0sTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0VBQ3RELFFBQVEsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztFQUN0RCxRQUFRLE9BQU8sTUFBTSxDQUFDO0VBQ3RCLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksT0FBTyxTQUFTLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFO0VBQ2xELFFBQVEsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQztFQUN4RCxRQUFRLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUM7RUFDeEQsUUFBUSxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDO0VBQ3hELFFBQVEsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQztFQUN4RCxLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLE9BQU8sR0FBRyxHQUFHO0VBQ2pCLFFBQVEsT0FBTyxJQUFJLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztFQUMxQyxLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLE9BQU8sS0FBSyxHQUFHO0VBQ25CLFFBQVEsT0FBTyxJQUFJLE1BQU0sQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztFQUMxQyxLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLE9BQU8sSUFBSSxHQUFHO0VBQ2xCLFFBQVEsT0FBTyxJQUFJLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztFQUMxQyxLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLE9BQU8sS0FBSyxHQUFHO0VBQ25CLFFBQVEsT0FBTyxJQUFJLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztFQUN0QyxLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLE9BQU8sS0FBSyxHQUFHO0VBQ25CLFFBQVEsT0FBTyxJQUFJLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztFQUN0QyxLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLE9BQU8sTUFBTSxHQUFHO0VBQ3BCLFFBQVEsT0FBTyxJQUFJLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztFQUMxQyxLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLE9BQU8sT0FBTyxHQUFHO0VBQ3JCLFFBQVEsT0FBTyxJQUFJLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztFQUN0QyxLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLE9BQU8sTUFBTSxHQUFHO0VBQ3BCLFFBQVEsT0FBTyxJQUFJLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztFQUN0QyxLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLE9BQU8sSUFBSSxHQUFHO0VBQ2xCLFFBQVEsT0FBTyxJQUFJLE1BQU0sQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztFQUM5QyxLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLE9BQU8sSUFBSSxHQUFHO0VBQ2xCLFFBQVEsT0FBTyxJQUFJLE1BQU0sQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztFQUM1QyxLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLE9BQU8sS0FBSyxHQUFHO0VBQ25CLFFBQVEsT0FBTyxJQUFJLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztFQUN0QyxLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxPQUFPLFVBQVUsQ0FBQyxNQUFNLEVBQUUsS0FBSyxHQUFHLEdBQUcsRUFBRTtFQUMzQyxRQUFRLE9BQU8sSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7RUFDL0QsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksT0FBTyxTQUFTLENBQUMsS0FBSyxFQUFFLE1BQU0sR0FBRyxDQUFDLEVBQUU7RUFDeEMsUUFBUSxPQUFPLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ2xHLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxPQUFPLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7RUFDaEMsUUFBUSxPQUFPLElBQUksTUFBTSxDQUFDLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQyxHQUFHLEtBQUssRUFBRSxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQztFQUN0RSxLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLE9BQU8sWUFBWSxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUU7RUFDdkM7RUFDQSxRQUFRLElBQUksTUFBTSxDQUFDLE1BQU0sS0FBSyxLQUFLLEdBQUcsQ0FBQyxFQUFFO0VBQ3pDLFlBQVksTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDO0VBQy9CLFlBQVksS0FBSyxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUUsS0FBSyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsS0FBSyxJQUFJLENBQUMsRUFBRTtFQUNuRSxnQkFBZ0IsTUFBTSxRQUFRLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztFQUNqRCxnQkFBZ0IsT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztFQUNsRCxnQkFBZ0IsT0FBTyxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO0VBQzFELGdCQUFnQixPQUFPLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUM7RUFDMUQsZ0JBQWdCLE9BQU8sQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO0VBQzVDLGFBQWE7RUFDYixZQUFZLE9BQU8sT0FBTyxDQUFDO0VBQzNCLFNBQVM7RUFDVCxRQUFRLE9BQU8sTUFBTSxDQUFDO0VBQ3RCLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLFVBQVUsQ0FBQyxLQUFLLEVBQUU7RUFDdEIsUUFBUSxJQUFJLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUM7RUFDMUIsUUFBUSxJQUFJLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUM7RUFDMUIsUUFBUSxJQUFJLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUM7RUFDMUIsUUFBUSxJQUFJLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUM7RUFDMUIsUUFBUSxPQUFPLElBQUksQ0FBQztFQUNwQixLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLE9BQU8sR0FBRztFQUNkLFFBQVEsTUFBTSxNQUFNLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQztFQUNuQyxRQUFRLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO0VBQ2hDLFFBQVEsT0FBTyxNQUFNLENBQUM7RUFDdEIsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksT0FBTyxDQUFDLEtBQUssRUFBRSxLQUFLLEdBQUcsQ0FBQyxFQUFFO0VBQzlCLFFBQVEsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7RUFDOUIsUUFBUSxLQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7RUFDbEMsUUFBUSxLQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7RUFDbEMsUUFBUSxLQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7RUFDbEMsUUFBUSxPQUFPLElBQUksQ0FBQztFQUNwQixLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRTtFQUNmLFFBQVEsT0FBTyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUNsRyxLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksUUFBUSxDQUFDLEtBQUssRUFBRTtFQUNwQixRQUFRLE9BQU8sSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDbEcsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksYUFBYSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUU7RUFDakMsUUFBUSxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztFQUNwQyxRQUFRLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0VBQ3BDLFFBQVEsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7RUFDcEMsUUFBUSxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztFQUNwQyxRQUFRLE9BQU8sSUFBSSxDQUFDO0VBQ3BCLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxLQUFLLENBQUMsS0FBSyxFQUFFO0VBQ2pCLFFBQVEsT0FBTyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDO0VBQzFGLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLFVBQVUsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFO0VBQzlCLFFBQVEsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQztFQUNsQyxRQUFRLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7RUFDbEMsUUFBUSxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO0VBQ2xDLFFBQVEsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQztFQUNsQyxRQUFRLE9BQU8sSUFBSSxDQUFDO0VBQ3BCLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLGdCQUFnQixDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUU7RUFDcEMsUUFBUSxNQUFNLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO0VBQ25DLFFBQVEsTUFBTSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQztFQUNuQyxRQUFRLE1BQU0sQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7RUFDbkMsUUFBUSxNQUFNLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO0VBQ25DLFFBQVEsT0FBTyxJQUFJLENBQUM7RUFDcEIsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxVQUFVLENBQUMsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLE1BQU0sRUFBRTtFQUN6QyxRQUFRLE1BQU0sQ0FBQyxDQUFDLEdBQUdKLFVBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0VBQzNELFFBQVEsTUFBTSxDQUFDLENBQUMsR0FBR0EsVUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7RUFDM0QsUUFBUSxNQUFNLENBQUMsQ0FBQyxHQUFHQSxVQUFRLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztFQUMzRCxRQUFRLE1BQU0sQ0FBQyxDQUFDLEdBQUdBLFVBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0VBQzNELFFBQVEsT0FBTyxJQUFJLENBQUM7RUFDcEIsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLFFBQVEsQ0FBQyxLQUFLLEVBQUU7RUFDcEIsUUFBUSxPQUFPLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ2xHLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLGFBQWEsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFO0VBQ2pDLFFBQVEsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7RUFDcEMsUUFBUSxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztFQUNwQyxRQUFRLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0VBQ3BDLFFBQVEsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7RUFDcEMsUUFBUSxPQUFPLE1BQU0sQ0FBQztFQUN0QixLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLFFBQVEsR0FBRztFQUNmLFFBQVEsUUFBUSxNQUFNLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxHQUFHLEVBQUU7RUFDMUYsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxZQUFZLEdBQUc7RUFDbkIsUUFBUSxPQUFPLFFBQVEsQ0FBQztFQUN4QixLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLFdBQVcsR0FBRztFQUNsQixRQUFRLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0VBQy9CLFFBQVEsSUFBSSxHQUFHLENBQUMsSUFBSSxHQUFHLEdBQUcsS0FBSyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0VBQzVDLFFBQVEsSUFBSSxHQUFHLENBQUMsSUFBSSxHQUFHLEdBQUcsS0FBSyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0VBQzVDLFFBQVEsSUFBSSxHQUFHLENBQUMsSUFBSSxHQUFHLEdBQUcsS0FBSyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0VBQzVDLFFBQVEsT0FBTyxJQUFJLENBQUM7RUFDcEIsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxLQUFLLEdBQUc7RUFDWixRQUFRLE9BQU8sSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQzFELEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxRQUFRLENBQUMsTUFBTSxFQUFFO0VBQ3JCLFFBQVEsSUFBSSxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDO0VBQzFCLFFBQVEsSUFBSSxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDO0VBQzFCLFFBQVEsSUFBSSxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDO0VBQzFCLFFBQVEsSUFBSSxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDO0VBQzFCLFFBQVEsT0FBTyxJQUFJLENBQUM7RUFDcEIsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLGNBQWMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7RUFDL0IsUUFBUSxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztFQUNuQixRQUFRLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0VBQ25CLFFBQVEsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7RUFDbkIsUUFBUSxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztFQUNuQixRQUFRLE9BQU8sSUFBSSxDQUFDO0VBQ3BCLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxHQUFHLENBQUMsQ0FBQyxF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RUFBRSxDQUFDLENBQUMsQ0FBQztFQUN2QyxTQUFTO0VBQ1QsUUFBUSxNQUFNLENBQUMsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7RUFDcEQsUUFBUSxNQUFNLENBQUMsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7RUFDcEQsUUFBUSxNQUFNLENBQUMsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7RUFDcEQsUUFBUSxPQUFPLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztFQUN4QyxLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxPQUFPLFNBQVMsQ0FBQyxLQUFLLEVBQUUsTUFBTSxHQUFHLENBQUMsRUFBRTtFQUN4QyxRQUFRLE9BQU8sSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQy9FLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksT0FBTyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7RUFDN0IsUUFBUSxPQUFPLElBQUksTUFBTSxDQUFDLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQyxHQUFHLEtBQUssRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUM7RUFDM0QsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxPQUFPLElBQUksQ0FBQyxLQUFLLEVBQUUsR0FBRyxF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LEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7RUFDaEMsUUFBUSxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0VBQ3pCLFFBQVEsTUFBTSxPQUFPLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUNsRSxRQUFRLE1BQU0sT0FBTyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDbEUsUUFBUSxNQUFNLE9BQU8sR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0VBQ3BFLFFBQVEsTUFBTSxNQUFNLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztFQUNyRSxRQUFRLE9BQU8sSUFBSSxLQUFLLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7RUFDNUQsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLGFBQWEsQ0FBQyxLQUFLLEVBQUU7RUFDekIsUUFBUSxRQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDO0VBQ3ZDLFlBQVksSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUM7RUFDbkMsWUFBWSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQztFQUNuQyxZQUFZLElBQUksQ0FBQyxDQUFDLEVBQUU7RUFDcEIsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxjQUFjLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUU7RUFDM0MsUUFBUSxNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUM7RUFDdkMsUUFBUSxNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUM7RUFDdkMsUUFBUSxNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUM7RUFDdkMsUUFBUSxNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUM7RUFDdkMsUUFBUSxNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUM7RUFDdkMsUUFBUSxNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUM7RUFDdkMsUUFBUSxNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7RUFDckMsUUFBUSxNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7RUFDckMsUUFBUSxNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7RUFDckMsUUFBUSxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7RUFDNUQsUUFBUSxJQUFJLE9BQU8sQ0FBQztFQUNwQixRQUFRLElBQUksSUFBSSxLQUFLLENBQUMsRUFBRTtFQUN4QixZQUFZLE9BQU8sR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDO0VBQ2pDLFNBQVM7RUFDVCxhQUFhO0VBQ2IsWUFBWSxPQUFPLEdBQUcsR0FBRyxDQUFDO0VBQzFCLFNBQVM7RUFDVCxRQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxPQUFPLENBQUM7RUFDckMsUUFBUSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsT0FBTyxDQUFDO0VBQ3JDLFFBQVEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLE9BQU8sQ0FBQztFQUNyQyxRQUFRLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQztFQUMzQyxZQUFZLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDO0VBQ3BDLFlBQVksSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ3RDLFFBQVEsT0FBTyxJQUFJLENBQUM7RUFDcEIsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksZUFBZSxDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUU7RUFDeEMsUUFBUSxNQUFNLEdBQUcsR0FBR0EsV0FBUyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztFQUNsRSxRQUFRLE9BQU8sR0FBRyxJQUFJLE9BQU8sQ0FBQztFQUM5QixLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksZ0JBQWdCLENBQUMsS0FBSyxFQUFFO0VBQzVCLFFBQVEsT0FBT0EsV0FBUyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0VBQ2xFLEtBQUs7RUFDTCxDQUFDO2VBQ1ksR0FBRyxLQUFLOztFQ3BNckIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7aUJBQy9DLEdBQUcsS0FBSyxFQUFFO0VBQ3pCLE1BQU0sT0FBTyxHQUFHRixPQUFrQixDQUFDO0VBQ25DO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsTUFBTSxPQUFPLENBQUM7RUFDZDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxPQUFPLFNBQVMsQ0FBQyxTQUFTLEVBQUU7RUFDaEMsUUFBUSxNQUFNLGFBQWEsR0FBRyxFQUFFLENBQUM7RUFDakMsUUFBUSxLQUFLLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFO0VBQ2hELFlBQVksYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztFQUN0RSxTQUFTO0VBQ1QsUUFBUSxPQUFPLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxhQUFhLENBQUMsQ0FBQztFQUN6RCxRQUFRLE9BQU8sYUFBYSxDQUFDO0VBQzdCLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxPQUFPLGlCQUFpQixDQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUU7RUFDdEQsUUFBUSxNQUFNLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDO0VBQzlCLFFBQVEsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUM1QyxRQUFRLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDNUMsUUFBUSxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0VBQzlDLFFBQVEsWUFBWSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0VBQ3ZDLFFBQVEsWUFBWSxDQUFDLFNBQVMsRUFBRSxDQUFDO0VBQ2pDLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxPQUFPLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUU7RUFDckQsUUFBUSxNQUFNLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDO0VBQzlCLFFBQVEsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUM1QyxRQUFRLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDNUMsUUFBUSxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0VBQzlDLFFBQVEsWUFBWSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0VBQ3ZDLFFBQVEsWUFBWSxDQUFDLFNBQVMsRUFBRSxDQUFDO0VBQ2pDLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxPQUFPLGlCQUFpQixDQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUU7RUFDdEQsUUFBUSxNQUFNLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDO0VBQzlCLFFBQVEsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUM1QyxRQUFRLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDNUMsUUFBUSxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQzdDLFFBQVEsWUFBWSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0VBQ3ZDLFFBQVEsWUFBWSxDQUFDLFNBQVMsRUFBRSxDQUFDO0VBQ2pDLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxPQUFPLGtCQUFrQixDQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUU7RUFDdkQsUUFBUSxNQUFNLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDO0VBQzlCLFFBQVEsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUM1QyxRQUFRLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDNUMsUUFBUSxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQzdDLFFBQVEsWUFBWSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0VBQ3ZDLFFBQVEsWUFBWSxDQUFDLFNBQVMsRUFBRSxDQUFDO0VBQ2pDLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxPQUFPLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUU7RUFDckQsUUFBUSxNQUFNLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDO0VBQzlCLFFBQVEsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUM1QyxRQUFRLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDNUMsUUFBUSxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQzdDLFFBQVEsWUFBWSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0VBQ3ZDLFFBQVEsWUFBWSxDQUFDLFNBQVMsRUFBRSxDQUFDO0VBQ2pDLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxPQUFPLG1CQUFtQixDQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUU7RUFDeEQsUUFBUSxNQUFNLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDO0VBQzlCLFFBQVEsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUM1QyxRQUFRLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxD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
